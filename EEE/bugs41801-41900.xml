<?xml version="1.0" encoding="UTF-8"?>
<infozilla-output>
  <Bug>
    <BugId amount="41801" />
    <CreationDate amount="2003-08-21 10:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="User Assistance" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P4" />
    <bug_severity amount="enhancement" />
    <Summery>[Help] like to un-highlight search terms</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="3">
      <Enumeration lines="7">
        <Lines>
          <Line>1. Ability for the user to specify "No search highlighting" in Search window</Line>
          <Line>before initiating a search. Have a string in the banner reflect "Search</Line>
          <Line>highlighting off" (like it reflects the scoped search today).</Line>
          <Line />
          <Line>2. Ability for the user to turn off the search highlighting after doing a</Line>
          <Line>search and loading the page, to turn off the black highlighting in the result</Line>
          <Line>page.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="5">
        <Lines>
          <Line>1. Write javascript that goes through the DOM and highlights certain words, for example see http://www.nsftools.com/misc/SearchAndHighlight.htm</Line>
          <Line />
          <Line>2. Switch the entire CSS on the fly, without sending a new request and reloading. This example shows switching page themes and does it without losing it's place on the page: http://www.dynamicdrive.com/dynamicindex9/stylesheetswitcher.htm</Line>
          <Line />
          <Line>3. My preferred approach would be to target a specific (known) CSS rule and change it on the fly using javascript. So where the highlighting is added, it should do it via CSS using a span and a specific class. Then to turn it on and off, just toggle the CSS rule (i.e. change background color) back and forth. No markup changes or reloading needed. See: http://www.javascriptkit.com/domref/style.shtml</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="4">
        <Lines>
          <Line>- Set default enablement for view highlight button to on for consistency with help window and previous behavior.</Line>
          <Line>- Renamed help window button's tooltip to match view's ("Highlight search terms").</Line>
          <Line>*** Bug 179357 has been marked as a duplicate of this bug. ***</Line>
          <Line>Verified in I20070608-1718.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>build i820.

I opened the Help Contents and did a search. In the search results the search 
terms are high-lighted. But if there are a lot of matches, I would like to 
turn off this high-lighting to make the relavent documents easier to read.
Yes, this is a good idea.
For the time being, you can synchronize with the table of contents, and, 
assuming the topic exists in the tree, click on it. This will reload the 
document without the highlighting.
I think highlighting should be turned off by means of some button, not a 
preference settings.
It is not a good idea to put the button in the toolbar on the right, since the 
button should appear only when document displayed is from search results.
I think it might be enough to add a button to search view toolbar (a toolbar 
on the left, only when search tab is active).  The button would control 
whether clicking on search results displays documents with highlighted 
keywords or not, and would not affect the document that is already displayed.
*** Bug 48813 has been marked as a duplicate of this bug. ***
I agree that this should be a button, not a preference,
but I think it would be better if you could turn off
the highlighting after a search has been performed.
Whether you want the highlighting on or off will
depend very much on the page, and you'll only know
after you've seen it. Or I guess there could be a
threshold density of highlights above which they
are automatically turned off -- or they could be
gradually lighter and less obtrusive the denser
they are (such that the total color density they
contribute to the page remains constant :-)

IMHO, in this case, the simpler, the better. An on/off button seems to fit the bill.
Well, I admit that my proposal of constant color contribution
was a bit fanciful :-) My main point was that the on/off button
should apply to the search results after they've been obtained;
otherwise I think one would often end up toggling the button and
then redoing the search.
Another thing related to the search highlighting currently is that if I do a 
search and the topic has the highlighting and then I print the topic, all of 
the highlighting gets printed as well. This means that all of the terms that I 
searched on are printed as black blocks. :-/


If possible, can you consider doing this in two phases:
1. Ability for the user to specify "No search highlighting" in Search window 
before initiating a search. Have a string in the banner reflect "Search 
highlighting off" (like it reflects the scoped search today).

2. Ability for the user to turn off the search highlighting after doing a 
search and loading the page, to turn off the black highlighting in the result 
page.

Phase 2 would require reload of the page, so as a first step, it would be 
easier to do Phase 1 first.

Thanks for the consideration,
--Lee Anne
*** Bug 103210 has been marked as a duplicate of this bug. ***
I would like to express interest in seeing this feature added so we can benefit from this in our RCP product.
I would like to see this as well, but unfortunately this week is milestone week for M6 which is feature freeze, so unless someone can supply me a good patch today we will have to defer until next release.
Created attachment 37273
highlight switch code patch
Created attachment 37274
highlight switch button icon

This icon should be put in dirctory:

&lt;&lt;eclipse_home&gt;&gt;\plugins\org.eclipse.help.webapp\advanced\images
I tested the patch (thanks Jiang) but I ran into a few problems while doing so:

- By default I could not get the button to ever show up, even though cookies are enabled. I'm not sure exactly where it's failing, but it's either in UrlUtil.isHighlight() or in the cookie check. I was able to get it to show up by commenting out those parts in contentToolbar.jsp.

- The content pane seems to refresh completely when turning on/off the highlighting, so there's some flashing and worse the page scrolls to the top of the document, so you lose your frame of reference. I'm not an expert in javascript, do you know if it's possible to do this without the flashing and scrolling?
Thank you for testing the patch.

1, The patch works weel in my laptop, I have no idea about why the button could not show up even you cookies are enabled.  The cookie checking is required, if no checking, when you disabled your browser cookie, you still could see the button with no clicking effect.  That's strange for user.

2, Because the highlight code is trigered by onload() handler of whole page, So it's impossible to do this without the flashing.

For the scrolling, If you could use a parameter to store the current user browsing position. After the switch on/off, the page should be able to sroll to the original position user are borwsing. But I don't think it's a good Idea because we have another "automatically scroll to the first occurrence" function when user clicks the search results.


Hi Jiang, I did a little research and it does seem possible to do this without refreshing. There are several approaches I can see:

1. Write javascript that goes through the DOM and highlights certain words, for example see http://www.nsftools.com/misc/SearchAndHighlight.htm

2. Switch the entire CSS on the fly, without sending a new request and reloading. This example shows switching page themes and does it without losing it's place on the page: http://www.dynamicdrive.com/dynamicindex9/stylesheetswitcher.htm

3. My preferred approach would be to target a specific (known) CSS rule and change it on the fly using javascript. So where the highlighting is added, it should do it via CSS using a span and a specific class. Then to turn it on and off, just toggle the CSS rule (i.e. change background color) back and forth. No markup changes or reloading needed. See: http://www.javascriptkit.com/domref/style.shtml

Do you think #3 is doable?
Actually, #1 is using the same mechanism as the highlight method of current highlight.js

I've tried #3, it really works well ! And I have following concerns for #3:

1, We'll inject a CSS style to the result page in HighlightFilter.java.  And because the CSS style reference is gotten from "document.styleSheets[0].rules[0].style", We must inject the CSS as the first style occured in the result page. 

2, The style name could not overlap with the css name what have been existed in result page. Or there must be some weird diplay effect.

They are both valid concerns. For #1 this may cause problems if someone uses javascript to do the same thing in their documents, and makes assumptions about the index. If we inject our own CSS with a single known rule, we could iterate through the stylesheets until we see one with only one rule that has our name (if this is possible, I don't know if it is). As for the name, we could use something long like org_eclipse_help_webapp_highlight to avoid conflicts.
Adam, see if we can do approach 3 I mentioned in comment 16. Ideally it should not have to refresh the document in order to toggle the highlighting, we should only toggle a CSS rule and the browser will do the actual work.
Created attachment 47240
Only works in IE and Firefox

The feature is implemented in the full help system only. There is currently no support in the help view. A button has been added to the ContentToolbar. It is hidden and shown dynamically based on whether or not the current document is a search result or not. The state of the button is persisted as a cookie. Thus it is browser specific and will persist across multiple workspaces. This has only been tested in IE and Firefox.

The implementation of the actual highlighting was achieved by using classes on the spans instead of directly using style attributes when highlighting initially. When the highlight option is toggled, the CSS class is dynamically updated (removing or re-adding the highlight style information). This, in turn, affects all spans using the class without refreshing the page.

Plans from here include adding support for Safari and adding the functionality to the help view. Ideally I would also like to stop using cookies in the full help system when it is running from the workbench (i.e. only use cookies when running as an infocenter). The button's persistent state should match the state of the, to be added, help view button if we are in workbench mode.
Wouldn't we still need cookies for the standalone help mode? I have a lot of teams using that (not full workbench, but also not strictly "infocenter" mode).

--Lee Anne
Created attachment 47301
Fully Functional - Untested

Works in IE, Firefox and Safari and is supported in both the help window and the help view. Currently the toolbar button is not hidden for "non-search-result" documents in the help view. It is disabled instead.

To address the concern made by Lee Anne, the help window is currently using cookies to persist the button state regardless of the mode. This means that the help window button maintains a seperate state than the help view button. In the future I may still look into sharing the button state with the view when in workbench mode (i.e. not in infocenter or standalone mode). Thanks for your input Lee Anne.
Created attachment 47302
Icons for the patch

The zip file contains the icons for the patch. The paths they need to be placed in are included in the archive.
Patch submitted.

A few minor changes:

- Set default enablement for view highlight button to on for consistency with help window and previous behavior.
- Renamed help window button's tooltip to match view's ("Highlight search terms").
*** Bug 179357 has been marked as a duplicate of this bug. ***
Verified in I20070608-1718.</WithStack>
    <WithOutStack>build i820.

I opened the Help Contents and did a search. In the search results the search 
terms are high-lighted. But if there are a lot of matches, I would like to 
turn off this high-lighting to make the relavent documents easier to read.
Yes, this is a good idea.
For the time being, you can synchronize with the table of contents, and, 
assuming the topic exists in the tree, click on it. This will reload the 
document without the highlighting.
I think highlighting should be turned off by means of some button, not a 
preference settings.
It is not a good idea to put the button in the toolbar on the right, since the 
button should appear only when document displayed is from search results.
I think it might be enough to add a button to search view toolbar (a toolbar 
on the left, only when search tab is active).  The button would control 
whether clicking on search results displays documents with highlighted 
keywords or not, and would not affect the document that is already displayed.
*** Bug 48813 has been marked as a duplicate of this bug. ***
I agree that this should be a button, not a preference,
but I think it would be better if you could turn off
the highlighting after a search has been performed.
Whether you want the highlighting on or off will
depend very much on the page, and you'll only know
after you've seen it. Or I guess there could be a
threshold density of highlights above which they
are automatically turned off -- or they could be
gradually lighter and less obtrusive the denser
they are (such that the total color density they
contribute to the page remains constant :-)

IMHO, in this case, the simpler, the better. An on/off button seems to fit the bill.
Well, I admit that my proposal of constant color contribution
was a bit fanciful :-) My main point was that the on/off button
should apply to the search results after they've been obtained;
otherwise I think one would often end up toggling the button and
then redoing the search.
Another thing related to the search highlighting currently is that if I do a 
search and the topic has the highlighting and then I print the topic, all of 
the highlighting gets printed as well. This means that all of the terms that I 
searched on are printed as black blocks. :-/


If possible, can you consider doing this in two phases:
1. Ability for the user to specify "No search highlighting" in Search window 
before initiating a search. Have a string in the banner reflect "Search 
highlighting off" (like it reflects the scoped search today).

2. Ability for the user to turn off the search highlighting after doing a 
search and loading the page, to turn off the black highlighting in the result 
page.

Phase 2 would require reload of the page, so as a first step, it would be 
easier to do Phase 1 first.

Thanks for the consideration,
--Lee Anne
*** Bug 103210 has been marked as a duplicate of this bug. ***
I would like to express interest in seeing this feature added so we can benefit from this in our RCP product.
I would like to see this as well, but unfortunately this week is milestone week for M6 which is feature freeze, so unless someone can supply me a good patch today we will have to defer until next release.
Created attachment 37273
highlight switch code patch
Created attachment 37274
highlight switch button icon

This icon should be put in dirctory:

&lt;&lt;eclipse_home&gt;&gt;\plugins\org.eclipse.help.webapp\advanced\images
I tested the patch (thanks Jiang) but I ran into a few problems while doing so:

- By default I could not get the button to ever show up, even though cookies are enabled. I'm not sure exactly where it's failing, but it's either in UrlUtil.isHighlight() or in the cookie check. I was able to get it to show up by commenting out those parts in contentToolbar.jsp.

- The content pane seems to refresh completely when turning on/off the highlighting, so there's some flashing and worse the page scrolls to the top of the document, so you lose your frame of reference. I'm not an expert in javascript, do you know if it's possible to do this without the flashing and scrolling?
Thank you for testing the patch.

1, The patch works weel in my laptop, I have no idea about why the button could not show up even you cookies are enabled.  The cookie checking is required, if no checking, when you disabled your browser cookie, you still could see the button with no clicking effect.  That's strange for user.

2, Because the highlight code is trigered by onload() handler of whole page, So it's impossible to do this without the flashing.

For the scrolling, If you could use a parameter to store the current user browsing position. After the switch on/off, the page should be able to sroll to the original position user are borwsing. But I don't think it's a good Idea because we have another "automatically scroll to the first occurrence" function when user clicks the search results.


Hi Jiang, I did a little research and it does seem possible to do this without refreshing. There are several approaches I can see:

1. Write javascript that goes through the DOM and highlights certain words, for example see http://www.nsftools.com/misc/SearchAndHighlight.htm

2. Switch the entire CSS on the fly, without sending a new request and reloading. This example shows switching page themes and does it without losing it's place on the page: http://www.dynamicdrive.com/dynamicindex9/stylesheetswitcher.htm

3. My preferred approach would be to target a specific (known) CSS rule and change it on the fly using javascript. So where the highlighting is added, it should do it via CSS using a span and a specific class. Then to turn it on and off, just toggle the CSS rule (i.e. change background color) back and forth. No markup changes or reloading needed. See: http://www.javascriptkit.com/domref/style.shtml

Do you think #3 is doable?
Actually, #1 is using the same mechanism as the highlight method of current highlight.js

I've tried #3, it really works well ! And I have following concerns for #3:

1, We'll inject a CSS style to the result page in HighlightFilter.java.  And because the CSS style reference is gotten from "document.styleSheets[0].rules[0].style", We must inject the CSS as the first style occured in the result page. 

2, The style name could not overlap with the css name what have been existed in result page. Or there must be some weird diplay effect.

They are both valid concerns. For #1 this may cause problems if someone uses javascript to do the same thing in their documents, and makes assumptions about the index. If we inject our own CSS with a single known rule, we could iterate through the stylesheets until we see one with only one rule that has our name (if this is possible, I don't know if it is). As for the name, we could use something long like org_eclipse_help_webapp_highlight to avoid conflicts.
Adam, see if we can do approach 3 I mentioned in comment 16. Ideally it should not have to refresh the document in order to toggle the highlighting, we should only toggle a CSS rule and the browser will do the actual work.
Created attachment 47240
Only works in IE and Firefox

The feature is implemented in the full help system only. There is currently no support in the help view. A button has been added to the ContentToolbar. It is hidden and shown dynamically based on whether or not the current document is a search result or not. The state of the button is persisted as a cookie. Thus it is browser specific and will persist across multiple workspaces. This has only been tested in IE and Firefox.

The implementation of the actual highlighting was achieved by using classes on the spans instead of directly using style attributes when highlighting initially. When the highlight option is toggled, the CSS class is dynamically updated (removing or re-adding the highlight style information). This, in turn, affects all spans using the class without refreshing the page.

Plans from here include adding support for Safari and adding the functionality to the help view. Ideally I would also like to stop using cookies in the full help system when it is running from the workbench (i.e. only use cookies when running as an infocenter). The button's persistent state should match the state of the, to be added, help view button if we are in workbench mode.
Wouldn't we still need cookies for the standalone help mode? I have a lot of teams using that (not full workbench, but also not strictly "infocenter" mode).

--Lee Anne
Created attachment 47301
Fully Functional - Untested

Works in IE, Firefox and Safari and is supported in both the help window and the help view. Currently the toolbar button is not hidden for "non-search-result" documents in the help view. It is disabled instead.

To address the concern made by Lee Anne, the help window is currently using cookies to persist the button state regardless of the mode. This means that the help window button maintains a seperate state than the help view button. In the future I may still look into sharing the button state with the view when in workbench mode (i.e. not in infocenter or standalone mode). Thanks for your input Lee Anne.
Created attachment 47302
Icons for the patch

The zip file contains the icons for the patch. The paths they need to be placed in are included in the archive.
Patch submitted.

A few minor changes:

- Set default enablement for view highlight button to on for consistency with help window and previous behavior.
- Renamed help window button's tooltip to match view's ("Highlight search terms").
*** Bug 179357 has been marked as a duplicate of this bug. ***
Verified in I20070608-1718.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41802" />
    <CreationDate amount="2003-08-21 10:34:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>main not being declared public should be a warning or error</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="73" end="148" />
        <code>public class blah {
  ...
  static void main(String[] args) {
    ...
  }
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>I recently ran some code in eclipse where main was declared as follows:

public class blah {
  ...
  static void main(String[] args) {
    ...
  }
}

This ran fine, but I think this code shouldn't run since the JLS specifies 
that main must be declared public. Should this be flagged as a warning?
This is a VM issue. The VM should fail to retrieve the method, but I don't 
think the compiler should complain about it.
Then how about a compiler warning for a malformed main method that could be 
turned off by a developer as needed. I'd imagine that a method with the 
signature "static void main(String[] args)" would be wrong in 99% of cases. 
Especially since the VM I am using doesn't fail properly (I am using Sun JDK 
1.3.1_05, does the IBM VM fail correctly?)
may consider later
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>I recently ran some code in eclipse where main was declared as follows:

public class blah {
  ...
  static void main(String[] args) {
    ...
  }
}

This ran fine, but I think this code shouldn't run since the JLS specifies 
that main must be declared public. Should this be flagged as a warning?
This is a VM issue. The VM should fail to retrieve the method, but I don't 
think the compiler should complain about it.
Then how about a compiler warning for a malformed main method that could be 
turned off by a developer as needed. I'd imagine that a method with the 
signature "static void main(String[] args)" would be wrong in 99% of cases. 
Especially since the VM I am using doesn't fail properly (I am using Sun JDK 
1.3.1_05, does the IBM VM fail correctly?)
may consider later
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41803" />
    <CreationDate amount="2003-08-21 10:35:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Deadlock when starting a debug session</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>In I20030820, with auto-build off and compile before running option on, when 
I'm trying to debug my program, a deadlock occurs.
Created attachment 5816
Dump showing the problem
Darin, this deadlock is caused by creating a job and then trying to join it
immediately.  The job tries to syncExec, but the UI is waiting on the join.  I
looked at the code in the latest build, and this join has been removed.  Can you
give me some backgrond on this?  It seems strange to fork a job and then
immediately join it... you're not getting any concurrency out it (roughly
equivalent to running the job directly in the calling thread).
We have changed the code - we were trying to force the build to occurr before 
the launch (in the background). This should not be a problem in the latest 
build.
Note: the "build &amp; launch" is now done in a single job.
Ok, closing.
Adding Jared as CC, for an FYI.</WithStack>
    <WithOutStack>In I20030820, with auto-build off and compile before running option on, when 
I'm trying to debug my program, a deadlock occurs.
Created attachment 5816
Dump showing the problem
Darin, this deadlock is caused by creating a job and then trying to join it
immediately.  The job tries to syncExec, but the UI is waiting on the join.  I
looked at the code in the latest build, and this join has been removed.  Can you
give me some backgrond on this?  It seems strange to fork a job and then
immediately join it... you're not getting any concurrency out it (roughly
equivalent to running the job directly in the calling thread).
We have changed the code - we were trying to force the build to occurr before 
the launch (in the background). This should not be a problem in the latest 
build.
Note: the "build &amp; launch" is now done in a single job.
Ok, closing.
Adding Jared as CC, for an FYI.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41804" />
    <CreationDate amount="2003-08-21 10:39:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>API to allow builders to respond to interruption</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Consider adding API to IncrementalProjectBuilder so builders can find out when
another thread is attempting to interrupt a background build.  This would allow
builders to interrupt in a more timely manner if they chose.
Fixed.  Added new method IncrementalProjectBuilder.isInterrupted so long running
builders can respond to interruption in a more timely manner.</WithStack>
    <WithOutStack>Consider adding API to IncrementalProjectBuilder so builders can find out when
another thread is attempting to interrupt a background build.  This would allow
builders to interrupt in a more timely manner if they chose.
Fixed.  Added new method IncrementalProjectBuilder.isInterrupted so long running
builders can respond to interruption in a more timely manner.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41805" />
    <CreationDate amount="2003-08-21 10:39:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>ArrayIndexOutOfBoundsException while creating AST</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867057">
        <Exception>java.lang.ArrayIndexOutOfBoundsException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">java.lang.Throwable.&lt;init&gt;(Throwable.java)</Frame>
          <Frame depth="1">java.lang.Throwable.&lt;init&gt;(Throwable.java:68)</Frame>
          <Frame depth="2">java.lang.ArrayIndexOutOfBoundsException.&lt;init&gt;(ArrayIndexOutOfBoundsException.java:63)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.compiler.parser.Parser.pushOnIntStack(Parser.java)</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.compiler.parser.Parser.consumeToken(Parser.java)</Frame>
          <Frame depth="5">org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java)</Frame>
          <Frame depth="6">org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java)</Frame>
          <Frame depth="7">org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:95)</Frame>
          <Frame depth="8">org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethod(TypeDeclaration.java:719)</Frame>
          <Frame depth="9">org.eclipse.jdt.internal.compiler.Compiler.getMethodBodies(Compiler.java:381)</Frame>
          <Frame depth="10">org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:582)</Frame>
          <Frame depth="11">org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:172)</Frame>
          <Frame depth="12">org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:139)</Frame>
          <Frame depth="13">org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:198)</Frame>
          <Frame depth="14">org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:448)</Frame>
          <Frame depth="15">org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:881)</Frame>
          <Frame depth="16">org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:48)</Frame>
          <Frame depth="17">org.eclipse.jdt.internal.core.JavaModelOperation.execute(JavaModelOperation.java:365)</Frame>
          <Frame depth="18">org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java)</Frame>
          <Frame depth="19">org.eclipse.jdt.internal.core.JavaElement.runOperation(JavaElement.java:484)</Frame>
          <Frame depth="20">org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:994)</Frame>
          <Frame depth="21">org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:970)</Frame>
          <Frame depth="22">org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:963)</Frame>
          <Frame depth="23">org.eclipse.jdt.internal.ui.javaeditor.filebuffers.CompilationUnitDocumentProvider2.saveDocument(CompilationUnitDocumentProvider2.java:800)</Frame>
          <Frame depth="24">org.eclipse.ui.texteditor.AbstractTextEditor$17.execute(AbstractTextEditor.java:3153)</Frame>
          <Frame depth="25">org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModifyOperation.java:71)</Frame>
          <Frame depth="26">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1595)</Frame>
          <Frame depth="27">org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:85)</Frame>
          <Frame depth="28">org.eclipse.ui.texteditor.AbstractTextEditor.performSaveOperation(AbstractTextEditor.java:3173)</Frame>
          <Frame depth="29">org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSaveOperation(CompilationUnitEditor.java:785)</Frame>
          <Frame depth="30">org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:849)</Frame>
          <Frame depth="31">org.eclipse.ui.internal.EditorManager$11.run(EditorManager.java:1090)</Frame>
          <Frame depth="32">org.eclipse.ui.internal.EditorManager$8.run(EditorManager.java:960)</Frame>
          <Frame depth="33">org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)</Frame>
          <Frame depth="34">org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)</Frame>
          <Frame depth="35">org.eclipse.jface.window.ApplicationWindow$1.run(ApplicationWindow.java:444)</Frame>
          <Frame depth="36">org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)</Frame>
          <Frame depth="37">org.eclipse.jface.window.ApplicationWindow.run(ApplicationWindow.java:441)</Frame>
          <Frame depth="38">org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:1636)</Frame>
          <Frame depth="39">org.eclipse.ui.internal.EditorManager.runProgressMonitorOperation(EditorManager.java:966)</Frame>
          <Frame depth="40">org.eclipse.ui.internal.EditorManager.savePart(EditorManager.java:1095)</Frame>
          <Frame depth="41">org.eclipse.ui.internal.WorkbenchPage.savePart(WorkbenchPage.java:2371)</Frame>
          <Frame depth="42">org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:2383)</Frame>
          <Frame depth="43">org.eclipse.ui.internal.SaveAction.run(SaveAction.java:57)</Frame>
          <Frame depth="44">org.eclipse.jface.action.Action.runWithEvent(Action.java:842)</Frame>
          <Frame depth="45">org.eclipse.ui.internal.commands.old.ActionHandler.execute(ActionHandler.java:37)</Frame>
          <Frame depth="46">org.eclipse.ui.internal.commands.old.ContextAndHandlerManager.pressed(ContextAndHandlerManager.java:171)</Frame>
          <Frame depth="47">org.eclipse.ui.internal.commands.old.ContextAndHandlerManager.access$1(ContextAndHandlerManager.java:156)</Frame>
          <Frame depth="48">org.eclipse.ui.internal.commands.old.ContextAndHandlerManager$7.widgetSelected(ContextAndHandlerManager.java:265)</Frame>
          <Frame depth="49">org.eclipse.ui.internal.AcceleratorMenu$2.handleEvent(AcceleratorMenu.java:68)</Frame>
          <Frame depth="50">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java)</Frame>
          <Frame depth="51">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)</Frame>
          <Frame depth="52">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java)</Frame>
          <Frame depth="53">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java)</Frame>
          <Frame depth="54">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1680)</Frame>
          <Frame depth="55">org.eclipse.ui.internal.Workbench.run(Workbench.java:1663)</Frame>
          <Frame depth="56">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)</Frame>
          <Frame depth="57">org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)</Frame>
          <Frame depth="58">java.lang.reflect.AccessibleObject.invokeImpl(Native Method)</Frame>
          <Frame depth="59">java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:207)</Frame>
          <Frame depth="60">java.lang.reflect.Method.invoke(Method.java:271)</Frame>
          <Frame depth="61">org.eclipse.core.launcher.Main.basicRun(Main.java:291)</Frame>
          <Frame depth="62">org.eclipse.core.launcher.Main.run(Main.java:747)</Frame>
          <Frame depth="63">org.eclipse.core.launcher.Main.main(Main.java:583)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="2">
      <source_code type="package">
        <location start="80" end="91" />
        <code>package p1;</code>
      </source_code>
      <source_code type="class">
        <location start="93" end="225" />
        <code>public class Foo {
	private String g() {
		final synchronized int i[]; 
		for (i= null; i != null; ) {
		}
		return toString();
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>20030813

Save the following code:
-&gt; ArrayIndexOutOfBoundsException thrown
---
package p1;

public class Foo {
	private String g() {
		final synchronized int i[]; 
		for (i= null; i != null; ) {
		}
		return toString();
	}
}


java.lang.ArrayIndexOutOfBoundsException
	at java.lang.Throwable.&lt;init&gt;(Throwable.java)
	at java.lang.Throwable.&lt;init&gt;(Throwable.java:68)
	at
java.lang.ArrayIndexOutOfBoundsException.&lt;init&gt;(ArrayIndexOutOfBoundsException.java:63)
	at org.eclipse.jdt.internal.compiler.parser.Parser.pushOnIntStack(Parser.java)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeToken(Parser.java)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java)
	at
org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:95)
	at
org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethod(TypeDeclaration.java:719)
	at org.eclipse.jdt.internal.compiler.Compiler.getMethodBodies(Compiler.java:381)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:582)
	at
org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:172)
	at
org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:139)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:198)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:448)
	at
org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:881)
	at
org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:48)
	at
org.eclipse.jdt.internal.core.JavaModelOperation.execute(JavaModelOperation.java:365)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java)
	at org.eclipse.jdt.internal.core.JavaElement.runOperation(JavaElement.java:484)
	at
org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:994)
	at
org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:970)
	at
org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:963)
	at
org.eclipse.jdt.internal.ui.javaeditor.filebuffers.CompilationUnitDocumentProvider2.saveDocument(CompilationUnitDocumentProvider2.java:800)
	at
org.eclipse.ui.texteditor.AbstractTextEditor$17.execute(AbstractTextEditor.java:3153)
	at
org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModifyOperation.java:71)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1595)
	at
org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:85)
	at
org.eclipse.ui.texteditor.AbstractTextEditor.performSaveOperation(AbstractTextEditor.java:3173)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSaveOperation(CompilationUnitEditor.java:785)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:849)
	at org.eclipse.ui.internal.EditorManager$11.run(EditorManager.java:1090)
	at org.eclipse.ui.internal.EditorManager$8.run(EditorManager.java:960)
	at
org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)
	at org.eclipse.jface.window.ApplicationWindow$1.run(ApplicationWindow.java:444)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.jface.window.ApplicationWindow.run(ApplicationWindow.java:441)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:1636)
	at
org.eclipse.ui.internal.EditorManager.runProgressMonitorOperation(EditorManager.java:966)
	at org.eclipse.ui.internal.EditorManager.savePart(EditorManager.java:1095)
	at org.eclipse.ui.internal.WorkbenchPage.savePart(WorkbenchPage.java:2371)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:2383)
	at org.eclipse.ui.internal.SaveAction.run(SaveAction.java:57)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at
org.eclipse.ui.internal.commands.old.ActionHandler.execute(ActionHandler.java:37)
	at
org.eclipse.ui.internal.commands.old.ContextAndHandlerManager.pressed(ContextAndHandlerManager.java:171)
	at
org.eclipse.ui.internal.commands.old.ContextAndHandlerManager.access$1(ContextAndHandlerManager.java:156)
	at
org.eclipse.ui.internal.commands.old.ContextAndHandlerManager$7.widgetSelected(ContextAndHandlerManager.java:265)
	at org.eclipse.ui.internal.AcceleratorMenu$2.handleEvent(AcceleratorMenu.java:68)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1680)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1663)
	at
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at java.lang.reflect.AccessibleObject.invokeImpl(Native Method)
	at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:207)
	at java.lang.reflect.Method.invoke(Method.java:271)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)
I will investigate.
The problem is coming from the synchronized modifier. I am investigating a fix.
Fixed and released in HEAD.
Regression test added.
Verified.</WithStack>
    <WithOutStack>20030813

Save the following code:
-&gt; ArrayIndexOutOfBoundsException thrown
---
package p1;

public class Foo {
	private String g() {
		final synchronized int i[]; 
		for (i= null; i != null; ) {
		}
		return toString();
	}
}



I will investigate.
The problem is coming from the synchronized modifier. I am investigating a fix.
Fixed and released in HEAD.
Regression test added.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41806" />
    <CreationDate amount="2003-08-21 10:57:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Platform mechanism for asynchronous prompts</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="ifstatement">
        <location start="1839" end="2034" />
        <code>if(Thread.currentThread() == Display.getCurrent().getThread()){
	throw new
IllegalThreadStateException(ProgressMessages.getString("ProgressFeedbackManager.invalidThreadMessage"));
//$NON-NLS-1$
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2282" end="2368" />
        <code>while (wait[0]) {
	try {
		Thread.sleep(100);
	} catch (InterruptedException e) {
	}
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2394" end="2405" />
        <code>job.join();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="FIXED" />
    <WithStack>In discussions with various teams on the subject of background build, someone
suggested that platform UI introduce a mechanism to allow background processes
to politely request interaction. Here is the scenario:

- There is some long running process that may take several minutes to complete.
 At some point during that process, it needs to interact with the user (ask a
question, show a warning, etc). The only option right now is to pop up a dialog.
 This is too intrusive in some cases.  The user may be in the middle of some
other task, and a  modal dialog would force them to deal with the background
request immediately.

A more polite alternative is the Windows flashing button approach (when
background shells open a modal dialog).  When a background task needs
interaction, it could add a blinking button to the status line (or next to the
progress animation).  The user can then chose to respond to the query when it is
convenient for them.  Another approach is a non-modal tooltip could pop up near
the progress animation icon, saying something like, "A background task needs
your input. Click here to respond." (like Windows update).  This would look
pretty slick, and avoid the user frustration of modal dialogs being thrust in
their face from background processes.
Agree this would be useful.
A first cut of this support has been released into HEAD. There is now a 
ProgressFeedbackManager which has a method public IStatus requestInUI(UIJob 
job, String message) which takes a UIJob to run and  message to inform the 
user of it.

When this is called a non modal dialog is opened in which the user can double 
click the message and the UI job is run.

This is only a first cut so please add comments/issues to this PR so that we 
can keep the list of interested parties consistent.
Current implementation fails every time:

if(Thread.currentThread() == Display.getCurrent().getThread()){
	throw new
IllegalThreadStateException(ProgressMessages.getString("ProgressFeedbackManager.invalidThreadMessage"));
//$NON-NLS-1$
}

If in UI thread, it throws IllegalThreadStateException.  If not in UI thread, it
throws an NullPointerException because Display.getCurrent == null.  Should be
Display.getDefault() or some other way of getting display.

Also, the busy wait loop:

while (wait[0]) {
	try {
		Thread.sleep(100);
	} catch (InterruptedException e) {
	}
}

should be replaced by:

job.join();

It also shouldn't be possible to close the feedback request dialog until the
user has responded, otherwise the UIJob is left stranded and the calling thread
blocks forever.

The balloon tooltips in Windows taskbar area would be pretty slick, but if 
this is not easily achievable, perhaps a fast view could be used to display 
jobs requiring user interaction.
Fixed in build &gt;20031110
Marking closed</WithStack>
    <WithOutStack>In discussions with various teams on the subject of background build, someone
suggested that platform UI introduce a mechanism to allow background processes
to politely request interaction. Here is the scenario:

- There is some long running process that may take several minutes to complete.
 At some point during that process, it needs to interact with the user (ask a
question, show a warning, etc). The only option right now is to pop up a dialog.
 This is too intrusive in some cases.  The user may be in the middle of some
other task, and a  modal dialog would force them to deal with the background
request immediately.

A more polite alternative is the Windows flashing button approach (when
background shells open a modal dialog).  When a background task needs
interaction, it could add a blinking button to the status line (or next to the
progress animation).  The user can then chose to respond to the query when it is
convenient for them.  Another approach is a non-modal tooltip could pop up near
the progress animation icon, saying something like, "A background task needs
your input. Click here to respond." (like Windows update).  This would look
pretty slick, and avoid the user frustration of modal dialogs being thrust in
their face from background processes.
Agree this would be useful.
A first cut of this support has been released into HEAD. There is now a 
ProgressFeedbackManager which has a method public IStatus requestInUI(UIJob 
job, String message) which takes a UIJob to run and  message to inform the 
user of it.

When this is called a non modal dialog is opened in which the user can double 
click the message and the UI job is run.

This is only a first cut so please add comments/issues to this PR so that we 
can keep the list of interested parties consistent.
Current implementation fails every time:

if(Thread.currentThread() == Display.getCurrent().getThread()){
	throw new
IllegalThreadStateException(ProgressMessages.getString("ProgressFeedbackManager.invalidThreadMessage"));
//$NON-NLS-1$
}

If in UI thread, it throws IllegalThreadStateException.  If not in UI thread, it
throws an NullPointerException because Display.getCurrent == null.  Should be
Display.getDefault() or some other way of getting display.

Also, the busy wait loop:

while (wait[0]) {
	try {
		Thread.sleep(100);
	} catch (InterruptedException e) {
	}
}

should be replaced by:

job.join();

It also shouldn't be possible to close the feedback request dialog until the
user has responded, otherwise the UIJob is left stranded and the calling thread
blocks forever.

The balloon tooltips in Windows taskbar area would be pretty slick, but if 
this is not easily achievable, perhaps a fast view could be used to display 
jobs requiring user interaction.
Fixed in build &gt;20031110
Marking closed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41807" />
    <CreationDate amount="2003-08-21 11:05:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="major" />
    <Summery>[reconciling] text editor contents not in synch with file</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867057">
        <Exception>org.eclipse.swt.SWTException</Exception>
        <Reason>Invalid thread access</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.swt.SWT.error(SWT.java:2369)</Frame>
          <Frame depth="1">org.eclipse.swt.SWT.error(SWT.java:2297)</Frame>
          <Frame depth="2">org.eclipse.swt.widgets.Widget.error(Widget.java:388)</Frame>
          <Frame depth="3">org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:318)</Frame>
          <Frame depth="4">org.eclipse.swt.widgets.Scrollable.getVerticalBar(Scrollable.java:180)</Frame>
          <Frame depth="5">org.eclipse.swt.custom.StyledText.reset(StyledText.java:6662)</Frame>
          <Frame depth="6">org.eclipse.swt.custom.StyledText.handleTextSet(StyledText.java:5428)</Frame>
          <Frame depth="7">org.eclipse.swt.custom.StyledText$6.textSet(StyledText.java:4919)</Frame>
          <Frame depth="8">org.eclipse.jface.text.DocumentAdapter.fireTextSet(DocumentAdapter.java:281)</Frame>
          <Frame depth="9">org.eclipse.jface.text.DocumentAdapter.documentChanged(DocumentAdapter.java:204)</Frame>
          <Frame depth="10">org.eclipse.jface.text.AbstractDocument.doFireDocumentChanged2(AbstractDocument.java:635)</Frame>
          <Frame depth="11">org.eclipse.jface.text.AbstractDocument.doFireDocumentChanged(AbstractDocument.java:610)</Frame>
          <Frame depth="12">org.eclipse.jface.text.AbstractDocument.doFireDocumentChanged(AbstractDocument.java:595)</Frame>
          <Frame depth="13">org.eclipse.jface.text.AbstractDocument.fireDocumentChanged(AbstractDocument.java:670)</Frame>
          <Frame depth="14">org.eclipse.jface.text.AbstractDocument.set(AbstractDocument.java:975)</Frame>
          <Frame depth="15">org.eclipse.core.internal.filebuffers.TextFileBuffer.handleFileContentChanged(TextFileBuffer.java:288)</Frame>
          <Frame depth="16">org.eclipse.core.internal.filebuffers.FileBuffer$1.execute(FileBuffer.java:130)</Frame>
          <Frame depth="17">org.eclipse.core.internal.filebuffers.FileBuffer$SafeFileChange.run(FileBuffer.java:64)</Frame>
          <Frame depth="18">org.eclipse.core.internal.filebuffers.FileBuffer$FileSynchronizer.update(FileBuffer.java:171)</Frame>
          <Frame depth="19">org.eclipse.core.internal.filebuffers.FileBuffer$FileSynchronizer.visit(FileBuffer.java:157)</Frame>
          <Frame depth="20">org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:71)</Frame>
          <Frame depth="21">org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:79)</Frame>
          <Frame depth="22">org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:79)</Frame>
          <Frame depth="23">org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:52)</Frame>
          <Frame depth="24">org.eclipse.core.internal.filebuffers.FileBuffer$FileSynchronizer.resourceChanged(FileBuffer.java:108)</Frame>
          <Frame depth="25">org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:156)</Frame>
          <Frame depth="26">org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1016)</Frame>
          <Frame depth="27">org.eclipse.core.runtime.Platform.run(Platform.java:420)</Frame>
          <Frame depth="28">org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:150)</Frame>
          <Frame depth="29">org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:63)</Frame>
          <Frame depth="30">org.eclipse.core.internal.resources.Workspace.broadcastChanges(Workspace.java:156)</Frame>
          <Frame depth="31">org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:875)</Frame>
          <Frame depth="32">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1581)</Frame>
          <Frame depth="33">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1591)</Frame>
          <Frame depth="34">org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:85)</Frame>
          <Frame depth="35">org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:101)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="1169" end="1423" />
        <code>public void run() {
  if (isDisposed()) {
    fManager.fireStateChangeFailed(FileBuffer.this);
    return;
  }
			
  try {
    execute();
  } catch (Exception x) {  // &lt;&lt; SWTException caught here
    fManager.fireStateChangeFailed(FileBuffer.this);
  }
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="2">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Create a new Java project.</Line>
          <Line>2) Create a file in the project called abc.txt - leave the editor for this</Line>
          <Line>file open.</Line>
          <Line>3) Edit abc.txt outside of eclipse and save the changes.</Line>
          <Line>4) Select the file in the Package Explorer and refresh from the context menu.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- As described above,</Line>
          <Line>- after 3): make sure to answer "No" when asked to refresh the file.</Line>
          <Line>- proceed with manual refresh (4).</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Eclipse I200308201005

1) Create a new Java project.
2) Create a file in the project called abc.txt - leave the editor for this 
file open.
3) Edit abc.txt outside of eclipse and save the changes.
4) Select the file in the Package Explorer and refresh from the context menu.

The editor does not show the changes made to the file.  Close the editor and 
reopen it and you will see the changes.

Expect to see the changes immediately.  This works on Windows.

You can also see the failure if you use a file in CVS and replace with latest 
from Head instead of refresh.  Also happens with Java files.
Running with the Core Tools, I can see the resource change in the Delta Spy. It
seems that the editor's resource change listener is facing a problem while
handling the resource change event. Investigating...
The following exception is preventing the resource change listener provided by
org.eclipse.core.filebuffers to reflect the changes to the editor.

org.eclipse.swt.SWTException: Invalid thread access
	at org.eclipse.swt.SWT.error(SWT.java:2369)
	at org.eclipse.swt.SWT.error(SWT.java:2297)
	at org.eclipse.swt.widgets.Widget.error(Widget.java:388)
	at org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:318)
	at org.eclipse.swt.widgets.Scrollable.getVerticalBar(Scrollable.java:180)
	at org.eclipse.swt.custom.StyledText.reset(StyledText.java:6662)
	at org.eclipse.swt.custom.StyledText.handleTextSet(StyledText.java:5428)
	at org.eclipse.swt.custom.StyledText$6.textSet(StyledText.java:4919)
	at org.eclipse.jface.text.DocumentAdapter.fireTextSet(DocumentAdapter.java:281)
	at org.eclipse.jface.text.DocumentAdapter.documentChanged(DocumentAdapter.java:204)
	at
org.eclipse.jface.text.AbstractDocument.doFireDocumentChanged2(AbstractDocument.java:635)
	at
org.eclipse.jface.text.AbstractDocument.doFireDocumentChanged(AbstractDocument.java:610)
	at
org.eclipse.jface.text.AbstractDocument.doFireDocumentChanged(AbstractDocument.java:595)
	at
org.eclipse.jface.text.AbstractDocument.fireDocumentChanged(AbstractDocument.java:670)
	at org.eclipse.jface.text.AbstractDocument.set(AbstractDocument.java:975)
	at
org.eclipse.core.internal.filebuffers.TextFileBuffer.handleFileContentChanged(TextFileBuffer.java:288)
	at org.eclipse.core.internal.filebuffers.FileBuffer$1.execute(FileBuffer.java:130)
	at
org.eclipse.core.internal.filebuffers.FileBuffer$SafeFileChange.run(FileBuffer.java:64)
	at
org.eclipse.core.internal.filebuffers.FileBuffer$FileSynchronizer.update(FileBuffer.java:171)
	at
org.eclipse.core.internal.filebuffers.FileBuffer$FileSynchronizer.visit(FileBuffer.java:157)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:71)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:79)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:79)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:52)
	at
org.eclipse.core.internal.filebuffers.FileBuffer$FileSynchronizer.resourceChanged(FileBuffer.java:108)
	at
org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:156)
	at
org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1016)
	at org.eclipse.core.runtime.Platform.run(Platform.java:420)
	at
org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:150)
	at
org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:63)
	at
org.eclipse.core.internal.resources.Workspace.broadcastChanges(Workspace.java:156)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:875)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1581)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1591)
	at
org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:85)
	at
org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:101)

Moving to Platform/Text.
BTW, since the exception is not being logged, I was only able to find it by
putting a breakpoint in the following code in
org.eclipse.core.internal.filebuffers.FileBuffer.SafeFileChange:

public void run() {
  if (isDisposed()) {
    fManager.fireStateChangeFailed(FileBuffer.this);
    return;
  }
			
  try {
    execute();
  } catch (Exception x) {  // &lt;&lt; SWTException caught here
    fManager.fireStateChangeFailed(FileBuffer.this);
  }
}

Tom,
please investigate. This looks like an M3 candidate.

Changing OS to All as this happens on Windows 2000 as well, although you won't
ususally notice since the auto-refresh runs inside the UI thread. 

Steps on Windows:
- As described above, 
- after 3): make sure to answer "No" when asked to refresh the file.
- proceed with manual refresh (4).

The problem lies in DocumentAdapter, which bridges between the text (IDocument)
world which is UI-independent, and the SWT world of StyledText. It is not
threadsafe, although changes from IDocument make to guarantee about which thread
updates may occur from. 

This may be something many other IDocumentListener Implementations may not be
aware of.
*** Bug 41846 has been marked as a duplicate of this bug. ***
I released a patch that does the job on this PR and bug 41846. The problem of
the editor infrastructure not being aware of document changes outside the UI
thread remains though, and needs to be further investigated.
This problem has been fixed.
Available in builds &gt; 20030822</WithStack>
    <WithOutStack>Eclipse I200308201005

1) Create a new Java project.
2) Create a file in the project called abc.txt - leave the editor for this 
file open.
3) Edit abc.txt outside of eclipse and save the changes.
4) Select the file in the Package Explorer and refresh from the context menu.

The editor does not show the changes made to the file.  Close the editor and 
reopen it and you will see the changes.

Expect to see the changes immediately.  This works on Windows.

You can also see the failure if you use a file in CVS and replace with latest 
from Head instead of refresh.  Also happens with Java files.
Running with the Core Tools, I can see the resource change in the Delta Spy. It
seems that the editor's resource change listener is facing a problem while
handling the resource change event. Investigating...
The following exception is preventing the resource change listener provided by
org.eclipse.core.filebuffers to reflect the changes to the editor.



Moving to Platform/Text.
BTW, since the exception is not being logged, I was only able to find it by
putting a breakpoint in the following code in
org.eclipse.core.internal.filebuffers.FileBuffer.SafeFileChange:

public void run() {
  if (isDisposed()) {
    fManager.fireStateChangeFailed(FileBuffer.this);
    return;
  }
			
  try {
    execute();
  } catch (Exception x) {  // &lt;&lt; SWTException caught here
    fManager.fireStateChangeFailed(FileBuffer.this);
  }
}

Tom,
please investigate. This looks like an M3 candidate.

Changing OS to All as this happens on Windows 2000 as well, although you won't
ususally notice since the auto-refresh runs inside the UI thread. 

Steps on Windows:
- As described above, 
- after 3): make sure to answer "No" when asked to refresh the file.
- proceed with manual refresh (4).

The problem lies in DocumentAdapter, which bridges between the text (IDocument)
world which is UI-independent, and the SWT world of StyledText. It is not
threadsafe, although changes from IDocument make to guarantee about which thread
updates may occur from. 

This may be something many other IDocumentListener Implementations may not be
aware of.
*** Bug 41846 has been marked as a duplicate of this bug. ***
I released a patch that does the job on this PR and bug 41846. The problem of
the editor infrastructure not being aware of document changes outside the UI
thread remains though, and needs to be further investigated.
This problem has been fixed.
Available in builds &gt; 20030822</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41808" />
    <CreationDate amount="2003-08-21 11:21:00 -0400" />
    <DupId amount="41755" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Breakpoint view and enable/disable</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>In I20030820 the breakpoints view offers the possibility of activating and 
deactivating breakpoints through a check box (It's great). However if you still 
use the old popup menu actions to enable and disable, the check box is not 
updated.
whoops...
John, the debug BreakpointManager seems to no longer be getting notified of 
resource changes resulting from changing a marker attribute. We register using: 
getWorkspace().addResourceChangeListener(this, 
IResourceChangeEvent.POST_AUTO_BUILD);
I have only quickly looked into the problem but I thought I would ping you to 
see if things have changed in this area. Thanks.
Was background autobuild turned on?  Marker deltas are currently broken when
background auto-build is turned on (see bug 41755), and I am currently working
on fixing it.  I can believe that marker deltas may also be broken for autobuild
listeners without background build, since there has been a significant
refactoring in this area.  I am currently working on a fix, and I will test this
scenario with background auto-build turned off.
I did not enable background auto-build.
*** Bug 41895 has been marked as a duplicate of this bug. ***
Marking as duplicate of 41755.

*** This bug has been marked as a duplicate of 41755 ***</WithStack>
    <WithOutStack>In I20030820 the breakpoints view offers the possibility of activating and 
deactivating breakpoints through a check box (It's great). However if you still 
use the old popup menu actions to enable and disable, the check box is not 
updated.
whoops...
John, the debug BreakpointManager seems to no longer be getting notified of 
resource changes resulting from changing a marker attribute. We register using: 
getWorkspace().addResourceChangeListener(this, 
IResourceChangeEvent.POST_AUTO_BUILD);
I have only quickly looked into the problem but I thought I would ping you to 
see if things have changed in this area. Thanks.
Was background autobuild turned on?  Marker deltas are currently broken when
background auto-build is turned on (see bug 41755), and I am currently working
on fixing it.  I can believe that marker deltas may also be broken for autobuild
listeners without background build, since there has been a significant
refactoring in this area.  I am currently working on a fix, and I will test this
scenario with background auto-build turned off.
I did not enable background auto-build.
*** Bug 41895 has been marked as a duplicate of this bug. ***
Marking as duplicate of 41755.

*** This bug has been marked as a duplicate of 41755 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41809" />
    <CreationDate amount="2003-08-21 11:47:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Can add breakpoint on non-executable line of code</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>you can happily add a breakpoint on a variable declaration (with no 
initialization). This breakpoint cannot be hit and should not be allowed by the 
verifier.

Example line from NotificationManager, line 86
ResourceChangeListenerList.ListenerEntry[] entries;
Fixed.
There was the same problem for field declarations without initializer (it's
manage by the same code).
Changes in ValidBreakpointLocationLocator#visit(VariableDeclarationFragment).
Please verify, Darin S.
Verified.</WithStack>
    <WithOutStack>you can happily add a breakpoint on a variable declaration (with no 
initialization). This breakpoint cannot be hit and should not be allowed by the 
verifier.

Example line from NotificationManager, line 86
ResourceChangeListenerList.ListenerEntry[] entries;
Fixed.
There was the same problem for field declarations without initializer (it's
manage by the same code).
Changes in ValidBreakpointLocationLocator#visit(VariableDeclarationFragment).
Please verify, Darin S.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41810" />
    <CreationDate amount="2003-08-21 11:49:00 -0400" />
    <DupId amount="41925" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Deadlock when doing update from repository</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>In the old synchronize view, when I've done "update from repository" I got a 
deadlock.
Created attachment 5817
Deadlock dump
It appears that the deadlock is caused by the workspace lock (scheduling rule) 
being obtained both before the syncExec and within the syncExec. Thus, the 
sync exec being run in main is blocked on the lock held by the originating 
thread. I don't think the CVS code involved has changed recently (old sync 
view). Did the old workspace lock handle this case gracefully(John?).
You can mark this as a dup of bug 41925 if you want.
We'll leave it separate for now in order to investigate whether we want to fix 
the code to avoid this.


*** This bug has been marked as a duplicate of 41925 ***</WithStack>
    <WithOutStack>In the old synchronize view, when I've done "update from repository" I got a 
deadlock.
Created attachment 5817
Deadlock dump
It appears that the deadlock is caused by the workspace lock (scheduling rule) 
being obtained both before the syncExec and within the syncExec. Thus, the 
sync exec being run in main is blocked on the lock held by the originating 
thread. I don't think the CVS code involved has changed recently (old sync 
view). Did the old workspace lock handle this case gracefully(John?).
You can mark this as a dup of bug 41925 if you want.
We'll leave it separate for now in order to investigate whether we want to fix 
the code to avoid this.


*** This bug has been marked as a duplicate of 41925 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41811" />
    <CreationDate amount="2003-08-21 11:56:00 -0400" />
    <DupId amount="41255" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.1.1" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>Source directories are always exported</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>There is no way in JDT to specify that a Java project source directory that is 
on the build path should not be exported to client projects.

This is a very real scenario - projects may have 'test' or 'impl' source 
directories that they wish to compile, but do not wish to have their contents 
placed in a jar file or exported to clients on clients' build paths.

STEPS TO REPRODUCE:

- create two projects

  test-a/
    bin/
    bin-test/
    src/
    src-test/

  test-b/
    bin/
    src/

test-b has test-a on its build path. test-a has two source directories (src and 
src-test) and each is output to its own output directory.

Attempt to not export src-test in test-a properties. JDT will not 'uncheck' the 
diretory from the export list. If you hand modify the .classpath in the 
resource perspective it has no effect - the src-test directory is still 
exported.

test-b can compile against any public class or interface in test-a's src and 
src-test directories.

This is a major bug for teams that have invested heavily in multiple source 
directories design for projects (e.g. Jakarta directory structure).
Adding links to jdt-dev mailing list threads as background information. Thanks.

-Naresh

http://dev.eclipse.org/mhonarc/lists/jdt-dev/msg00157.html
http://dev.eclipse.org/mhonarc/lists/jdt-dev/msg00181.html


*** This bug has been marked as a duplicate of 41255 ***</WithStack>
    <WithOutStack>There is no way in JDT to specify that a Java project source directory that is 
on the build path should not be exported to client projects.

This is a very real scenario - projects may have 'test' or 'impl' source 
directories that they wish to compile, but do not wish to have their contents 
placed in a jar file or exported to clients on clients' build paths.

STEPS TO REPRODUCE:

- create two projects

  test-a/
    bin/
    bin-test/
    src/
    src-test/

  test-b/
    bin/
    src/

test-b has test-a on its build path. test-a has two source directories (src and 
src-test) and each is output to its own output directory.

Attempt to not export src-test in test-a properties. JDT will not 'uncheck' the 
diretory from the export list. If you hand modify the .classpath in the 
resource perspective it has no effect - the src-test directory is still 
exported.

test-b can compile against any public class or interface in test-a's src and 
src-test directories.

This is a major bug for teams that have invested heavily in multiple source 
directories design for projects (e.g. Jakarta directory structure).
Adding links to jdt-dev mailing list threads as background information. Thanks.

-Naresh

http://dev.eclipse.org/mhonarc/lists/jdt-dev/msg00157.html
http://dev.eclipse.org/mhonarc/lists/jdt-dev/msg00181.html


*** This bug has been marked as a duplicate of 41255 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41812" />
    <CreationDate amount="2003-08-21 12:06:00 -0400" />
    <DupId amount="35040" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Support of alpha transparency using png</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Having png-image files which utilize alpha transparency are not drawn correctly 
when used for buttons and labels. While png-images with single transparent 
color (like gif) work best.

I would like to be able to use alpha transparent images within eclipse.

(I initialy rated it as a minor because using gif images isn't that great deal 
but makes trouble sometimes. (black outlined icons))


*** This bug has been marked as a duplicate of 35040 ***</WithStack>
    <WithOutStack>Having png-image files which utilize alpha transparency are not drawn correctly 
when used for buttons and labels. While png-images with single transparent 
color (like gif) work best.

I would like to be able to use alpha transparent images within eclipse.

(I initialy rated it as a minor because using gif images isn't that great deal 
but makes trouble sometimes. (black outlined icons))


*** This bug has been marked as a duplicate of 35040 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41813" />
    <CreationDate amount="2003-08-21 12:12:00 -0400" />
    <DupId amount="41953" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[formatting] Java Code formatter does not work</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867057">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.ui.text.comment.CommentRegion.scanLines(CommentRegion.java:158)</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.ui.text.comment.CommentRegion.formatRegion(CommentRegion.java:83)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.ui.text.comment.CommentFormatter.format(CommentFormatter.java:44)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.ui.text.comment.CommentFormattingStrategy.format(CommentFormattingStrategy.java:57)</Frame>
          <Frame depth="4">org.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:521)</Frame>
          <Frame depth="5">org.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:495)</Frame>
          <Frame depth="6">org.eclipse.jface.text.formatter.ContentFormatter.formatPartitions(ContentFormatter.java:413)</Frame>
          <Frame depth="7">org.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:387)</Frame>
          <Frame depth="8">org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:500)</Frame>
          <Frame depth="9">org.eclipse.jdt.internal.ui.javaeditor.JavaSourceViewer.doOperation(JavaSourceViewer.java:72)</Frame>
          <Frame depth="10">org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:167)</Frame>
          <Frame depth="11">org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:127)</Frame>
          <Frame depth="12">org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)</Frame>
          <Frame depth="13">org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:125)</Frame>
          <Frame depth="14">org.eclipse.jface.action.Action.runWithEvent(Action.java:842)</Frame>
          <Frame depth="15">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:542)</Frame>
          <Frame depth="16">org.eclipse.jface.action.ActionContributionItem.access$4(ActionContributionItem.java:483)</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:455)</Frame>
          <Frame depth="18">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)</Frame>
          <Frame depth="19">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)</Frame>
          <Frame depth="20">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2188)</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)</Frame>
          <Frame depth="22">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1676)</Frame>
          <Frame depth="23">org.eclipse.ui.internal.Workbench.run(Workbench.java:1659)</Frame>
          <Frame depth="24">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)</Frame>
          <Frame depth="25">org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)</Frame>
          <Frame depth="26">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</Frame>
          <Frame depth="27">sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</Frame>
          <Frame depth="28">sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</Frame>
          <Frame depth="29">java.lang.reflect.Method.invoke(Unknown Source)</Frame>
          <Frame depth="30">org.eclipse.core.launcher.Main.basicRun(Main.java:291)</Frame>
          <Frame depth="31">org.eclipse.core.launcher.Main.run(Main.java:747)</Frame>
          <Frame depth="32">org.eclipse.core.launcher.Main.main(Main.java:583)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I just downloaded the latest integration build:
Version: 3.0.0
Build id: 200308201005
and found that the code formatter does not work.

I will attach the log file and the .options file that I had.

Here is the stack trace from the .log file:
java.lang.NullPointerException
	at
org.eclipse.jdt.internal.ui.text.comment.CommentRegion.scanLines(CommentRegion.java:158)
	at
org.eclipse.jdt.internal.ui.text.comment.CommentRegion.formatRegion(CommentRegion.java:83)
	at
org.eclipse.jdt.internal.ui.text.comment.CommentFormatter.format(CommentFormatter.java:44)
	at
org.eclipse.jdt.internal.ui.text.comment.CommentFormattingStrategy.format(CommentFormattingStrategy.java:57)
	at
org.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:521)
	at
org.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:495)
	at
org.eclipse.jface.text.formatter.ContentFormatter.formatPartitions(ContentFormatter.java:413)
	at
org.eclipse.jface.text.formatter.ContentFormatter.format(ContentFormatter.java:387)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:500)
	at
org.eclipse.jdt.internal.ui.javaeditor.JavaSourceViewer.doOperation(JavaSourceViewer.java:72)
	at
org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:167)
	at
org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:127)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:125)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:542)
	at
org.eclipse.jface.action.ActionContributionItem.access$4(ActionContributionItem.java:483)
	at
org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:455)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2188)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1676)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1659)
	at
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)
Created attachment 5818
Log file

Log file
Created attachment 5819
eclipse\plugins\org.eclipse.core.resources_3.0.0\.options file

eclipse\plugins\org.eclipse.core.resources_3.0.0\.options file
Does this happen with every file you format?

I disabled the "Enable formatting of Javadoc, multi-...." in the
Workspace&gt;Preferences&gt;Java&gt;Work in Progress area, and it (formatting) still
didnt work. Then I restarted the eclipse workspace (after closing all editors),
and now the formatting worked.
Maybe the problem only appears on a certain file. Could you try a bit more. If
you cannot reproduce then please close the PR.

Nope - I see this happening on a lot of files. For the past few days, I have
been jumping between setting/unsetting the preference mentioned in the previous
comment. And this happens consistently - but only when the preference is set.


*** This bug has been marked as a duplicate of 41953 ***</WithStack>
    <WithOutStack>I just downloaded the latest integration build:
Version: 3.0.0
Build id: 200308201005
and found that the code formatter does not work.

I will attach the log file and the .options file that I had.

Here is the stack trace from the .log file:

Created attachment 5818
Log file

Log file
Created attachment 5819
eclipse\plugins\org.eclipse.core.resources_3.0.0\.options file

eclipse\plugins\org.eclipse.core.resources_3.0.0\.options file
Does this happen with every file you format?

I disabled the "Enable formatting of Javadoc, multi-...." in the
Workspace&gt;Preferences&gt;Java&gt;Work in Progress area, and it (formatting) still
didnt work. Then I restarted the eclipse workspace (after closing all editors),
and now the formatting worked.
Maybe the problem only appears on a certain file. Could you try a bit more. If
you cannot reproduce then please close the PR.

Nope - I see this happening on a lot of files. For the past few days, I have
been jumping between setting/unsetting the preference mentioned in the previous
comment. And this happens consistently - but only when the preference is set.


*** This bug has been marked as a duplicate of 41953 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41814" />
    <CreationDate amount="2003-08-21 12:25:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[rulers] Overview header behaves strange</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>- change preference to show error annotation lets the header appear</Line>
          <Line>- change preference back to not show error annotation has no effect until the</Line>
          <Line>editor is closed. The reopened editor has no header</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I20030820

- If error annotation type is disabled from overview ruler but warning is
enabled then the header does not show up.

- change preference to show error annotation lets the header appear
- change preference back to not show error annotation has no effect until the
editor is closed. The reopened editor has no header

==&gt; header should be visible if at least one annotation type contributing to the
header is shown in the overview ruler.
Available in builds &gt; 20030822</WithStack>
    <WithOutStack>I20030820

- If error annotation type is disabled from overview ruler but warning is
enabled then the header does not show up.

- change preference to show error annotation lets the header appear
- change preference back to not show error annotation has no effect until the
editor is closed. The reopened editor has no header

==&gt; header should be visible if at least one annotation type contributing to the
header is shown in the overview ruler.
Available in builds &gt; 20030822</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41815" />
    <CreationDate amount="2003-08-21 12:50:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Compare" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Internal error comparing with repository</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>20030819

Not exactly sure what the  error was as it was not written to the log. I had 
made some changes to my buildnotes.properties in the workbench and when I 
double clicked on it I got an editor open with "Internal Error" shown on it.

Not only should the error not occured I should have also got it logged. Screen 
shot to be attached.
Created attachment 5820
Screenshot of problem
When this occurred I was out of synch.
I believe that Compare controls the error message that is shown in the editor. 
Reassigning to Platform Compare to consider logging a more indepth description 
of the error that occurred.
Created attachment 6017
error msg.
I get the same error messege with 3.0 M3.  Similar to Bug 9750, the .xsl file is
 text, but committed as a binary.  

Here is the text from the .log file.
----
!SESSION Sep 08, 2003 09:06:38.783 ---------------------------------------------
java.version=1.4.2
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=en_US
Command-line arguments: -os win32 -ws win32 -arch x86 -data
C:\eclipse_workspaces -install file:C:/eclipse/
!ENTRY org.eclipse.team.cvs.core 2 -22 Sep 08, 2003 09:06:38.783
!MESSAGE Unable to determine server version. Host 'serverNameRemoved-Joe' does
not support the 'cvs version' command. Although most functionality works, use
version 1.11.1p1 or later for full support.
---
just adding myself to the CC:
fixed for M6
I don't know how to verify this.</WithStack>
    <WithOutStack>20030819

Not exactly sure what the  error was as it was not written to the log. I had 
made some changes to my buildnotes.properties in the workbench and when I 
double clicked on it I got an editor open with "Internal Error" shown on it.

Not only should the error not occured I should have also got it logged. Screen 
shot to be attached.
Created attachment 5820
Screenshot of problem
When this occurred I was out of synch.
I believe that Compare controls the error message that is shown in the editor. 
Reassigning to Platform Compare to consider logging a more indepth description 
of the error that occurred.
Created attachment 6017
error msg.
I get the same error messege with 3.0 M3.  Similar to Bug 9750, the .xsl file is
 text, but committed as a binary.  

Here is the text from the .log file.
----
!SESSION Sep 08, 2003 09:06:38.783 ---------------------------------------------
java.version=1.4.2
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=en_US
Command-line arguments: -os win32 -ws win32 -arch x86 -data
C:\eclipse_workspaces -install file:C:/eclipse/
!ENTRY org.eclipse.team.cvs.core 2 -22 Sep 08, 2003 09:06:38.783
!MESSAGE Unable to determine server version. Host 'serverNameRemoved-Joe' does
not support the 'cvs version' command. Although most functionality works, use
version 1.11.1p1 or later for full support.
---
just adding myself to the CC:
fixed for M6
I don't know how to verify this.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41816" />
    <CreationDate amount="2003-08-21 13:28:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Ant" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Ant Editor annotation list should be dynamically sized.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>In the AntEditorPreferencePage, the annotation list has a hard coded height 
hint of 8. Since the number of annotations is dynamic (based on which plugins 
are installed and contributing), the height hint should be dynamic.
Fixed in AntEditorPreferencePage.
Please verify.
Verified with the exception that there's a bug on SWT-GTK which makes this code not work 
correctly on Linux-GTK. See Bug 40273.</WithStack>
    <WithOutStack>In the AntEditorPreferencePage, the annotation list has a hard coded height 
hint of 8. Since the number of annotations is dynamic (based on which plugins 
are installed and contributing), the height hint should be dynamic.
Fixed in AntEditorPreferencePage.
Please verify.
Verified with the exception that there's a bug on SWT-GTK which makes this code not work 
correctly on Linux-GTK. See Bug 40273.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41817" />
    <CreationDate amount="2003-08-21 13:36:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Plugins fail to compile when export as part of feature</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>1) Use 3.0M2 and set the PDE platform target to be all plugins contained in an</Line>
          <Line>the 3.0M2 installation, except for org.eclipse.debug.ui.</Line>
          <Line>2) In the PDE, import the 3.0M2 version of org.eclipse.debug.ui as a source</Line>
          <Line>plugin.  The plugin should compile cleanly.</Line>
          <Line>3) Create a simple feature that contains org.eclipse.debug.ui</Line>
          <Line>4) Export the feature using Export... &gt; Deployable features.</Line>
          <Line>5) Compilation errors result similar to the attachment</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I'm using the 3.0M2 and my PDE is set to target a 3.0M2 installation.  However, 
when exporting my features I receive a long list of compilation errors for the 
contained plugins that do not occur when compiling in the PDE perspective.  
Additionally, there are no compilation errors when the plugin is exported 
using 'Export plugins and fragments', but only when exported as part of a 
feature.  To reproduce the problem:

1) Use 3.0M2 and set the PDE platform target to be all plugins contained in an 
the 3.0M2 installation, except for org.eclipse.debug.ui.
2) In the PDE, import the 3.0M2 version of org.eclipse.debug.ui as a source 
plugin.  The plugin should compile cleanly.
3) Create a simple feature that contains org.eclipse.debug.ui
4) Export the feature using Export... &gt; Deployable features.
5) Compilation errors result similar to the attachment

However, if you export just the plugin by itself using Export... &gt; Deployable 
Plugins and Fragments, the compilation errors don't occur.  

Aside: However, a log file full of warnings is still generated.  It would be 
nice if the logs could be checked for actual errors instead of just content 
before alerting the user.  When you're exporting over 60 plugins, going through 
the individual log files is tedious at best.
Created attachment 5821
Log file generated from compiling org.eclipse.debug.ui on export
Moving to PDE-UI for consideration.
this one was hard to reproduce, but finally isolated.  It was a timing issue 
of when the import was taking place.  Fixed in M4.
As for the verbose output, as of M3, the wizard has a build options options 
which will take you to the build preference page.  You can turn the verbose 
output off there.</WithStack>
    <WithOutStack>I'm using the 3.0M2 and my PDE is set to target a 3.0M2 installation.  However, 
when exporting my features I receive a long list of compilation errors for the 
contained plugins that do not occur when compiling in the PDE perspective.  
Additionally, there are no compilation errors when the plugin is exported 
using 'Export plugins and fragments', but only when exported as part of a 
feature.  To reproduce the problem:

1) Use 3.0M2 and set the PDE platform target to be all plugins contained in an 
the 3.0M2 installation, except for org.eclipse.debug.ui.
2) In the PDE, import the 3.0M2 version of org.eclipse.debug.ui as a source 
plugin.  The plugin should compile cleanly.
3) Create a simple feature that contains org.eclipse.debug.ui
4) Export the feature using Export... &gt; Deployable features.
5) Compilation errors result similar to the attachment

However, if you export just the plugin by itself using Export... &gt; Deployable 
Plugins and Fragments, the compilation errors don't occur.  

Aside: However, a log file full of warnings is still generated.  It would be 
nice if the logs could be checked for actual errors instead of just content 
before alerting the user.  When you're exporting over 60 plugins, going through 
the individual log files is tedious at best.
Created attachment 5821
Log file generated from compiling org.eclipse.debug.ui on export
Moving to PDE-UI for consideration.
this one was hard to reproduce, but finally isolated.  It was a timing issue 
of when the import was taking place.  Fixed in M4.
As for the verbose output, as of M3, the wizard has a build options options 
which will take you to the build preference page.  You can turn the verbose 
output off there.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41818" />
    <CreationDate amount="2003-08-21 13:42:00 -0400" />
    <DupId amount="41231" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>NPE when doing a full build</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867067">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.compiler.codegen.ConstantPool.literalIndex(ConstantPool.java(Compiled Code))</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.compiler.ClassFile.addFieldInfo(ClassFile.java(Compiled Code))</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.compiler.ClassFile.addFieldInfos(ClassFile.java(Compiled Code))</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java(Compiled Code))</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:531)</Frame>
          <Frame depth="5">org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:176)</Frame>
          <Frame depth="6">org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:542)</Frame>
          <Frame depth="7">org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:328)</Frame>
          <Frame depth="8">org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:198)</Frame>
          <Frame depth="9">org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:148)</Frame>
          <Frame depth="10">org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:51)</Frame>
          <Frame depth="11">org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:202)</Frame>
          <Frame depth="12">org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:125)</Frame>
          <Frame depth="13">org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:440)</Frame>
          <Frame depth="14">org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1016)</Frame>
          <Frame depth="15">org.eclipse.core.runtime.Platform.run(Platform.java:420)</Frame>
          <Frame depth="16">org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:128)</Frame>
          <Frame depth="17">org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:184)</Frame>
          <Frame depth="18">org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:194)</Frame>
          <Frame depth="19">org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:154)</Frame>
          <Frame depth="20">org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1016)</Frame>
          <Frame depth="21">org.eclipse.core.runtime.Platform.run(Platform.java:420)</Frame>
          <Frame depth="22">org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:168)</Frame>
          <Frame depth="23">org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:256)</Frame>
          <Frame depth="24">org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:224)</Frame>
          <Frame depth="25">org.eclipse.core.internal.resources.Workspace.build(Workspace.java:176)</Frame>
          <Frame depth="26">org.eclipse.ui.actions.GlobalBuildAction$1.run(GlobalBuildAction.java:174)</Frame>
          <Frame depth="27">org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:101)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>In I20030820 I got a NPE when doing a full rebuild.
As usual I can't reproduce it on a small scale, so I can make my workspace 
available.

Here is stack trace:

ENTRY org.eclipse.core.resources 4 2 Aug 21, 2003 13:37:40.703
!MESSAGE Problems occurred when invoking code from plug-
in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.codegen.ConstantPool.literalIndex
(ConstantPool.java(Compiled Code))
	at org.eclipse.jdt.internal.compiler.ClassFile.addFieldInfo
(ClassFile.java(Compiled Code))
	at org.eclipse.jdt.internal.compiler.ClassFile.addFieldInfos
(ClassFile.java(Compiled Code))
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode
(TypeDeclaration.java(Compiled Code))
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode
(TypeDeclaration.java:531)
	at 
org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode
(CompilationUnitDeclaration.java:176)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:542)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:328)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile
(AbstractImageBuilder.java:198)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile
(AbstractImageBuilder.java:148)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build
(BatchImageBuilder.java:51)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll
(JavaBuilder.java:202)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build
(JavaBuilder.java:125)
	at org.eclipse.core.internal.events.BuildManager$2.run
(BuildManager.java:440)
	at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:1016)
	at org.eclipse.core.runtime.Platform.run(Platform.java:420)
	at org.eclipse.core.internal.events.BuildManager.basicBuild
(BuildManager.java:128)
	at org.eclipse.core.internal.events.BuildManager.basicBuild
(BuildManager.java:184)
	at org.eclipse.core.internal.events.BuildManager.basicBuild
(BuildManager.java:194)
	at org.eclipse.core.internal.events.BuildManager$1.run
(BuildManager.java:154)
	at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:1016)
	at org.eclipse.core.runtime.Platform.run(Platform.java:420)
	at org.eclipse.core.internal.events.BuildManager.basicBuild
(BuildManager.java:168)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop
(BuildManager.java:256)
	at org.eclipse.core.internal.events.BuildManager.build
(BuildManager.java:224)
	at org.eclipse.core.internal.resources.Workspace.build
(Workspace.java:176)
	at org.eclipse.ui.actions.GlobalBuildAction$1.run
(GlobalBuildAction.java:174)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run
(ModalContext.java:101)
I will investigate.
Might be a duplicate of bug 41231.


*** This bug has been marked as a duplicate of 41231 ***</WithStack>
    <WithOutStack>In I20030820 I got a NPE when doing a full rebuild.
As usual I can't reproduce it on a small scale, so I can make my workspace 
available.

Here is stack trace:

ENTRY org.eclipse.core.resources 4 2 Aug 21, 2003 13:37:40.703
!MESSAGE Problems occurred when invoking code from plug-
in: "org.eclipse.core.resources".
!STACK 0

I will investigate.
Might be a duplicate of bug 41231.


*** This bug has been marked as a duplicate of 41231 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41819" />
    <CreationDate amount="2003-08-21 13:49:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Ant" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Document the antRunner application entry point</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>This is a glaring ommition in our current doc.
Added under the Ant support concept in the workbench user guide.
Please verify Luc.
Verified.
Please update the build notes, Darin S.</WithStack>
    <WithOutStack>This is a glaring ommition in our current doc.
Added under the Ant support concept in the workbench user guide.
Please verify Luc.
Verified.
Please update the build notes, Darin S.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41820" />
    <CreationDate amount="2003-08-21 14:10:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>breakpoint on shutdown hook does not work</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="class">
        <location start="58" end="320" />
        <code>public class DebuggerTest {
	public static void shutdown () {
		System.out.println ("I'm melting!");
	}
	public static void main(String[] args) {
		Runtime.getRuntime().addShutdownHook (new Thread() {
		public void run() {
			DebuggerTest.shutdown();
		}});
	}
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="351" end="426" />
        <code>You are putting the breakpoint on the "System.out.println ("I'm melting!");</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Setting a breakpoint on method shutdown() has no effect.

public class DebuggerTest {
	public static void shutdown () {
		System.out.println ("I'm melting!");
	}
	public static void main(String[] args) {
		Runtime.getRuntime().addShutdownHook (new Thread() {
		public void run() {
			DebuggerTest.shutdown();
		}});
	}
}
I cannot reproduce.
Which VM?
You are putting the breakpoint on the "System.out.println ("I'm melting!");
" line?
I put breakpoints on the method itself and on the println.

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2-b28)
Java HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)

Yes I can reproduce on Sun 1.4.2.
On an IBM 1.3.1 VM the breakpoint is hit.
Luc can you take a look?
investigate/resolve for m4
There is no error in our side in this case, the breakpoint(s) is correctly set.

It looks like the Sun VMs don't stop on breakpoints during shutdown. It works
fine on IBM VMs.</WithStack>
    <WithOutStack>Setting a breakpoint on method shutdown() has no effect.

public class DebuggerTest {
	public static void shutdown () {
		System.out.println ("I'm melting!");
	}
	public static void main(String[] args) {
		Runtime.getRuntime().addShutdownHook (new Thread() {
		public void run() {
			DebuggerTest.shutdown();
		}});
	}
}
I cannot reproduce.
Which VM?
You are putting the breakpoint on the "System.out.println ("I'm melting!");
" line?
I put breakpoints on the method itself and on the println.

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2-b28)
Java HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)

Yes I can reproduce on Sun 1.4.2.
On an IBM 1.3.1 VM the breakpoint is hit.
Luc can you take a look?
investigate/resolve for m4
There is no error in our side in this case, the breakpoint(s) is correctly set.

It looks like the Sun VMs don't stop on breakpoints during shutdown. It works
fine on IBM VMs.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41821" />
    <CreationDate amount="2003-08-21 14:10:00 -0400" />
    <DupId amount="36479" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Refactoring - ClassCastException occurs when trying to move class to a different package</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="assignment">
        <location start="539" end="574" />
        <code>typeBinding = (TypeBinding)binding;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>See the attached log file.
Created attachment 5822
Log file with the exception stack traces (two attempts logged)
Could you please provide steps to reproduce?
Source of the class, package names (source and destination).
Thanks.
I can reproduce it in my current workspace (which I backed up for this purpose),
but cannot send you the code (which is proprietary). The exception occurs when
the "Move" refactoring is executed and causes it to fail. Running the same step
under debugger shows that in TypeReferencePattern:230, which contains

typeBinding = (TypeBinding)binding;

the real type of the "binding" object is ProblemBinding, not TypeBinding.

This seems to have something to do with the fact that my workspace contains
compilation errors. Anything else I can inspect for you to provide clues?
I think this is fixed in the 3.0 integration build.
It looks like a duplicate of bug 36479.
Correct, it's a duplicate. Fixing compilation errors made the exception go
away like in the other bug report, too.


*** This bug has been marked as a duplicate of 36479 ***</WithStack>
    <WithOutStack>See the attached log file.
Created attachment 5822
Log file with the exception stack traces (two attempts logged)
Could you please provide steps to reproduce?
Source of the class, package names (source and destination).
Thanks.
I can reproduce it in my current workspace (which I backed up for this purpose),
but cannot send you the code (which is proprietary). The exception occurs when
the "Move" refactoring is executed and causes it to fail. Running the same step
under debugger shows that in TypeReferencePattern:230, which contains

typeBinding = (TypeBinding)binding;

the real type of the "binding" object is ProblemBinding, not TypeBinding.

This seems to have something to do with the fact that my workspace contains
compilation errors. Anything else I can inspect for you to provide clues?
I think this is fixed in the 3.0 integration build.
It looks like a duplicate of bug 36479.
Correct, it's a duplicate. Fixing compilation errors made the exception go
away like in the other bug report, too.


*** This bug has been marked as a duplicate of 36479 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41822" />
    <CreationDate amount="2003-08-21 14:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="trivial" />
    <Summery>Title area dialog allows tab into title area</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Widget ordering when using the tab button to cycle between them is strange on
the Run/Debug dialog in the Main tab.
Can you define strange?
In the 3.0 stream, tabbing through the widgets goes in the order I would 
expect.
In 3.0M2 and 2.1.1, tabs go Name entry -&gt; Main tab -&gt; Stop In Main checkbox -&gt;
Project entry -&gt; Browse button -&gt; Include external checkbox -&gt; Main class entry
-&gt; Search button -&gt; Debug button -&gt; Close button -&gt; the top panel where you
can't do anything -&gt; etc.

This is with the GTK build on SuSE 8.2. 
This is a platform UI issue. I can reproduce the problem with a standard wizard 
(such as the "create java project" wizard). I can tab into the title area and 
see a cursor flashing.
This is by design for accessibility purposes. If you cannot tab then screen 
readers would not be able to get the information.</WithStack>
    <WithOutStack>Widget ordering when using the tab button to cycle between them is strange on
the Run/Debug dialog in the Main tab.
Can you define strange?
In the 3.0 stream, tabbing through the widgets goes in the order I would 
expect.
In 3.0M2 and 2.1.1, tabs go Name entry -&gt; Main tab -&gt; Stop In Main checkbox -&gt;
Project entry -&gt; Browse button -&gt; Include external checkbox -&gt; Main class entry
-&gt; Search button -&gt; Debug button -&gt; Close button -&gt; the top panel where you
can't do anything -&gt; etc.

This is with the GTK build on SuSE 8.2. 
This is a platform UI issue. I can reproduce the problem with a standard wizard 
(such as the "create java project" wizard). I can tab into the title area and 
see a cursor flashing.
This is by design for accessibility purposes. If you cannot tab then screen 
readers would not be able to get the information.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41823" />
    <CreationDate amount="2003-08-21 14:21:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Allow Externalize Strings action to update existing properties</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="3">
      <Enumeration lines="16">
        <Lines>
          <Line>- If the NLS is already marked as don't translate, we shouldnt mark it again as</Line>
          <Line>dont translate.</Line>
          <Line>- Doesn't "internalize"/remove NLS from properties file yet</Line>
          <Line>- Still just does a normal append to the properties file for new NLS instead of</Line>
          <Line>putting them in well-guessed location.</Line>
          <Line>- NLSRefacotring.compareResourceGetter may be bogusly parsing the method</Line>
          <Line>invocation string since it's looking for first instance of "("</Line>
          <Line>- Current strings which have been set don't add a //$NON-NLS-1$ to the .java</Line>
          <Line>file, since its assumed it exists. We may have to search through to see if it</Line>
          <Line>exists instead.</Line>
          <Line>- Checking for duplicate keys has been removed.</Line>
          <Line>- Coloring the background for TableItems in the tableviewer which are existing</Line>
          <Line>NLS is not implemented. A good suggestion on how to do something like this is</Line>
          <Line>needed.</Line>
          <Line>I'd suggest to not yet release this patch. There are some bugs that make the</Line>
          <Line>wiard hard to use:</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="6">
        <Lines>
          <Line>- I would leave a way the checkbox 'Display existing NLS'. All strings should be</Line>
          <Line>shown</Line>
          <Line>- We need a better visual indication of the 3 cases</Line>
          <Line>'translated', 'no-tanslation' 'new string'</Line>
          <Line>Maybe these cases should be separated in different tables or we go to a table tree.</Line>
          <Line>The current 3 images are not helpful</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="12">
        <Lines>
          <Line>- New problem on the refactoring screen with line delimeters in the properties</Line>
          <Line>file. The properties file that gets created with the new NLS looks ok, however</Line>
          <Line>the refactoring view with the change displays them all on a single line</Line>
          <Line>+ Fixes updating of the model when a new package or a new properties file is</Line>
          <Line>chosen. So if you browse to a new properties file, the existing NLS keys get</Line>
          <Line>updated; however any modifications made in the table to the key/value are lost</Line>
          <Line>at the update since the model is recreated.</Line>
          <Line>- The browse button at the top of the dialog for the import declaration is</Line>
          <Line>grabbing horizontally but it shouldn't be.</Line>
          <Line>- The dialog still may be too tall. Need suggestions on shrinking.</Line>
          <Line>Martin, I think this is fixed now, right?</Line>
          <Line>yes, new NLS wizard in M9</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Allow the Externalize Strings action to update properties from an existing 
properties file as well as maintain current behavior.
Created attachment 5824
proposed enhancements.

First shot at this. Please have a look.

Issues:
- If the NLS is already marked as don't translate, we shouldnt mark it again as
dont translate.
- Doesn't "internalize"/remove NLS from properties file yet
- Still just does a normal append to the properties file for new NLS instead of
putting them in well-guessed location.
- NLSRefacotring.compareResourceGetter may be bogusly parsing the method
invocation string since it's looking for first instance of "("
- Current strings which have been set don't add a //$NON-NLS-1$ to the .java
file, since its assumed it exists. We may have to search through to see if it
exists instead.
- Checking for duplicate keys has been removed.
- Coloring the background for TableItems in the tableviewer which are existing
NLS is not implemented. A good suggestion on how to do something like this is
needed.
I'd suggest to not yet release this patch. There are some bugs that make the
wiard hard to use:

- I would leave a way the checkbox 'Display existing NLS'. All strings should be
shown
- We need a better visual indication of the 3 cases
  'translated', 'no-tanslation' 'new string'
Maybe these cases should be separated in different tables or we go to a table tree.
The current 3 images are not helpful

- Change the value of a (already) translated string, (e.g. 'About' to 'About1'),
go to the preview page and look at the changes for the property file: The edit
description is: "add entry for xy". It should be 'change value for xy'

- There are unnecessary entries for non changed strings on the preview page

- The configuration controls for the package, property file name and Message
class should be before the strings table. This is because the table is dependend
on these settings. 


- Right, this is not ready for release, just needed some eyes on it to check 
progress. 

- I disagree with not having a way to remove strings already set. There could 
be 300 properties already in a properties file and only 2 in the file that 
haven't been set yet. Without the ability to filter the 300 from the 
properties file, the dialog will annoy those who just want to externalize 
strings and not work with existing ones.

- The wizard is already too cluttered. In fact, its too tall to fit on a 
screen smaller than about 800 pixels. We need to remove the visual markers to 
reclaim some space in the wizard. I tried a combo in the table and I really 
didn't like the way it looked. Having a table for each case will just add 
space to the dialog. If we use a TableTreeViewer instead, I'm not sure that 
gives us anything different from what we already have. We still need a 
mechanism for choosing the functionality desired of the wizard for a given 
string.

- The entries for the unchanged strings exist b/c they are currently being 
overwritten to be the same exact thing. The compare viewer finds no difference 
b/t them however. Will fix this.
*** Bug 41847 has been marked as a duplicate of this bug. ***
Created attachment 5831
proposed enhancements.

New patch showing progress, probably not ready for release. Please comment:

+ Addresses bug 41847: removing code templates from method bodies and setting
up a default javadoc comment.
+ colors backgrouns in table for table items already existing in a properties
file.
+ moves widgets for code pattern and new class creation to the top of the
wizard page.
+ removes addition of phantom code changes for refactoring
+ changes multiple label descriptions in the wizard and the refactoring
- editor does not update properly after completing refactoring. I get red
underlines on failure to resolve newly created Messages class.
Created attachment 5847
proposed enhancements.

- New problem on the refactoring screen with line delimeters in the properties
file. The properties file that gets created with the new NLS looks ok, however
the refactoring view with the change displays them all on a single line
+ Fixes updating of the model when a new package or a new properties file is
chosen. So if you browse to a new properties file, the existing NLS keys get
updated; however any modifications made in the table to the key/value are lost
at the update since the model is recreated.
- The browse button at the top of the dialog for the import declaration is
grabbing horizontally but it shouldn't be.
- The dialog still may be too tall. Need suggestions on shrinking.
Martin, I think this is fixed now, right?
yes, new NLS wizard in M9</WithStack>
    <WithOutStack>Allow the Externalize Strings action to update properties from an existing 
properties file as well as maintain current behavior.
Created attachment 5824
proposed enhancements.

First shot at this. Please have a look.

Issues:
- If the NLS is already marked as don't translate, we shouldnt mark it again as
dont translate.
- Doesn't "internalize"/remove NLS from properties file yet
- Still just does a normal append to the properties file for new NLS instead of
putting them in well-guessed location.
- NLSRefacotring.compareResourceGetter may be bogusly parsing the method
invocation string since it's looking for first instance of "("
- Current strings which have been set don't add a //$NON-NLS-1$ to the .java
file, since its assumed it exists. We may have to search through to see if it
exists instead.
- Checking for duplicate keys has been removed.
- Coloring the background for TableItems in the tableviewer which are existing
NLS is not implemented. A good suggestion on how to do something like this is
needed.
I'd suggest to not yet release this patch. There are some bugs that make the
wiard hard to use:

- I would leave a way the checkbox 'Display existing NLS'. All strings should be
shown
- We need a better visual indication of the 3 cases
  'translated', 'no-tanslation' 'new string'
Maybe these cases should be separated in different tables or we go to a table tree.
The current 3 images are not helpful

- Change the value of a (already) translated string, (e.g. 'About' to 'About1'),
go to the preview page and look at the changes for the property file: The edit
description is: "add entry for xy". It should be 'change value for xy'

- There are unnecessary entries for non changed strings on the preview page

- The configuration controls for the package, property file name and Message
class should be before the strings table. This is because the table is dependend
on these settings. 


- Right, this is not ready for release, just needed some eyes on it to check 
progress. 

- I disagree with not having a way to remove strings already set. There could 
be 300 properties already in a properties file and only 2 in the file that 
haven't been set yet. Without the ability to filter the 300 from the 
properties file, the dialog will annoy those who just want to externalize 
strings and not work with existing ones.

- The wizard is already too cluttered. In fact, its too tall to fit on a 
screen smaller than about 800 pixels. We need to remove the visual markers to 
reclaim some space in the wizard. I tried a combo in the table and I really 
didn't like the way it looked. Having a table for each case will just add 
space to the dialog. If we use a TableTreeViewer instead, I'm not sure that 
gives us anything different from what we already have. We still need a 
mechanism for choosing the functionality desired of the wizard for a given 
string.

- The entries for the unchanged strings exist b/c they are currently being 
overwritten to be the same exact thing. The compare viewer finds no difference 
b/t them however. Will fix this.
*** Bug 41847 has been marked as a duplicate of this bug. ***
Created attachment 5831
proposed enhancements.

New patch showing progress, probably not ready for release. Please comment:

+ Addresses bug 41847: removing code templates from method bodies and setting
up a default javadoc comment.
+ colors backgrouns in table for table items already existing in a properties
file.
+ moves widgets for code pattern and new class creation to the top of the
wizard page.
+ removes addition of phantom code changes for refactoring
+ changes multiple label descriptions in the wizard and the refactoring
- editor does not update properly after completing refactoring. I get red
underlines on failure to resolve newly created Messages class.
Created attachment 5847
proposed enhancements.

- New problem on the refactoring screen with line delimeters in the properties
file. The properties file that gets created with the new NLS looks ok, however
the refactoring view with the change displays them all on a single line
+ Fixes updating of the model when a new package or a new properties file is
chosen. So if you browse to a new properties file, the existing NLS keys get
updated; however any modifications made in the table to the key/value are lost
at the update since the model is recreated.
- The browse button at the top of the dialog for the import declaration is
grabbing horizontally but it shouldn't be.
- The dialog still may be too tall. Need suggestions on shrinking.
Martin, I think this is fixed now, right?
yes, new NLS wizard in M9</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41824" />
    <CreationDate amount="2003-08-21 14:23:00 -0400" />
    <DupId amount="41798" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>New JUnit Plugin test is not working when class doesn't extends junit.framework.TestCase</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Using 0820, I was not able to set a new launching configuration for the class
AllAllTests in the jdt/ui refactoring tests. Even if the class name was ok, I
got an error message saying that the class was an invalid test suite.
Changing the superclass to junit.framework.TestCase fixed the error.
According to Adam, this is a bug in the JUnit Plugin Test runner.
As a workaround, it will work when using the Run&gt;Run as Junit plug-in test 
shortcut.

*** This bug has been marked as a duplicate of 41798 ***</WithStack>
    <WithOutStack>Using 0820, I was not able to set a new launching configuration for the class
AllAllTests in the jdt/ui refactoring tests. Even if the class name was ok, I
got an error message saying that the class was an invalid test suite.
Changing the superclass to junit.framework.TestCase fixed the error.
According to Adam, this is a bug in the JUnit Plugin Test runner.
As a workaround, it will work when using the Run&gt;Run as Junit plug-in test 
shortcut.

*** This bug has been marked as a duplicate of 41798 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41825" />
    <CreationDate amount="2003-08-21 14:33:00 -0400" />
    <DupId amount="39080" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Text" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[key binding] keyboard mapping fails for certain emacs key combinations</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>The editor can not distinguish between Alt+Backspace and Backspace, so whatever
Alt+Backspace is mapped to, Backspace does.  

Ctrl+Shift+- never does anything, although Ctrl+Shift+B works properly when
assigned to something.  

This is using Emacs mode.

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2-b28)
Java HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)
I assume this is caused by the same problem which causes bug 39080.
Please reopen this one if the fix for 39080 does not fix your problem.

*** This bug has been marked as a duplicate of 39080 ***</WithStack>
    <WithOutStack>The editor can not distinguish between Alt+Backspace and Backspace, so whatever
Alt+Backspace is mapped to, Backspace does.  

Ctrl+Shift+- never does anything, although Ctrl+Shift+B works properly when
assigned to something.  

This is using Emacs mode.

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2-b28)
Java HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)
I assume this is caused by the same problem which causes bug 39080.
Please reopen this one if the fix for 39080 does not fix your problem.

*** This bug has been marked as a duplicate of 39080 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41826" />
    <CreationDate amount="2003-08-21 14:38:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-core" />
    <Version amount="1.2" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="critical" />
    <Summery>Incremental builds for managed projects must be implemented</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="5">
        <Lines>
          <Line>1)Updating project properties doesn't modify makefile (rebuild after removing a</Line>
          <Line>library).</Line>
          <Line>2)Renaming the project.</Line>
          <Line>3)Modifying a .h file in the same project.</Line>
          <Line>4)Removing the executable.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="6">
        <Lines>
          <Line>1)Changing the project's build properties.</Line>
          <Line>2)Touching a file in a referenced project.</Line>
          <Line>3)Renaming the project in the explorer/project view.</Line>
          <Line>4)Modifying a .h file.</Line>
          <Line>5)Modifying a source file in the project.</Line>
          <Line>6)Removing the executable or any other generated files.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Used Linux, CDT 1.2.0.24, GNU Make version 3.79.1, managed make c executable 
project.

When calling make from commandline module.mk doesn't contain main.c in C_SRCS 
because main.c wasn't modified. So the linker line in the makefile didn't link 
in main.o:

cexe: $(CC_SRCS:$(ROOT)/%.cpp=%.o) $(C_SRCS:$(ROOT)/%.c=%.o)
	g++ -L/home/twolff/cdt/linux/workspaces/ws2/cproj/Release -o $@ $^

The translation that appeared in the command line is
g++ -L/home/twolff/cdt/linux/workspaces/ws2/cproj/Release -lcproj -o 
cexe ../main.c

../main.c should be main.o
*** Bug 41274 has been marked as a duplicate of this bug. ***
The original description looks like it should have been added to 42638.

For the incremental build task:
there are 4 cases to consider in resolving this defect:

1)Updating project properties doesn't modify makefile (rebuild after removing a 
library).
2)Renaming the project.
3)Modifying a .h file in the same project.
4)Removing the executable.

In build 56: 1 is fixed, 2 is partially there (executable name doesn't change), 
3 and 4 still remain unimplemented.
A related (but different) defect is captured in 41275:
Changes in .h or .cpp of referenced managed project "B" doesn't flag the 
dependent managed project "A" for rebuilding, when doing an incremental build 
on A. 
There are several use cases I have tried to implement for incremental builds.
The list below describes the various cases:

1)Changing the project's build properties.
2)Touching a file in a referenced project.
3)Renaming the project in the explorer/project view.
4)Modifying a .h file.
5)Modifying a source file in the project.
6)Removing the executable or any other generated files.

Case 1 is implemented.
Case 2 is implemented.
Case 3 is no longer relevant because I have decoupled the name of the build
target from the name of the project, and I have made it possible for the user to
change the target name through the build properties.
Case 4 is pending.
Case 5 is finished.
Case 6 is pending.


Finished the last major use case. There seems to be a problem in dependant
projects when a header is moved. It's almost as if the dependency calculator has
lost track of the file.
Verified most but #2... touching a file in a referenced project. If A depends 
on B and B is a standard project, an incremental build of A goes and rebuilds 
B, but doesn't link. When you run A, the changes from B aren't picked up. 

#3 renaming a project, Mathieu created defect 44159 where the configurations 
are gone.

So once #2-standard dependency is resolved, this defect be verified.
The referenced project problem is not critical but should be looked at for 2.0. 
Incremental build has been implemented, so verifying this defect and opening 
one for referenced standard project.</WithStack>
    <WithOutStack>Used Linux, CDT 1.2.0.24, GNU Make version 3.79.1, managed make c executable 
project.

When calling make from commandline module.mk doesn't contain main.c in C_SRCS 
because main.c wasn't modified. So the linker line in the makefile didn't link 
in main.o:

cexe: $(CC_SRCS:$(ROOT)/%.cpp=%.o) $(C_SRCS:$(ROOT)/%.c=%.o)
	g++ -L/home/twolff/cdt/linux/workspaces/ws2/cproj/Release -o $@ $^

The translation that appeared in the command line is
g++ -L/home/twolff/cdt/linux/workspaces/ws2/cproj/Release -lcproj -o 
cexe ../main.c

../main.c should be main.o
*** Bug 41274 has been marked as a duplicate of this bug. ***
The original description looks like it should have been added to 42638.

For the incremental build task:
there are 4 cases to consider in resolving this defect:

1)Updating project properties doesn't modify makefile (rebuild after removing a 
library).
2)Renaming the project.
3)Modifying a .h file in the same project.
4)Removing the executable.

In build 56: 1 is fixed, 2 is partially there (executable name doesn't change), 
3 and 4 still remain unimplemented.
A related (but different) defect is captured in 41275:
Changes in .h or .cpp of referenced managed project "B" doesn't flag the 
dependent managed project "A" for rebuilding, when doing an incremental build 
on A. 
There are several use cases I have tried to implement for incremental builds.
The list below describes the various cases:

1)Changing the project's build properties.
2)Touching a file in a referenced project.
3)Renaming the project in the explorer/project view.
4)Modifying a .h file.
5)Modifying a source file in the project.
6)Removing the executable or any other generated files.

Case 1 is implemented.
Case 2 is implemented.
Case 3 is no longer relevant because I have decoupled the name of the build
target from the name of the project, and I have made it possible for the user to
change the target name through the build properties.
Case 4 is pending.
Case 5 is finished.
Case 6 is pending.


Finished the last major use case. There seems to be a problem in dependant
projects when a header is moved. It's almost as if the dependency calculator has
lost track of the file.
Verified most but #2... touching a file in a referenced project. If A depends 
on B and B is a standard project, an incremental build of A goes and rebuilds 
B, but doesn't link. When you run A, the changes from B aren't picked up. 

#3 renaming a project, Mathieu created defect 44159 where the configurations 
are gone.

So once #2-standard dependency is resolved, this defect be verified.
The referenced project problem is not critical but should be looked at for 2.0. 
Incremental build has been implemented, so verifying this defect and opening 
one for referenced standard project.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41827" />
    <CreationDate amount="2003-08-21 15:11:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux-Motif" />
    <priority amount="P3" />
    <bug_severity amount="critical" />
    <Summery>linux SWT Combo doesn't show first entry</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>A Combo box with values for index 0, 1, 2 is initially displayed blank on 
Motif and Linux (Redhat 8).

If a user selects an item e.g. 0 then it is shown.

On Windows, the Combo shows the value for index 0 if this is selected, but on 
Linux the combo is blank until the user manually selects one of the entries.

This causes a problem for our customers because they don't realise there are
values.

The eclipse corner example for a Combo is sufficient to show the problem.
This is platform behaviour, gtk also behaves like motif; win32 gives a free 
initial selection by choice.  If you want to ensure that item 0 is initially 
selected on all platforms then you need a combo.select(0).</WithStack>
    <WithOutStack>A Combo box with values for index 0, 1, 2 is initially displayed blank on 
Motif and Linux (Redhat 8).

If a user selects an item e.g. 0 then it is shown.

On Windows, the Combo shows the value for index 0 if this is selected, but on 
Linux the combo is blank until the user manually selects one of the entries.

This causes a problem for our customers because they don't realise there are
values.

The eclipse corner example for a Combo is sufficient to show the problem.
This is platform behaviour, gtk also behaves like motif; win32 gives a free 
initial selection by choice.  If you want to ensure that item 0 is initially 
selected on all platforms then you need a combo.select(0).</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41828" />
    <CreationDate amount="2003-08-21 15:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Search dialog needs usability improvements</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1- The buttons are not in proper order, and</Line>
          <Line>2- The word "Type" is not C/C++ oriented and might be confusing to users who</Line>
          <Line>did not see Java before.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The current search dialog needs some usability improvements. The problem as I 
see it is :
1- The buttons are not in proper order, and 
2- The word "Type" is not C/C++ oriented and might be confusing to users who 
did not see Java before.

The current order for the buttons are:
Type,     Namespace,  Method,
Function, Field,      Variable

The order suggested is:
Class,   Method,    Field
Struct,  Function,  Variable,
Union,   Namespace, Enum,

Note that you could relate elements both horizontally and vertically.
The space for nine buttons is not a big deal since the Java search dialog 
already has the space for 9 buttons.
I think this can be closed - Andrew did some UI changes that addressed this. 
Forwarding to Monsieur Niefer...
This has been fixed for a while, if there are more complaints, see bug 
42834 "Enumerator is not a field".</WithStack>
    <WithOutStack>The current search dialog needs some usability improvements. The problem as I 
see it is :
1- The buttons are not in proper order, and 
2- The word "Type" is not C/C++ oriented and might be confusing to users who 
did not see Java before.

The current order for the buttons are:
Type,     Namespace,  Method,
Function, Field,      Variable

The order suggested is:
Class,   Method,    Field
Struct,  Function,  Variable,
Union,   Namespace, Enum,

Note that you could relate elements both horizontally and vertically.
The space for nine buttons is not a big deal since the Java search dialog 
already has the space for 9 buttons.
I think this can be closed - Andrew did some UI changes that addressed this. 
Forwarding to Monsieur Niefer...
This has been fixed for a while, if there are more complaints, see bug 
42834 "Enumerator is not a field".</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41829" />
    <CreationDate amount="2003-08-21 15:22:00 -0400" />
    <DupId amount="39976" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="Build" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="critical" />
    <Summery>NullPointerException in AbstractBuildScriptGenerator</Summery>
    <Patches amount="0" />
    <Stacktraces amount="2">
      <Stacktrace timestamp="1437340867077">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.pde.internal.build.AbstractBuildScriptGenerator.setFragments(AbstractBuildScriptGenerator.java:789)</Frame>
          <Frame depth="1">org.eclipse.pde.internal.build.AbstractBuildScriptGenerator.getRegistry(AbstractBuildScriptGenerator.java:776)</Frame>
          <Frame depth="2">org.eclipse.pde.internal.build.FeatureBuildScriptGenerator.computeElements(FeatureBuildScriptGenerator.java:73)</Frame>
          <Frame depth="3">org.eclipse.pde.internal.build.FeatureBuildScriptGenerator.generateChildrenScripts(FeatureBuildScriptGenerator.java:435)</Frame>
          <Frame depth="4">org.eclipse.pde.internal.build.FeatureBuildScriptGenerator.generate(FeatureBuildScriptGenerator.java:127)</Frame>
          <Frame depth="5">org.eclipse.pde.internal.ui.feature.BuildFeatureAction.makeScripts(BuildFeatureAction.java:207)</Frame>
          <Frame depth="6">org.eclipse.pde.internal.ui.feature.BuildFeatureAction.doBuildFeature(BuildFeatureAction.java:140)</Frame>
          <Frame depth="7">org.eclipse.pde.internal.ui.feature.BuildFeatureAction.access$0(BuildFeatureAction.java:129)</Frame>
          <Frame depth="8">org.eclipse.pde.internal.ui.feature.BuildFeatureAction$2.run(BuildFeatureAction.java:58)</Frame>
          <Frame depth="9">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1595)</Frame>
          <Frame depth="10">org.eclipse.pde.internal.ui.feature.BuildFeatureAction$1.run(BuildFeatureAction.java:65)</Frame>
          <Frame depth="11">org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)</Frame>
          <Frame depth="12">org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)</Frame>
          <Frame depth="13">org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:357)</Frame>
          <Frame depth="14">org.eclipse.pde.internal.ui.feature.BuildFeatureAction.run(BuildFeatureAction.java:75)</Frame>
          <Frame depth="15">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:251)</Frame>
          <Frame depth="16">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:456)</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:403)</Frame>
          <Frame depth="18">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:397)</Frame>
          <Frame depth="19">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:72)</Frame>
          <Frame depth="20">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)</Frame>
          <Frame depth="22">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1838)</Frame>
          <Frame depth="23">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1545)</Frame>
          <Frame depth="24">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)</Frame>
          <Frame depth="25">org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)</Frame>
          <Frame depth="26">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)</Frame>
          <Frame depth="27">org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)</Frame>
          <Frame depth="28">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</Frame>
          <Frame depth="29">sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</Frame>
          <Frame depth="30">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</Frame>
          <Frame depth="31">java.lang.reflect.Method.invoke(Method.java:324)</Frame>
          <Frame depth="32">org.eclipse.core.launcher.Main.basicRun(Main.java:291)</Frame>
          <Frame depth="33">org.eclipse.core.launcher.Main.run(Main.java:747)</Frame>
          <Frame depth="34">org.eclipse.core.launcher.Main.main(Main.java:583)</Frame>
        </Frames>
      </Stacktrace>
      <Stacktrace timestamp="1437340867077">
        <Exception>java.lang.ArrayIndexOutOfBoundsException</Exception>
        <Reason>2</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.pde.internal.build.Config.&lt;init&gt;(Config.java:29)</Frame>
          <Frame depth="1">org.eclipse.pde.internal.build.Config.&lt;init&gt;(Config.java:33)</Frame>
          <Frame depth="2">org.eclipse.pde.internal.build.AbstractScriptGenerator.setConfigInfo(AbstractScriptGenerator.java:73)</Frame>
          <Frame depth="3">org.eclipse.pde.internal.ui.feature.BuildFeatureAction.setConfigInfo(BuildFeatureAction.java:74)</Frame>
          <Frame depth="4">org.eclipse.pde.internal.ui.feature.BuildFeatureAction.makeScripts(BuildFeatureAction.java:59)</Frame>
          <Frame depth="5">org.eclipse.pde.internal.ui.feature.BaseBuildAction.doBuild(BaseBuildAction.java:80)</Frame>
          <Frame depth="6">org.eclipse.pde.internal.ui.feature.BaseBuildAction.access$0(BaseBuildAction.java:71)</Frame>
          <Frame depth="7">org.eclipse.pde.internal.ui.feature.BaseBuildAction$2.run(BaseBuildAction.java:37)</Frame>
          <Frame depth="8">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1555)</Frame>
          <Frame depth="9">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1574)</Frame>
          <Frame depth="10">org.eclipse.pde.internal.ui.feature.BaseBuildAction$1.run(BaseBuildAction.java:44)</Frame>
          <Frame depth="11">org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)</Frame>
          <Frame depth="12">org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)</Frame>
          <Frame depth="13">org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:394)</Frame>
          <Frame depth="14">org.eclipse.pde.internal.ui.feature.BaseBuildAction.run(BaseBuildAction.java:53)</Frame>
          <Frame depth="15">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:271)</Frame>
          <Frame depth="16">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:509)</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:461)</Frame>
          <Frame depth="18">org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:408)</Frame>
          <Frame depth="19">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)</Frame>
          <Frame depth="20">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)</Frame>
          <Frame depth="22">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)</Frame>
          <Frame depth="23">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)</Frame>
          <Frame depth="24">org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)</Frame>
          <Frame depth="25">org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)</Frame>
          <Frame depth="26">org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)</Frame>
          <Frame depth="27">org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)</Frame>
          <Frame depth="28">org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)</Frame>
          <Frame depth="29">org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:85)</Frame>
          <Frame depth="30">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</Frame>
          <Frame depth="31">sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</Frame>
          <Frame depth="32">sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</Frame>
          <Frame depth="33">java.lang.reflect.Method.invoke(Unknown Source)</Frame>
          <Frame depth="34">org.eclipse.core.launcher.Main.basicRun(Main.java:279)</Frame>
          <Frame depth="35">org.eclipse.core.launcher.Main.run(Main.java:742)</Frame>
          <Frame depth="36">org.eclipse.core.launcher.Main.main(Main.java:581)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="1242" end="2002" />
        <code>private void setFragments() {
	PluginFragmentModel[] fragments = registry.getFragments();
	for (int i = 0; i &lt; fragments.length; i++) {
		String pluginId = fragments[i].getPluginId();
		PluginDescriptorModel plugin = registry.getPlugin(pluginId);
===&gt;if plugin is null, the next statement fails.
		PluginFragmentModel[] existingFragments = plugin.getFragments();
		if (existingFragments == null)
			plugin.setFragments(new PluginFragmentModel[] { 
fragments[i] });
		else {
			PluginFragmentModel[] newFragments = new 
PluginFragmentModel[existingFragments.length + 1];
			System.arraycopy(existingFragments, 0, newFragments, 0, 
existingFragments.length);
			newFragments[newFragments.length - 1] = fragments[i];
			plugin.setFragments(newFragments);
		}
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I get the following null pointer exception when trying to create the build.xml 
script for a feature.

java.lang.NullPointerException
at org.eclipse.pde.internal.build.AbstractBuildScriptGenerator.setFragments
(AbstractBuildScriptGenerator.java:789)
at org.eclipse.pde.internal.build.AbstractBuildScriptGenerator.getRegistry
(AbstractBuildScriptGenerator.java:776)
at org.eclipse.pde.internal.build.FeatureBuildScriptGenerator.computeElements
(FeatureBuildScriptGenerator.java:73)
at 
org.eclipse.pde.internal.build.FeatureBuildScriptGenerator.generateChildrenScrip
ts(FeatureBuildScriptGenerator.java:435)
at org.eclipse.pde.internal.build.FeatureBuildScriptGenerator.generate
(FeatureBuildScriptGenerator.java:127)
at org.eclipse.pde.internal.ui.feature.BuildFeatureAction.makeScripts
(BuildFeatureAction.java:207)
at org.eclipse.pde.internal.ui.feature.BuildFeatureAction.doBuildFeature
(BuildFeatureAction.java:140)
at org.eclipse.pde.internal.ui.feature.BuildFeatureAction.access$0
(BuildFeatureAction.java:129)
at org.eclipse.pde.internal.ui.feature.BuildFeatureAction$2.run
(BuildFeatureAction.java:58)
at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1595)
at org.eclipse.pde.internal.ui.feature.BuildFeatureAction$1.run
(BuildFeatureAction.java:65)
at org.eclipse.jface.operation.ModalContext.runInCurrentThread
(ModalContext.java:302)
at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)
at org.eclipse.jface.dialogs.ProgressMonitorDialog.run
(ProgressMonitorDialog.java:357)
at org.eclipse.pde.internal.ui.feature.BuildFeatureAction.run
(BuildFeatureAction.java:75)
at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:251)
at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:456)
at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:403)
at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:397)
at org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:72)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1838)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1545)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)
at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)
at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:858)
at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:324)
at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
at org.eclipse.core.launcher.Main.run(Main.java:747)
at org.eclipse.core.launcher.Main.main(Main.java:583)
Could you please provide a test case and indicate which build you are using.

Created attachment 5823
Feature creation null pointer exception

This zip file contains a pde project, a feature project, and a file containing
the contents of my configuration.  This file also contains the stack trace for
the exception.	The null pointer exception was created on the feature, by
right-clicking on the feature.xml and executing the create Ant Build File menu
option.
Using the latest integration build (I20030820) I did not reproduce the bug.
Please re-open if it still occurs.
This bug is caused by an error in the target environment plugins.  In this case 
I am referencing IBM's WDSc 5.0 as the target environment.  In that 
environment, one of the plugin fragments has an error in the plugin id that it 
references, so that there is no valid plugin that corresponds to the id.

When you launch a runtime workbench in debug mode, this fragment is detected 
and ignored after reporting the error.

However the build script generator does not ignore the problem.  The following 
is a snippet from the 2.1.1 code base where the problem occurs.

private void setFragments() {
	PluginFragmentModel[] fragments = registry.getFragments();
	for (int i = 0; i &lt; fragments.length; i++) {
		String pluginId = fragments[i].getPluginId();
		PluginDescriptorModel plugin = registry.getPlugin(pluginId);
===&gt;if plugin is null, the next statement fails.
		PluginFragmentModel[] existingFragments = plugin.getFragments();
		if (existingFragments == null)
			plugin.setFragments(new PluginFragmentModel[] { 
fragments[i] });
		else {
			PluginFragmentModel[] newFragments = new 
PluginFragmentModel[existingFragments.length + 1];
			System.arraycopy(existingFragments, 0, newFragments, 0, 
existingFragments.length);
			newFragments[newFragments.length - 1] = fragments[i];
			plugin.setFragments(newFragments);
		}
	}
}

I inserted a comment into the code to highlight where and why the null pointer 
exists.  I have not however examined the latest build code to see if this 
problem has been fixed.
Error Jan 14, 2004 03:44:31.239 2
java.lang.ArrayIndexOutOfBoundsException: 2
	at org.eclipse.pde.internal.build.Config.&lt;init&gt;(Config.java:29)
	at org.eclipse.pde.internal.build.Config.&lt;init&gt;(Config.java:33)
	at
org.eclipse.pde.internal.build.AbstractScriptGenerator.setConfigInfo(AbstractScriptGenerator.java:73)
	at
org.eclipse.pde.internal.ui.feature.BuildFeatureAction.setConfigInfo(BuildFeatureAction.java:74)
	at
org.eclipse.pde.internal.ui.feature.BuildFeatureAction.makeScripts(BuildFeatureAction.java:59)
	at
org.eclipse.pde.internal.ui.feature.BaseBuildAction.doBuild(BaseBuildAction.java:80)
	at
org.eclipse.pde.internal.ui.feature.BaseBuildAction.access$0(BaseBuildAction.java:71)
	at
org.eclipse.pde.internal.ui.feature.BaseBuildAction$2.run(BaseBuildAction.java:37)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1555)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1574)
	at
org.eclipse.pde.internal.ui.feature.BaseBuildAction$1.run(BaseBuildAction.java:44)
	at
org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)
	at
org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:394)
	at org.eclipse.pde.internal.ui.feature.BaseBuildAction.run(BaseBuildAction.java:53)
	at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:271)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:509)
	at
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:461)
	at
org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:408)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2311)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1992)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1506)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1482)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:246)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:139)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:47)
	at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:279)
	at org.eclipse.core.launcher.Main.run(Main.java:742)
	at org.eclipse.core.launcher.Main.main(Main.java:581)

Eclipse 3M6
Duplicate of bug 39976.
Jarkko please open an other bug with more details since the stack trace you
provide does not show the same problem.

*** This bug has been marked as a duplicate of 39976 ***</WithStack>
    <WithOutStack>I get the following null pointer exception when trying to create the build.xml 
script for a feature.

Could you please provide a test case and indicate which build you are using.

Created attachment 5823
Feature creation null pointer exception

This zip file contains a pde project, a feature project, and a file containing
the contents of my configuration.  This file also contains the stack trace for
the exception.	The null pointer exception was created on the feature, by
right-clicking on the feature.xml and executing the create Ant Build File menu
option.
Using the latest integration build (I20030820) I did not reproduce the bug.
Please re-open if it still occurs.
This bug is caused by an error in the target environment plugins.  In this case 
I am referencing IBM's WDSc 5.0 as the target environment.  In that 
environment, one of the plugin fragments has an error in the plugin id that it 
references, so that there is no valid plugin that corresponds to the id.

When you launch a runtime workbench in debug mode, this fragment is detected 
and ignored after reporting the error.

However the build script generator does not ignore the problem.  The following 
is a snippet from the 2.1.1 code base where the problem occurs.

private void setFragments() {
	PluginFragmentModel[] fragments = registry.getFragments();
	for (int i = 0; i &lt; fragments.length; i++) {
		String pluginId = fragments[i].getPluginId();
		PluginDescriptorModel plugin = registry.getPlugin(pluginId);
===&gt;if plugin is null, the next statement fails.
		PluginFragmentModel[] existingFragments = plugin.getFragments();
		if (existingFragments == null)
			plugin.setFragments(new PluginFragmentModel[] { 
fragments[i] });
		else {
			PluginFragmentModel[] newFragments = new 
PluginFragmentModel[existingFragments.length + 1];
			System.arraycopy(existingFragments, 0, newFragments, 0, 
existingFragments.length);
			newFragments[newFragments.length - 1] = fragments[i];
			plugin.setFragments(newFragments);
		}
	}
}

I inserted a comment into the code to highlight where and why the null pointer 
exists.  I have not however examined the latest build code to see if this 
problem has been fixed.
Error Jan 14, 2004 03:44:31.239 2


Eclipse 3M6
Duplicate of bug 39976.
Jarkko please open an other bug with more details since the stack trace you
provide does not show the same problem.

*** This bug has been marked as a duplicate of 39976 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41830" />
    <CreationDate amount="2003-08-21 15:33:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[misc] Out of memory opening large files or copying lots of text</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. try with 1.4.1 - we had problems with 1.4.2 (on both sides VM and Eclipse -</Line>
          <Line>the known Eclipse ones being fixed in latest I-build)</Line>
          <Line>2. run Eclipse from the console and hit Ctrl+Break to see where time is spent</Line>
          <Line>while consuming the memory</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>I have a Java program that outputs 19MB of XML to stdout. When I ran this 
under Eclipse, all the output made it to the console window (eventually) but 
when I selected the text and pressed control-C, Eclipse got an out of memory 
error. I restarted Eclipse, ran the command outside of Eclipse, redirected the 
output to a file in the workspace, and tried editing the file in Eclipse using 
either the plain text editor or the XMLBuddy editor. Either way, it got an out 
of memory error and suggested I close the workbench. I had to use a native 
Windows text editor to view the file.

I increased the JVM memory size (-XmxNNNm) to 256MB but it still ran out of 
memory. Before trying to open the text file, Windows task manager said the 
Eclipse jvm was consuming only about 30-40MB. I'm using Sun's JDK 1.4.2.
Which build?

Could you try the following for us:

1. try with 1.4.1 - we had problems with 1.4.2 (on both sides VM and Eclipse -
the known Eclipse ones being fixed in latest I-build)
2. run Eclipse from the console and hit Ctrl+Break to see where time is spent
while consuming the memory

Thanks.

Please reopen if you still see this using I20405131600 or newer</WithStack>
    <WithOutStack>I have a Java program that outputs 19MB of XML to stdout. When I ran this 
under Eclipse, all the output made it to the console window (eventually) but 
when I selected the text and pressed control-C, Eclipse got an out of memory 
error. I restarted Eclipse, ran the command outside of Eclipse, redirected the 
output to a file in the workspace, and tried editing the file in Eclipse using 
either the plain text editor or the XMLBuddy editor. Either way, it got an out 
of memory error and suggested I close the workbench. I had to use a native 
Windows text editor to view the file.

I increased the JVM memory size (-XmxNNNm) to 256MB but it still ran out of 
memory. Before trying to open the text file, Windows task manager said the 
Eclipse jvm was consuming only about 30-40MB. I'm using Sun's JDK 1.4.2.
Which build?

Could you try the following for us:

1. try with 1.4.1 - we had problems with 1.4.2 (on both sides VM and Eclipse -
the known Eclipse ones being fixed in latest I-build)
2. run Eclipse from the console and hit Ctrl+Break to see where time is spent
while consuming the memory

Thanks.

Please reopen if you still see this using I20405131600 or newer</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41831" />
    <CreationDate amount="2003-08-21 15:45:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse Foundation" />
    <Product amount="z_Archived" />
    <component amount="Hyades" />
    <Version amount="unspecified" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Profiling and Logging perspective APIs are internal</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="INVALID" />
    <WithStack>I am using the extension point org.eclipse.hyades.ui.analyzerExtensions to plug 
a view into the "Open with" option in Profiling and Logging perspective.  I can 
successfully add the view into that menu.  The problem I encounted was when I 
tried to programmatically obtain the MOF object from the Profiling Monitor 
view, I don't know which API to use, and everything that look useful (such as 
the PDProject* classes and such) are internal.
This is a UI bug
Terry, is this still valid?
org.eclipse.hyades.trace.ui.HyadesUtil.getMofObject() return the MOF object 
selected in profiling monitor view, which serve what you need.
Please reopen defect if the method does not provide the infomation you need.
As of TPTP 4.6.0, TPTP is in maintenance mode and focusing on improving quality by resolving relevant enhancements/defects and increasing test coverage through test creation, automation, Build Verification Tests (BVTs), and expanded run-time execution. As part of the TPTP Bugzilla housecleaning process (see http://wiki.eclipse.org/Bugzilla_Housecleaning_Processes), this enhancement/defect is verified/closed by the Project Lead since this enhancement/defect has been resolved and unverified for more than 1 year and considered to be fixed. If this enhancement/defect is still unresolved and reproducible in the latest TPTP release (http://www.eclipse.org/tptp/home/downloads/), please re-open.</WithStack>
    <WithOutStack>I am using the extension point org.eclipse.hyades.ui.analyzerExtensions to plug 
a view into the "Open with" option in Profiling and Logging perspective.  I can 
successfully add the view into that menu.  The problem I encounted was when I 
tried to programmatically obtain the MOF object from the Profiling Monitor 
view, I don't know which API to use, and everything that look useful (such as 
the PDProject* classes and such) are internal.
This is a UI bug
Terry, is this still valid?
org.eclipse.hyades.trace.ui.HyadesUtil.getMofObject() return the MOF object 
selected in profiling monitor view, which serve what you need.
Please reopen defect if the method does not provide the infomation you need.
As of TPTP 4.6.0, TPTP is in maintenance mode and focusing on improving quality by resolving relevant enhancements/defects and increasing test coverage through test creation, automation, Build Verification Tests (BVTs), and expanded run-time execution. As part of the TPTP Bugzilla housecleaning process (see http://wiki.eclipse.org/Bugzilla_Housecleaning_Processes), this enhancement/defect is verified/closed by the Project Lead since this enhancement/defect has been resolved and unverified for more than 1 year and considered to be fixed. If this enhancement/defect is still unresolved and reproducible in the latest TPTP release (http://www.eclipse.org/tptp/home/downloads/), please re-open.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41832" />
    <CreationDate amount="2003-08-21 16:14:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux-GTK" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Add key binding in preferences and focus is lost</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>1.) Open KeyPreferencesDialog.  (Window&gt;Prefereces, Workbench&gt;Keys)</Line>
          <Line>2.) Select any command/action from the tree on the left.  For example, Help&gt;About.</Line>
          <Line>3.) Press tab until you are focused on the Key Sequence combo box.</Line>
          <Line>4.) Type in "Ctrl+I".</Line>
          <Line>5.) Tab to the "Add" button.</Line>
          <Line>6.) Press the space bar to activate the "Add" button.</Line>
          <Line>7.) Press the Tab key repeatedly.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>This is specific to the GTK2.x implementation of SWT, but may occur elsewhere. 
After certain events (e.g., adding a key binding, removing a key binding, etc.)
on the KeyPreferencesDialog, focus is lost completely (i.e., tab does nothing).
 To restore focus, a mouse click must occur on some focusable widget to restore
the focus.  This is a problem for accessibility.

Not sure if it is a design flaw in the KeyPreferencesDialog, or in GTK-SWT. 
This problem does not occur on Windows XP.

As a side note, I've noticed that focus is erratic in GTK.  Sometimes focus
seems to disappear completely and can't be restored without re-opening the dialog.


STEPS TO REPRODUCE:
1.) Open KeyPreferencesDialog.  (Window&gt;Prefereces, Workbench&gt;Keys)
2.) Select any command/action from the tree on the left.  For example, Help&gt;About.
3.) Press tab until you are focused on the Key Sequence combo box.
4.) Type in "Ctrl+I".
5.) Tab to the "Add" button.
6.) Press the space bar to activate the "Add" button.
7.) Press the Tab key repeatedly.

EXPECTED RESULTS:
Focus should appear somewhere on the dialog.

ACTUAL RESULTS:
Focus is lost.  Using ALT+TAB to remove and restore focus to the dialog does not
have an effect on the focus.  Mouse-clicking on the Key Sequence combo box (for
example) restores focus.

OTHER NOTES:
Some other traversal keys are effected (e.g., ESC), but not others (e.g.,
RETURN/ENTER).
This no longer happens for me. Please reopen if you can reproduce it.</WithStack>
    <WithOutStack>This is specific to the GTK2.x implementation of SWT, but may occur elsewhere. 
After certain events (e.g., adding a key binding, removing a key binding, etc.)
on the KeyPreferencesDialog, focus is lost completely (i.e., tab does nothing).
 To restore focus, a mouse click must occur on some focusable widget to restore
the focus.  This is a problem for accessibility.

Not sure if it is a design flaw in the KeyPreferencesDialog, or in GTK-SWT. 
This problem does not occur on Windows XP.

As a side note, I've noticed that focus is erratic in GTK.  Sometimes focus
seems to disappear completely and can't be restored without re-opening the dialog.


STEPS TO REPRODUCE:
1.) Open KeyPreferencesDialog.  (Window&gt;Prefereces, Workbench&gt;Keys)
2.) Select any command/action from the tree on the left.  For example, Help&gt;About.
3.) Press tab until you are focused on the Key Sequence combo box.
4.) Type in "Ctrl+I".
5.) Tab to the "Add" button.
6.) Press the space bar to activate the "Add" button.
7.) Press the Tab key repeatedly.

EXPECTED RESULTS:
Focus should appear somewhere on the dialog.

ACTUAL RESULTS:
Focus is lost.  Using ALT+TAB to remove and restore focus to the dialog does not
have an effect on the focus.  Mouse-clicking on the Key Sequence combo box (for
example) restores focus.

OTHER NOTES:
Some other traversal keys are effected (e.g., ESC), but not others (e.g.,
RETURN/ENTER).
This no longer happens for me. Please reopen if you can reproduce it.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41833" />
    <CreationDate amount="2003-08-21 16:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-parser" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>AST creates a variable for a new expression</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="assignment">
        <location start="18" end="33" />
        <code>p = new int[2];</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="INVALID" />
    <WithStack>The code:
int *p;
p = new int[2];

Translates into two model elements instead of just one.
In the CModelBuilder, I get two offsetables of type IASTVariable,
The first has the name = "p" and type  "int*"
the second has the name = "" and type = "p"
int *p;            // this is a declaration that should show up in the outline
p = new int[2];    // this is an expression-statement, not a declaration

No fix required.</WithStack>
    <WithOutStack>The code:
int *p;
p = new int[2];

Translates into two model elements instead of just one.
In the CModelBuilder, I get two offsetables of type IASTVariable,
The first has the name = "p" and type  "int*"
the second has the name = "" and type = "p"
int *p;            // this is a declaration that should show up in the outline
p = new int[2];    // this is an expression-statement, not a declaration

No fix required.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41834" />
    <CreationDate amount="2003-08-21 16:20:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-parser" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>isConstructor() is not working properly for ASTMethodDeclarations</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>ASTMethodDeclaration.isConstructor() is not set properly for constructors.
I did not check destructors, but I assume they are not working either.
isConstructor() on IASTMethod is fixed in complete parser mode.
In Quick parser mode (used by the CModelBuilder) it can not be fixed as there 
is no way to make sure that the parent is indeed a class ( no reference 
resolution ). So, old MethodDeclaration.isConstructor() should be used.
Same this for the isDestructor().</WithStack>
    <WithOutStack>ASTMethodDeclaration.isConstructor() is not set properly for constructors.
I did not check destructors, but I assume they are not working either.
isConstructor() on IASTMethod is fixed in complete parser mode.
In Quick parser mode (used by the CModelBuilder) it can not be fixed as there 
is no way to make sure that the parent is indeed a class ( no reference 
resolution ). So, old MethodDeclaration.isConstructor() should be used.
Same this for the isDestructor().</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41835" />
    <CreationDate amount="2003-08-21 16:43:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Ant" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Ant in separate VM setting eclipse.running</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>eclipse.running should not be set (to true) when the Ant build occurs in a 
separate VM.
Actually all "eclipse" specific properties should not be set.
Fixed in AntLaunchDelegate.
Please verify Jared.
Verified code.</WithStack>
    <WithOutStack>eclipse.running should not be set (to true) when the Ant build occurs in a 
separate VM.
Actually all "eclipse" specific properties should not be set.
Fixed in AntLaunchDelegate.
Please verify Jared.
Verified code.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41836" />
    <CreationDate amount="2003-08-21 16:47:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Override and Commit of conflicting additions and binary files</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1) disconnected a project from CVS control, purging the CVS info</Line>
          <Line>2) Shared the project with CVS</Line>
          <Line>3) Performed an Override and Commit in the new Synchronize view</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>I peformed the following steps:

1) disconnected a project from CVS control, purging the CVS info
2) Shared the project with CVS
3) Performed an Override and Commit in the new Synchronize view

The commit failed because the command claimed that several files were not up-
to-date. 

The files involved where tagged as binary in the repository but were being 
committed as text. It appears that the remote tree does not contain the proper 
substitution mode. However, this used to work in 2.X so something has changed.
I may have fixed this. Will retest.
I have verified that this now works</WithStack>
    <WithOutStack>I peformed the following steps:

1) disconnected a project from CVS control, purging the CVS info
2) Shared the project with CVS
3) Performed an Override and Commit in the new Synchronize view

The commit failed because the command claimed that several files were not up-
to-date. 

The files involved where tagged as binary in the repository but were being 
committed as text. It appears that the remote tree does not contain the proper 
substitution mode. However, this used to work in 2.X so something has changed.
I may have fixed this. Will retest.
I have verified that this now works</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41837" />
    <CreationDate amount="2003-08-21 17:49:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Search" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Search results do not get grouped when operation is not a workspace modify operation</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="9">
      <source_code type="functiondef">
        <location start="1103" end="1195" />
        <code>List getResults() {
		if (fResults == null)
			return new ArrayList();
		return fResults;
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1311" end="1356" />
        <code>private void handleAddMatch(IMarker marker) {</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1419" end="1448" />
        <code>().computeGroupByKey(marker);</code>
      </source_code>
      <source_code type="assignment">
        <location start="1449" end="1502" />
        <code>SearchResultViewEntry entry= findEntry(groupByKey);</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="1503" end="1525" />
        <code>if (entry == null) {</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1575" end="1597" />
        <code>marker.getResource());</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1598" end="1632" />
        <code>getCurrentResults().add(entry);</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1736" end="1755" />
        <code>List getResults() {</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="1756" end="1852" />
        <code>if (fResults == null){
                        fResults = newArrayList()
		return fResults;
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. Update the documentation to say that the search operation should not only</Line>
          <Line>implement IRunnableWithProgress but should be a WorkSpaceModifyOperation.</Line>
          <Line>2. Fix the handling method to not erase it's stored list of markers on the</Line>
          <Line>event:</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I have contributed a search page to the extension point 
org.eclipse.search.searchPages.  In my performFinish action of my search page I 
create an operation to run the search.  Previously, the operation I used 
implemented IRunnableWithProgress (as specified in the 
org.eclipse.search.ui.IResultView.searchStarted method).  In this operation, I 
start my search and use addMatch to add the results.  When the results are 
shown they are not grouped by resource despite the fact that I use an 
IGroupByKeyComputer that returns the resource as the key.  If I do something to 
change the file and save it or say search again, then the results are grouped 
properly.

I think that one of two things should be done.  

1. Update the documentation to say that the search operation should not only 
implement IRunnableWithProgress but should be a WorkSpaceModifyOperation.
2. Fix the handling method to not erase it's stored list of markers on the 
event:

I noticed that the reason the grouping is not done is because of a method in 
org.eclipse.search.internal.ui.  The method that causes the problem is:

List getResults() {
		if (fResults == null)
			return new ArrayList();
		return fResults;
	}

The ArrayList returned by this method is later used in a method in 
org.eclipse.search.internal.ui.SearchManager

private void handleAddMatch(IMarker marker) {
		Object groupByKey= getCurrentSearch().getGroupByKeyComputer
().computeGroupByKey(marker);
		SearchResultViewEntry entry= findEntry(groupByKey);
		if (entry == null) {
			entry= new SearchResultViewEntry(groupByKey, 
marker.getResource());
			getCurrentResults().add(entry);
...


This method calls .add on the array that was returned.  However unless the code 
from list was:

List getResults() {
		if (fResults == null){
                        fResults = newArrayList()
		return fResults;
	}
Then the add call is just adding to an array that is in no way associated to 
the entry.
1 is not an option especially regarding 3.0 where we want to go away from
operations that block the whole workspace and allow search to run in the background.

Thomas, please investigate.

The error scenario should not be a problem anymore, since we changed the
SearchManager in two places:

1) We set the current search as soon as we start searching. Thus fCurrentSearch
should never be null when a search is running
2) We're not using Marker deltas for adding matches anymore.</WithStack>
    <WithOutStack>I have contributed a search page to the extension point 
org.eclipse.search.searchPages.  In my performFinish action of my search page I 
create an operation to run the search.  Previously, the operation I used 
implemented IRunnableWithProgress (as specified in the 
org.eclipse.search.ui.IResultView.searchStarted method).  In this operation, I 
start my search and use addMatch to add the results.  When the results are 
shown they are not grouped by resource despite the fact that I use an 
IGroupByKeyComputer that returns the resource as the key.  If I do something to 
change the file and save it or say search again, then the results are grouped 
properly.

I think that one of two things should be done.  

1. Update the documentation to say that the search operation should not only 
implement IRunnableWithProgress but should be a WorkSpaceModifyOperation.
2. Fix the handling method to not erase it's stored list of markers on the 
event:

I noticed that the reason the grouping is not done is because of a method in 
org.eclipse.search.internal.ui.  The method that causes the problem is:

List getResults() {
		if (fResults == null)
			return new ArrayList();
		return fResults;
	}

The ArrayList returned by this method is later used in a method in 
org.eclipse.search.internal.ui.SearchManager

private void handleAddMatch(IMarker marker) {
		Object groupByKey= getCurrentSearch().getGroupByKeyComputer
().computeGroupByKey(marker);
		SearchResultViewEntry entry= findEntry(groupByKey);
		if (entry == null) {
			entry= new SearchResultViewEntry(groupByKey, 
marker.getResource());
			getCurrentResults().add(entry);
...


This method calls .add on the array that was returned.  However unless the code 
from list was:

List getResults() {
		if (fResults == null){
                        fResults = newArrayList()
		return fResults;
	}
Then the add call is just adding to an array that is in no way associated to 
the entry.
1 is not an option especially regarding 3.0 where we want to go away from
operations that block the whole workspace and allow search to run in the background.

Thomas, please investigate.

The error scenario should not be a problem anymore, since we changed the
SearchManager in two places:

1) We set the current search as soon as we start searching. Thus fCurrentSearch
should never be null when a search is running
2) We're not using Marker deltas for adding matches anymore.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41838" />
    <CreationDate amount="2003-08-21 18:01:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Workbench menu bar does not display correctly when using XP skin</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Hi,

I am developing a standalone application with the Eclipse workbench.
When I run the workbench with an XP .manifest file (to enable XP skins) the 
workbench menu bar does not display with the proper skin background.  The menu 
bar uses the standard Windows control background.
Please reopen with a screen shot.  Note that the bug is entered against 
Windows 2000 which doesn't support themes.  I'm assuming you mean XP.</WithStack>
    <WithOutStack>Hi,

I am developing a standalone application with the Eclipse workbench.
When I run the workbench with an XP .manifest file (to enable XP skins) the 
workbench menu bar does not display with the proper skin background.  The menu 
bar uses the standard Windows control background.
Please reopen with a screen shot.  Note that the bug is entered against 
Windows 2000 which doesn't support themes.  I'm assuming you mean XP.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41839" />
    <CreationDate amount="2003-08-21 18:31:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>No default Javadoc URL for 1.4.2 VMs</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Nothing is set by default in the Javadoc URL field for 1.4.2 VMs.
Fixed in StandardVMType#getDefaultJavadocLocation().
Please verify, Darin S.
Verified.</WithStack>
    <WithOutStack>Nothing is set by default in the Javadoc URL field for 1.4.2 VMs.
Fixed in StandardVMType#getDefaultJavadocLocation().
Please verify, Darin S.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41840" />
    <CreationDate amount="2003-08-21 18:41:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Windows only - Browser widget with Mozilla</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="17">
        <Lines>
          <Line>- have Mozilla 1.4 installed on your machine.</Line>
          <Line>- set the path to include the GRE directory and the Mozilla directory</Line>
          <Line>(on a default install this would be:</Line>
          <Line>C:\Program Files\mozilla.org\Mozilla;C:\Program Files\Common</Line>
          <Line>Files\mozilla.org\GRE\1.4f_2003062408</Line>
          <Line>)</Line>
          <Line>- start Eclipse</Line>
          <Line>- get the org.eclipse.swt project from Eclipse.org</Line>
          <Line>- set the .classpath using .classpath_win32_mozilla</Line>
          <Line>- get the org.eclipse.swt.win32 project from Eclipse.org</Line>
          <Line>- you can now use the SWT Browser widget embedding Mozilla in your own</Line>
          <Line>projects dependent on org.eclipse.swt.</Line>
          <Line>-</Line>
          <Line>-</Line>
          <Line>*** Bug 71301 has been marked as a duplicate of this bug. ***</Line>
          <Line>FYI: I entered bug 79213 to request official support for Mozilla on Windows.</Line>
          <Line>The steps in comment 0 don't work any more - the files have been removed in HEAD.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>At the time of this writing (Eclipse 3.0 M3),  as outlined in 
http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-swt-
home/faq.html#browserplatforms, the Browser widget uses IE on Windows. We 
don't ship a version of the Browser widget based on Mozilla on Windows. We 
don't support Mozilla on Windows. This said, we are testing the Mozilla 
binding on Linux and Windows as well - you can follow the steps below to give 
it a try yourself on Windows. This may be dropped in the future.

- have Mozilla 1.4 installed on your machine.
- set the path to include the GRE directory and the Mozilla directory
(on a default install this would be:
C:\Program Files\mozilla.org\Mozilla;C:\Program Files\Common 
Files\mozilla.org\GRE\1.4f_2003062408
)
- start Eclipse
- get the org.eclipse.swt project from Eclipse.org
- set the .classpath using .classpath_win32_mozilla
- get the org.eclipse.swt.win32 project from Eclipse.org
- you can now use the SWT Browser widget embedding Mozilla in your own 
projects dependent on org.eclipse.swt.
-
-
*** Bug 71301 has been marked as a duplicate of this bug. ***
FYI: I entered bug 79213 to request official support for Mozilla on Windows.
The steps in comment 0 don't work any more - the files have been removed in HEAD.</WithStack>
    <WithOutStack>At the time of this writing (Eclipse 3.0 M3),  as outlined in 
http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-swt-
home/faq.html#browserplatforms, the Browser widget uses IE on Windows. We 
don't ship a version of the Browser widget based on Mozilla on Windows. We 
don't support Mozilla on Windows. This said, we are testing the Mozilla 
binding on Linux and Windows as well - you can follow the steps below to give 
it a try yourself on Windows. This may be dropped in the future.

- have Mozilla 1.4 installed on your machine.
- set the path to include the GRE directory and the Mozilla directory
(on a default install this would be:
C:\Program Files\mozilla.org\Mozilla;C:\Program Files\Common 
Files\mozilla.org\GRE\1.4f_2003062408
)
- start Eclipse
- get the org.eclipse.swt project from Eclipse.org
- set the .classpath using .classpath_win32_mozilla
- get the org.eclipse.swt.win32 project from Eclipse.org
- you can now use the SWT Browser widget embedding Mozilla in your own 
projects dependent on org.eclipse.swt.
-
-
*** Bug 71301 has been marked as a duplicate of this bug. ***
FYI: I entered bug 79213 to request official support for Mozilla on Windows.
The steps in comment 0 don't work any more - the files have been removed in HEAD.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41841" />
    <CreationDate amount="2003-08-21 19:22:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Ant" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Use InternalAntRunner as Ant entry point for separate VM</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>I believe it makes good sense to use Eclipse's InternalAntRunner as the entry 
point for Ant when we launch in a separate VM.

We would "copy" the support for Ant in the same VM, remove the correct parts 
and then we have a well defined, understood and controllable entry point.
Fixed in AntJRETab and the addition of the Remote Ant Support 
org.eclipse.ant.ui.internal.antsupport classes.

Note that pre-existing separate VM Ant launch configs will need to be "updated" 
to see this change. This will require a visit to the JRE tab for the launch 
configuration.
please verify Jared.
Verified.</WithStack>
    <WithOutStack>I believe it makes good sense to use Eclipse's InternalAntRunner as the entry 
point for Ant when we launch in a separate VM.

We would "copy" the support for Ant in the same VM, remove the correct parts 
and then we have a well defined, understood and controllable entry point.
Fixed in AntJRETab and the addition of the Remote Ant Support 
org.eclipse.ant.ui.internal.antsupport classes.

Note that pre-existing separate VM Ant launch configs will need to be "updated" 
to see this change. This will require a visit to the JRE tab for the launch 
configuration.
please verify Jared.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41842" />
    <CreationDate amount="2003-08-21 20:48:00 -0400" />
    <DupId amount="50349" />
    <classification amount="Modeling" />
    <Product amount="EMF" />
    <component amount="Core" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Tutorial for generating an XSD</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functioncall">
        <location start="320" end="389" />
        <code>1. Bring up the generator model ("genmodel") using the EMF Generator;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>2. Bring up the Properties view for the genmodel.</Line>
          <Line>3. Locate the "Generate Schema" property in the Properties view.  (It's</Line>
          <Line>the first property listed in the "Model" section of that view.)</Line>
          <Line>4. Use the dropdown for that property's value to set it to "true".</Line>
          <Line>5. Save the genmodel and regenerate the code. (Depending on which projects</Line>
          <Line>you want to generate, you can use either "Generate Model" or "Generate</Line>
          <Line>All" from the pop-up on the root object of the genmodel.)</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Many people have asked about how to generate an XSD from the Ecore model.
This XSD will validate documents saved using an XMIResource.
I will add the following to the FAQ.  This is from an answer I posted on the 
newsgroup (with some gentle editing).

To generate a schema for your model, you need to do the following:

1. Bring up the generator model ("genmodel") using the EMF Generator;
ensure that the root node is selected.
2. Bring up the Properties view for the genmodel.
3. Locate the "Generate Schema" property in the Properties view.  (It's
the first property listed in the "Model" section of that view.)
4. Use the dropdown for that property's value to set it to "true".
5. Save the genmodel and regenerate the code. (Depending on which projects
you want to generate, you can use either "Generate Model" or "Generate
All" from the pop-up on the root object of the genmodel.)

The schema is placed in the model folder, which is itself contained in the
src folder (e.g., Library\src\model) in the EMF project.

A schema will be generated for each package in the model for which the
Resource Type genmodel property is set to None, XMI, or XML.  These all
imply an XML-based serialization format for instance models.  In the
first ("None") case, no specialized resource will be generated, and so EMF's
default XMI resource implementation will be used.  In the latter two
cases, a specialized resource will be generated, but it will extend either
the XMI or XML implementation.
We are adding a "Generate Schema" action to the genmodel editor so it won't be 
necessary to write a tutorial.

*** This bug has been marked as a duplicate of 50349 ***</WithStack>
    <WithOutStack>Many people have asked about how to generate an XSD from the Ecore model.
This XSD will validate documents saved using an XMIResource.
I will add the following to the FAQ.  This is from an answer I posted on the 
newsgroup (with some gentle editing).

To generate a schema for your model, you need to do the following:

1. Bring up the generator model ("genmodel") using the EMF Generator;
ensure that the root node is selected.
2. Bring up the Properties view for the genmodel.
3. Locate the "Generate Schema" property in the Properties view.  (It's
the first property listed in the "Model" section of that view.)
4. Use the dropdown for that property's value to set it to "true".
5. Save the genmodel and regenerate the code. (Depending on which projects
you want to generate, you can use either "Generate Model" or "Generate
All" from the pop-up on the root object of the genmodel.)

The schema is placed in the model folder, which is itself contained in the
src folder (e.g., Library\src\model) in the EMF project.

A schema will be generated for each package in the model for which the
Resource Type genmodel property is set to None, XMI, or XML.  These all
imply an XML-based serialization format for instance models.  In the
first ("None") case, no specialized resource will be generated, and so EMF's
default XMI resource implementation will be used.  In the latter two
cases, a specialized resource will be generated, but it will extend either
the XMI or XML implementation.
We are adding a "Generate Schema" action to the genmodel editor so it won't be 
necessary to write a tutorial.

*** This bug has been marked as a duplicate of 50349 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41843" />
    <CreationDate amount="2003-08-22 01:55:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>where, o where is the new synchronize view?</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Build: I-20030820

I love the new synchronize view that the Team team implemented.
However, for the past 2-3 weeks, I don't know what happened.  
The old synchronize view seems to take precedence now.  Whenever I do: Team-
&gt;Synchronize with repository..., it is the old synchronize that shows up.  
Even when I explicitly close the old synchronize view, and explicity add the 
new synchronize view to my perspective, if I do Team-&gt;Synchronize, the old 
synchronize view pops up.
Thanks. Until after M3 we are keeping the old sync around.

However, you can make the Team &gt; Synchronize action open the new sync view via
the CVS work in progress preference page.</WithStack>
    <WithOutStack>Build: I-20030820

I love the new synchronize view that the Team team implemented.
However, for the past 2-3 weeks, I don't know what happened.  
The old synchronize view seems to take precedence now.  Whenever I do: Team-
&gt;Synchronize with repository..., it is the old synchronize that shows up.  
Even when I explicitly close the old synchronize view, and explicity add the 
new synchronize view to my perspective, if I do Team-&gt;Synchronize, the old 
synchronize view pops up.
Thanks. Until after M3 we are keeping the old sync around.

However, you can make the Team &gt; Synchronize action open the new sync view via
the CVS work in progress preference page.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41844" />
    <CreationDate amount="2003-08-22 02:43:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Add "Delete" from right click menu in synchronize view</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When I work on a project, I oftentimes accumulate various temporary files(e.g. 
coredump from a gdb). It would be convenient to be able to delete these files 
from within the synchronize view.

Øyvind
Fixed and released to HEAD/</WithStack>
    <WithOutStack>When I work on a project, I oftentimes accumulate various temporary files(e.g. 
coredump from a gdb). It would be convenient to be able to delete these files 
from within the synchronize view.

Øyvind
Fixed and released to HEAD/</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41845" />
    <CreationDate amount="2003-08-22 04:01:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>copy does not support heterogeneous selection of packages and folders [ccp]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>If I multiselect two items, I can copy. If I multiselect three items, it does 
not work.

I'll attach pictures.
Created attachment 5825
Copy is ghosted
Created attachment 5826
Copy is not ghosted
it's because you selected 2 packages and a folder - copying heterogeneous 
selections like this is not supported now.

supporting this would require changing the reorg code in a non-trivial way 
(we'd need to write code that decides what kinds of (many) different 
heterogeneous selections are supported and on which of elements these can be 
dropped/pasted). given that the benefit is not too large, i'd suggest leaving 
it as is.
I agree that the benefit isn't large compared to the amound of work. Depends 
on overall 3.0 planning.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>If I multiselect two items, I can copy. If I multiselect three items, it does 
not work.

I'll attach pictures.
Created attachment 5825
Copy is ghosted
Created attachment 5826
Copy is not ghosted
it's because you selected 2 packages and a folder - copying heterogeneous 
selections like this is not supported now.

supporting this would require changing the reorg code in a non-trivial way 
(we'd need to write code that decides what kinds of (many) different 
heterogeneous selections are supported and on which of elements these can be 
dropped/pasted). given that the benefit is not too large, i'd suggest leaving 
it as is.
I agree that the benefit isn't large compared to the amound of work. Depends 
on overall 3.0 planning.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41846" />
    <CreationDate amount="2003-08-22 04:37:00 -0400" />
    <DupId amount="41807" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Replace with Latest: leaves buggy old editor</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>- Open a file from CVS and make some changes (e.g. about.html form org.junit)</Line>
          <Line>- Save and leave the editor open.</Line>
          <Line>- From the file's context menu in the Package Explorer, choose Replace With &gt;</Line>
          <Line>Latest from HEAD.</Line>
          <Line>- Confirm overwriting changes.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I20030820

Steps to reproduce:
- Open a file from CVS and make some changes (e.g. about.html form org.junit)
- Save and leave the editor open.
- From the file's context menu in the Package Explorer, choose Replace With &gt;
Latest from HEAD.
- Confirm overwriting changes.

The file is correctly overridden, but the editor still shows my previous
changes. Furthermore, the editor doesn't show dirty indicators and has disabled
File &gt; Save and File &gt; Revert menuitems (even after I continue editing the
file). The same happens for .java files.
This isn't a CVS bug but instead a bug with the editor not updating when the
underlying resource changes.

*** This bug has been marked as a duplicate of 41807 ***</WithStack>
    <WithOutStack>I20030820

Steps to reproduce:
- Open a file from CVS and make some changes (e.g. about.html form org.junit)
- Save and leave the editor open.
- From the file's context menu in the Package Explorer, choose Replace With &gt;
Latest from HEAD.
- Confirm overwriting changes.

The file is correctly overridden, but the editor still shows my previous
changes. Furthermore, the editor doesn't show dirty indicators and has disabled
File &gt; Save and File &gt; Revert menuitems (even after I continue editing the
file). The same happens for .java files.
This isn't a CVS bug but instead a bug with the editor not updating when the
underlying resource changes.

*** This bug has been marked as a duplicate of 41807 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41847" />
    <CreationDate amount="2003-08-22 05:02:00 -0400" />
    <DupId amount="41823" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>NLS-Wizard should not use code generation comments/code</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="multicomment">
        <location start="78" end="92" />
        <code>/**
	 * 
	 */</code>
      </source_code>
      <source_code type="functiondef">
        <location start="93" end="160" />
        <code>private Messages() {

		// TODO Auto-generated constructor stub
	}</code>
      </source_code>
      <source_code type="multicomment">
        <location start="161" end="197" />
        <code>/**
	 * @param key
	 * @return
	 */</code>
      </source_code>
      <source_code type="functiondef">
        <location start="198" end="405" />
        <code>public static String getString(String key) {
		// TODO Auto-generated method stub
		try {
			return RESOURCE_BUNDLE.getString(key);
		} catch (MissingResourceException e) {
			return '!' + key + '!';
		}
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>20030822

The file 'Messages.java' created by the NLS wizard looks like that:
	/**
	 * 
	 */
	private Messages() {

		// TODO Auto-generated constructor stub
	}
	/**
	 * @param key
	 * @return
	 */
	public static String getString(String key) {
		// TODO Auto-generated method stub
		try {
			return RESOURCE_BUNDLE.getString(key);
		} catch (MissingResourceException e) {
			return '!' + key + '!';
		}
	}

It makes no sense to use the code generation templates here:
The todo flags are unnecessary, there's nothing 'to do', the method is complete.
The Javadoc comments could give a real explanation what the method is doing
'For a given key returns the translated string.'
agreed


*** This bug has been marked as a duplicate of 41823 ***</WithStack>
    <WithOutStack>20030822

The file 'Messages.java' created by the NLS wizard looks like that:
	/**
	 * 
	 */
	private Messages() {

		// TODO Auto-generated constructor stub
	}
	/**
	 * @param key
	 * @return
	 */
	public static String getString(String key) {
		// TODO Auto-generated method stub
		try {
			return RESOURCE_BUNDLE.getString(key);
		} catch (MissingResourceException e) {
			return '!' + key + '!';
		}
	}

It makes no sense to use the code generation templates here:
The todo flags are unnecessary, there's nothing 'to do', the method is complete.
The Javadoc comments could give a real explanation what the method is doing
'For a given key returns the translated string.'
agreed


*** This bug has been marked as a duplicate of 41823 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41848" />
    <CreationDate amount="2003-08-22 05:44:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P5" />
    <bug_severity amount="enhancement" />
    <Summery>[typing] Revert to old instert/overwrite behaviour for "insert" key</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>- No exceptions in log</Line>
          <Line>- When I close the window and reopen it, the problem went away.</Line>
          <Line>&gt;Correct behavior: the [ indicates that you're in smart typing mode</Line>
          <Line>&gt;(see status line - right side). The | cursor means "no smartness".</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I've got two Java files I'm editing. In one the cursor [ shape and the cursor 
is indented correctly after pressing return. In the other the cursor has the | 
shape and the cursor is not indented after pressing return.

I'll attach pictures.
Created attachment 5827
Correct indentation
Created attachment 5828
Incorrect indentation
Correct behavior: the [ indicates that you're in smart typing mode (see status
line - right side). The | cursor means "no smartness".
- No exceptions in log
- When I close the window and reopen it, the problem went away.
&gt;Correct behavior: the [ indicates that you're in smart typing mode 
&gt;(see status line - right side). The | cursor means "no smartness".

How did I end up in this mode?

I didn't do so intentionally.

Øyvind

The current behaviour is confusing.

I don't know what causes the enabling/disabling of the smart type mode.

Presumably, this is new with 3.0.

Øyvind

Normally in editors, if you hit the Insert key an editor toggles between
overwrite and insert mode. Eclipse has a third mode called "Smart Insert".

You can also change the mode by clicking ("Overview" | "Inser" | "Smart Insert")
in the status line.

&gt;Normally in editors, if you hit the Insert key an editor toggles between
&gt;overwrite and insert mode. Eclipse has a third mode called "Smart Insert".
&gt;
&gt;You can also change the mode by clicking ("Overview" | "Inser" | 
&gt;"Smart Insert") in the status line.

I don't think it is a good idea to override such age old well defined 
behaviours.

Øyvind


Ref. last comment.
Nothing planned for 3.0
.
This has been fixed long time ago.</WithStack>
    <WithOutStack>I've got two Java files I'm editing. In one the cursor [ shape and the cursor 
is indented correctly after pressing return. In the other the cursor has the | 
shape and the cursor is not indented after pressing return.

I'll attach pictures.
Created attachment 5827
Correct indentation
Created attachment 5828
Incorrect indentation
Correct behavior: the [ indicates that you're in smart typing mode (see status
line - right side). The | cursor means "no smartness".
- No exceptions in log
- When I close the window and reopen it, the problem went away.
&gt;Correct behavior: the [ indicates that you're in smart typing mode 
&gt;(see status line - right side). The | cursor means "no smartness".

How did I end up in this mode?

I didn't do so intentionally.

Øyvind

The current behaviour is confusing.

I don't know what causes the enabling/disabling of the smart type mode.

Presumably, this is new with 3.0.

Øyvind

Normally in editors, if you hit the Insert key an editor toggles between
overwrite and insert mode. Eclipse has a third mode called "Smart Insert".

You can also change the mode by clicking ("Overview" | "Inser" | "Smart Insert")
in the status line.

&gt;Normally in editors, if you hit the Insert key an editor toggles between
&gt;overwrite and insert mode. Eclipse has a third mode called "Smart Insert".
&gt;
&gt;You can also change the mode by clicking ("Overview" | "Inser" | 
&gt;"Smart Insert") in the status line.

I don't think it is a good idea to override such age old well defined 
behaviours.

Øyvind


Ref. last comment.
Nothing planned for 3.0
.
This has been fixed long time ago.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41849" />
    <CreationDate amount="2003-08-22 05:59:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="Macintosh" />
    <op_sys amount="Mac OS X - Carbon (unsup.)" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>[typing] LinkedPositionManager sets illegal positions</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867097">
        <Exception>org.eclipse.jface.text.Assert$AssertionFailedException</Exception>
        <Reason>Assertion failed:</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.jface.text.Assert.isTrue(Assert.java:175)</Frame>
          <Frame depth="1">org.eclipse.jface.text.Assert.isTrue(Assert.java:160)</Frame>
          <Frame depth="2">org.eclipse.jface.text.Position.setLength(Position.java:176)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.ui.text.link.LinkedPositionManager.update(LinkedPositionManager.java:557)</Frame>
          <Frame depth="4">org.eclipse.jface.text.AbstractDocument.updatePositions(AbstractDocument.java:991)</Frame>
          <Frame depth="5">org.eclipse.jface.text.AbstractDocument.updateDocumentStructures(AbstractDocument.java:582)</Frame>
          <Frame depth="6">org.eclipse.jface.text.AbstractDocument.fireDocumentChanged(AbstractDocument.java:667)</Frame>
          <Frame depth="7">org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:961)</Frame>
          <Frame depth="8">org.eclipse.jdt.internal.ui.javaeditor.PartiallySynchronizedDocument.replace(PartiallySynchronizedDocument.java:61)</Frame>
          <Frame depth="9">org.eclipse.jface.text.DocumentCommand$Command.execute(DocumentCommand.java:95)</Frame>
          <Frame depth="10">org.eclipse.jface.text.DocumentCommand.execute(DocumentCommand.java:444)</Frame>
          <Frame depth="11">org.eclipse.jface.text.TextViewer.handleVerifyEvent(TextViewer.java:3114)</Frame>
          <Frame depth="12">org.eclipse.jface.text.TextViewer$TextVerifyListener.verifyText(TextViewer.java:318)</Frame>
          <Frame depth="13">org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:189)</Frame>
          <Frame depth="14">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)</Frame>
          <Frame depth="15">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1027)</Frame>
          <Frame depth="16">org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:5808)</Frame>
          <Frame depth="17">org.eclipse.swt.custom.StyledText.sendKeyEvent(StyledText.java:6794)</Frame>
          <Frame depth="18">org.eclipse.swt.custom.StyledText.doDelete(StyledText.java:2641)</Frame>
          <Frame depth="19">org.eclipse.swt.custom.StyledText.invokeAction(StyledText.java:5649)</Frame>
          <Frame depth="20">org.eclipse.swt.custom.StyledText.handleKey(StyledText.java:5191)</Frame>
          <Frame depth="21">org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:5210)</Frame>
          <Frame depth="22">org.eclipse.swt.custom.StyledText$8.handleEvent(StyledText.java:4957)</Frame>
          <Frame depth="23">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)</Frame>
          <Frame depth="24">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1170)</Frame>
          <Frame depth="25">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1194)</Frame>
          <Frame depth="26">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1179)</Frame>
          <Frame depth="27">org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:1901)</Frame>
          <Frame depth="28">org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:1896)</Frame>
          <Frame depth="29">org.eclipse.swt.widgets.Control.kEventTextInputUnicodeForKeyEvent(Control.java:1441)</Frame>
          <Frame depth="30">org.eclipse.swt.widgets.Composite.kEventTextInputUnicodeForKeyEvent(Composite.java:368)</Frame>
          <Frame depth="31">org.eclipse.swt.widgets.Widget.textInputProc(Widget.java:1519)</Frame>
          <Frame depth="32">org.eclipse.swt.widgets.Display.textInputProc(Display.java:2653)</Frame>
          <Frame depth="33">org.eclipse.swt.internal.carbon.OS.SendEventToEventTarget(Native Method)</Frame>
          <Frame depth="34">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1874)</Frame>
          <Frame depth="35">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1676)</Frame>
          <Frame depth="36">org.eclipse.ui.internal.Workbench.run(Workbench.java:1659)</Frame>
          <Frame depth="37">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)</Frame>
          <Frame depth="38">org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)</Frame>
          <Frame depth="39">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</Frame>
          <Frame depth="40">sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</Frame>
          <Frame depth="41">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</Frame>
          <Frame depth="42">java.lang.reflect.Method.invoke(Method.java:324)</Frame>
          <Frame depth="43">org.eclipse.core.launcher.Main.basicRun(Main.java:291)</Frame>
          <Frame depth="44">org.eclipse.core.launcher.Main.run(Main.java:747)</Frame>
          <Frame depth="45">org.eclipse.core.launcher.Main.main(Main.java:583)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="1735" end="1791" />
        <code>public class MyClass {
	public static void ping() {
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="2">
      <Enumeration lines="4">
        <Lines>
          <Line>1. Start to type a method call and invoke content assist, so that parameters</Line>
          <Line>proposals are presented. The proposal popup for the first parameter is open.</Line>
          <Line>2. Choose Edit-&gt;Show Tooltip description (F2)</Line>
          <Line>-&gt; AssertionException happens</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="6">
        <Lines>
          <Line>- place cursor between "(" and ")"</Line>
          <Line>- press key "("</Line>
          <Line>- press Delete</Line>
          <Line>-&gt; Assertion failed</Line>
          <Line>Created attachment 5873</Line>
          <Line>patch on LinkedPositionManager.java</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Eclipse: 200308201005 on Mac OS X Jaguar

Files I'm editing and saving are not being saved to disk. There are no errors in the logs. It appears that 
this is an editor problem, because the compiler compiles what is on disk.

Chang
Sorry, there is something in the logs that looks suspicious but I was able to save succesfully after this:

!ENTRY org.eclipse.ui 4 0 Aug 22, 2003 11:00:04.481
!MESSAGE Assertion failed: 
!STACK 0
org.eclipse.jface.text.Assert$AssertionFailedException: Assertion failed: 
        at org.eclipse.jface.text.Assert.isTrue(Assert.java:175)
        at org.eclipse.jface.text.Assert.isTrue(Assert.java:160)
        at org.eclipse.jface.text.Position.setLength(Position.java:176)
        at 
org.eclipse.jdt.internal.ui.text.link.LinkedPositionManager.update(LinkedPositionManager.java:557)
        at org.eclipse.jface.text.AbstractDocument.updatePositions(AbstractDocument.java:991)
        at 
org.eclipse.jface.text.AbstractDocument.updateDocumentStructures(AbstractDocument.java:582)
        at org.eclipse.jface.text.AbstractDocument.fireDocumentChanged(AbstractDocument.java:667)
        at org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:961)
        at 
org.eclipse.jdt.internal.ui.javaeditor.PartiallySynchronizedDocument.replace(PartiallySynchronizedDocum
ent.java:61)
        at org.eclipse.jface.text.DocumentCommand$Command.execute(DocumentCommand.java:95)
        at org.eclipse.jface.text.DocumentCommand.execute(DocumentCommand.java:444)
        at org.eclipse.jface.text.TextViewer.handleVerifyEvent(TextViewer.java:3114)
        at org.eclipse.jface.text.TextViewer$TextVerifyListener.verifyText(TextViewer.java:318)
        at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:189)
        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
        at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1027)
        at org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:5808)
        at org.eclipse.swt.custom.StyledText.sendKeyEvent(StyledText.java:6794)
        at org.eclipse.swt.custom.StyledText.doDelete(StyledText.java:2641)
        at org.eclipse.swt.custom.StyledText.invokeAction(StyledText.java:5649)
        at org.eclipse.swt.custom.StyledText.handleKey(StyledText.java:5191)
        at org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:5210)
        at org.eclipse.swt.custom.StyledText$8.handleEvent(StyledText.java:4957)
        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1170)
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1194)
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1179)
        at org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:1901)
        at org.eclipse.swt.widgets.Control.sendKeyEvent(Control.java:1896)
        at org.eclipse.swt.widgets.Control.kEventTextInputUnicodeForKeyEvent(Control.java:1441)
        at org.eclipse.swt.widgets.Composite.kEventTextInputUnicodeForKeyEvent(Composite.java:368)
        at org.eclipse.swt.widgets.Widget.textInputProc(Widget.java:1519)
        at org.eclipse.swt.widgets.Display.textInputProc(Display.java:2653)
        at org.eclipse.swt.internal.carbon.OS.SendEventToEventTarget(Native Method)
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1874)
        at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1676)
        at org.eclipse.ui.internal.Workbench.run(Workbench.java:1659)
        at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)
        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
        at org.eclipse.core.launcher.Main.run(Main.java:747)
        at org.eclipse.core.launcher.Main.main(Main.java:583)

The exception stems from the new Asserts in Position (see bug 35470) and reveals
a bug in LinkedPositionManager. I cannot reproduce it - do you have steps?

However, I suspect the inability to save documents to disk are rather a side
effect of bug 41807 - are you sure it is related to the exception you mentioned? 
Hi,
its very possible that my problems occurred whilst editing the file outside and and then returning to it. I 
did edit the file outside, but did a refresh.

So, no I cannot be certain that the stack is a cause of the problem.
Ok, I assume that the "Files are not being saved" is a duplicate of bug 41807.
Adjusting summary and severity.
ok, thanks.
this is a fix candidate for M3
200308201005 + newest cvs update

Steps:
1. Start to type a method call and invoke content assist, so that parameters
proposals are presented. The proposal popup for the first parameter is open.
2. Choose Edit-&gt;Show Tooltip description (F2)
-&gt; AssertionException happens 

Are you sure it is the same stack trace? I get a BadLocationException.

A possible problem in the code could be that one of the positions gets
invalidated  and hence length can get &lt; 0.

I could add a guard but this would hide the real cause of the problem.

Build id: 200308260800, default preferences

- create file MyClass.java:

public class MyClass {
	public static void ping() {
	}
}

- place cursor between "(" and ")"
- press key "(" 
- press Delete
-&gt; Assertion failed
Created attachment 5873
patch on LinkedPositionManager.java

Fix. LinkedPositionManager now leaves when a linked position gets deleted by a
document change.
The fix is too risky to go into M3.

Tom and I finally chased it down and found a fix.

*** Bug 42240 has been marked as a duplicate of this bug. ***
*** Bug 43390 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>Eclipse: 200308201005 on Mac OS X Jaguar

Files I'm editing and saving are not being saved to disk. There are no errors in the logs. It appears that 
this is an editor problem, because the compiler compiles what is on disk.

Chang
Sorry, there is something in the logs that looks suspicious but I was able to save succesfully after this:

!ENTRY org.eclipse.ui 4 0 Aug 22, 2003 11:00:04.481
!MESSAGE Assertion failed: 
!STACK 0


The exception stems from the new Asserts in Position (see bug 35470) and reveals
a bug in LinkedPositionManager. I cannot reproduce it - do you have steps?

However, I suspect the inability to save documents to disk are rather a side
effect of bug 41807 - are you sure it is related to the exception you mentioned? 
Hi,
its very possible that my problems occurred whilst editing the file outside and and then returning to it. I 
did edit the file outside, but did a refresh.

So, no I cannot be certain that the stack is a cause of the problem.
Ok, I assume that the "Files are not being saved" is a duplicate of bug 41807.
Adjusting summary and severity.
ok, thanks.
this is a fix candidate for M3
200308201005 + newest cvs update

Steps:
1. Start to type a method call and invoke content assist, so that parameters
proposals are presented. The proposal popup for the first parameter is open.
2. Choose Edit-&gt;Show Tooltip description (F2)
-&gt; AssertionException happens 

Are you sure it is the same stack trace? I get a BadLocationException.

A possible problem in the code could be that one of the positions gets
invalidated  and hence length can get &lt; 0.

I could add a guard but this would hide the real cause of the problem.

Build id: 200308260800, default preferences

- create file MyClass.java:

public class MyClass {
	public static void ping() {
	}
}

- place cursor between "(" and ")"
- press key "(" 
- press Delete
-&gt; Assertion failed
Created attachment 5873
patch on LinkedPositionManager.java

Fix. LinkedPositionManager now leaves when a linked position gets deleted by a
document change.
The fix is too risky to go into M3.

Tom and I finally chased it down and found a fix.

*** Bug 42240 has been marked as a duplicate of this bug. ***
*** Bug 43390 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41850" />
    <CreationDate amount="2003-08-22 06:45:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>refactoring preference page is not useful enough to retain [refactoring]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>20030820
i think _nobody_ _ever_ changes the setting in the radio button group. and we 
would not really like anyone to. so i think it should be removed to reduce 
clutter. The checkbox ('save automatically before refactoring') is probably 
needed, but could the be moved to the main java pref page
That has to change anyway with the new processor participant architecture.
Got addressed for M9</WithStack>
    <WithOutStack>20030820
i think _nobody_ _ever_ changes the setting in the radio button group. and we 
would not really like anyone to. so i think it should be removed to reduce 
clutter. The checkbox ('save automatically before refactoring') is probably 
needed, but could the be moved to the main java pref page
That has to change anyway with the new processor participant architecture.
Got addressed for M9</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41851" />
    <CreationDate amount="2003-08-22 06:47:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>code generation pref page: layout makes it hard to find two checkboxes [code manipulation]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>20030820
the 2 checkboxes on the code gen pref page are located at the bottom of the 
page and very easily missed when you see the page.
they should be made more prominent.
Please comment.

it would be better if the two checkboxes are directly under the table widget
*** Bug 42015 has been marked as a duplicate of this bug. ***
Created attachment 6573
Patch for org.eclipse.jdt.internal.ui.preferences.NameConventionConfigurationBlock.java

Display checkboxes immediately after table.
patch released (for NameConventionConfigurationBlock)
&gt; 20031105</WithStack>
    <WithOutStack>20030820
the 2 checkboxes on the code gen pref page are located at the bottom of the 
page and very easily missed when you see the page.
they should be made more prominent.
Please comment.

it would be better if the two checkboxes are directly under the table widget
*** Bug 42015 has been marked as a duplicate of this bug. ***
Created attachment 6573
Patch for org.eclipse.jdt.internal.ui.preferences.NameConventionConfigurationBlock.java

Display checkboxes immediately after table.
patch released (for NameConventionConfigurationBlock)
&gt; 20031105</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41852" />
    <CreationDate amount="2003-08-22 08:25:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>move inline method: add 'inline source' to wizard [refactoring]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>- Reimplementation automatically inlines method invocations to the original</Line>
          <Line>method as default</Line>
          <Line>- Option to create a delegator (= leave the original method)</Line>
          <Line>- Option to deprecate that delegator</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Using 3.0M1

o Move method always generates a parameter for the source class even if it is
  never used. This happens to me a lot when I use move method (otherwise I
  probably wouldn't need to move the method).

o Move method leaves the original method in the source class. It would be nice
  to have an option to inline it automatically. After a move method, the
  original method in the source class doesn't normally add enough value to
  warrant it's existence.

I often find myself doing the following sequence:
o extract method 
o move extracted method
o change signature of method in destination class to remove unused reference to
  source class
o inline original extracted method in source class
the first 'o' is accounted for in the latest (bug 38310)
the other 'o' is a request to add 'inline original method' to the wizard

i will update the title accordingly

- Reimplementation automatically inlines method invocations to the original 
method as default
- Option to create a delegator (= leave the original method)
- Option to deprecate that delegator

Fixed &gt; 20041110</WithStack>
    <WithOutStack>Using 3.0M1

o Move method always generates a parameter for the source class even if it is
  never used. This happens to me a lot when I use move method (otherwise I
  probably wouldn't need to move the method).

o Move method leaves the original method in the source class. It would be nice
  to have an option to inline it automatically. After a move method, the
  original method in the source class doesn't normally add enough value to
  warrant it's existence.

I often find myself doing the following sequence:
o extract method 
o move extracted method
o change signature of method in destination class to remove unused reference to
  source class
o inline original extracted method in source class
the first 'o' is accounted for in the latest (bug 38310)
the other 'o' is a request to add 'inline original method' to the wizard

i will update the title accordingly

- Reimplementation automatically inlines method invocations to the original 
method as default
- Option to create a delegator (= leave the original method)
- Option to deprecate that delegator

Fixed &gt; 20041110</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41853" />
    <CreationDate amount="2003-08-22 08:44:00 -0400" />
    <DupId amount="41190" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.1" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>flag methods that claim to throw exceptions they don't</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>during editing/refactoring, a lot of methods are no longer capable of throwing 
some exceptions that they still have in their throws clause.  At the moment, 
the only way to clean these up is to have all methods remove all throws and 
then "add throws clause" as the quick fix on all the error places that show up.

It'd be a great warning and quick fix option.
it's a duplicate of a bug you already reported, James

*** This bug has been marked as a duplicate of 41190 ***</WithStack>
    <WithOutStack>during editing/refactoring, a lot of methods are no longer capable of throwing 
some exceptions that they still have in their throws clause.  At the moment, 
the only way to clean these up is to have all methods remove all throws and 
then "add throws clause" as the quick fix on all the error places that show up.

It'd be a great warning and quick fix option.
it's a duplicate of a bug you already reported, James

*** This bug has been marked as a duplicate of 41190 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41854" />
    <CreationDate amount="2003-08-22 08:50:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.1" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>warning on created objects that don't get assigned</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="267" end="327" />
        <code>} catch (SomeRegularException e) {
   new AppException(e);
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>It would be nice if created objects that don't get assigned anywhere or used 
could be flagged as warnings.

The example case I saw is a place where we catch various exceptions and then re-
throw app-specific ones.  However, in one of the clauses the developer did:

} catch (SomeRegularException e) {
   new AppException(e);
}

forgetting to "throw" that new exception.  other catch clauses in the same 
method had already thrown the AppException, so the "see if the method can 
really throw this exception" RFE won't cover this particular case, but creation 
and non-usage of an object will :)
comnpile warnings are supplied by jcore
may consider later
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>It would be nice if created objects that don't get assigned anywhere or used 
could be flagged as warnings.

The example case I saw is a place where we catch various exceptions and then re-
throw app-specific ones.  However, in one of the clauses the developer did:

} catch (SomeRegularException e) {
   new AppException(e);
}

forgetting to "throw" that new exception.  other catch clauses in the same 
method had already thrown the AppException, so the "see if the method can 
really throw this exception" RFE won't cover this particular case, but creation 
and non-usage of an object will :)
comnpile warnings are supplied by jcore
may consider later
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41855" />
    <CreationDate amount="2003-08-22 09:02:00 -0400" />
    <DupId amount="10035" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Where can you use launch variables?</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I20030820
I wanted to convert some our test launchers to use launch variables. I defined
the variables in the Debug preferences but then what? I couldn't find how they
could be used in the actual launch configuration.
Currently you can use them in the external tools framework.
Support has not be added for Java launch configurations yet.
see bug 10035 and bug 36930 and bug 37241.

You can set attributes on the launch configuration and if you are using your 
own launch configuration delegate, make use of the LaunchVariableUtil class to 
create and then expand the variables. Take a look at the AntLaunchDelegate and 
the property file resolution for an example (AntUtil.getPropertyFiles
(ILaunchConfiguration)).

I believe this is basically a dup of bug 10035?
What are you trying to achieve with launch variables?



*** This bug has been marked as a duplicate of 10035 ***</WithStack>
    <WithOutStack>I20030820
I wanted to convert some our test launchers to use launch variables. I defined
the variables in the Debug preferences but then what? I couldn't find how they
could be used in the actual launch configuration.
Currently you can use them in the external tools framework.
Support has not be added for Java launch configurations yet.
see bug 10035 and bug 36930 and bug 37241.

You can set attributes on the launch configuration and if you are using your 
own launch configuration delegate, make use of the LaunchVariableUtil class to 
create and then expand the variables. Take a look at the AntLaunchDelegate and 
the property file resolution for an example (AntUtil.getPropertyFiles
(ILaunchConfiguration)).

I believe this is basically a dup of bug 10035?
What are you trying to achieve with launch variables?



*** This bug has been marked as a duplicate of 10035 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41856" />
    <CreationDate amount="2003-08-22 09:12:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Where can you use launch variables?</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>I20030820
I wanted to convert some our test launchers to use launch variables. I defined
the variables in the Debug preferences but then what? I couldn't find how they
could be used in the actual launch configuration.
Sorry about the dupe. Pressed refresh in my browser :(</WithStack>
    <WithOutStack>I20030820
I wanted to convert some our test launchers to use launch variables. I defined
the variables in the Debug preferences but then what? I couldn't find how they
could be used in the actual launch configuration.
Sorry about the dupe. Pressed refresh in my browser :(</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41857" />
    <CreationDate amount="2003-08-22 09:38:00 -0400" />
    <DupId amount="32962" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Checkin doesn't check if files must be saved</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functioncall">
        <location start="681" end="735" />
        <code>PlatformUI.getWorkbench().saveAllEditors(confirm);</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>If we make a modification on a file stored in a team repository and we ask for 
a checkin, it's the last saved version that is checked-in.  Also the editor 
keeps the indicator saying that the file is unsaved (the '*') but is read-only!

The check-in should first check if the file must be saved.

I checked with my team repository provider (it's not cvs) and he said that he 
has reproduce the bug with an other team repository (I don't know which one).  
So according to him it comes from eclipse and not from their plug-in.
You can tell your repository provider that they whould call the following API 
before performing their command to ensure that unsaved editors are saved:

    PlatformUI.getWorkbench().saveAllEditors(confirm);

See bug 32962 for a request for API that allows more selective editor saving.

*** This bug has been marked as a duplicate of 32962 ***</WithStack>
    <WithOutStack>If we make a modification on a file stored in a team repository and we ask for 
a checkin, it's the last saved version that is checked-in.  Also the editor 
keeps the indicator saying that the file is unsaved (the '*') but is read-only!

The check-in should first check if the file must be saved.

I checked with my team repository provider (it's not cvs) and he said that he 
has reproduce the bug with an other team repository (I don't know which one).  
So according to him it comes from eclipse and not from their plug-in.
You can tell your repository provider that they whould call the following API 
before performing their command to ensure that unsaved editors are saved:

    PlatformUI.getWorkbench().saveAllEditors(confirm);

See bug 32962 for a request for API that allows more selective editor saving.

*** This bug has been marked as a duplicate of 32962 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41858" />
    <CreationDate amount="2003-08-22 09:49:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.2" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[JUnit] Layout problem in JUnit view</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="NEW" />
    <resolution amount="" />
    <WithStack>I20030820
The label "Runs:" is indented from the View's left border (see attached screenshot).
As a result the three text fields are narrower than necessary and their contents is clipped.

In addition to fixing this problem I suggest to use a FlowLayout for the three Label/Text pairs so 
that a pair flows to the next line if the view is narrow.
Created attachment 5829
JUnit View
Same problem can happen on Windows. See attached picture.

Created attachment 7730
Image of clipped text
It happens all the time since we have &gt; 1000 tests and  the initial width is too
small.
Discussed with Andre the Mac layout problem is fixed. It was a Mac specific
problem. 
Yep, but the problem still exists, at least on WindowsXP (see second screenshot).
I can file a separate bug if you like.

Moving back to the JDT/UI inbox
*** Bug 52802 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>I20030820
The label "Runs:" is indented from the View's left border (see attached screenshot).
As a result the three text fields are narrower than necessary and their contents is clipped.

In addition to fixing this problem I suggest to use a FlowLayout for the three Label/Text pairs so 
that a pair flows to the next line if the view is narrow.
Created attachment 5829
JUnit View
Same problem can happen on Windows. See attached picture.

Created attachment 7730
Image of clipped text
It happens all the time since we have &gt; 1000 tests and  the initial width is too
small.
Discussed with Andre the Mac layout problem is fixed. It was a Mac specific
problem. 
Yep, but the problem still exists, at least on WindowsXP (see second screenshot).
I can file a separate bug if you like.

Moving back to the JDT/UI inbox
*** Bug 52802 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41859" />
    <CreationDate amount="2003-08-22 10:03:00 -0400" />
    <DupId amount="39887" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="3.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Problem retrieving .classpath file</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867097">
        <Exception>org.eclipse.core.internal.resources.ResourceException</Exception>
        <Reason>Resource /TestProject2/.classpath is not 
local.</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.core.internal.resources.Resource.checkLocal(Resource.java:307)</Frame>
          <Frame depth="1">org.eclipse.core.internal.resources.File.getContents(File.java:213)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.core.Util.getResourceContentsAsByteArray(Util.java:671)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.core.JavaProject.getSharedProperty(JavaProject.java:1799)</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.core.JavaProject.readClasspathFile(JavaProject.java:2095)</Frame>
          <Frame depth="5">org.eclipse.jdt.internal.core.JavaProject.getRawClasspath(JavaProject.java:1579)</Frame>
          <Frame depth="6">org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute(IndexAllProject.java:77)</Frame>
          <Frame depth="7">org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:375)</Frame>
          <Frame depth="8">java.lang.Thread.run(Thread.java:554)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I20030820

Running org.eclipse.jdt.ui.tests on MacOS X results in two occurrences of the following walkback:


!ENTRY org.eclipse.jdt.core 4 4 Aug 22, 2003 15:29:45.82
!MESSAGE Exception while retrieving /TestProject2/.classpath, will revert to default classpath
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource /TestProject2/.classpath is not 
local.
	at org.eclipse.core.internal.resources.Resource.checkLocal(Resource.java:307)
	at org.eclipse.core.internal.resources.File.getContents(File.java:213)
	at org.eclipse.jdt.internal.core.Util.getResourceContentsAsByteArray(Util.java:671)
	at org.eclipse.jdt.internal.core.JavaProject.getSharedProperty(JavaProject.java:1799)
	at org.eclipse.jdt.internal.core.JavaProject.readClasspathFile(JavaProject.java:2095)
	at org.eclipse.jdt.internal.core.JavaProject.getRawClasspath(JavaProject.java:1579)
	at 
org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute(IndexAllProject.java:77)
	at org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:375)
	at java.lang.Thread.run(Thread.java:554)

Since I don't see this under Windows, it might be a timing issue with my relatively slow PowerBook.
Just some more information:
the jdt.ui test cases create and delete lots of "TestProjects" in rapid succession.
I suspect that the indexer thread tried to retrieve the .classpath file but it had already been 
removed in the main thread.
I'm getting the walkback on Win2k too.
Changing platform/OS to All.
Removing "Mac" from Summary.


*** This bug has been marked as a duplicate of 39887 ***</WithStack>
    <WithOutStack>I20030820

Running org.eclipse.jdt.ui.tests on MacOS X results in two occurrences of the following walkback:


!ENTRY org.eclipse.jdt.core 4 4 Aug 22, 2003 15:29:45.82
!MESSAGE Exception while retrieving /TestProject2/.classpath, will revert to default classpath
!STACK 1


Since I don't see this under Windows, it might be a timing issue with my relatively slow PowerBook.
Just some more information:
the jdt.ui test cases create and delete lots of "TestProjects" in rapid succession.
I suspect that the indexer thread tried to retrieve the .classpath file but it had already been 
removed in the main thread.
I'm getting the walkback on Win2k too.
Changing platform/OS to All.
Removing "Mac" from Summary.


*** This bug has been marked as a duplicate of 39887 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41860" />
    <CreationDate amount="2003-08-22 10:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux-GTK" />
    <priority amount="P3" />
    <bug_severity amount="trivial" />
    <Summery>File tab tool tip not redrawn correctly</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1. Place mouse cursor on one of the file tabs at the top of the editor window.</Line>
          <Line>2. Wait until the tool tip comes up listing the full path of the file.</Line>
          <Line>3. Now scroll up in the file using the keyboard up arrow.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>When using the Java editor an incorrect screen redraw occurs after the 
following options:

1. Place mouse cursor on one of the file tabs at the top of the editor window.
2. Wait until the tool tip comes up listing the full path of the file.
3. Now scroll up in the file using the keyboard up arrow.

When the cursor is at the top of the screen and the editor window scrolls, a 
grey box is left where the tool tip used to be.  The tool tip stays active, but 
the grey boxes scroll down as if they were a part of your file.
Are you using GTK or Motif version of Eclipse?
The GTK Version
I see this problem in 2.1.1, but it works fine in the latest 3.0 build.  So 
this has been fixed; changing report to WORKSFORME.</WithStack>
    <WithOutStack>When using the Java editor an incorrect screen redraw occurs after the 
following options:

1. Place mouse cursor on one of the file tabs at the top of the editor window.
2. Wait until the tool tip comes up listing the full path of the file.
3. Now scroll up in the file using the keyboard up arrow.

When the cursor is at the top of the screen and the editor window scrolls, a 
grey box is left where the tool tip used to be.  The tool tip stays active, but 
the grey boxes scroll down as if they were a part of your file.
Are you using GTK or Motif version of Eclipse?
The GTK Version
I see this problem in 2.1.1, but it works fine in the latest 3.0 build.  So 
this has been fixed; changing report to WORKSFORME.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41861" />
    <CreationDate amount="2003-08-22 10:24:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[Progress] Progress view brought to front even if error not visible</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>If an error occurs in a job that has been filtered the progress view will 
still be brought to the front but with no useful information for the user.
This is obsolete now as the progress view does not show errors.</WithStack>
    <WithOutStack>If an error occurs in a job that has been filtered the progress view will 
still be brought to the front but with no useful information for the user.
This is obsolete now as the progress view does not show errors.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41862" />
    <CreationDate amount="2003-08-22 10:51:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[Subscriber] File Contents cache should clear stale entries in the background</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="ASSIGNED" />
    <resolution amount="" />
    <WithStack>Currently, the team file contents cache (RemoteContentsCache) will detect and 
clear stale entries when the cache is accessed. We should consider having a 
bacground job for this and Policies for determining when it is run (i.e. after 
a certain amount of time or when the cache reaches a certain size, etc).
Post 3.0</WithStack>
    <WithOutStack>Currently, the team file contents cache (RemoteContentsCache) will detect and 
clear stale entries when the cache is accessed. We should consider having a 
bacground job for this and Policies for determining when it is run (i.e. after 
a certain amount of time or when the cache reaches a certain size, etc).
Post 3.0</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41863" />
    <CreationDate amount="2003-08-22 10:54:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="Other" />
    <op_sys amount="Windows CE" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Unsupported or unrecognized format exception.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Slipped on the form and left the Description blank. Shouldn't this be a required
field?</WithStack>
    <WithOutStack>Slipped on the form and left the Description blank. Shouldn't this be a required
field?</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41864" />
    <CreationDate amount="2003-08-22 10:59:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="Other" />
    <op_sys amount="Windows CE" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Image: Unsupported or unrecognized format exception.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="assignment">
        <location start="367" end="428" />
        <code>Image image = new Image( m_shell.getDisplay(), "pwlogo.gif");</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>The attached GIF file always produces an Unsupported or unrecognized format
exception. The GIF file can be opened using Internet Explorer on the Pocket PC.
The GIF file can also be opened using SWT on Linux. This bug only seems to
affect the Pocket PC platform.
Created attachment 5830
GIF image
I tested SWT version S-3.0M2-200307181617 for win32-ce-arm-ppc.

Test:
Image image = new Image( m_shell.getDisplay(), "pwlogo.gif");

Result:
org.eclipse.swt.SWTException: Unsupported or unrecognized format exception.
Shawn: I was able to display the image with the SWT M3 build for Pocket PC.
Does a recent SWT integration build fix the problem?

For some reason, your swt.jar looks like it does not have the class 
GIFFileFormat. Is it the case?

Marking as invalid. Assuming the bug was caused by a non standard swt.jar not 
including the GIFFileFormat class (e.g. from WSDD). The swt.jar from the 
Eclipse download page reads the attached gif fine.
Please reopen if you still experience this problem with a recent (standard) 
swt.jar.</WithStack>
    <WithOutStack>The attached GIF file always produces an Unsupported or unrecognized format
exception. The GIF file can be opened using Internet Explorer on the Pocket PC.
The GIF file can also be opened using SWT on Linux. This bug only seems to
affect the Pocket PC platform.
Created attachment 5830
GIF image
I tested SWT version S-3.0M2-200307181617 for win32-ce-arm-ppc.

Test:
Image image = new Image( m_shell.getDisplay(), "pwlogo.gif");

Result:
org.eclipse.swt.SWTException: Unsupported or unrecognized format exception.
Shawn: I was able to display the image with the SWT M3 build for Pocket PC.
Does a recent SWT integration build fix the problem?

For some reason, your swt.jar looks like it does not have the class 
GIFFileFormat. Is it the case?

Marking as invalid. Assuming the bug was caused by a non standard swt.jar not 
including the GIFFileFormat class (e.g. from WSDD). The swt.jar from the 
Eclipse download page reads the attached gif fine.
Please reopen if you still experience this problem with a recent (standard) 
swt.jar.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41865" />
    <CreationDate amount="2003-08-22 11:03:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[Concurrency] Popup menu cannot be opened while CVS operation running</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If I am running a CVS operation (checkout, update, commit) in the background, 
opening a popup menu in a view will block until the operation completes. The 
reason is that the CVS operation obtains the CVS lock at a course granularity 
and opening a menu will perform isEnabled on all the menu items which 
inevitably leads to an attempt to obtain the CVS lock, albeit at a fine 
granularity.

Perhaps we can have two locks: a fine gained one to ensure access to sync info 
returns consistent results and a course grained one to ensure that only one 
thread is modifying the sync info at any given time.
This has been fixed.</WithStack>
    <WithOutStack>If I am running a CVS operation (checkout, update, commit) in the background, 
opening a popup menu in a view will block until the operation completes. The 
reason is that the CVS operation obtains the CVS lock at a course granularity 
and opening a menu will perform isEnabled on all the menu items which 
inevitably leads to an attempt to obtain the CVS lock, albeit at a fine 
granularity.

Perhaps we can have two locks: a fine gained one to ensure access to sync info 
returns consistent results and a course grained one to ensure that only one 
thread is modifying the sync info at any given time.
This has been fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41866" />
    <CreationDate amount="2003-08-22 11:52:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Reference to IConsoleDocumentContentProvider in error message</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>When the console color providers are created the extension in 
ConsoleDocumentManager we had the old error message refering to 
IConsoleDocumentContentProvider
I corrected and moved the error message from DebugUIViewsMessages to 
ConsoleMessages.
I also changed all of the old refs to the console content provider to now 
correctly indicate console color provider.
This entailed renaming methods, fields and local variables.

Changes to ConsoleDocument, ConsoleDocumentManager, 
ConsoleDocumentPartitioner, ConsoleDocumentProvider and ConsoleViewer
Please verify Luc.
Verified.</WithStack>
    <WithOutStack>When the console color providers are created the extension in 
ConsoleDocumentManager we had the old error message refering to 
IConsoleDocumentContentProvider
I corrected and moved the error message from DebugUIViewsMessages to 
ConsoleMessages.
I also changed all of the old refs to the console content provider to now 
correctly indicate console color provider.
This entailed renaming methods, fields and local variables.

Changes to ConsoleDocument, ConsoleDocumentManager, 
ConsoleDocumentPartitioner, ConsoleDocumentProvider and ConsoleViewer
Please verify Luc.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41867" />
    <CreationDate amount="2003-08-22 12:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>[preferences] Tooltip and info views background color clashes with editor colors</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="3">
      <Enumeration lines="3">
        <Lines>
          <Line>a) use the editor background</Line>
          <Line>b) not colorize the java code</Line>
          <Line>or c) let me set a background color for that usage explicitly.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="5">
        <Lines>
          <Line>1. So I added a new preference to the place where it seemed most natural, the list of colors under Preferences-&gt;Java-&gt;Editor. However, there's a problem in that the default should really be whatever the default tooltip color is for the system, and the mechanism for the color preferences doesn't seem to allow a "none" or similar for a fallback. (The kludge I've employed is to hardcode my GTK theme's tooltip color as the default. It looks fine to me :-) )</Line>
          <Line />
          <Line>2. With a different background color, the tooltip suddenly doesn't look like a tooltip (yay for conditioned visual cues), so I put in an inner border with the standard tooltip color. To my eye, it now still looks plenty tooltippy.</Line>
          <Line />
          <Line>3. I added a pixel's worth of padding to the code area, in the tooltip background color, to make it rather less cramped-looking. (This does change the appearance even with the default settings; however, I think it looks better, and at any rate more like a pure-text tooltip than before.)</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="6">
        <Lines>
          <Line>- please do not modify the project name because it makes it impossible to apply</Line>
          <Line>the patch to 'org.eclipse.jdt.ui' as a whole</Line>
          <Line>- it should not contain more than what's reported in this bug i.e. it</Line>
          <Line>should not modify the SourceViewiewerInformationControl (except for using the</Line>
          <Line>new color)</Line>
          <Line>What about the non-code hovers, like the JavaDoc tooltips? Those aren't syntax-highlighted, so they're colored in black, and if they get the same (in my case, dark) background, they'll have the same problem code hovers have now.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>I like black backgrounds.  I've changed my editor accordingly.  However, the
declaration view shows a light yellow background.  Colors that show up well on
black do not show up on light yellow.  This general assumption throughout JDT
that the background for java code should be colorized against and arbitrary
background is a consistent reocurring issue.  It's been a problem in diff
viewers, various "popups" (and other places, I think).  They should either:

a) use the editor background
b) not colorize the java code
or c) let me set a background color for that usage explicitly.

In the case of Declaration view, I can certainly see the advantage in having the
background NOT be the the same as the editor, so let me set that in the preferences.
I20030820

You can set it: it is the same as in the tool tip text of your platform i.e. you
probably "experience" the same problem when using the source hover (Ctrl+hover)
to look at source.

I agree that combining color preferences from Eclipse with global platform
preferences for one view is not optimal.

How is the platform color set for Linux-GTK? (I'm running KDE if that matters...)
I heard that there are files which control the UI. I'm not a Linux expert. I
suggest to ask on a Linux newsgroup.

Should I submit seperate bugs for EACH place in Eclipse that has "color
mismatches" like this, or should I just add to an existing one?

(The latest is in the breakpoint properties dialog, where the "condition" text
area is always a white background (or so it seems) yet uses syntax-colored Java.)
Please file a bug for each one since the components might differ.
*** Bug 45900 has been marked as a duplicate of this bug. ***
*** Bug 50167 has been marked as a duplicate of this bug. ***
*** Bug 51587 has been marked as a duplicate of this bug. ***
*** Bug 58941 has been marked as a duplicate of this bug. ***
*** Bug 60467 has been marked as a duplicate of this bug. ***
Since the Declaration view is not a Tooltip, why does it use that color instead
of the default application background color?
The idea behind this was that we wanted to make it more similar to the hovers.
For the tooltips which use editor syntax colors for foreground, why not use the 
editor background as well?


Is it possible for this to be resolved by 3.0?
*** Bug 65612 has been marked as a duplicate of this bug. ***
*** Bug 68900 has been marked as a duplicate of this bug. ***
*** Bug 65754 has been marked as a duplicate of this bug. ***
*** Bug 68700 has been marked as a duplicate of this bug. ***
*** Bug 70859 has been marked as a duplicate of this bug. ***
*** Bug 38818 has been marked as a duplicate of this bug. ***
*** Bug 79947 has been marked as a duplicate of this bug. ***
*** Bug 88616 has been marked as a duplicate of this bug. ***
Deferred.
IMO, this should NOT be filed as "enhancement". This is a bug, plain and simple.
Reasonable settings (i.e. light text on dark in editors) render whole features
unusable. I personally *like* using dark backgrounds, but for many people with
eye-strain or other problems, they're an absolute necessity. This makes this a
blatant accessibility violation.

Anything that colors syntax should use the editor background, period. (Using the
tooltip color if the background color has been left at the default is a
reasonable special case.)
*** Bug 97747 has been marked as a duplicate of this bug. ***
*** Bug 109864 has been marked as a duplicate of this bug. ***
Created attachment 31916
Patch against 3.1.1 for coloring of code tooltips

Attached is a first effort at fixing one of the issues covered in this bug - that of tooltips being miscolored (as opposed to code in properties dialogs; I haven't looked at that yet). A few issues that came up as I slapped this together:

1. So I added a new preference to the place where it seemed most natural, the list of colors under Preferences-&gt;Java-&gt;Editor. However, there's a problem in that the default should really be whatever the default tooltip color is for the system, and the mechanism for the color preferences doesn't seem to allow a "none" or similar for a fallback. (The kludge I've employed is to hardcode my GTK theme's tooltip color as the default. It looks fine to me :-) )

2. With a different background color, the tooltip suddenly doesn't look like a tooltip (yay for conditioned visual cues), so I put in an inner border with the standard tooltip color. To my eye, it now still looks plenty tooltippy.

3. I added a pixel's worth of padding to the code area, in the tooltip background color, to make it rather less cramped-looking. (This does change the appearance even with the default settings; however, I think it looks better, and at any rate more like a pure-text tooltip than before.)

I haven't any idea how sane this patch is; I'm very new to the Eclipse source base, so likely I stepped on a few delicate things ...

(BTW, I recall that on the docket for 3.2 are some improvements to handling of color settings, such as color schemes and whatnot - has that gelled enough that I should try and redo this patch for HEAD?)
After reading comment #1, I can see how the current implementation makes sense. As I understand it, the general goal is for Eclipse to use system preferences whenever possible and be a good UI citizen, as it were. In the light of this, making the various pop-ups use the system "Tool-Tip" color makes perfect sense and *should* work prefectly well.

This also that means people like me - who use a dark background for code editing, but use the typical black-on-white system settings everywhere else - are causing trouble for everyone else :) Catering to our inconsistent preferences would require Eclipse to "detach" itself from the system preferences. From a consistency point of view, it is objectively the case that this makes things a bit more complicated.

But I still want it :)
Actually, this problem comes from the fact that Eclipse is NOT using the system preferences.  Eclipse is using the system preference for the tooltip background color, but not the foreground color.  I agree that for those who use dark-on-light the current implementation is easier to read then the system preference would be, but whenever a UI goes against the system preference there needs to be an option somewhere that allows a user to at the very least revert back to the system preferences.  I have no problem with dark-on-light tooltips that are monochromatic (instead of syntax highlighting) for my case.  Just give me the option to do it!
Hmmm ... The consistency argument is well-taken, but I'm not sure it applies here. Consistency also demands that we color text in the system text colors (i.e. usually black on white), and this is the default. But as soon as the user overrides the system preferences, we must also respect coherence *within the application*. Light text on a light-colored tooltip is incoherent, so if we let the user tweak the text color, coherence demands that we let him change the tooltip color to match.

It's true, giving an option to turn off highlighting for tooltips would fix the immediate issue, but it may complicate the code, and furthermore I hesitate to add a preference that smells like "make it work" (I'm an acolyte of Havoc Pennington of GNOME [1]). If we're burdening the user and the developers with yet another preference, I say we fix the problem, not back out.

---

[1] See "The Question of Preferences" in http://ometer.com/free-software-ui.html for Havoc's rant about preference sprawl.
Created attachment 32040
Improved patch, against 3.2M4

New version, now diffed against 3.2M4 (though it may well still apply cleanly to 3.1.1). Fixed graphical oddities when a status line is drawn.
Hi Luke, thanks for the patch it's a good start. After looking at the patch and re-reading the PR again I think we should start providing only one new color for setting the hover/tooltip background color and change the places in Platform Text (hovers) and JDT Text (hovers, quick and info views) to use this color preference instead of SWT.COLOR_INFO_FOREGROUND. Since the editor background is on the General &gt; Editors &gt; Text Editors preference page and hovers also apply to non-Java editors we should put the preference there, see TextEditorDefaultsPreferencePage and AbstractDecoratedTextEditorPreferenceConstants.

Some additional comments to the patch:
- please do not modify the project name because it makes it impossible to apply
  the patch to 'org.eclipse.jdt.ui' as a whole
- it should not contain more than what's reported in this bug i.e. it
  should not modify the SourceViewiewerInformationControl (except for using the
  new color)
What about the non-code hovers, like the JavaDoc tooltips? Those aren't syntax-highlighted, so they're colored in black, and if they get the same (in my case, dark) background, they'll have the same problem code hovers have now.

Does this concept of a "code hover", that is, one that shows highlighted source code, as opposed to, say, a "text hover" which does not, exist in the higher levels of abstraction? If so, it would be simple (I would imagine) to say "text hovers get standard tooltip colors and code hovers get highlighting and the custom background" in the code.
Other editors (e.g. Ant, CDT,...) also have "code" hovers and would need to duplicate the preference and I don't like different bg colors for hovers. When adding the bg preference we should also allow to set the (default) fg color for hovers. Both will default to the tooltip system colors i.e. there has to be the "System Default" checkbox.
Why would other editors have to duplicate the preference? Couldn't it just be made a general preference for all editors? Or maybe foreground and background colors for tooltips could be added to the Colors and Fonts preference page?
&gt;Why would other editors have to duplicate the preference? Couldn't it just be
&gt;made a general preference for all editors? 
That's exactly my suggestion: don't introduce a preference in JDT but for all text editors. But you can't call it "code ..." since Platform Text doesn't know anything about code, Java, etc.

&gt;Or maybe foreground and background
&gt;colors for tooltips could be added to the Colors and Fonts preference page?
Up to now we don't use those for Text and Java editor preferences for various reasons (no system default, can't specify not to use a corresponding color/font (i.e. disabel), ...). Currently we want to stay with the existing pattern.
I've added background color preferences for the Declaration and the Javadoc view. Hover background will come in 3.3.
Wait, do you mean there will be two new preferences, one for the declaration view and one for the JavaDoc view? Why? Why not just use the editor background for both? (It gets awfully tiresome to set the same setting in several different places ...)

And why defer the hover background fix until 3.3? It's not exactly an earth-shatteringly complex fix ...
It's been a very long time since I participated in the background color(s) defect debate/process.  I was one of the original reporters a couple of years back.  At any rate, I've been very dissapointed in the way the color preferences have changed over the last few releases.  Having color preferences distributed between the platform text editor prefs and the JDT syntax color prefs is just weird. In addition, unifying all text editor prefs may not be ideal.

I'd like to bring to your attention my favorite approach, implemented in a nifty text editor called TextPad (www.textpad.com).  In their preferences, there's a "document class" concept with an associated range of preferences, from language grammars and associated syntax coloring to encoding, file extensions, etc.  What I find particularly nice about this is that they have a "Default" document class that is equivalent to a super-type that defines preferences for any and all document classes that have not specified their own set.  The other nice aspect of this is that these very same preferences are repeated within each document class.  The net result is that users are given the option of overriding preferences on a document class basis while still beign able to manage default settings that are shared by all non-overriden document class editors.

Without knowing anything about the underlying code, it seems like a model that could be extended to Eclipse.  The default document class settings would be in the platform prefs area, whereas each project would also present the same set of preferences as a means to override defaults for project-specific editors.  

Anyway, I really like Eclipse a lot, so I wanted to pitch in with some ideas for how to make it even better.
Yes, everyone can now freely choose. It won't be linked to your OS hover bg color, not to the OS default bg color and not to the editor bg color - full freedom for everyone.

As for the hover color, it is not a hard fix but will have to go into Platform Text and will have to be exposed as API. Beyond the fact that we are beyond API freeze point we want to give other hover owners time to adopt this color in order to give a consistent look and feel.
Are there any plans to schedule a fix for this any time soon?  I too use light text on a dark background, and having all my Eclipse tooltips get displayed as illegible light text on a bright yellow background is a huge nuisance.

If there was some way for me to change either one of the Eclipse tooltip colors - either background or foreground - it would solve the problem.  But the status quo is really awful.

Anyone have any progress update on this?
It will be in 3.3 if time permitts.
May I ask what's keeping this up? Why does adding a preference require an API change pesky enough that a serious accessibility bug should be three years old?

If changes like "make code hover background colors changeable" require this ungodly much time to fix, doesn't it seem that refactoring the entire text platform/preferences system might actually be *faster*? (And having the other day set roughly 15 different sets of syntax-highlighting settings to my liking, each with a different interface and many of them incompatible (no italics, etc.), I can tell you there must have been many, many more man-hours spent changing redundant settings than it would take to implement a text editing abstraction layer that WORKS.)
I can't wait to see your first patch doing this. Besides that you could also provide a patch just solving this problem or provide a better solution to set the syntax coloring preference - it's an open source project after all, isn't it.
Erm, if by "this" you mean refactor the text editing platform - well, you got me. But if you mean fix this bug ... see comment #27.

(BTW, my experience with this bug is a large part of the reason I *haven't* contributed more to the Eclipse project. The fact that an accessibility bug with a simple fix has gone unfixed for over three years - including almost eight months since a patch was submitted - is discouraging to say the least. This is the sort of frustration that leads to forking, and nobody wants things to go in that direction.)
Please - as you know yourself the patch was not ignored, I reviewed and commented on it and after that no update was provided.
Created attachment 51928
Screen shot of reversed colors (light text on dark background) setting on my OS
(In reply to comment #32)
&gt; Hi Luke, thanks for the patch it's a good start. After looking at the patch and
&gt; re-reading the PR again I think we should start providing only one new color
&gt; for setting the hover/tooltip background color and change the places in
&gt; Platform Text (hovers) and JDT Text (hovers, quick and info views) to use this
&gt; color preference instead of SWT.COLOR_INFO_FOREGROUND.

Hmmm ....

Well, if I understand correctly how you're proposing to fix this, I don't think it's the right approach.

Let's take specifics.  I have my color preferences set (both in Eclipse and on my OS) for light text on a dark background.  (Specifically, light grey on dark blue - see screen shot at http://bugs.eclipse.org/bugs/attachment.cgi?id=51928)  My problem occurs with the Eclipse tooltips because it's trying to display light grey on light yellow.

Now to me, the correct solution would be to have a setting in Eclipse where I could change this to black on light yellow.  (Exactly like Mozilla is doing in the location bar in the screen shot at http://bugs.eclipse.org/bugs/attachment.cgi?id=51928)

However, that doesn't sound like the solution you're proposing here.  It sounds to me like you're suggesting a setting that lets me change the tooltip background, i.e., the light yellow.  While yes that would work, that doesn't really seem like the right solution to me.  Yes, it would be functionally OK if I could make my tooltips light grey text on dark blue or such.  But what would be a much more correct solution from a visual perspective is to have the tooltip be black on light yellow.  And what that would require is a new setting to change the tooltip *fore*ground, not background.

Thoughts?
Or, perhaps a more simple solution:

Since Eclipse is hard-coding the tooltip background as yellow, then perhaps it should similarly hard-code the tooltip foreground as black instead of inheriting that text color from the OS.

That's what Mozilla Firefox appears to be doing.  Even though I've overridden my foreground and background colors to light grey on dark blue, Mozilla ignores those settings when displaying tooltips and just shows them as black on yellow.

Perhaps Eclipse is trying to be a bit too clever here by taking into account the OS's text settings.  If it simply ignored that text setting there wouldn't be any problem here.
I'm not sure what you're talking about now. Note that there are many different hovers, and for example the Javadoc hovers do use the system default foreground and the system default background. The problem described here is mainly applying to the source/code hover where we use the foreground settings from the Java editor. Are you suggesting to remove that functionality and display the source in the tool tip plain black?
Created attachment 51938
Screen shot of tool tip color problem
(In reply to comment #50)
&gt; I'm not sure what you're talking about now. Note that there are many different
&gt; hovers, and for example the Javadoc hovers do use the system default foreground
&gt; and the system default background. The problem described here is mainly
&gt; applying to the source/code hover where we use the foreground settings from the
&gt; Java editor. Are you suggesting to remove that functionality and display the
&gt; source in the tool tip plain black?


No, I'm referring to tooltips over the widgets in the Eclipse toolbar(s) (and possibly occurring elsewhere in Eclipse as well).  See the tooltip at the top of this picture for an example:  https://bugs.eclipse.org/bugs/attachment.cgi?id=51938

The text in the tooltip is unreadable because it's a light foreground color on a yellow background.  What I'm suggesting is either:

a) have Eclipse always use black on a yellow background for tooltips like this, or
b) provide a setting to allow me to change the foreground color
&gt;No, I'm referring to tooltips over the widgets in the Eclipse toolbar(s) (and
&gt;possibly occurring elsewhere in Eclipse as well).
OK, then you are wrong here. Please file a bug report against Platform UI. This bug is about the custom tool tips provided by JDT Text (appearing when hovering over text in an editor).
Sigh
(In response to Comment #48)

I think the right approach is to allow me specify a tooltip background color when  you are using Java syntax coloring.  The bug is to use text settings from the java editor and background from the operating system.

The suggestion that both come from the operating system makes it usable, but you loose some 'power' in not having syntax highlighting available.
I agree with comment #53 - when it comes to source code tooltips, we need a background setting, not a foreground setting.

I agree with commeent #55 - the reason we don't want to set the foreground color is because we want the foreground colors chosen according to syntax.

I can understand why darose would be confused (in comment #48 and later) because the source code tooltips and the "help" tooltips suffer the same problem - even though they are generated by different code. I hope he will have success in getting these different kinds of tooltips disambiguated and getting different settings for each.

In my opinion there's no need for separate background setting for code tooltips. As the foreground colors are taken from the Java editor syntax coloring so the background should be likewise as it is in the editor.
(In reply to comment #57)
&gt; In my opinion there's no need for separate background setting for code
&gt; tooltips. As the foreground colors are taken from the Java editor syntax
&gt; coloring so the background should be likewise as it is in the editor.

I see your point, but I think it's pretty fundamental to tooltips that they have a different background color than the content over which they appear. Don't you agree? For example, if your background color is black, and your tooltip background color is also black, that will make the tooltip sort of merge into the content that it overlays - it will look like a rendering mistake rather than a "pop up".

(In reply to comment #53)
&gt; OK, then you are wrong here. Please file a bug report against Platform UI. This
&gt; bug is about the custom tool tips provided by JDT Text (appearing when hovering
&gt; over text in an editor).

Done:  http://bugs.eclipse.org/bugs/show_bug.cgi?id=160879
(In reply to comment #46)
&gt; Please - as you know yourself the patch was not ignored, I reviewed and
&gt; commented on it and after that no update was provided.

Fair enough. The frustration I refer to is procedural and organizational, not personal (though I know I tend to make things sound more personal than I mean to; sorry about that).

Let me be specific. As I recall, it's comment #40 that I found particularly discouraging:

&gt; As for the hover color, it is not a hard fix but will have to go into Platform
&gt; Text and will have to be exposed as API. Beyond the fact that we are beyond
&gt; API freeze point we want to give other hover owners time to adopt this
&gt; color in order to give a consistent look and feel.

Perhaps I misunderstand, but the image I get from reading this is of a slow, clumsy government bureaucracy. For good, idealistic reasons (fixing this at the platform level is the Right Thing; it's also an API change, and API freezes must be respected; consistency of UI is important), the quick, simple and effective solution to a problem is dismissed in favor of one that will be held up in committee for months (years?). This bug could have been fixed in 3.2. Yes, the already hideous preferences window would get marginally hideouser, but features which were worthless for many people could be made useful again; we would have saved the (important) goal of moving more functionality to the platform layer for another day.

When I realized I'd found a bug that I cared about that I might be able to tackle, I got a charge out of it - enough to dive into the Eclipse code base (daunting, to say the least) and do it, and submit a patch. I then found that my simple change would have to wait months and months to be implemented, and only then if I mastered an enormous, labyrinthine API well enough to make a high-level extension. The ensuing buzzkill was not merely my wounded pride, it was a realization that even small changes like "let the user change the background color of Java code tooltips" would require a lot of hard work, both architectural and political. I didn't have the time and energy for the coding, or the patience for committee politics.

I'd like to think this was an isolated case, but given the fact that syntax coloring (or at least the preferences for it) is reimplemented from scratch by so many different editors and has been for a long time, and that the user experience in the Preferences window is an absolute abomination and yet successive development plans never address this issue (at least not in plain English), I can only conclude that either Eclipse development really is as bureaucratic and sluggish as it appears, or it's hopelessly lost in groupthink and feature creep. Either way, the notion of investing myself as a contributor is less than tempting.
PMC request has been filed in order to fix this for M6.
+1
Fixed in HEAD.
Available in builds &gt;= I20070319-1800.
Verified in I20070320-0010.
As far as I understand this thread, it should be now possible to change the declaration view background color in Eclipse Europa? But how can I do it? I didn't find such a setting in the preferences dialog box.  I only found Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration view (it's still default gray).
(In reply to comment #65)
&gt; As far as I understand this thread, it should be now possible to change the
&gt; declaration view background color in Eclipse Europa? But how can I do it? I
&gt; didn't find such a setting in the preferences dialog box.  I only found
&gt; Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration
&gt; view (it's still default gray).
&gt; 

The General-&gt;Appearance-&gt;Colors and Fonts page contains an item under Java called "Declaration view background".  I believe this is the one you're looking for.  
(In reply to comment #66)
&gt; (In reply to comment #65)
&gt; &gt; As far as I understand this thread, it should be now possible to change the
&gt; &gt; declaration view background color in Eclipse Europa? But how can I do it? I
&gt; &gt; didn't find such a setting in the preferences dialog box.  I only found
&gt; &gt; Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration
&gt; &gt; view (it's still default gray).
&gt; &gt; 
&gt; 
&gt; The General-&gt;Appearance-&gt;Colors and Fonts page contains an item under Java
&gt; called "Declaration view background".  I believe this is the one you're looking
&gt; for.  

This does not work on C/C++ editors (or any other non Java editors for that matter).

This preference should either be duplicated on the "Basic" section of the General/Appearance/Colors and Fonts settings (or at the very least on the "C/C++ tab").

Since the original bug refered to JDT this bug seems to be fixed, but the fix is partial in the sense that this also affects all other editors.
(In reply to comment #67)
&gt; (In reply to comment #66)
&gt; &gt; (In reply to comment #65)
&gt; &gt; &gt; As far as I understand this thread, it should be now possible to change the
&gt; &gt; &gt; declaration view background color in Eclipse Europa? But how can I do it? I
&gt; &gt; &gt; didn't find such a setting in the preferences dialog box.  I only found
&gt; &gt; &gt; Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration
&gt; &gt; &gt; view (it's still default gray).
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; The General-&gt;Appearance-&gt;Colors and Fonts page contains an item under Java
&gt; &gt; called "Declaration view background".  I believe this is the one you're looking
&gt; &gt; for.  
&gt; 
&gt; This does not work on C/C++ editors (or any other non Java editors for that
&gt; matter).
&gt; 
&gt; This preference should either be duplicated on the "Basic" section of the
&gt; General/Appearance/Colors and Fonts settings (or at the very least on the
&gt; "C/C++ tab").
&gt; 
&gt; Since the original bug refered to JDT this bug seems to be fixed, but the fix
&gt; is partial in the sense that this also affects all other editors.

I agree, this should apply to a general section. Not Java one. I makes the option only available if the editor has implemented it.</WithStack>
    <WithOutStack>I like black backgrounds.  I've changed my editor accordingly.  However, the
declaration view shows a light yellow background.  Colors that show up well on
black do not show up on light yellow.  This general assumption throughout JDT
that the background for java code should be colorized against and arbitrary
background is a consistent reocurring issue.  It's been a problem in diff
viewers, various "popups" (and other places, I think).  They should either:

a) use the editor background
b) not colorize the java code
or c) let me set a background color for that usage explicitly.

In the case of Declaration view, I can certainly see the advantage in having the
background NOT be the the same as the editor, so let me set that in the preferences.
I20030820

You can set it: it is the same as in the tool tip text of your platform i.e. you
probably "experience" the same problem when using the source hover (Ctrl+hover)
to look at source.

I agree that combining color preferences from Eclipse with global platform
preferences for one view is not optimal.

How is the platform color set for Linux-GTK? (I'm running KDE if that matters...)
I heard that there are files which control the UI. I'm not a Linux expert. I
suggest to ask on a Linux newsgroup.

Should I submit seperate bugs for EACH place in Eclipse that has "color
mismatches" like this, or should I just add to an existing one?

(The latest is in the breakpoint properties dialog, where the "condition" text
area is always a white background (or so it seems) yet uses syntax-colored Java.)
Please file a bug for each one since the components might differ.
*** Bug 45900 has been marked as a duplicate of this bug. ***
*** Bug 50167 has been marked as a duplicate of this bug. ***
*** Bug 51587 has been marked as a duplicate of this bug. ***
*** Bug 58941 has been marked as a duplicate of this bug. ***
*** Bug 60467 has been marked as a duplicate of this bug. ***
Since the Declaration view is not a Tooltip, why does it use that color instead
of the default application background color?
The idea behind this was that we wanted to make it more similar to the hovers.
For the tooltips which use editor syntax colors for foreground, why not use the 
editor background as well?


Is it possible for this to be resolved by 3.0?
*** Bug 65612 has been marked as a duplicate of this bug. ***
*** Bug 68900 has been marked as a duplicate of this bug. ***
*** Bug 65754 has been marked as a duplicate of this bug. ***
*** Bug 68700 has been marked as a duplicate of this bug. ***
*** Bug 70859 has been marked as a duplicate of this bug. ***
*** Bug 38818 has been marked as a duplicate of this bug. ***
*** Bug 79947 has been marked as a duplicate of this bug. ***
*** Bug 88616 has been marked as a duplicate of this bug. ***
Deferred.
IMO, this should NOT be filed as "enhancement". This is a bug, plain and simple.
Reasonable settings (i.e. light text on dark in editors) render whole features
unusable. I personally *like* using dark backgrounds, but for many people with
eye-strain or other problems, they're an absolute necessity. This makes this a
blatant accessibility violation.

Anything that colors syntax should use the editor background, period. (Using the
tooltip color if the background color has been left at the default is a
reasonable special case.)
*** Bug 97747 has been marked as a duplicate of this bug. ***
*** Bug 109864 has been marked as a duplicate of this bug. ***
Created attachment 31916
Patch against 3.1.1 for coloring of code tooltips

Attached is a first effort at fixing one of the issues covered in this bug - that of tooltips being miscolored (as opposed to code in properties dialogs; I haven't looked at that yet). A few issues that came up as I slapped this together:

1. So I added a new preference to the place where it seemed most natural, the list of colors under Preferences-&gt;Java-&gt;Editor. However, there's a problem in that the default should really be whatever the default tooltip color is for the system, and the mechanism for the color preferences doesn't seem to allow a "none" or similar for a fallback. (The kludge I've employed is to hardcode my GTK theme's tooltip color as the default. It looks fine to me :-) )

2. With a different background color, the tooltip suddenly doesn't look like a tooltip (yay for conditioned visual cues), so I put in an inner border with the standard tooltip color. To my eye, it now still looks plenty tooltippy.

3. I added a pixel's worth of padding to the code area, in the tooltip background color, to make it rather less cramped-looking. (This does change the appearance even with the default settings; however, I think it looks better, and at any rate more like a pure-text tooltip than before.)

I haven't any idea how sane this patch is; I'm very new to the Eclipse source base, so likely I stepped on a few delicate things ...

(BTW, I recall that on the docket for 3.2 are some improvements to handling of color settings, such as color schemes and whatnot - has that gelled enough that I should try and redo this patch for HEAD?)
After reading comment #1, I can see how the current implementation makes sense. As I understand it, the general goal is for Eclipse to use system preferences whenever possible and be a good UI citizen, as it were. In the light of this, making the various pop-ups use the system "Tool-Tip" color makes perfect sense and *should* work prefectly well.

This also that means people like me - who use a dark background for code editing, but use the typical black-on-white system settings everywhere else - are causing trouble for everyone else :) Catering to our inconsistent preferences would require Eclipse to "detach" itself from the system preferences. From a consistency point of view, it is objectively the case that this makes things a bit more complicated.

But I still want it :)
Actually, this problem comes from the fact that Eclipse is NOT using the system preferences.  Eclipse is using the system preference for the tooltip background color, but not the foreground color.  I agree that for those who use dark-on-light the current implementation is easier to read then the system preference would be, but whenever a UI goes against the system preference there needs to be an option somewhere that allows a user to at the very least revert back to the system preferences.  I have no problem with dark-on-light tooltips that are monochromatic (instead of syntax highlighting) for my case.  Just give me the option to do it!
Hmmm ... The consistency argument is well-taken, but I'm not sure it applies here. Consistency also demands that we color text in the system text colors (i.e. usually black on white), and this is the default. But as soon as the user overrides the system preferences, we must also respect coherence *within the application*. Light text on a light-colored tooltip is incoherent, so if we let the user tweak the text color, coherence demands that we let him change the tooltip color to match.

It's true, giving an option to turn off highlighting for tooltips would fix the immediate issue, but it may complicate the code, and furthermore I hesitate to add a preference that smells like "make it work" (I'm an acolyte of Havoc Pennington of GNOME [1]). If we're burdening the user and the developers with yet another preference, I say we fix the problem, not back out.

---

[1] See "The Question of Preferences" in http://ometer.com/free-software-ui.html for Havoc's rant about preference sprawl.
Created attachment 32040
Improved patch, against 3.2M4

New version, now diffed against 3.2M4 (though it may well still apply cleanly to 3.1.1). Fixed graphical oddities when a status line is drawn.
Hi Luke, thanks for the patch it's a good start. After looking at the patch and re-reading the PR again I think we should start providing only one new color for setting the hover/tooltip background color and change the places in Platform Text (hovers) and JDT Text (hovers, quick and info views) to use this color preference instead of SWT.COLOR_INFO_FOREGROUND. Since the editor background is on the General &gt; Editors &gt; Text Editors preference page and hovers also apply to non-Java editors we should put the preference there, see TextEditorDefaultsPreferencePage and AbstractDecoratedTextEditorPreferenceConstants.

Some additional comments to the patch:
- please do not modify the project name because it makes it impossible to apply
  the patch to 'org.eclipse.jdt.ui' as a whole
- it should not contain more than what's reported in this bug i.e. it
  should not modify the SourceViewiewerInformationControl (except for using the
  new color)
What about the non-code hovers, like the JavaDoc tooltips? Those aren't syntax-highlighted, so they're colored in black, and if they get the same (in my case, dark) background, they'll have the same problem code hovers have now.

Does this concept of a "code hover", that is, one that shows highlighted source code, as opposed to, say, a "text hover" which does not, exist in the higher levels of abstraction? If so, it would be simple (I would imagine) to say "text hovers get standard tooltip colors and code hovers get highlighting and the custom background" in the code.
Other editors (e.g. Ant, CDT,...) also have "code" hovers and would need to duplicate the preference and I don't like different bg colors for hovers. When adding the bg preference we should also allow to set the (default) fg color for hovers. Both will default to the tooltip system colors i.e. there has to be the "System Default" checkbox.
Why would other editors have to duplicate the preference? Couldn't it just be made a general preference for all editors? Or maybe foreground and background colors for tooltips could be added to the Colors and Fonts preference page?
&gt;Why would other editors have to duplicate the preference? Couldn't it just be
&gt;made a general preference for all editors? 
That's exactly my suggestion: don't introduce a preference in JDT but for all text editors. But you can't call it "code ..." since Platform Text doesn't know anything about code, Java, etc.

&gt;Or maybe foreground and background
&gt;colors for tooltips could be added to the Colors and Fonts preference page?
Up to now we don't use those for Text and Java editor preferences for various reasons (no system default, can't specify not to use a corresponding color/font (i.e. disabel), ...). Currently we want to stay with the existing pattern.
I've added background color preferences for the Declaration and the Javadoc view. Hover background will come in 3.3.
Wait, do you mean there will be two new preferences, one for the declaration view and one for the JavaDoc view? Why? Why not just use the editor background for both? (It gets awfully tiresome to set the same setting in several different places ...)

And why defer the hover background fix until 3.3? It's not exactly an earth-shatteringly complex fix ...
It's been a very long time since I participated in the background color(s) defect debate/process.  I was one of the original reporters a couple of years back.  At any rate, I've been very dissapointed in the way the color preferences have changed over the last few releases.  Having color preferences distributed between the platform text editor prefs and the JDT syntax color prefs is just weird. In addition, unifying all text editor prefs may not be ideal.

I'd like to bring to your attention my favorite approach, implemented in a nifty text editor called TextPad (www.textpad.com).  In their preferences, there's a "document class" concept with an associated range of preferences, from language grammars and associated syntax coloring to encoding, file extensions, etc.  What I find particularly nice about this is that they have a "Default" document class that is equivalent to a super-type that defines preferences for any and all document classes that have not specified their own set.  The other nice aspect of this is that these very same preferences are repeated within each document class.  The net result is that users are given the option of overriding preferences on a document class basis while still beign able to manage default settings that are shared by all non-overriden document class editors.

Without knowing anything about the underlying code, it seems like a model that could be extended to Eclipse.  The default document class settings would be in the platform prefs area, whereas each project would also present the same set of preferences as a means to override defaults for project-specific editors.  

Anyway, I really like Eclipse a lot, so I wanted to pitch in with some ideas for how to make it even better.
Yes, everyone can now freely choose. It won't be linked to your OS hover bg color, not to the OS default bg color and not to the editor bg color - full freedom for everyone.

As for the hover color, it is not a hard fix but will have to go into Platform Text and will have to be exposed as API. Beyond the fact that we are beyond API freeze point we want to give other hover owners time to adopt this color in order to give a consistent look and feel.
Are there any plans to schedule a fix for this any time soon?  I too use light text on a dark background, and having all my Eclipse tooltips get displayed as illegible light text on a bright yellow background is a huge nuisance.

If there was some way for me to change either one of the Eclipse tooltip colors - either background or foreground - it would solve the problem.  But the status quo is really awful.

Anyone have any progress update on this?
It will be in 3.3 if time permitts.
May I ask what's keeping this up? Why does adding a preference require an API change pesky enough that a serious accessibility bug should be three years old?

If changes like "make code hover background colors changeable" require this ungodly much time to fix, doesn't it seem that refactoring the entire text platform/preferences system might actually be *faster*? (And having the other day set roughly 15 different sets of syntax-highlighting settings to my liking, each with a different interface and many of them incompatible (no italics, etc.), I can tell you there must have been many, many more man-hours spent changing redundant settings than it would take to implement a text editing abstraction layer that WORKS.)
I can't wait to see your first patch doing this. Besides that you could also provide a patch just solving this problem or provide a better solution to set the syntax coloring preference - it's an open source project after all, isn't it.
Erm, if by "this" you mean refactor the text editing platform - well, you got me. But if you mean fix this bug ... see comment #27.

(BTW, my experience with this bug is a large part of the reason I *haven't* contributed more to the Eclipse project. The fact that an accessibility bug with a simple fix has gone unfixed for over three years - including almost eight months since a patch was submitted - is discouraging to say the least. This is the sort of frustration that leads to forking, and nobody wants things to go in that direction.)
Please - as you know yourself the patch was not ignored, I reviewed and commented on it and after that no update was provided.
Created attachment 51928
Screen shot of reversed colors (light text on dark background) setting on my OS
(In reply to comment #32)
&gt; Hi Luke, thanks for the patch it's a good start. After looking at the patch and
&gt; re-reading the PR again I think we should start providing only one new color
&gt; for setting the hover/tooltip background color and change the places in
&gt; Platform Text (hovers) and JDT Text (hovers, quick and info views) to use this
&gt; color preference instead of SWT.COLOR_INFO_FOREGROUND.

Hmmm ....

Well, if I understand correctly how you're proposing to fix this, I don't think it's the right approach.

Let's take specifics.  I have my color preferences set (both in Eclipse and on my OS) for light text on a dark background.  (Specifically, light grey on dark blue - see screen shot at http://bugs.eclipse.org/bugs/attachment.cgi?id=51928)  My problem occurs with the Eclipse tooltips because it's trying to display light grey on light yellow.

Now to me, the correct solution would be to have a setting in Eclipse where I could change this to black on light yellow.  (Exactly like Mozilla is doing in the location bar in the screen shot at http://bugs.eclipse.org/bugs/attachment.cgi?id=51928)

However, that doesn't sound like the solution you're proposing here.  It sounds to me like you're suggesting a setting that lets me change the tooltip background, i.e., the light yellow.  While yes that would work, that doesn't really seem like the right solution to me.  Yes, it would be functionally OK if I could make my tooltips light grey text on dark blue or such.  But what would be a much more correct solution from a visual perspective is to have the tooltip be black on light yellow.  And what that would require is a new setting to change the tooltip *fore*ground, not background.

Thoughts?
Or, perhaps a more simple solution:

Since Eclipse is hard-coding the tooltip background as yellow, then perhaps it should similarly hard-code the tooltip foreground as black instead of inheriting that text color from the OS.

That's what Mozilla Firefox appears to be doing.  Even though I've overridden my foreground and background colors to light grey on dark blue, Mozilla ignores those settings when displaying tooltips and just shows them as black on yellow.

Perhaps Eclipse is trying to be a bit too clever here by taking into account the OS's text settings.  If it simply ignored that text setting there wouldn't be any problem here.
I'm not sure what you're talking about now. Note that there are many different hovers, and for example the Javadoc hovers do use the system default foreground and the system default background. The problem described here is mainly applying to the source/code hover where we use the foreground settings from the Java editor. Are you suggesting to remove that functionality and display the source in the tool tip plain black?
Created attachment 51938
Screen shot of tool tip color problem
(In reply to comment #50)
&gt; I'm not sure what you're talking about now. Note that there are many different
&gt; hovers, and for example the Javadoc hovers do use the system default foreground
&gt; and the system default background. The problem described here is mainly
&gt; applying to the source/code hover where we use the foreground settings from the
&gt; Java editor. Are you suggesting to remove that functionality and display the
&gt; source in the tool tip plain black?


No, I'm referring to tooltips over the widgets in the Eclipse toolbar(s) (and possibly occurring elsewhere in Eclipse as well).  See the tooltip at the top of this picture for an example:  https://bugs.eclipse.org/bugs/attachment.cgi?id=51938

The text in the tooltip is unreadable because it's a light foreground color on a yellow background.  What I'm suggesting is either:

a) have Eclipse always use black on a yellow background for tooltips like this, or
b) provide a setting to allow me to change the foreground color
&gt;No, I'm referring to tooltips over the widgets in the Eclipse toolbar(s) (and
&gt;possibly occurring elsewhere in Eclipse as well).
OK, then you are wrong here. Please file a bug report against Platform UI. This bug is about the custom tool tips provided by JDT Text (appearing when hovering over text in an editor).
Sigh
(In response to Comment #48)

I think the right approach is to allow me specify a tooltip background color when  you are using Java syntax coloring.  The bug is to use text settings from the java editor and background from the operating system.

The suggestion that both come from the operating system makes it usable, but you loose some 'power' in not having syntax highlighting available.
I agree with comment #53 - when it comes to source code tooltips, we need a background setting, not a foreground setting.

I agree with commeent #55 - the reason we don't want to set the foreground color is because we want the foreground colors chosen according to syntax.

I can understand why darose would be confused (in comment #48 and later) because the source code tooltips and the "help" tooltips suffer the same problem - even though they are generated by different code. I hope he will have success in getting these different kinds of tooltips disambiguated and getting different settings for each.

In my opinion there's no need for separate background setting for code tooltips. As the foreground colors are taken from the Java editor syntax coloring so the background should be likewise as it is in the editor.
(In reply to comment #57)
&gt; In my opinion there's no need for separate background setting for code
&gt; tooltips. As the foreground colors are taken from the Java editor syntax
&gt; coloring so the background should be likewise as it is in the editor.

I see your point, but I think it's pretty fundamental to tooltips that they have a different background color than the content over which they appear. Don't you agree? For example, if your background color is black, and your tooltip background color is also black, that will make the tooltip sort of merge into the content that it overlays - it will look like a rendering mistake rather than a "pop up".

(In reply to comment #53)
&gt; OK, then you are wrong here. Please file a bug report against Platform UI. This
&gt; bug is about the custom tool tips provided by JDT Text (appearing when hovering
&gt; over text in an editor).

Done:  http://bugs.eclipse.org/bugs/show_bug.cgi?id=160879
(In reply to comment #46)
&gt; Please - as you know yourself the patch was not ignored, I reviewed and
&gt; commented on it and after that no update was provided.

Fair enough. The frustration I refer to is procedural and organizational, not personal (though I know I tend to make things sound more personal than I mean to; sorry about that).

Let me be specific. As I recall, it's comment #40 that I found particularly discouraging:

&gt; As for the hover color, it is not a hard fix but will have to go into Platform
&gt; Text and will have to be exposed as API. Beyond the fact that we are beyond
&gt; API freeze point we want to give other hover owners time to adopt this
&gt; color in order to give a consistent look and feel.

Perhaps I misunderstand, but the image I get from reading this is of a slow, clumsy government bureaucracy. For good, idealistic reasons (fixing this at the platform level is the Right Thing; it's also an API change, and API freezes must be respected; consistency of UI is important), the quick, simple and effective solution to a problem is dismissed in favor of one that will be held up in committee for months (years?). This bug could have been fixed in 3.2. Yes, the already hideous preferences window would get marginally hideouser, but features which were worthless for many people could be made useful again; we would have saved the (important) goal of moving more functionality to the platform layer for another day.

When I realized I'd found a bug that I cared about that I might be able to tackle, I got a charge out of it - enough to dive into the Eclipse code base (daunting, to say the least) and do it, and submit a patch. I then found that my simple change would have to wait months and months to be implemented, and only then if I mastered an enormous, labyrinthine API well enough to make a high-level extension. The ensuing buzzkill was not merely my wounded pride, it was a realization that even small changes like "let the user change the background color of Java code tooltips" would require a lot of hard work, both architectural and political. I didn't have the time and energy for the coding, or the patience for committee politics.

I'd like to think this was an isolated case, but given the fact that syntax coloring (or at least the preferences for it) is reimplemented from scratch by so many different editors and has been for a long time, and that the user experience in the Preferences window is an absolute abomination and yet successive development plans never address this issue (at least not in plain English), I can only conclude that either Eclipse development really is as bureaucratic and sluggish as it appears, or it's hopelessly lost in groupthink and feature creep. Either way, the notion of investing myself as a contributor is less than tempting.
PMC request has been filed in order to fix this for M6.
+1
Fixed in HEAD.
Available in builds &gt;= I20070319-1800.
Verified in I20070320-0010.
As far as I understand this thread, it should be now possible to change the declaration view background color in Eclipse Europa? But how can I do it? I didn't find such a setting in the preferences dialog box.  I only found Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration view (it's still default gray).
(In reply to comment #65)
&gt; As far as I understand this thread, it should be now possible to change the
&gt; declaration view background color in Eclipse Europa? But how can I do it? I
&gt; didn't find such a setting in the preferences dialog box.  I only found
&gt; Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration
&gt; view (it's still default gray).
&gt; 

The General-&gt;Appearance-&gt;Colors and Fonts page contains an item under Java called "Declaration view background".  I believe this is the one you're looking for.  
(In reply to comment #66)
&gt; (In reply to comment #65)
&gt; &gt; As far as I understand this thread, it should be now possible to change the
&gt; &gt; declaration view background color in Eclipse Europa? But how can I do it? I
&gt; &gt; didn't find such a setting in the preferences dialog box.  I only found
&gt; &gt; Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration
&gt; &gt; view (it's still default gray).
&gt; &gt; 
&gt; 
&gt; The General-&gt;Appearance-&gt;Colors and Fonts page contains an item under Java
&gt; called "Declaration view background".  I believe this is the one you're looking
&gt; for.  

This does not work on C/C++ editors (or any other non Java editors for that matter).

This preference should either be duplicated on the "Basic" section of the General/Appearance/Colors and Fonts settings (or at the very least on the "C/C++ tab").

Since the original bug refered to JDT this bug seems to be fixed, but the fix is partial in the sense that this also affects all other editors.
(In reply to comment #67)
&gt; (In reply to comment #66)
&gt; &gt; (In reply to comment #65)
&gt; &gt; &gt; As far as I understand this thread, it should be now possible to change the
&gt; &gt; &gt; declaration view background color in Eclipse Europa? But how can I do it? I
&gt; &gt; &gt; didn't find such a setting in the preferences dialog box.  I only found
&gt; &gt; &gt; Java-&gt;Editor-&gt;Source hover background, which doesn't affect the declaration
&gt; &gt; &gt; view (it's still default gray).
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; The General-&gt;Appearance-&gt;Colors and Fonts page contains an item under Java
&gt; &gt; called "Declaration view background".  I believe this is the one you're looking
&gt; &gt; for.  
&gt; 
&gt; This does not work on C/C++ editors (or any other non Java editors for that
&gt; matter).
&gt; 
&gt; This preference should either be duplicated on the "Basic" section of the
&gt; General/Appearance/Colors and Fonts settings (or at the very least on the
&gt; "C/C++ tab").
&gt; 
&gt; Since the original bug refered to JDT this bug seems to be fixed, but the fix
&gt; is partial in the sense that this also affects all other editors.

I agree, this should apply to a general section. Not Java one. I makes the option only available if the editor has implemented it.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41868" />
    <CreationDate amount="2003-08-22 12:24:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>Declaration View does not refresh when you change Java-code color preferences</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>I20030820

in general it respects the settings but does not hot-update i.e. the user has to
close and re-open the view.

Right, but it doesn't behave the way the editor does....
That's why I did not close the PR ;-)

Fixed.
Available in builds &gt; 20030825

verified in I20030826</WithStack>
    <WithOutStack>I20030820

in general it respects the settings but does not hot-update i.e. the user has to
close and re-open the view.

Right, but it doesn't behave the way the editor does....
That's why I did not close the PR ;-)

Fixed.
Available in builds &gt; 20030825

verified in I20030826</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41869" />
    <CreationDate amount="2003-08-22 12:46:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Unexpected results from copying variables</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="import">
        <location start="486" end="510" />
        <code>import java.util.Arrays;</code>
      </source_code>
      <source_code type="class">
        <location start="512" end="784" />
        <code>public class B {
	public static void main(String[] args) {
		new B().bar();
	}
	
	public void bar() {
		byte[] arr= new byte[300];
		Arrays.fill(arr, (byte)1);
		Arrays.fill(arr, 100, 200, (byte)2);
		Arrays.fill(arr, 200, 300, (byte)3);
		System.out.println("Bar2");
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Place a breakpoint on line 14
Debug
In the variables view, expand arr to show the bytes from 0..99 and 100..199
Select byte 199. Then shift select to byte 0
Ctrl-C to copy
Ctrl-V to paste somewhere

The copied data is not ordered as the user would expect. It appears to be 
ordered based on the order you did the selection in the variables view. I 
would expect to get the data ordered as presented in the variables view.

I will attach a txt file showing the copied data.

Test class:
import java.util.Arrays;

public class B {
	public static void main(String[] args) {
		new B().bar();
	}
	
	public void bar() {
		byte[] arr= new byte[300];
		Arrays.fill(arr, (byte)1);
		Arrays.fill(arr, 100, 200, (byte)2);
		Arrays.fill(arr, 200, 300, (byte)3);
		System.out.println("Bar2");
	}
}
Created attachment 5833
Txt file showing incorrect ordering of copied text
Cannot reproduce. When I perform your test case, the variables are pasted in the 
correct order - independent of the order I selected them.

Could be a Windows-only problem?
Not a windows only problem...easily reproduceable on MacOSX
Deferred
Fixed in 3.2
Works in 3.2
Verified.</WithStack>
    <WithOutStack>Place a breakpoint on line 14
Debug
In the variables view, expand arr to show the bytes from 0..99 and 100..199
Select byte 199. Then shift select to byte 0
Ctrl-C to copy
Ctrl-V to paste somewhere

The copied data is not ordered as the user would expect. It appears to be 
ordered based on the order you did the selection in the variables view. I 
would expect to get the data ordered as presented in the variables view.

I will attach a txt file showing the copied data.

Test class:
import java.util.Arrays;

public class B {
	public static void main(String[] args) {
		new B().bar();
	}
	
	public void bar() {
		byte[] arr= new byte[300];
		Arrays.fill(arr, (byte)1);
		Arrays.fill(arr, 100, 200, (byte)2);
		Arrays.fill(arr, 200, 300, (byte)3);
		System.out.println("Bar2");
	}
}
Created attachment 5833
Txt file showing incorrect ordering of copied text
Cannot reproduce. When I perform your test case, the variables are pasted in the 
correct order - independent of the order I selected them.

Could be a Windows-only problem?
Not a windows only problem...easily reproduceable on MacOSX
Deferred
Fixed in 3.2
Works in 3.2
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41870" />
    <CreationDate amount="2003-08-22 13:08:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Compare" />
    <Version amount="3.0" />
    <rep_platform amount="Macintosh" />
    <op_sys amount="Mac OS X - Carbon (unsup.)" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Test</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>just a test</WithStack>
    <WithOutStack>just a test</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41871" />
    <CreationDate amount="2003-08-22 13:08:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="3.2" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[JUnit] Run as JUnit Test should recoginze selected method</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Currently, if I select a test method in the outline view for a TestCase, AND the
outline view has the focus, and select "Run as JUnit Test"  It runs a single test.

The same thing should happen when I select a method name in an editor.

Additionally, I'd like to see that on the context menu in that case.
&gt;The same thing should happen when I select a method name in an editor.
this was implemented some time ago. It turned out to be too frustrating having 
to place the caret in between two methods to run the entire class. One 
solution would be a separate launch short cut for runing the selected method, 
but this would lead to an invasion of JUnit related launch short cuts. In 
particular now that the pde.junit launch short cut is in the build.

&gt;Additionally, I'd like to see that on the context menu in that case.
having launch short cuts available in the context menu is something we would 
like to support for 3.0.
I don't want it to use a particular method because I have the cursor in it, but
because the method name is selected.  Surely *that* is not too common an
occurrence as to make things awkward.  There really should be someway to invoke
this from the editor.  I very rarely even have the outline view visible.
Would it be ok to add a CTRL-1 option for running the selected method as a JUnit
test?
In 3.0 we have added "Run As..." to the context menu of the views. We didn't get
to do it for the java editor. Once it is in the context menu of the Java editor
then we should be fine. In particular since you will be able to assign
short-cuts to launches.
Moving back to the JDT/UI inbox
no changes planed
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>Currently, if I select a test method in the outline view for a TestCase, AND the
outline view has the focus, and select "Run as JUnit Test"  It runs a single test.

The same thing should happen when I select a method name in an editor.

Additionally, I'd like to see that on the context menu in that case.
&gt;The same thing should happen when I select a method name in an editor.
this was implemented some time ago. It turned out to be too frustrating having 
to place the caret in between two methods to run the entire class. One 
solution would be a separate launch short cut for runing the selected method, 
but this would lead to an invasion of JUnit related launch short cuts. In 
particular now that the pde.junit launch short cut is in the build.

&gt;Additionally, I'd like to see that on the context menu in that case.
having launch short cuts available in the context menu is something we would 
like to support for 3.0.
I don't want it to use a particular method because I have the cursor in it, but
because the method name is selected.  Surely *that* is not too common an
occurrence as to make things awkward.  There really should be someway to invoke
this from the editor.  I very rarely even have the outline view visible.
Would it be ok to add a CTRL-1 option for running the selected method as a JUnit
test?
In 3.0 we have added "Run As..." to the context menu of the views. We didn't get
to do it for the java editor. Once it is in the context menu of the Java editor
then we should be fine. In particular since you will be able to assign
short-cuts to launches.
Moving back to the JDT/UI inbox
no changes planed
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41872" />
    <CreationDate amount="2003-08-22 13:12:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[misc] Outliner doesn't generate selection change event if method changes name</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="28" end="85" />
        <code>class A {
	public static void bbbb(String[] args) {	
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>- give focus to package explorer</Line>
          <Line>- open editor an A</Line>
          <Line>- change method bbbb to main</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I20030820++

- create class
class A {
	public static void bbbb(String[] args) {	
	}
}

- give focus to package explorer
- open editor an A
- change method bbbb to main

observe: the package explorer receives a selection change event (Refactor-
&gt;Rename is disabled). Give focus to the outliner. Refactor-&gt;Rename is enabled.

I debuged it and the outliner doesn't send out a selection change even in this 
case. The outliner isn't sorted.
Happens due to optimizations in OutlineViewer when processing deltas.
This bug has been there since 2.1.

Fixed.
Available in builds &gt; 20030825</WithStack>
    <WithOutStack>I20030820++

- create class
class A {
	public static void bbbb(String[] args) {	
	}
}

- give focus to package explorer
- open editor an A
- change method bbbb to main

observe: the package explorer receives a selection change event (Refactor-
&gt;Rename is disabled). Give focus to the outliner. Refactor-&gt;Rename is enabled.

I debuged it and the outliner doesn't send out a selection change even in this 
case. The outliner isn't sorted.
Happens due to optimizations in OutlineViewer when processing deltas.
This bug has been there since 2.1.

Fixed.
Available in builds &gt; 20030825</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41873" />
    <CreationDate amount="2003-08-22 13:30:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Timing issue in Launch mode tests</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867127">
        <Exception>junit.framework.AssertionFailedError</Exception>
        <Reason>Launch delegate not invoked 
expected:&lt;org.eclipse.debug.internal.core.LaunchConfiguration@fde55269&gt; but 
was:&lt;null&gt;</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.jdt.debug.tests.core.LaunchModeTests.testContributedLaunchMode(LaunchModeTests.java:82)</Frame>
          <Frame depth="1">org.eclipse.jdt.debug.tests.AutomatedSuite$1.run(AutomatedSuite.java:161)</Frame>
          <Frame depth="2">java.lang.Thread.run(Thread.java:479)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The LaunchModeTests.testContributedLaunchMode is failing in the nightly builds.

testContributedLaunchMode Failure Launch delegate not invoked 
expected:&lt;org.eclipse.debug.internal.core.LaunchConfiguration@fde55269&gt; but 
was:&lt;null&gt; 
junit.framework.AssertionFailedError: Launch delegate not invoked 
expected:&lt;org.eclipse.debug.internal.core.LaunchConfiguration@fde55269&gt; but 
was:&lt;null&gt;
at org.eclipse.jdt.debug.tests.core.LaunchModeTests.testContributedLaunchMode
(LaunchModeTests.java:82)
at org.eclipse.jdt.debug.tests.AutomatedSuite$1.run(AutomatedSuite.java:161)
at java.lang.Thread.run(Thread.java:479)

This is a timing issue with the new Job support launching.
fConfiguration may not have yet been set when the assertEquals is down in the 
test.
Fixed in LaunchModeTests.
Please verify code and that the next nightly build does not fail this test 
case.
I can't reproduce the problem, but I can see how it could occur and verified 
that the code looks good.</WithStack>
    <WithOutStack>The LaunchModeTests.testContributedLaunchMode is failing in the nightly builds.

testContributedLaunchMode Failure Launch delegate not invoked 
expected:&lt;org.eclipse.debug.internal.core.LaunchConfiguration@fde55269&gt; but 
was:&lt;null&gt; 


This is a timing issue with the new Job support launching.
fConfiguration may not have yet been set when the assertEquals is down in the 
test.
Fixed in LaunchModeTests.
Please verify code and that the next nightly build does not fail this test 
case.
I can't reproduce the problem, but I can see how it could occur and verified 
that the code looks good.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41874" />
    <CreationDate amount="2003-08-22 13:36:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Text" />
    <Version amount="3.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>[misc] Add Source/Order Javadoc tags features.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="ASSIGNED" />
    <resolution amount="" />
    <WithStack>Our Javadoc tags are a mess. Sun has a guideline for @tag order here:
http://java.sun.com/j2se/javadoc/writingdoccomments/index.html#tag. It would be
nice to have a command to re-order Javadoc tags for a
thing/class/package/project according to a configurable order where the Sun
order would be the default. I guess that custom tags would need to be handled too.
My javadoc are also a mess. 

tag ordering is part of the action of synchronizing javadoc with user 
preferences. It would be really ergonomic to do the following with a single 
action

synchronize with code
sort the tags
format the javadoc 

Action should be doable on a project, a set of files, a file or a single 
javadoc

Custom tags must be thought about from the beginning. Custom tags are a 
requirement if Eclipe want to beat other IDEs.
*** Bug 47935 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>Our Javadoc tags are a mess. Sun has a guideline for @tag order here:
http://java.sun.com/j2se/javadoc/writingdoccomments/index.html#tag. It would be
nice to have a command to re-order Javadoc tags for a
thing/class/package/project according to a configurable order where the Sun
order would be the default. I guess that custom tags would need to be handled too.
My javadoc are also a mess. 

tag ordering is part of the action of synchronizing javadoc with user 
preferences. It would be really ergonomic to do the following with a single 
action

synchronize with code
sort the tags
format the javadoc 

Action should be doable on a project, a set of files, a file or a single 
javadoc

Custom tags must be thought about from the beginning. Custom tags are a 
requirement if Eclipe want to beat other IDEs.
*** Bug 47935 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41875" />
    <CreationDate amount="2003-08-22 13:50:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[CVS Merge] Optimization possible storing remote trees</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The storage of the two remote trees used for a merge could be optimized by 
having the RemoteSynchronizers for each tree only store sync info that differs 
from the local tree. The OptimizedRemoteSynchronizer does this for the 
workspace subscriber but the merge case is more complicated as each tree has a 
different tag in the sync bytes. The only question is whether the extra 
processing to remove the tag and compare the sync info is worth the space 
savings.
Post 3.0
Actually, this is no good as a change in the local will cause the base or 
remote to change which may not be what you want.</WithStack>
    <WithOutStack>The storage of the two remote trees used for a merge could be optimized by 
having the RemoteSynchronizers for each tree only store sync info that differs 
from the local tree. The OptimizedRemoteSynchronizer does this for the 
workspace subscriber but the merge case is more complicated as each tree has a 
different tag in the sync bytes. The only question is whether the extra 
processing to remove the tag and compare the sync info is worth the space 
savings.
Post 3.0
Actually, this is no good as a change in the local will cause the base or 
remote to change which may not be what you want.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41876" />
    <CreationDate amount="2003-08-22 14:01:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>cannot add root directory of a drive to classpath</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>When setting up a new run configuration for Java debugging, it seems to be 
impossible to add the root directory of a Windows drive (e.g. C:\) to the 
classpath or sourcepath.

From the Run menu, select Debug...
Select an existing config, or click New and enter a name
Select the Classpath tab and un-check 'Use default class path'
Click Advanced...
Select Add External Folder and click OK

The root directory of a drive (e.g. C:\) is not displayed separately from the 
drive itself.  But if you select a drive and click OK, what gets added to the 
classpath is 'Workspace'.
This appears to be a bug with IWorkspaceRoot.findMember(..). When I ask the 
workspace root to findMember(new Path("D:/")), I get back the workspace root. I 
would expect "null". I believe this is a bug, as the IContainer.findMember(..) 
API claims to return itself only if the path passed in is empty. However, "D:\" 
is not an empty path according to IPath.isEmtpy(), as it is a root path.
Darin, it seems wrong that you're looking inside the workspace for a file system
path.  I don't know exactly what you're doing, but it sounds like you should be
using IWorkspaceRoot.getContainerForLocation to map from file system location to
a container.

Note that findMember API contains the line: "The supplied path may be absolute
or relative; in either case, it is interpreted as relative to this resource.". 
So, root.findMember("/") is equivalent to root.findMember("") as far as this
method is concerned.  I can clarify the javadoc for findMember if you still
think this is unclear.
We're using the method to resolve a resource for classpath entries. We expect 
null if there is no associated resource (which means the classpath entry points 
to something outside the workspace). In general, it works for "external" paths 
(i.e. returns null for paths like "d:\x\y\z..."), but not for a path such 
as "D:\". We can do the test on our end for a device and avoid the call to find.
Adding John as CC to see my last comment.
I think you should check the device.  It is possible that a workspace resource
will exist at /x/y/z, so your check for d:\x\y\z might turn up a completlely
unrelated resource in the workspace.  There has been confusion about this in the
past, so I will clarify the spec of IContainer.findMember to say the device is
ignored.

Having said that, it looks like it is possible to define a classpath variable
without specifying a device.  I'm guessing this would break your test. In fact,
this seems to make it impossible to differentiate the two cases.  You could have
a classpath variable that resolves to "/x", and a project in the workspace
called "x".  Then there is no way of knowing whether /x/y/z is an internal or
external classpath variable.  I just tried this, and the java builder doesn't
handle it either.
I have entered bug 42701 against JDT core.  I think they should not allow
creation of classpath variables that don't have a device, since this breaks the
builder as well.  That would make your device check possible.
Fixed in RuntimeClasspathEntry. When retrieving the resource for a runtime 
classpath entry, we use the workspace root methods for finding files and 
containers for a location.
Please verify, Luc.
Verified
*** Bug 43217 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>When setting up a new run configuration for Java debugging, it seems to be 
impossible to add the root directory of a Windows drive (e.g. C:\) to the 
classpath or sourcepath.

From the Run menu, select Debug...
Select an existing config, or click New and enter a name
Select the Classpath tab and un-check 'Use default class path'
Click Advanced...
Select Add External Folder and click OK

The root directory of a drive (e.g. C:\) is not displayed separately from the 
drive itself.  But if you select a drive and click OK, what gets added to the 
classpath is 'Workspace'.
This appears to be a bug with IWorkspaceRoot.findMember(..). When I ask the 
workspace root to findMember(new Path("D:/")), I get back the workspace root. I 
would expect "null". I believe this is a bug, as the IContainer.findMember(..) 
API claims to return itself only if the path passed in is empty. However, "D:\" 
is not an empty path according to IPath.isEmtpy(), as it is a root path.
Darin, it seems wrong that you're looking inside the workspace for a file system
path.  I don't know exactly what you're doing, but it sounds like you should be
using IWorkspaceRoot.getContainerForLocation to map from file system location to
a container.

Note that findMember API contains the line: "The supplied path may be absolute
or relative; in either case, it is interpreted as relative to this resource.". 
So, root.findMember("/") is equivalent to root.findMember("") as far as this
method is concerned.  I can clarify the javadoc for findMember if you still
think this is unclear.
We're using the method to resolve a resource for classpath entries. We expect 
null if there is no associated resource (which means the classpath entry points 
to something outside the workspace). In general, it works for "external" paths 
(i.e. returns null for paths like "d:\x\y\z..."), but not for a path such 
as "D:\". We can do the test on our end for a device and avoid the call to find.
Adding John as CC to see my last comment.
I think you should check the device.  It is possible that a workspace resource
will exist at /x/y/z, so your check for d:\x\y\z might turn up a completlely
unrelated resource in the workspace.  There has been confusion about this in the
past, so I will clarify the spec of IContainer.findMember to say the device is
ignored.

Having said that, it looks like it is possible to define a classpath variable
without specifying a device.  I'm guessing this would break your test. In fact,
this seems to make it impossible to differentiate the two cases.  You could have
a classpath variable that resolves to "/x", and a project in the workspace
called "x".  Then there is no way of knowing whether /x/y/z is an internal or
external classpath variable.  I just tried this, and the java builder doesn't
handle it either.
I have entered bug 42701 against JDT core.  I think they should not allow
creation of classpath variables that don't have a device, since this breaks the
builder as well.  That would make your device check possible.
Fixed in RuntimeClasspathEntry. When retrieving the resource for a runtime 
classpath entry, we use the workspace root methods for finding files and 
containers for a location.
Please verify, Luc.
Verified
*** Bug 43217 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41877" />
    <CreationDate amount="2003-08-22 14:02:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Ant" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Change from "show" to "do not show"</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>When running my ant script, I was prompted twice for a missing tools.jar 
before the Ant dialog appeared. Also, the button to disable showing the dialog 
is not consitent with most others I've seen in the platform. Most say "Do not 
show again" and checking will free the user from seeing the dialog again but 
the Ant one says "Show again" and unchecking will hide the dialog.
I have not been able to reproduce the double prompting?
Can you please provide the exact steps?

I have reworked the toggle dialogs to be consistent.
Changed the MessageDialogWithToggle in external tool land as well.
The problem seems to have gone away. I cannot reproduce this anymore, either 
(in I20030917). 
Show build error dialog, show tools.jar error, show xerces errrors and migrate 
external tool builder all changed.
Please verify Jared.
Verified.</WithStack>
    <WithOutStack>When running my ant script, I was prompted twice for a missing tools.jar 
before the Ant dialog appeared. Also, the button to disable showing the dialog 
is not consitent with most others I've seen in the platform. Most say "Do not 
show again" and checking will free the user from seeing the dialog again but 
the Ant one says "Show again" and unchecking will hide the dialog.
I have not been able to reproduce the double prompting?
Can you please provide the exact steps?

I have reworked the toggle dialogs to be consistent.
Changed the MessageDialogWithToggle in external tool land as well.
The problem seems to have gone away. I cannot reproduce this anymore, either 
(in I20030917). 
Show build error dialog, show tools.jar error, show xerces errrors and migrate 
external tool builder all changed.
Please verify Jared.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41878" />
    <CreationDate amount="2003-08-22 14:05:00 -0400" />
    <DupId amount="" />
    <classification amount="RT" />
    <Product amount="Equinox" />
    <component amount="Incubator" />
    <Version amount="unspecified" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>BundleModel should handle the NL</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>A reminder to check that the BundleModel should do the lookup of 
plugin.properties "a la" ResourceBundle
This is fixed by adapting a similar code available in Eclipse 3.0</WithStack>
    <WithOutStack>A reminder to check that the BundleModel should do the lookup of 
plugin.properties "a la" ResourceBundle
This is fixed by adapting a similar code available in Eclipse 3.0</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41879" />
    <CreationDate amount="2003-08-22 14:20:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-parser" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Parser in complete mode does not recognize a Method's scope in a CPP file</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functiondef">
        <location start="48" end="68" />
        <code>MyClass::MyClass(){}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="48" end="69" />
        <code>MyClass::MyClass(){};</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>In the code (.CPP file):

#include &lt;MyClass.h&gt;

MyClass::MyClass(){};

In complete parse mode, the constructor "MyClass" is not recognized as a method 
with the scope being the clsas "MyClass". Instead it is recognized as a 
function with name = "MyClass::MyClass"
In Complete Parser mode, this has been solved (patch submitted Aug.28, 2003).
In quick parse mode, this will not be fixed as there is no reference 
resolution.</WithStack>
    <WithOutStack>In the code (.CPP file):

#include &lt;MyClass.h&gt;

MyClass::MyClass(){};

In complete parse mode, the constructor "MyClass" is not recognized as a method 
with the scope being the clsas "MyClass". Instead it is recognized as a 
function with name = "MyClass::MyClass"
In Complete Parser mode, this has been solved (patch submitted Aug.28, 2003).
In quick parse mode, this will not be fixed as there is no reference 
resolution.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41880" />
    <CreationDate amount="2003-08-22 14:33:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux-GTK" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Double-click stops working in package explorer</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="20">
        <Lines>
          <Line>1. double clicking a folder expands and shows its contents</Line>
          <Line>2. double clicking a library expands and shows its contents</Line>
          <Line>3. double clicking a jar file expands and shows its contents</Line>
          <Line>4. double clicking a file opens it</Line>
          <Line />
          <Line>(In Navigator)</Line>
          <Line>1. double clicking a folder expands and shows its contents</Line>
          <Line>2. double clicking a file opens it</Line>
          <Line />
          <Line>(In Problems)</Line>
          <Line>If you double click on an item and the file that contains the error/warning is</Line>
          <Line>not already open then it opens it highlights the error.</Line>
          <Line />
          <Line>I was expecting the same behavior on linux box too :-)</Line>
          <Line />
          <Line />
          <Line />
          <Line />
          <Line>I think this can be closed. We had no bug reports for the last years.</Line>
          <Line>agreed, WORKSFORME</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Sometimes double-clicking will cease functioning in the package explorer to open
a file.  Using the right mouse to open the file still works.  I have to restart
eclipse to recover the functionality.

Redhat 8.0 with latest updates, IBM Java 1.4.1.
Are you using Motif or GTK under Linux.
I'm using GTK.
I've never seen this.  Can you think of any steps or criteria for making it 
happen consistently?  Has it ever happened for you in other trees (eg.- the 
Navigator in the Resource perspective)?

I haven't seen it happen in other trees.  At the moment I don't know how to make
it happen on purpose.

Something else that happens to me might be related.  Sometimes the editor gets
into a state that seems to process events REALLY slowly.  A mouse click might
take 30 seconds before the cursor moves in response.  But you would still be
able to click back in the navigator.  Sometimes.  It's like the event loop gets
screwed up.  Killing and restarting doesn't always fix this immediately, and
sometimes it will just begin behaving normally again.

I wish I could give better feedback.  
My entire developent team sees this problem running on WindowsXP/2000.  We are
all using 3.0, (various milestones), Java 1.4.2.  We have only seen this in the
Package explorer and it seems to be incosistant.  It happens around 20% of the
time.  I have noticed that if I select a class first, wait a second or so and
then double click, it always opens the file.
I don't think it's worth keeping this bug open unless it's still happening and
you get close to reproducable steps.
Leave as RESOLVED WORKSFORME  -- Doesn't Work For Me :-(  
 
Double-click in package explorer doesn't work at all.  
  
Eclipse : 3.0 (JDK 1.4.2), 3.1 (JDK 1.5)  
OS      : Suse 9.3 64Bit  
HW      : ADM64 Athlon 3200+  
Reopening.  Does double clicking work elsewhere in the application?

What in the package explorer are you double clicking on and what
do you expect to happen?
Double-click behavior in Windows XP:  
(In package explorer) 
1. double clicking a folder expands and shows its contents 
2. double clicking a library expands and shows its contents 
3. double clicking a jar file expands and shows its contents 
4. double clicking a file opens it 
 
(In Navigator) 
1. double clicking a folder expands and shows its contents 
2. double clicking a file opens it 
 
(In Problems) 
If you double click on an item and the file that contains the error/warning is 
not already open then it opens it highlights the error. 
 
I was expecting the same behavior on linux box too :-) 
 
 
 
 
I think this can be closed. We had no bug reports for the last years.
agreed, WORKSFORME</WithStack>
    <WithOutStack>Sometimes double-clicking will cease functioning in the package explorer to open
a file.  Using the right mouse to open the file still works.  I have to restart
eclipse to recover the functionality.

Redhat 8.0 with latest updates, IBM Java 1.4.1.
Are you using Motif or GTK under Linux.
I'm using GTK.
I've never seen this.  Can you think of any steps or criteria for making it 
happen consistently?  Has it ever happened for you in other trees (eg.- the 
Navigator in the Resource perspective)?

I haven't seen it happen in other trees.  At the moment I don't know how to make
it happen on purpose.

Something else that happens to me might be related.  Sometimes the editor gets
into a state that seems to process events REALLY slowly.  A mouse click might
take 30 seconds before the cursor moves in response.  But you would still be
able to click back in the navigator.  Sometimes.  It's like the event loop gets
screwed up.  Killing and restarting doesn't always fix this immediately, and
sometimes it will just begin behaving normally again.

I wish I could give better feedback.  
My entire developent team sees this problem running on WindowsXP/2000.  We are
all using 3.0, (various milestones), Java 1.4.2.  We have only seen this in the
Package explorer and it seems to be incosistant.  It happens around 20% of the
time.  I have noticed that if I select a class first, wait a second or so and
then double click, it always opens the file.
I don't think it's worth keeping this bug open unless it's still happening and
you get close to reproducable steps.
Leave as RESOLVED WORKSFORME  -- Doesn't Work For Me :-(  
 
Double-click in package explorer doesn't work at all.  
  
Eclipse : 3.0 (JDK 1.4.2), 3.1 (JDK 1.5)  
OS      : Suse 9.3 64Bit  
HW      : ADM64 Athlon 3200+  
Reopening.  Does double clicking work elsewhere in the application?

What in the package explorer are you double clicking on and what
do you expect to happen?
Double-click behavior in Windows XP:  
(In package explorer) 
1. double clicking a folder expands and shows its contents 
2. double clicking a library expands and shows its contents 
3. double clicking a jar file expands and shows its contents 
4. double clicking a file opens it 
 
(In Navigator) 
1. double clicking a folder expands and shows its contents 
2. double clicking a file opens it 
 
(In Problems) 
If you double click on an item and the file that contains the error/warning is 
not already open then it opens it highlights the error. 
 
I was expecting the same behavior on linux box too :-) 
 
 
 
 
I think this can be closed. We had no bug reports for the last years.
agreed, WORKSFORME</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41881" />
    <CreationDate amount="2003-08-22 15:49:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>[Viewers] Wrong image-size setting LabelProvider</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="functioncall">
        <location start="88" end="135" />
        <code>myTreeViewer.setLabelProvider(myLabelProvider);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="136" end="167" />
        <code>myTreeViewer.setInput(myInput);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="202" end="233" />
        <code>myTreeViewer.setInput(myInput);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="234" end="281" />
        <code>myTreeViewer.setLabelProvider(myLabelProvider);</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>I set a new LabelProvider on a TreeViewer the following way:

this works: (first case)

myTreeViewer.setLabelProvider(myLabelProvider);
myTreeViewer.setInput(myInput);

this doesn't work: (first case)

myTreeViewer.setInput(myInput);
myTreeViewer.setLabelProvider(myLabelProvider);

by default myTreeViewer's default LabelProvider
returns ImageDescriptor.getMissingImage() as 
label-image. 

It seams that by setting the input the viewer
fetches all the images and stores the image
and its size somewhere. After setting a new
label provider, the images of the labels
change and are displayed correctly except
the size is still the size of the missing
image which is about 4x4 or 8x8 (not sure)
but not 16x16 (like the images used by
the new label provider). Therefore the new
images are displayed much smaller than they
actual are.

But resetting the input after setting the 
label, the images are displayed correctly.


So I think it's a 'bug' ;)
All images in the Tree will have the same size.  The size of the images in the 
tree are based on the size of the first image added.  To change the size of 
the images in the tree you must remove all images first and then add a new 
image of the desired size.

Not sure if JFace can offer you any help here.  Reassigning to JFace to 
consider.
After setting the new LabelProvider all previous images are replaced (in my 
case). The problem is that it's not obvious to me that setting a new label 
provider, the input has to be reset or the images has to be treaten in a 
special way. This is something the API should do, I think.

A good solution would be to do some additional logic to setLabelProvider. Maybe 
checking if the first image fetched from the new label provider differs in size 
with the old 'reference' image. If yes then maybe the Tree should perform the 
required removement of the 'old' images by itself. I don't think this 
would 'kill' the performance ;)

Thanks
Reassigning bugs in component areas that are changing ownership.
There are no plans to compensate the SWT behaviour.</WithStack>
    <WithOutStack>I set a new LabelProvider on a TreeViewer the following way:

this works: (first case)

myTreeViewer.setLabelProvider(myLabelProvider);
myTreeViewer.setInput(myInput);

this doesn't work: (first case)

myTreeViewer.setInput(myInput);
myTreeViewer.setLabelProvider(myLabelProvider);

by default myTreeViewer's default LabelProvider
returns ImageDescriptor.getMissingImage() as 
label-image. 

It seams that by setting the input the viewer
fetches all the images and stores the image
and its size somewhere. After setting a new
label provider, the images of the labels
change and are displayed correctly except
the size is still the size of the missing
image which is about 4x4 or 8x8 (not sure)
but not 16x16 (like the images used by
the new label provider). Therefore the new
images are displayed much smaller than they
actual are.

But resetting the input after setting the 
label, the images are displayed correctly.


So I think it's a 'bug' ;)
All images in the Tree will have the same size.  The size of the images in the 
tree are based on the size of the first image added.  To change the size of 
the images in the tree you must remove all images first and then add a new 
image of the desired size.

Not sure if JFace can offer you any help here.  Reassigning to JFace to 
consider.
After setting the new LabelProvider all previous images are replaced (in my 
case). The problem is that it's not obvious to me that setting a new label 
provider, the input has to be reset or the images has to be treaten in a 
special way. This is something the API should do, I think.

A good solution would be to do some additional logic to setLabelProvider. Maybe 
checking if the first image fetched from the new label provider differs in size 
with the old 'reference' image. If yes then maybe the Tree should perform the 
required removement of the 'old' images by itself. I don't think this 
would 'kill' the performance ;)

Thanks
Reassigning bugs in component areas that are changing ownership.
There are no plans to compensate the SWT behaviour.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41882" />
    <CreationDate amount="2003-08-22 16:08:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>[Markers] Mark tasks as reviewed</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>I would like to have the the ability to set eclipse tasks and some
plugin-generated tasks as "reviewed".  I'm thinking of siutations where Eclipse
rightfully generates warnings, but no action should be taken.  For example, many
of my unit tests do nothing in the catch block, because catching an exception is
the expected behavior.  I still want to see these warnings in general, but would
like to filter out those I've already examined.

One requirement is for these tasks to be able to be filtered out, kind of like
&lt;A href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=39417"&gt;Bug #39417&lt;/A&gt;

The ability to annotate the review, and to see the date of the review, would be
especially useful.

Tasks would have to be un-marked when their related code changes.  A simple
solution could be to mark them for re-review when the related file changes.  

It may be the case that this ability is not suitable for all tasks, if so, it
would need to be another attribute of some sort.

An example of usage: I write code and receive new issues.  Some I fix, some of
these will not be resolved.  I mark appropriate ones as reviewed, making a
comment, and they disappear from my task filter.  I check in the 'annotations'
file to share these changes with my teammates.  As a lead developer, I would
periodically review the tasks, ordered by their review date, to see if the
reasons were valid.
Reassigning bugs in component areas that are changing ownership.

There are currently no plans to work on this feature
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>I would like to have the the ability to set eclipse tasks and some
plugin-generated tasks as "reviewed".  I'm thinking of siutations where Eclipse
rightfully generates warnings, but no action should be taken.  For example, many
of my unit tests do nothing in the catch block, because catching an exception is
the expected behavior.  I still want to see these warnings in general, but would
like to filter out those I've already examined.

One requirement is for these tasks to be able to be filtered out, kind of like
&lt;A href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=39417"&gt;Bug #39417&lt;/A&gt;

The ability to annotate the review, and to see the date of the review, would be
especially useful.

Tasks would have to be un-marked when their related code changes.  A simple
solution could be to mark them for re-review when the related file changes.  

It may be the case that this ability is not suitable for all tasks, if so, it
would need to be another attribute of some sort.

An example of usage: I write code and receive new issues.  Some I fix, some of
these will not be resolved.  I mark appropriate ones as reviewed, making a
comment, and they disappear from my task filter.  I check in the 'annotations'
file to share these changes with my teammates.  As a lead developer, I would
periodically review the tasks, ordered by their review date, to see if the
reasons were valid.
Reassigning bugs in component areas that are changing ownership.

There are currently no plans to work on this feature
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41883" />
    <CreationDate amount="2003-08-22 16:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[Live Sync View] After crash, some outgoing additions don't appear</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="ifstatement">
        <location start="602" end="684" />
        <code>if (file.getParent().isModified(monitor)) {
		return file.isModified(monitor);
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I was modifing some files when Eclipse crashed (dealock). After killing and 
restarting, the outgoing changes in one of the projects I was working on did 
not appear in the view. Refreshing the subscriber did not help (not 
surprising). Selecting the refresh view from the view menu fixed the problem. 
I can't understand why the outgoing changes didn't appear in the first place 
since the files were decorated properly in the navigator.
A quick investigation has revealed the following code in the workspace 
subscriber getAllOutOfSync for determining, in an optimal way, if a file is 
out-of-sync:

	if (file.getParent().isModified(monitor)) {
		return file.isModified(monitor);
	}

This code relies on the dirty state of the folder being properly persisted. I 
suspect the crash left the on disk dirty state = clean for the folder.
A file that is created on startup and deleted on shutdown is used to determine 
if the contents of the persisted cache are good. Fixed in HEAD.
*** Bug 47384 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>I was modifing some files when Eclipse crashed (dealock). After killing and 
restarting, the outgoing changes in one of the projects I was working on did 
not appear in the view. Refreshing the subscriber did not help (not 
surprising). Selecting the refresh view from the view menu fixed the problem. 
I can't understand why the outgoing changes didn't appear in the first place 
since the files were decorated properly in the navigator.
A quick investigation has revealed the following code in the workspace 
subscriber getAllOutOfSync for determining, in an optimal way, if a file is 
out-of-sync:

	if (file.getParent().isModified(monitor)) {
		return file.isModified(monitor);
	}

This code relies on the dirty state of the folder being properly persisted. I 
suspect the crash left the on disk dirty state = clean for the folder.
A file that is created on startup and deleted on shutdown is used to determine 
if the contents of the persisted cache are good. Fixed in HEAD.
*** Bug 47384 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41884" />
    <CreationDate amount="2003-08-22 16:27:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux-GTK" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>CTRL+SHIFT+F does not give KeyDown on GTK2.x</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1.) Use GTK2.x on top of RedHat 9.0, I20030813 build of Eclipse</Line>
          <Line>2.) Run the key capture snippet mentioned above.</Line>
          <Line>3.) Press CTRL</Line>
          <Line>4.) Press SHIFT</Line>
          <Line>5.) Press F</Line>
          <Line>6.) Release F</Line>
          <Line>7.) Release SHIFT</Line>
          <Line>8.) Release CTRL</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Pressing CTRL+SHIFT+F does not give a key down event.  It only gives the key 
up event.  This has been testing using the key capture snippet from the SWT 
homepage ("http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-swt-
home/snippits/snippet25.html").

STEPS TO REPRODUCE:
1.) Use GTK2.x on top of RedHat 9.0, I20030813 build of Eclipse
2.) Run the key capture snippet mentioned above.
3.) Press CTRL
4.) Press SHIFT
5.) Press F
6.) Release F
7.) Release SHIFT
8.) Release CTRL


EXPECTED RESULTS:
A DOWN event for the 'F' key press.


ACTUAL RESULTS:
This the output from the snippet:
DOWN: stateMask=0x0, keyCode=0x40000, character=0x0 '\0'
DOWN: stateMask=0x40000 CTRL, keyCode=0x20000, character=0x0 '\0'
UP  : stateMask=0x60000 CTRL SHIFT, keyCode=0x0, character=0x6 ''
DOWN: stateMask=0x0, keyCode=0x0, character=0xf ''
UP  : stateMask=0x20000 SHIFT, keyCode=0x20000, character=0x0 '\0'
FH, this needs to be fixed for M3.  Thanks.
I believe this is related with:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=40460
Which is actually a bug in GTK:
http://bugzilla.gnome.org/show_bug.cgi?id=118022
http://bugzilla.gnome.org/show_bug.cgi?id=100439

SWT does nothing special, I think GTK is wrongly consuming the key strokes.
Anyway, I will investigate a bit further before marking this as duplicate.

As a note, CTRL+SHIFT+F works when trying to format source code.  Listening to 
key up events?
When you run the snippet you probably see a underline F displayed in the top 
left corner. For some reason the default input method is consuming this 
keystroke. This same problem also happens on a simple GTK (C code) snippet I 
have. 

You can:
-listen to events on a widget that doesn't have input method (i.e. Button)
-select a different input method (this can cause problem for i18n)

Sorry, I can not fix this problem.
how do you select a diffrent imput method?</WithStack>
    <WithOutStack>Pressing CTRL+SHIFT+F does not give a key down event.  It only gives the key 
up event.  This has been testing using the key capture snippet from the SWT 
homepage ("http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-swt-
home/snippits/snippet25.html").

STEPS TO REPRODUCE:
1.) Use GTK2.x on top of RedHat 9.0, I20030813 build of Eclipse
2.) Run the key capture snippet mentioned above.
3.) Press CTRL
4.) Press SHIFT
5.) Press F
6.) Release F
7.) Release SHIFT
8.) Release CTRL


EXPECTED RESULTS:
A DOWN event for the 'F' key press.


ACTUAL RESULTS:
This the output from the snippet:
DOWN: stateMask=0x0, keyCode=0x40000, character=0x0 '\0'
DOWN: stateMask=0x40000 CTRL, keyCode=0x20000, character=0x0 '\0'
UP  : stateMask=0x60000 CTRL SHIFT, keyCode=0x0, character=0x6 ''
DOWN: stateMask=0x0, keyCode=0x0, character=0xf ''
UP  : stateMask=0x20000 SHIFT, keyCode=0x20000, character=0x0 '\0'
FH, this needs to be fixed for M3.  Thanks.
I believe this is related with:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=40460
Which is actually a bug in GTK:
http://bugzilla.gnome.org/show_bug.cgi?id=118022
http://bugzilla.gnome.org/show_bug.cgi?id=100439

SWT does nothing special, I think GTK is wrongly consuming the key strokes.
Anyway, I will investigate a bit further before marking this as duplicate.

As a note, CTRL+SHIFT+F works when trying to format source code.  Listening to 
key up events?
When you run the snippet you probably see a underline F displayed in the top 
left corner. For some reason the default input method is consuming this 
keystroke. This same problem also happens on a simple GTK (C code) snippet I 
have. 

You can:
-listen to events on a widget that doesn't have input method (i.e. Button)
-select a different input method (this can cause problem for i18n)

Sorry, I can not fix this problem.
how do you select a diffrent imput method?</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41885" />
    <CreationDate amount="2003-08-22 16:37:00 -0400" />
    <DupId amount="41583" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="3.0" />
    <rep_platform amount="Macintosh" />
    <op_sys amount="Mac OS X - Carbon (unsup.)" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>"Does Not Exist" error when creating new project outside of workspace</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I often do some work in other tools, including creating an ANT build script, lib dir, src dir, and 
build dir, before firing up Eclipse.  (I expect this to happen less often as launch times and editor 
responsiveness improve in the still young SWT implementation for MacOS X.)

When I attempt to create a new project in one of these existing directories, it will fail in 3.0M2 and 
in the Aug. 3 release of Eclipse.

To reproduce:

Create a new directory in the file system.
Give that directory a src dir with an appropriately packaged java file, a lib dir with some libs, and a 
build dir.
Launch Eclipse 3.0M2
Attempt to create a new Java project with any name, though this example used "Spheres" as the 
project name, and with a home of the new directory you just created.

The message on the screen is "Spheres does not exist"

The log contains:

!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Spheres does not exist.]
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:437)
	at 
org.eclipse.jdt.internal.core.JavaModelManager.getPerProjectInfoCheckExistence(JavaModelManage
r.java:848)
	at org.eclipse.jdt.internal.core.JavaProject.getPerProjectInfo(JavaProject.java:1544)
	at org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1635)
	at org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1621)
	at org.eclipse.jdt.internal.core.JavaProject.buildStructure(JavaProject.java:217)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:198)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:448)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:269)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:255)
	at org.eclipse.jdt.internal.core.JavaProject.getJavaProjectElementInfo(JavaProject.java:1282)
	at org.eclipse.jdt.internal.core.JavaProject.getNameLookup(JavaProject.java:1290)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1004)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:988)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:981)
	at 
org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visitCompilationUnit(ClassPathDetector.java:2
16)
	at org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visit(ClassPathDetector.java:273)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:50)
	at 
org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:76)
	at 
org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:80)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:119)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:60)
	at org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.&lt;init&gt;(ClassPathDetector.java:62)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.updateProject(NewProjectCreatio
nWizardPage.java:124)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage$1.run(NewProjectCreationWizard
Page.java:86)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)
	at org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:758)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.changeToNewProject(NewProject
CreationWizardPage.java:94)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.setVisible(NewProjectCreationWiz
ardPage.java:64)
	at org.eclipse.jface.wizard.WizardDialog.updateForPage(WizardDialog.java:959)
	at org.eclipse.jface.wizard.WizardDialog.access$1(WizardDialog.java:940)
	at org.eclipse.jface.wizard.WizardDialog$3.run(WizardDialog.java:929)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.jface.wizard.WizardDialog.showPage(WizardDialog.java:927)
	at org.eclipse.jface.wizard.WizardDialog.nextPressed(WizardDialog.java:684)
	at org.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:316)
	at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:423)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:89)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1016)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)
	at org.eclipse.jface.window.Window.runEventLoop(Window.java:583)
	at org.eclipse.jface.window.Window.open(Window.java:563)
	at org.eclipse.ui.actions.NewProjectAction.run(NewProjectAction.java:107)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java
:542)
	at org.eclipse.jface.action.ActionContributionItem.access$4(ActionContributionItem.java:496)
	at 
org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:468)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1016)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1680)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1663)
	at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)
!ENTRY org.eclipse.jdt.core 4 969 Aug 22, 2003 13:07:30.330
!MESSAGE Spheres does not exist.

I will try again with M3 in a week.

Note - this works with M1, and thus I usually launch M1, create my project, quit, and then create 
the project again in M2.  It picks up the entries in the .classpath file happily, and does not fail.
Your scenario is different from bug #41583 but the culprit is the same.

*** This bug has been marked as a duplicate of 41583 ***
*** Bug 41996 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>I often do some work in other tools, including creating an ANT build script, lib dir, src dir, and 
build dir, before firing up Eclipse.  (I expect this to happen less often as launch times and editor 
responsiveness improve in the still young SWT implementation for MacOS X.)

When I attempt to create a new project in one of these existing directories, it will fail in 3.0M2 and 
in the Aug. 3 release of Eclipse.

To reproduce:

Create a new directory in the file system.
Give that directory a src dir with an appropriately packaged java file, a lib dir with some libs, and a 
build dir.
Launch Eclipse 3.0M2
Attempt to create a new Java project with any name, though this example used "Spheres" as the 
project name, and with a home of the new directory you just created.

The message on the screen is "Spheres does not exist"

The log contains:

!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Spheres does not exist.]
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:437)
	at 
org.eclipse.jdt.internal.core.JavaModelManager.getPerProjectInfoCheckExistence(JavaModelManage
r.java:848)
	at org.eclipse.jdt.internal.core.JavaProject.getPerProjectInfo(JavaProject.java:1544)
	at org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1635)
	at org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1621)
	at org.eclipse.jdt.internal.core.JavaProject.buildStructure(JavaProject.java:217)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:198)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:448)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:269)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:255)
	at org.eclipse.jdt.internal.core.JavaProject.getJavaProjectElementInfo(JavaProject.java:1282)
	at org.eclipse.jdt.internal.core.JavaProject.getNameLookup(JavaProject.java:1290)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1004)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:988)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:981)
	at 
org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visitCompilationUnit(ClassPathDetector.java:2
16)
	at org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.visit(ClassPathDetector.java:273)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:50)
	at 
org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:76)
	at 
org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:80)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:119)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:60)
	at org.eclipse.jdt.internal.ui.wizards.ClassPathDetector.&lt;init&gt;(ClassPathDetector.java:62)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.updateProject(NewProjectCreatio
nWizardPage.java:124)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage$1.run(NewProjectCreationWizard
Page.java:86)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:302)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:252)
	at org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:758)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.changeToNewProject(NewProject
CreationWizardPage.java:94)
	at 
org.eclipse.jdt.internal.ui.wizards.NewProjectCreationWizardPage.setVisible(NewProjectCreationWiz
ardPage.java:64)
	at org.eclipse.jface.wizard.WizardDialog.updateForPage(WizardDialog.java:959)
	at org.eclipse.jface.wizard.WizardDialog.access$1(WizardDialog.java:940)
	at org.eclipse.jface.wizard.WizardDialog$3.run(WizardDialog.java:929)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:84)
	at org.eclipse.jface.wizard.WizardDialog.showPage(WizardDialog.java:927)
	at org.eclipse.jface.wizard.WizardDialog.nextPressed(WizardDialog.java:684)
	at org.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:316)
	at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:423)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:89)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1016)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)
	at org.eclipse.jface.window.Window.runEventLoop(Window.java:583)
	at org.eclipse.jface.window.Window.open(Window.java:563)
	at org.eclipse.ui.actions.NewProjectAction.run(NewProjectAction.java:107)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java
:542)
	at org.eclipse.jface.action.ActionContributionItem.access$4(ActionContributionItem.java:496)
	at 
org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:468)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1016)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1680)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1663)
	at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)
!ENTRY org.eclipse.jdt.core 4 969 Aug 22, 2003 13:07:30.330
!MESSAGE Spheres does not exist.

I will try again with M3 in a week.

Note - this works with M1, and thus I usually launch M1, create my project, quit, and then create 
the project again in M2.  It picks up the entries in the .classpath file happily, and does not fail.
Your scenario is different from bug #41583 but the culprit is the same.

*** This bug has been marked as a duplicate of 41583 ***
*** Bug 41996 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41886" />
    <CreationDate amount="2003-08-22 16:39:00 -0400" />
    <DupId amount="41420" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="critical" />
    <Summery>table.getColumn(0).dispose() ArrayIndexOutOfBoundsException</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functioncall">
        <location start="51" end="91" />
        <code>when doing table.getColumn(0).dispose();</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2442" end="2957" />
        <code>for (int i=0; i&lt;itemCount; i++) {
       lvItem.iItem = i;
       lvItem.iSubItem = 1;
(1)==&gt;     OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);
       lvItem.iSubItem = 0;
       OS.SendMessage (handle, OS.LVM_SETITEM, 0, lvItem);
       TCHAR buffer = new TCHAR (getCodePage (), cchTextMax);
       OS.MoveMemory (buffer, pszText, byteCount);
       items [i].text = buffer.toString (0, buffer.strlen ());
       if (imageList != null) {
(2)==&gt;     items [i].image = imageList.get (lvItem.iImage);
       }
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Received java.lang.ArrayIndexOutOfBoundsException:
when doing table.getColumn(0).dispose();
NOTE:  This used to work.

I have a table view that can be toggled
between two formats, basic and extra.
Extra has more columns than the basic  
The exception happened when switching from one format to other
in the process of disposing old TableColumns.   

Here is the stack trace.

  java.lang.ArrayIndexOutOfBoundsException: -1
	at org.eclipse.swt.widgets.ImageList.get(ImageList.java:176)
	at org.eclipse.swt.widgets.Table.destroyItem(Table.java:523)
	at 
org.eclipse.swt.widgets.TableColumn.releaseChild(TableColumn.java:305)
	at org.eclipse.swt.widgets.Widget.dispose(Widget.java:371)
	at bug.views.SampleView.setFormatToExtra(SampleView.java:242)
	at bug.views.SampleView.access$2(SampleView.java:237)
	at bug.views.SampleView$1.run(SampleView.java:171)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionCont
ributionItem.java:456)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContribu
tionItem.java:403)
	at 
org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.
java:397)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(Actio
nContributionItem.java:72)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1838)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1545)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)
	at 
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:85
8)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)


From debugging, I found that value lvItem.iImage inside 
the Table.destroyItem() became -1 
after the line marked by (1) was executed. This caused
the execption inside the ImageList.get() method (2).
In debug if I manually changed the value of lvItem.Image to
lvItem.iItem or itemCount, then it worked.


for (int i=0; i&lt;itemCount; i++) {
       lvItem.iItem = i;
       lvItem.iSubItem = 1;
(1)==&gt;     OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);
       lvItem.iSubItem = 0;
       OS.SendMessage (handle, OS.LVM_SETITEM, 0, lvItem);
       TCHAR buffer = new TCHAR (getCodePage (), cchTextMax);
       OS.MoveMemory (buffer, pszText, byteCount);
       items [i].text = buffer.toString (0, buffer.strlen ());
       if (imageList != null) {
(2)==&gt;     items [i].image = imageList.get (lvItem.iImage);
       }
}

I created a sample plugin that can be used to reproduce the problem. 
Let me know where I should send it to.
Created attachment 5836
Plugin to reproduce the problem

bug.jar contains a plugin and the source that can be used to produce the
problem. 
To produce the problem:
1). Unzip or unjar bug.jar into the eclipse folder. 
2). Restart Eclipse to load the plugin. 
3). Open the view by Window-&gt;Show view-&gt;Others-&gt;Sample Category-&gt;Sample View.
4). From the view, click the i icon at the top of right corner.


*** This bug has been marked as a duplicate of 41420 ***</WithStack>
    <WithOutStack>Received java.lang.ArrayIndexOutOfBoundsException:
when doing table.getColumn(0).dispose();
NOTE:  This used to work.

I have a table view that can be toggled
between two formats, basic and extra.
Extra has more columns than the basic  
The exception happened when switching from one format to other
in the process of disposing old TableColumns.   

Here is the stack trace.

  java.lang.ArrayIndexOutOfBoundsException: -1
	at org.eclipse.swt.widgets.ImageList.get(ImageList.java:176)
	at org.eclipse.swt.widgets.Table.destroyItem(Table.java:523)
	at 
org.eclipse.swt.widgets.TableColumn.releaseChild(TableColumn.java:305)
	at org.eclipse.swt.widgets.Widget.dispose(Widget.java:371)
	at bug.views.SampleView.setFormatToExtra(SampleView.java:242)
	at bug.views.SampleView.access$2(SampleView.java:237)
	at bug.views.SampleView$1.run(SampleView.java:171)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionCont
ributionItem.java:456)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContribu
tionItem.java:403)
	at 
org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.
java:397)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(Actio
nContributionItem.java:72)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1838)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1545)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)
	at 
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:85
8)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)


From debugging, I found that value lvItem.iImage inside 
the Table.destroyItem() became -1 
after the line marked by (1) was executed. This caused
the execption inside the ImageList.get() method (2).
In debug if I manually changed the value of lvItem.Image to
lvItem.iItem or itemCount, then it worked.


for (int i=0; i&lt;itemCount; i++) {
       lvItem.iItem = i;
       lvItem.iSubItem = 1;
(1)==&gt;     OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);
       lvItem.iSubItem = 0;
       OS.SendMessage (handle, OS.LVM_SETITEM, 0, lvItem);
       TCHAR buffer = new TCHAR (getCodePage (), cchTextMax);
       OS.MoveMemory (buffer, pszText, byteCount);
       items [i].text = buffer.toString (0, buffer.strlen ());
       if (imageList != null) {
(2)==&gt;     items [i].image = imageList.get (lvItem.iImage);
       }
}

I created a sample plugin that can be used to reproduce the problem. 
Let me know where I should send it to.
Created attachment 5836
Plugin to reproduce the problem

bug.jar contains a plugin and the source that can be used to produce the
problem. 
To produce the problem:
1). Unzip or unjar bug.jar into the eclipse folder. 
2). Restart Eclipse to load the plugin. 
3). Open the view by Window-&gt;Show view-&gt;Others-&gt;Sample Category-&gt;Sample View.
4). From the view, click the i icon at the top of right corner.


*** This bug has been marked as a duplicate of 41420 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41887" />
    <CreationDate amount="2003-08-22 17:10:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Mac OS X - Carbon (unsup.)" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[browser] Mac - HTML Browser widget - investigate Safari browser</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="2">
        <Lines>
          <Line>1) Is there a reason why your code could not work on Mac OS 10.2 with Safari</Line>
          <Line>1.0 installed? We need to support this platform</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Investigate support for embedding Safari into the SWT Browser widget on the 
Mac.
The attached code implements a WebKit (Safari) based brower widget for SWT (see screenshot).
Be aware it works only with Panther.
Created attachment 5838
Safari widget inside SWT applications
Created attachment 5839
The code
Andre, that's great! Thanks. We are going to look at it and see how we can 
support the current org.eclipse.swt.browser.Browser api with this.
If you want me to do a first implementation of the new SWT Browser based on this
(or if you don't have access to Panther), let me know...
Andre,
1) Is there a reason why your code could not work on Mac OS 10.2 with Safari 
1.0 installed? We need to support this platform

It depends how much time you can give to this and on 1). We would need some 
implementation working on the current OS 10.2 pretty quickly (&lt;= 2 weeks). If 
this sounds OK with you, yes your help and mac experience is very appreciated.

Chris

1) on 10.2 if the Java VM runs in the main thread loading the WebKit dll results in a native crash.
    (Apple itself suggested to run the Java VM in the main thread).
    If we run the Java VM in thread 1, we can load WebKit but deadlock in Color- and FontDialog
    (see bug #40003).
    On Panther we can both load WebKit and run Color/FontDailogs without deadlocks.

2) No, I don't think I'm able to resolve the issues with Safari under 10.2.

The 3.0 draft plan from January 30, 2004 states that "Apple Mac OS X 10.3" is
the reference platform. Doesn't this imply that Panther is the minimum OS X
version that needs to be supported?

I for one would be in favor of dumping Jaguar support, considering that WebKit
embedding isn't the only problem with Jaguar AFAICT.
Correct, 10.3 will be required for the final version of Eclipse 3.0.
Well, then why is this bug still open? Why hasn't the code been committed yet
(or has it)?
No, it hasn't (we are still working on issues).
Created attachment 8456
here's an updated Makefile for Panther with JDK 1.4.2 installed and Safari 1.2

If its of any help I hacked the Makefile to work on my Panther box with JDK
1.4.2 installed.
Note that I can run the webkit browser fine via the command line...

make run

But if I try to install the WebKit inside eclipse 3.0 M5 I get the usual stack trace exception when trying 
to open the browser.


v&gt;20040427 - The Browser widget is now available on the Mac (Panther OS X.3 
required). SWT FAQ has been updated.

Special thanks to Andre Weinand for contributing the initial implementation!</WithStack>
    <WithOutStack>Investigate support for embedding Safari into the SWT Browser widget on the 
Mac.
The attached code implements a WebKit (Safari) based brower widget for SWT (see screenshot).
Be aware it works only with Panther.
Created attachment 5838
Safari widget inside SWT applications
Created attachment 5839
The code
Andre, that's great! Thanks. We are going to look at it and see how we can 
support the current org.eclipse.swt.browser.Browser api with this.
If you want me to do a first implementation of the new SWT Browser based on this
(or if you don't have access to Panther), let me know...
Andre,
1) Is there a reason why your code could not work on Mac OS 10.2 with Safari 
1.0 installed? We need to support this platform

It depends how much time you can give to this and on 1). We would need some 
implementation working on the current OS 10.2 pretty quickly (&lt;= 2 weeks). If 
this sounds OK with you, yes your help and mac experience is very appreciated.

Chris

1) on 10.2 if the Java VM runs in the main thread loading the WebKit dll results in a native crash.
    (Apple itself suggested to run the Java VM in the main thread).
    If we run the Java VM in thread 1, we can load WebKit but deadlock in Color- and FontDialog
    (see bug #40003).
    On Panther we can both load WebKit and run Color/FontDailogs without deadlocks.

2) No, I don't think I'm able to resolve the issues with Safari under 10.2.

The 3.0 draft plan from January 30, 2004 states that "Apple Mac OS X 10.3" is
the reference platform. Doesn't this imply that Panther is the minimum OS X
version that needs to be supported?

I for one would be in favor of dumping Jaguar support, considering that WebKit
embedding isn't the only problem with Jaguar AFAICT.
Correct, 10.3 will be required for the final version of Eclipse 3.0.
Well, then why is this bug still open? Why hasn't the code been committed yet
(or has it)?
No, it hasn't (we are still working on issues).
Created attachment 8456
here's an updated Makefile for Panther with JDK 1.4.2 installed and Safari 1.2

If its of any help I hacked the Makefile to work on my Panther box with JDK
1.4.2 installed.
Note that I can run the webkit browser fine via the command line...

make run

But if I try to install the WebKit inside eclipse 3.0 M5 I get the usual stack trace exception when trying 
to open the browser.


v&gt;20040427 - The Browser widget is now available on the Mac (Panther OS X.3 
required). SWT FAQ has been updated.

Special thanks to Andre Weinand for contributing the initial implementation!</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41888" />
    <CreationDate amount="2003-08-23 00:20:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="AspectJ" />
    <component amount="Compiler" />
    <Version amount="1.1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>call PCD fails when given subtype of defining type</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="functiondef">
        <location start="709" end="738" />
        <code>class Super { void run() {}</code>
      </source_code>
      <source_code type="class">
        <location start="709" end="740" />
        <code>class Super { void run() {} }</code>
      </source_code>
      <source_code type="class">
        <location start="741" end="770" />
        <code>class Sub extends Super { }</code>
      </source_code>
      <source_code type="class">
        <location start="771" end="801" />
        <code>class SubSub extends Sub { }</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="11">
        <Lines>
          <Line>1. Modify the compiler to always generate the "correct" declaring type even when</Line>
          <Line>not in 1.4 mode.  I suspect that this would have unexpected consequences in</Line>
          <Line>older JVMs that were not expecting this -- which is why it is only enabled in</Line>
          <Line>1.4 mode.</Line>
          <Line />
          <Line>2. Modify the compiler to add some attributes to the .class file indicating the</Line>
          <Line>"correct" signatures for these method calls.  This would require substantial</Line>
          <Line>work and isn't possible before 1.2.  If we do this, it could be part of a</Line>
          <Line>general approach to passing information from the compiler to the weaver, such as</Line>
          <Line>the source line for method declarations, or the end bytecode for an exception</Line>
          <Line>handler.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>AspectJ 1.0 and 1.1 are behaving differently with respect to the qualifying type
in a method call PCD. See the test case

  tests/bugs/CallReference.java

AspectJ 1.1 is not picking out join points when a subtype of the defining type
is used.

I assume 1.0 is correct (but see [1]) because it tracks the programming guide
(and the JLS). Because this might involve questions about what's correct, I'll
include (my understanding of) the definition here in case the fix is to correct
my interpretation or the programming guide.

The programming guide says, 
----
At a method call join point, the signature is a method signature 
whose qualifying type is the static type used to access the method.
----
So given

  class Super { void run() {} }
  class Sub extends Super { }
  class SubSub extends Sub { }

Super is the declaring and defining type for run().  For the call

  new SubSub().run()

SubSub is the qualifying type because the reference type qualifies the call. 
(i.e., because method dispatch occurs at runtime, with a search up the hierarchy
if a method is not implemented directly in the class of the object.  i.e., the
guide intends to follow the definition of qualifying type for methods used in
JLS 13.1.)

Further, I understood from Erik that AspectJ accounts for polymorphism by having
the pointcut match if one specifies a supertype of the signature type, so long
as the method was defined in the specified supertype (or one of its supertypes). 
So to pick out all calls to that method, one should use the declaring type (in
this case, Super); to restrict the calls matched, use a subtype.  Indeed, for
this reason, the locution 

    target(Sub) &amp;&amp; call(void run())

evolved to address the situation where the method was being invoked through a
supertype reference, e.g.,

   ((Super) new SubSub()).run()

which would only be picked out by

  call(void Super.run())

and not by
 
  call(void SubSub.run())

even when the method was implemented in SubSub.

This is the behavior of AspectJ 1.0.

By contrast, AspectJ 1.1, given 

  call(void Sub.run())

fails to pick out the invocations

   new Sub().run()
   new SubSub().run()

though it would pick out

   new Sub().run()

if the method were also defined in Sub, and not just in Super.

Side notes:
[1] In AspectJ 1.0, if I print the signature of the join point, it emits the
defining type of the method as the type, and does not change depending on the
static type used to access the method. That would seem to be a 1.0 (and 1.1?)
limitation of the JoinPoint signature.  

[2] This should not be related to the case where older compilers use the
declaring type of the method as the qualifying type, since this bug occurs when
all sources are presented to ajc. I.e., the programming guide already
incorporates the Java 1.0-1.1 change described in "Compilation of Symbolic
References":

 http://java.sun.com/docs/books/jls/clarify.html
 http://java.sun.com/docs/books/jls/public-symref-compilation-rules.html
Adding keyword "info" since, if true, this is a limitation of our implementation
of the language.
Raising priority to P2 mainly to get confirmation before the next release
whether the bug is valid or reflects my misinterpretation.
This is a manifestation of your issue [2] below, and you can probably fix it by
compiling with -target 1.4.  You should use javap to look at the bytecode
generated by different compilers to see when the signature of the call is
Super.run and when it is Sub.run.

You're right in that we could fix this in the case where all of the sources are
presented to ajc.  We could do this in one of two ways:
1. Modify the compiler to always generate the "correct" declaring type even when
not in 1.4 mode.  I suspect that this would have unexpected consequences in
older JVMs that were not expecting this -- which is why it is only enabled in
1.4 mode.

2. Modify the compiler to add some attributes to the .class file indicating the
"correct" signatures for these method calls.  This would require substantial
work and isn't possible before 1.2.  If we do this, it could be part of a
general approach to passing information from the compiler to the weaver, such as
the source line for method declarations, or the end bytecode for an exception
handler.

As I stated in mail to users, I consider any call PCD that uses a declaring type
which isn't the top-most type for that signature to be potentially very
confusing to the programmer and something that should be discouraged except for
very specialized cases.
Since we switched the default mode of the compiler to -1.4, this is only an
issue for people who compile with -1.3.  We're never going to go back and
do a large amount of work to fix this situation for the 1.3 mode, so I'm 
resolving the bug now.</WithStack>
    <WithOutStack>AspectJ 1.0 and 1.1 are behaving differently with respect to the qualifying type
in a method call PCD. See the test case

  tests/bugs/CallReference.java

AspectJ 1.1 is not picking out join points when a subtype of the defining type
is used.

I assume 1.0 is correct (but see [1]) because it tracks the programming guide
(and the JLS). Because this might involve questions about what's correct, I'll
include (my understanding of) the definition here in case the fix is to correct
my interpretation or the programming guide.

The programming guide says, 
----
At a method call join point, the signature is a method signature 
whose qualifying type is the static type used to access the method.
----
So given

  class Super { void run() {} }
  class Sub extends Super { }
  class SubSub extends Sub { }

Super is the declaring and defining type for run().  For the call

  new SubSub().run()

SubSub is the qualifying type because the reference type qualifies the call. 
(i.e., because method dispatch occurs at runtime, with a search up the hierarchy
if a method is not implemented directly in the class of the object.  i.e., the
guide intends to follow the definition of qualifying type for methods used in
JLS 13.1.)

Further, I understood from Erik that AspectJ accounts for polymorphism by having
the pointcut match if one specifies a supertype of the signature type, so long
as the method was defined in the specified supertype (or one of its supertypes). 
So to pick out all calls to that method, one should use the declaring type (in
this case, Super); to restrict the calls matched, use a subtype.  Indeed, for
this reason, the locution 

    target(Sub) &amp;&amp; call(void run())

evolved to address the situation where the method was being invoked through a
supertype reference, e.g.,

   ((Super) new SubSub()).run()

which would only be picked out by

  call(void Super.run())

and not by
 
  call(void SubSub.run())

even when the method was implemented in SubSub.

This is the behavior of AspectJ 1.0.

By contrast, AspectJ 1.1, given 

  call(void Sub.run())

fails to pick out the invocations

   new Sub().run()
   new SubSub().run()

though it would pick out

   new Sub().run()

if the method were also defined in Sub, and not just in Super.

Side notes:
[1] In AspectJ 1.0, if I print the signature of the join point, it emits the
defining type of the method as the type, and does not change depending on the
static type used to access the method. That would seem to be a 1.0 (and 1.1?)
limitation of the JoinPoint signature.  

[2] This should not be related to the case where older compilers use the
declaring type of the method as the qualifying type, since this bug occurs when
all sources are presented to ajc. I.e., the programming guide already
incorporates the Java 1.0-1.1 change described in "Compilation of Symbolic
References":

 http://java.sun.com/docs/books/jls/clarify.html
 http://java.sun.com/docs/books/jls/public-symref-compilation-rules.html
Adding keyword "info" since, if true, this is a limitation of our implementation
of the language.
Raising priority to P2 mainly to get confirmation before the next release
whether the bug is valid or reflects my misinterpretation.
This is a manifestation of your issue [2] below, and you can probably fix it by
compiling with -target 1.4.  You should use javap to look at the bytecode
generated by different compilers to see when the signature of the call is
Super.run and when it is Sub.run.

You're right in that we could fix this in the case where all of the sources are
presented to ajc.  We could do this in one of two ways:
1. Modify the compiler to always generate the "correct" declaring type even when
not in 1.4 mode.  I suspect that this would have unexpected consequences in
older JVMs that were not expecting this -- which is why it is only enabled in
1.4 mode.

2. Modify the compiler to add some attributes to the .class file indicating the
"correct" signatures for these method calls.  This would require substantial
work and isn't possible before 1.2.  If we do this, it could be part of a
general approach to passing information from the compiler to the weaver, such as
the source line for method declarations, or the end bytecode for an exception
handler.

As I stated in mail to users, I consider any call PCD that uses a declaring type
which isn't the top-most type for that signature to be potentially very
confusing to the programmer and something that should be discouraged except for
very specialized cases.
Since we switched the default mode of the compiler to -1.4, this is only an
issue for people who compile with -1.3.  We're never going to go back and
do a large amount of work to fix this situation for the 1.3 mode, so I'm 
resolving the bug now.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41889" />
    <CreationDate amount="2003-08-23 08:21:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux-GTK" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[content assist] auto-completion popups not resizable (GTK)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="2">
        <Lines>
          <Line>- set the Platform flag (I already corrected the OS flag)</Line>
          <Line>- tell us which build you are using</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Those auto-completion popups (. CTRL-SPACE) are not resizable in the linux GTK 
version.
Could you please
- set the Platform flag (I already corrected the OS flag)
- tell us which build you are using

build 200307181617
After M3.
To be looked at together with bug 40528.

Resize also not working on Linux-Motif (I20030917)

I tried removing the SWT.ON_TOP flag (leaving only SWT.RESIZE) but this results
in other unwanted behavior: the content assist view automatically closes on GTK
and on Motif it closes when I move or resize the window.

These problems can also be seen GTK when opening the quick outline (Show
Outline, Ctrl + O) in I20030917 and then resize it, it immediately disappears.
Same when I simply move the quick Outline. To only use SWT.RESIZE was suggest to
us in bug 30380.
GG to link this to the other bug reports that describe this problem.  The 
summary is that in order to be resizeable, you need window manager trimmings.  
Once you trimmings, you can't stop the window manager from making your shell 
become active when it is displayed.  I don't know of a work around for this.
This is something you just cannot do under Linux window managers.  We should
probably close it as WONTFIX.
Closing since this is a WM limitation.</WithStack>
    <WithOutStack>Those auto-completion popups (. CTRL-SPACE) are not resizable in the linux GTK 
version.
Could you please
- set the Platform flag (I already corrected the OS flag)
- tell us which build you are using

build 200307181617
After M3.
To be looked at together with bug 40528.

Resize also not working on Linux-Motif (I20030917)

I tried removing the SWT.ON_TOP flag (leaving only SWT.RESIZE) but this results
in other unwanted behavior: the content assist view automatically closes on GTK
and on Motif it closes when I move or resize the window.

These problems can also be seen GTK when opening the quick outline (Show
Outline, Ctrl + O) in I20030917 and then resize it, it immediately disappears.
Same when I simply move the quick Outline. To only use SWT.RESIZE was suggest to
us in bug 30380.
GG to link this to the other bug reports that describe this problem.  The 
summary is that in order to be resizeable, you need window manager trimmings.  
Once you trimmings, you can't stop the window manager from making your shell 
become active when it is displayed.  I don't know of a work around for this.
This is something you just cannot do under Linux window managers.  We should
probably close it as WONTFIX.
Closing since this is a WM limitation.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41890" />
    <CreationDate amount="2003-08-23 12:25:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse Foundation" />
    <Product amount="z_Archived" />
    <component amount="Stellation" />
    <Version amount="unspecified" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Wrong use of chmod</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The method org.eclipse.stellation.cli.close(ID) trys to run chmod if the file 
is marked as executable. This should not be done on Windows platforms. I have 
patched this on my local system to not do this on Windows and have verified 
that it works properly.

I will create a branch for this bug and checkin the fix once the basic branch 
structure has been created.
Committed from brnch Bugzilla-40892-41890-41892</WithStack>
    <WithOutStack>The method org.eclipse.stellation.cli.close(ID) trys to run chmod if the file 
is marked as executable. This should not be done on Windows platforms. I have 
patched this on my local system to not do this on Windows and have verified 
that it works properly.

I will create a branch for this bug and checkin the fix once the basic branch 
structure has been created.
Committed from brnch Bugzilla-40892-41890-41892</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41891" />
    <CreationDate amount="2003-08-23 12:28:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse Foundation" />
    <Product amount="z_Archived" />
    <component amount="Stellation" />
    <Version amount="unspecified" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Failure to find artifact</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If you try to checkout the project org.eclipse.stellation.stim.feature you get 
an error stating that the repository could not locate artifact ID 3107.
This created because there was a mismatch between the workspace specified in 
the --workspace option and the project specified in the checkout command. This 
bug should be fixed in the command line code so I am reassigning it.
The checkout command failed to exit if it was not possible to create a 
workspace object.  This problem has been corrected in my local workspace.
Committed from branch Bugzilla-40892-41890-41892.</WithStack>
    <WithOutStack>If you try to checkout the project org.eclipse.stellation.stim.feature you get 
an error stating that the repository could not locate artifact ID 3107.
This created because there was a mismatch between the workspace specified in 
the --workspace option and the project specified in the checkout command. This 
bug should be fixed in the command line code so I am reassigning it.
The checkout command failed to exit if it was not possible to create a 
workspace object.  This problem has been corrected in my local workspace.
Committed from branch Bugzilla-40892-41890-41892.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41892" />
    <CreationDate amount="2003-08-23 12:30:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse Foundation" />
    <Product amount="z_Archived" />
    <component amount="Stellation" />
    <Version amount="unspecified" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Corrupting project file</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If a checkout fails to find an artifact, the project.xml file is rewritten in 
a corrupt form.
This happens when there is a mismatch between the workspace location as 
specified by --workspace and the project specified in the checkout command.
Committed from branch Bugzilla-40892-41890-41892</WithStack>
    <WithOutStack>If a checkout fails to find an artifact, the project.xml file is rewritten in 
a corrupt form.
This happens when there is a mismatch between the workspace location as 
specified by --workspace and the project specified in the checkout command.
Committed from branch Bugzilla-40892-41890-41892</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41893" />
    <CreationDate amount="2003-08-23 13:23:00 -0400" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-core" />
    <Version amount="1.2" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>unable to edit templates</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867147">
        <Exception>org.eclipse.swt.SWTException</Exception>
        <Reason>Widget is disposed</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.swt.SWT.error(SWT.java:2332)</Frame>
          <Frame depth="1">org.eclipse.swt.SWT.error(SWT.java:2262)</Frame>
          <Frame depth="2">org.eclipse.swt.widgets.Widget.error(Widget.java:370)</Frame>
          <Frame depth="3">org.eclipse.swt.widgets.Control.getDisplay(Control.java:1365)</Frame>
          <Frame depth="4">org.eclipse.swt.widgets.Widget.isValidThread(Widget.java:729)</Frame>
          <Frame depth="5">org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:308)</Frame>
          <Frame depth="6">org.eclipse.swt.widgets.Table.getItems(Table.java:787)</Frame>
          <Frame depth="7">org.eclipse.jface.viewers.CheckboxTableViewer.preservingSelection(CheckboxTableViewer.java:264)</Frame>
          <Frame depth="8">org.eclipse.jface.viewers.StructuredViewer.refresh(StructuredViewer.java:859)</Frame>
          <Frame depth="9">org.eclipse.cdt.internal.ui.preferences.TemplatePreferencePage.edit(TemplatePreferencePage.java:409)</Frame>
          <Frame depth="10">org.eclipse.cdt.internal.ui.preferences.TemplatePreferencePage.edit(TemplatePreferencePage.java:388)</Frame>
          <Frame depth="11">org.eclipse.cdt.internal.ui.preferences.TemplatePreferencePage$6.handleEvent(TemplatePreferencePage.java:194)</Frame>
          <Frame depth="12">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)</Frame>
          <Frame depth="13">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:923)</Frame>
          <Frame depth="14">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1641)</Frame>
          <Frame depth="15">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1433)</Frame>
          <Frame depth="16">org.eclipse.jface.window.Window.runEventLoop(Window.java:583)</Frame>
          <Frame depth="17">org.eclipse.jface.window.Window.open(Window.java:563)</Frame>
          <Frame depth="18">org.eclipse.ui.internal.OpenPreferencesAction.run(OpenPreferencesAction.java:53)</Frame>
          <Frame depth="19">org.eclipse.jface.action.Action.runWithEvent(Action.java:842)</Frame>
          <Frame depth="20">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:456)</Frame>
          <Frame depth="21">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:403)</Frame>
          <Frame depth="22">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:397)</Frame>
          <Frame depth="23">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:72)</Frame>
          <Frame depth="24">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)</Frame>
          <Frame depth="25">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:923)</Frame>
          <Frame depth="26">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1641)</Frame>
          <Frame depth="27">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1433)</Frame>
          <Frame depth="28">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)</Frame>
          <Frame depth="29">org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)</Frame>
          <Frame depth="30">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)</Frame>
          <Frame depth="31">org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)</Frame>
          <Frame depth="32">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</Frame>
          <Frame depth="33">sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</Frame>
          <Frame depth="34">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</Frame>
          <Frame depth="35">java.lang.reflect.Method.invoke(Method.java:324)</Frame>
          <Frame depth="36">org.eclipse.core.launcher.Main.basicRun(Main.java:291)</Frame>
          <Frame depth="37">org.eclipse.core.launcher.Main.run(Main.java:747)</Frame>
          <Frame depth="38">org.eclipse.core.launcher.Main.main(Main.java:583)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Almost always (though not always), when trying to edit a template, I am able to
click on the edit button, hit "Ok" and the edit dialog disappears, but the
prefrences dialog breaks.  The ok and apply buttons don't work, I can't change
which prefrence pane I am looking at, and the scrollview that is showing me the
current template won't scroll the view (even though the scroll bar works), and I
can't change which template is shown in the scroll view.

The console says:
Unhandled exception caught in event loop.
Reason:
Widget is disposed

Here is a stack trace from the .log:

!SESSION Aug 23, 2003 10:31:00.792
---------------------------------------------java.version=1.4.2
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=linux, ARCH=x86, WS=gtk, NL=en_US
Command-line arguments: -os linux -ws gtk -arch x86 -install file:/opt/eclipse/
!ENTRY org.eclipse.ui 4 4 Aug 23, 2003 10:31:00.793
!MESSAGE Unhandled exception caught in event loop.
!ENTRY org.eclipse.ui 4 0 Aug 23, 2003 10:31:00.796
!MESSAGE Widget is disposed
!STACK 0
org.eclipse.swt.SWTException: Widget is disposed
        at org.eclipse.swt.SWT.error(SWT.java:2332)
        at org.eclipse.swt.SWT.error(SWT.java:2262)
        at org.eclipse.swt.widgets.Widget.error(Widget.java:370)
        at org.eclipse.swt.widgets.Control.getDisplay(Control.java:1365)
        at org.eclipse.swt.widgets.Widget.isValidThread(Widget.java:729)
        at org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:308)
        at org.eclipse.swt.widgets.Table.getItems(Table.java:787)
        at
org.eclipse.jface.viewers.CheckboxTableViewer.preservingSelection(CheckboxTableViewer.java:264)
        at
org.eclipse.jface.viewers.StructuredViewer.refresh(StructuredViewer.java:859)
        at
org.eclipse.cdt.internal.ui.preferences.TemplatePreferencePage.edit(TemplatePreferencePage.java:409)
        at
org.eclipse.cdt.internal.ui.preferences.TemplatePreferencePage.edit(TemplatePreferencePage.java:388)
        at
org.eclipse.cdt.internal.ui.preferences.TemplatePreferencePage$6.handleEvent(TemplatePreferencePage.java:194)
        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:923)
        at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1641)
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1433)
        at org.eclipse.jface.window.Window.runEventLoop(Window.java:583)
        at org.eclipse.jface.window.Window.open(Window.java:563)
        at
org.eclipse.ui.internal.OpenPreferencesAction.run(OpenPreferencesAction.java:53)
        at org.eclipse.jface.action.Action.runWithEvent(Action.java:842)
        at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:456)
        at
org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:403)
        at
org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:397)
        at
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:72)
        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:923)
        at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1641)
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1433)
        at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)
        at org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)
        at
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)
        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
        at org.eclipse.core.launcher.Main.run(Main.java:747)
        at org.eclipse.core.launcher.Main.main(Main.java:583)

perhaps you are letting the event loop thread die with an uncaught exception??
Hoda did the first implementation of the template.
Could not reproduce the bug on my workstation.
Need more detailed steps on how to reproduce it.</WithStack>
    <WithOutStack>Almost always (though not always), when trying to edit a template, I am able to
click on the edit button, hit "Ok" and the edit dialog disappears, but the
prefrences dialog breaks.  The ok and apply buttons don't work, I can't change
which prefrence pane I am looking at, and the scrollview that is showing me the
current template won't scroll the view (even though the scroll bar works), and I
can't change which template is shown in the scroll view.

The console says:
Unhandled exception caught in event loop.
Reason:
Widget is disposed

Here is a stack trace from the .log:

!SESSION Aug 23, 2003 10:31:00.792
---------------------------------------------java.version=1.4.2
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=linux, ARCH=x86, WS=gtk, NL=en_US
Command-line arguments: -os linux -ws gtk -arch x86 -install file:/opt/eclipse/
!ENTRY org.eclipse.ui 4 4 Aug 23, 2003 10:31:00.793
!MESSAGE Unhandled exception caught in event loop.
!ENTRY org.eclipse.ui 4 0 Aug 23, 2003 10:31:00.796
!MESSAGE Widget is disposed
!STACK 0


perhaps you are letting the event loop thread die with an uncaught exception??
Hoda did the first implementation of the template.
Could not reproduce the bug on my workstation.
Need more detailed steps on how to reproduce it.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41894" />
    <CreationDate amount="2003-08-24 00:57:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>cannot add a breakpoint</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437340867147">
        <Exception>org.eclipse.core.internal.resources.ResourceException</Exception>
        <Reason>Marker id: 2190 not 
found.</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.core.internal.resources.Marker.checkInfo(Marker.java:53)</Frame>
          <Frame depth="1">org.eclipse.core.internal.resources.Marker.getType(Marker.java:176)</Frame>
          <Frame depth="2">org.eclipse.jdt.debug.core.JDIDebugModel.lineBreakpointExists(JDIDebugModel.java:560)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerAction.addMarker(ManageBreakpointRulerAction.java:271)</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerAction.run(ManageBreakpointRulerAction.java:172)</Frame>
          <Frame depth="5">org.eclipse.ui.texteditor.AbstractRulerActionDelegate.run(AbstractRulerActionDelegate.java:98)</Frame>
          <Frame depth="6">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:263)</Frame>
          <Frame depth="7">org.eclipse.ui.internal.PluginAction.run(PluginAction.java:225)</Frame>
          <Frame depth="8">org.eclipse.ui.texteditor.AbstractTextEditor$10.triggerAction(AbstractTextEditor.java:1861)</Frame>
          <Frame depth="9">org.eclipse.ui.texteditor.AbstractTextEditor$10.mouseDoubleClick(AbstractTextEditor.java:1875)</Frame>
          <Frame depth="10">org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:136)</Frame>
          <Frame depth="11">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)</Frame>
          <Frame depth="12">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)</Frame>
          <Frame depth="13">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2188)</Frame>
          <Frame depth="14">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)</Frame>
          <Frame depth="15">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1676)</Frame>
          <Frame depth="16">org.eclipse.ui.internal.Workbench.run(Workbench.java:1659)</Frame>
          <Frame depth="17">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:858)</Frame>
          <Frame depth="18">org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)</Frame>
          <Frame depth="19">sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</Frame>
          <Frame depth="20">sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</Frame>
          <Frame depth="21">sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</Frame>
          <Frame depth="22">java.lang.reflect.Method.invoke(Unknown Source)</Frame>
          <Frame depth="23">org.eclipse.core.launcher.Main.basicRun(Main.java:291)</Frame>
          <Frame depth="24">org.eclipse.core.launcher.Main.run(Main.java:747)</Frame>
          <Frame depth="25">org.eclipse.core.launcher.Main.main(Main.java:583)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>build: I-20030820

I'm trying to add a breakpoint, and I got the following error:
Error Aug 24, 2003 00:52:16.520 Internal Error
org.eclipse.core.internal.resources.ResourceException: Marker id: 2190 not 
found.
	at org.eclipse.core.internal.resources.Marker.checkInfo(Marker.java:53)
	at org.eclipse.core.internal.resources.Marker.getType(Marker.java:176)
	at org.eclipse.jdt.debug.core.JDIDebugModel.lineBreakpointExists
(JDIDebugModel.java:560)
	at 
org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerAction.addMarker
(ManageBreakpointRulerAction.java:271)
	at 
org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerAction.run
(ManageBreakpointRulerAction.java:172)
	at org.eclipse.ui.texteditor.AbstractRulerActionDelegate.run
(AbstractRulerActionDelegate.java:98)
	at org.eclipse.ui.internal.PluginAction.runWithEvent
(PluginAction.java:263)
	at org.eclipse.ui.internal.PluginAction.run(PluginAction.java:225)
	at org.eclipse.ui.texteditor.AbstractTextEditor$10.triggerAction
(AbstractTextEditor.java:1861)
	at org.eclipse.ui.texteditor.AbstractTextEditor$10.mouseDoubleClick
(AbstractTextEditor.java:1875)
	at org.eclipse.swt.widgets.TypedListener.handleEvent
(TypedListener.java:136)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:847)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2188)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1878)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1676)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:1659)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:858)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:291)
	at org.eclipse.core.launcher.Main.run(Main.java:747)
	at org.eclipse.core.launcher.Main.main(Main.java:583)
How are you adding the breakpoint?
This is likely another side effect of bug 41755.
I add a breakpoint by double-clicking in the margin.
Wassim, do you have a reproduceable test case in I20030826?
No reproducible test case.
However, if I recall correctly, that day there were about 20 or so distinct 
instances of this exception in my log file.
Have not seen encountered them in the M3 warm-up build yet.
Thanks. Marking as works for me.</WithStack>
    <WithOutStack>build: I-20030820

I'm trying to add a breakpoint, and I got the following error:
Error Aug 24, 2003 00:52:16.520 Internal Error

How are you adding the breakpoint?
This is likely another side effect of bug 41755.
I add a breakpoint by double-clicking in the margin.
Wassim, do you have a reproduceable test case in I20030826?
No reproducible test case.
However, if I recall correctly, that day there were about 20 or so distinct 
instances of this exception in my log file.
Have not seen encountered them in the M3 warm-up build yet.
Thanks. Marking as works for me.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41895" />
    <CreationDate amount="2003-08-24 01:36:00 -0400" />
    <DupId amount="41808" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="3.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Inconsistent behavior when enabling/disabling breakpoints</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="11">
        <Lines>
          <Line>1. Double-click in the margin next to a line in the Java file, you see an</Line>
          <Line>enabled breakpoint in the margin.  An entry is added to the breakpoints view</Line>
          <Line>with the checkbox "selected".  This is all fine.</Line>
          <Line>2. Right-click on the breakpoint in the margin and select 'disable'.  The</Line>
          <Line>checkbox next to the breakpoint entry in the view is still checked!!</Line>
          <Line />
          <Line>It seems like explicitly selecting/deselecting the checkbox in the breakpoints</Line>
          <Line>view correcly updates the color of the corresponding breakpoint in the</Line>
          <Line>margin.  But the reverse is not true.  Enabling/disabling a breakpoint in the</Line>
          <Line>margin does not correctly update the checked/unchecked state of the</Line>
          <Line>corresponding checkbox in the view.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Build: I-20030820

In the debug view, open any Java file and have the Breakpoints view visible:
1. Double-click in the margin next to a line in the Java file, you see an 
enabled breakpoint in the margin.  An entry is added to the breakpoints view 
with the checkbox "selected".  This is all fine.
2. Right-click on the breakpoint in the margin and select 'disable'.  The 
checkbox next to the breakpoint entry in the view is still checked!!
  
It seems like explicitly selecting/deselecting the checkbox in the breakpoints 
view correcly updates the color of the corresponding breakpoint in the 
margin.  But the reverse is not true.  Enabling/disabling a breakpoint in the 
margin does not correctly update the checked/unchecked state of the 
corresponding checkbox in the view.


*** This bug has been marked as a duplicate of 41808 ***</WithStack>
    <WithOutStack>Build: I-20030820

In the debug view, open any Java file and have the Breakpoints view visible:
1. Double-click in the margin next to a line in the Java file, you see an 
enabled breakpoint in the margin.  An entry is added to the breakpoints view 
with the checkbox "selected".  This is all fine.
2. Right-click on the breakpoint in the margin and select 'disable'.  The 
checkbox next to the breakpoint entry in the view is still checked!!
  
It seems like explicitly selecting/deselecting the checkbox in the breakpoints 
view correcly updates the color of the corresponding breakpoint in the 
margin.  But the reverse is not true.  Enabling/disabling a breakpoint in the 
margin does not correctly update the checked/unchecked state of the 
corresponding checkbox in the view.


*** This bug has been marked as a duplicate of 41808 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41896" />
    <CreationDate amount="2003-08-24 05:46:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="2.1.1" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="critical" />
    <Summery>Eclipse wipes out directory content</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Creating a new project in an existing directory makes eclipse WIPE OUT all the
directory content WITHOUT ASKING PERMISSIONS!

This thing is a very serious issue, as it deleted all my projects, months of
work wiped out.

Good. I need a way to restore my data.

Project created: Simple
File created: first.xml
Expected: a file in the chosen directory WITHOUT WIPING OUT EVERYTHING OR ASK ME!!
Why is this bug being reported to the "Ant" project? What type of project were 
you creating (i.e., a Java project?).
Simple project.

Added a file ``first.xml'', and then assigned ``*.xml'' file to Ant editor.

Run the Ant xml file.
Project creation is not performed by the Ant plug-in. Re-assigning bug to UI.
It is not clear how you created the project (because you mention you ran an An
script). How did you create the project? Through the Eclipse UI (e.g. File -&gt;
New -&gt; Project -&gt; Simple Project)?

Also, when creating a project on an existing location, what is expected to
happen is that right after the New Project wizard finishes, the new project
appears in the Resource Navigator/Package Explorer and the existing contents
appear as belonging to the project. Did you see any contents in the new project
before you tried to create the first new file (first.xml)?
Yes.

I created it through the ui. I added a file first.xml, which was opened with
gedit. I changed to ``Ant'' the association with *.xml, and then I wrote the
simple ``Hello, world!'' ant ``makefile''.

The resource view wasn't the default (I installed a week ago the c/c++ plugin,
and it became the default view), I made Ant be the default.

I could see the project in the resources since I created the simple project.
After adding the xml file, I could see it also. Before adding first.xml, nothing
was in the project.
Sorry, but I couldn't understand the following sentence:

"The resource view wasn't the default (I installed a week ago the c/c++ plugin,
and it became the default view), I made Ant be the default."

Can you reproduce this (using a test location with garbage directories/files) by
repeating the same steps when you lost your data? Thanks.
Closing. No more information from originator.
Please re-open if you have a reproducable test case for us with steps to follow.</WithStack>
    <WithOutStack>Creating a new project in an existing directory makes eclipse WIPE OUT all the
directory content WITHOUT ASKING PERMISSIONS!

This thing is a very serious issue, as it deleted all my projects, months of
work wiped out.

Good. I need a way to restore my data.

Project created: Simple
File created: first.xml
Expected: a file in the chosen directory WITHOUT WIPING OUT EVERYTHING OR ASK ME!!
Why is this bug being reported to the "Ant" project? What type of project were 
you creating (i.e., a Java project?).
Simple project.

Added a file ``first.xml'', and then assigned ``*.xml'' file to Ant editor.

Run the Ant xml file.
Project creation is not performed by the Ant plug-in. Re-assigning bug to UI.
It is not clear how you created the project (because you mention you ran an An
script). How did you create the project? Through the Eclipse UI (e.g. File -&gt;
New -&gt; Project -&gt; Simple Project)?

Also, when creating a project on an existing location, what is expected to
happen is that right after the New Project wizard finishes, the new project
appears in the Resource Navigator/Package Explorer and the existing contents
appear as belonging to the project. Did you see any contents in the new project
before you tried to create the first new file (first.xml)?
Yes.

I created it through the ui. I added a file first.xml, which was opened with
gedit. I changed to ``Ant'' the association with *.xml, and then I wrote the
simple ``Hello, world!'' ant ``makefile''.

The resource view wasn't the default (I installed a week ago the c/c++ plugin,
and it became the default view), I made Ant be the default.

I could see the project in the resources since I created the simple project.
After adding the xml file, I could see it also. Before adding first.xml, nothing
was in the project.
Sorry, but I couldn't understand the following sentence:

"The resource view wasn't the default (I installed a week ago the c/c++ plugin,
and it became the default view), I made Ant be the default."

Can you reproduce this (using a test location with garbage directories/files) by
repeating the same steps when you lost your data? Thanks.
Closing. No more information from originator.
Please re-open if you have a reproducable test case for us with steps to follow.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41897" />
    <CreationDate amount="2003-08-24 08:53:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.1.1" />
    <rep_platform amount="Other" />
    <op_sys amount="Linux" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>CVS Browser / Check Out As... Java Project asks to delete nonexisting project</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I just have installed a new Notebook and put Eclipse 2.1.1 on it. Then opened a CVS location 
in the CVS browser. Selected a module. Clicked "Check Out As...". Selected "Java Project". 
Eclipse warns me that this file already exists in the workspace and I shall confirm its deletion. 
I conform. Checkout works fine. I checked with another module from another CVS location, 
same result. Seems the warning comes ever, even on clean notebooks than mine.
This bug has already been fixed in the 3.0 codebase.
The milestone should be set for this bug.</WithStack>
    <WithOutStack>I just have installed a new Notebook and put Eclipse 2.1.1 on it. Then opened a CVS location 
in the CVS browser. Selected a module. Clicked "Check Out As...". Selected "Java Project". 
Eclipse warns me that this file already exists in the workspace and I shall confirm its deletion. 
I conform. Checkout works fine. I checked with another module from another CVS location, 
same result. Seems the warning comes ever, even on clean notebooks than mine.
This bug has already been fixed in the 3.0 codebase.
The milestone should be set for this bug.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41898" />
    <CreationDate amount="2003-08-24 09:44:00 -0400" />
    <DupId amount="" />
    <classification amount="Modeling" />
    <Product amount="MDT.XSD" />
    <component amount="Core" />
    <Version amount="1.0.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>Default values of boolean attributes</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="functioncall">
        <location start="1174" end="1239" />
        <code>&lt;       return "true".equals(literal) || "false".equals(literal);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1313" end="1356" />
        <code>"0".equals(literal) || "1".equals(literal);</code>
      </source_code>
      <source_code type="assignment">
        <location start="1366" end="1409" />
        <code>&lt;     Boolean value = new Boolean(literal);</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>I am trying to parse an XSD containing the following attribute definition,
and am getting an error:

&lt;xs:attribute name="mustUnderstand" default="0"&gt;
	&lt;xs:simpleType&gt;
		&lt;xs:restriction base="xs:boolean"&gt;
			&lt;xs:pattern value="0|1"/&gt;
		&lt;/xs:restriction&gt;
	&lt;/xs:simpleType&gt;
&lt;/xs:attribute&gt;

The same error also occurs with:

&lt;xs:attribute name="mustUnderstand" type="xs:boolean" default="0" /&gt; 

The error is:
XSD: The value '0' of attribute 'default' must be of type
'http://www.w3.org/2001/XMLSchema#boolean'

The schema I'm trying to parse is the official W3C Soap:
http://www.w3.org/2001/06/soap-envelope.

Any reason why this shouldn't work. I looked at
http://www.w3.org/TR/xmlschema-2/#boolean and it seems that this it's 
syntax to refer to a boolean literal as 0 or 1. After changing the default
to false or true, it parsed ok.

Ed Merks replied to my query:

'Your right, and I didn't know that.  Please open a bugzilla defect and I'll
fix it for the next driver  It's a simple change to
org.eclipse.xsd.impl.type.XSDBooleanType.'
Hayden,

Thanks for finding this bug!  I've made these changes to XSDBooleanType.java, 
which will be in the next drop of 1.1.1.

30c30
&lt;       return "true".equals(literal) || "false".equals(literal);
---
&gt;       return "true".equals(literal) || "false".equals(literal) || 
"0".equals(literal) || "1".equals(literal);
40,41c40
&lt;     Boolean value = new Boolean(literal);
&lt;     return value;
---
&gt;     return "true".equals(literal) || "1".equals(literal) ? Boolean.TRUE : 
Boolean.FALSE;
This is fixed in the latest driver.
Move to verified as per bug 206558.
Move to verified as per bug 206558.</WithStack>
    <WithOutStack>I am trying to parse an XSD containing the following attribute definition,
and am getting an error:

&lt;xs:attribute name="mustUnderstand" default="0"&gt;
	&lt;xs:simpleType&gt;
		&lt;xs:restriction base="xs:boolean"&gt;
			&lt;xs:pattern value="0|1"/&gt;
		&lt;/xs:restriction&gt;
	&lt;/xs:simpleType&gt;
&lt;/xs:attribute&gt;

The same error also occurs with:

&lt;xs:attribute name="mustUnderstand" type="xs:boolean" default="0" /&gt; 

The error is:
XSD: The value '0' of attribute 'default' must be of type
'http://www.w3.org/2001/XMLSchema#boolean'

The schema I'm trying to parse is the official W3C Soap:
http://www.w3.org/2001/06/soap-envelope.

Any reason why this shouldn't work. I looked at
http://www.w3.org/TR/xmlschema-2/#boolean and it seems that this it's 
syntax to refer to a boolean literal as 0 or 1. After changing the default
to false or true, it parsed ok.

Ed Merks replied to my query:

'Your right, and I didn't know that.  Please open a bugzilla defect and I'll
fix it for the next driver  It's a simple change to
org.eclipse.xsd.impl.type.XSDBooleanType.'
Hayden,

Thanks for finding this bug!  I've made these changes to XSDBooleanType.java, 
which will be in the next drop of 1.1.1.

30c30
&lt;       return "true".equals(literal) || "false".equals(literal);
---
&gt;       return "true".equals(literal) || "false".equals(literal) || 
"0".equals(literal) || "1".equals(literal);
40,41c40
&lt;     Boolean value = new Boolean(literal);
&lt;     return value;
---
&gt;     return "true".equals(literal) || "1".equals(literal) ? Boolean.TRUE : 
Boolean.FALSE;
This is fixed in the latest driver.
Move to verified as per bug 206558.
Move to verified as per bug 206558.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41899" />
    <CreationDate amount="2003-08-24 11:03:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="Macintosh" />
    <op_sys amount="Mac OS X - Carbon (unsup.)" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Odd font names returned by getFontList on Mac</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="28">
      <source_code type="import">
        <location start="43" end="63" />
        <code>import java.util.*;</code>
      </source_code>
      <source_code type="import">
        <location start="64" end="89" />
        <code>import org.eclipse.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="90" end="123" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="124" end="158" />
        <code>import org.eclipse.swt.graphics.*;</code>
      </source_code>
      <source_code type="class">
        <location start="159" end="628" />
        <code>public class ListFonts {
public static void main(String[] args) {
    final Display display = new Display();
    Set s = new HashSet();
    FontData[] fd = display.getFontList(null, true);
    for (int i=0; i&lt;fd.length; ++i) {
        s.add(fd[i].getName());
    }
    String[] answer = new String[s.size()];
    s.toArray(answer);
    Arrays.sort(answer);
    for (int i=0; i&lt;answer.length; ++i) {
        System.out.println(answer[i]);
    }
    display.dispose();
}}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1673" end="1721" />
        <code>OS.FMGetFontFamilyName(fontFamily[0], buffer);</code>
      </source_code>
      <source_code type="assignment">
        <location start="1722" end="1754" />
        <code>int length = buffer[0] &amp; 0xFF;</code>
      </source_code>
      <source_code type="assignment">
        <location start="1755" end="1789" />
        <code>char[] chars = new char[length];</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1790" end="1858" />
        <code>for (int i=0; i&lt;length; i++) {
			chars[i]= (char)buffer[i+1];
		}</code>
      </source_code>
      <source_code type="assignment">
        <location start="1859" end="1893" />
        <code>String name = new String(chars);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1928" end="1976" />
        <code>OS.FMGetFontFamilyName(fontFamily[0], buffer);</code>
      </source_code>
      <source_code type="assignment">
        <location start="1977" end="2009" />
        <code>int length = buffer[0] &amp; 0xFF;</code>
      </source_code>
      <source_code type="assignment">
        <location start="2010" end="2068" />
        <code>String name = new String(buffer, 1, length, "MacRoman");</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2539" end="2587" />
        <code>OS.FMGetFontFamilyName(fontFamily[0], buffer);</code>
      </source_code>
      <source_code type="assignment">
        <location start="2588" end="2620" />
        <code>int length = buffer[0] &amp; 0xFF;</code>
      </source_code>
      <source_code type="assignment">
        <location start="2621" end="2678" />
        <code>String name = new String(buffer, 1, length, "GB18030");</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2943" end="2991" />
        <code>OS.FMGetFontFamilyName(fontFamily[0], buffer);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2992" end="3054" />
        <code>OS.FMGetFontFamilyTextEncoding(fontFamily[0], textEncoding);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="3055" end="3129" />
        <code>OS.CreateTextToUnicodeInfoByEncoding(textEncoding[0], textEncodingInfo);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="3227" end="3275" />
        <code>OS.DisposeTextToUnicodeInfo(textEncodingInfo);</code>
      </source_code>
      <source_code type="assignment">
        <location start="3276" end="3328" />
        <code>String name = new String(chars, 0, nchars[0] / 2);</code>
      </source_code>
      <source_code type="import">
        <location start="3691" end="3711" />
        <code>import java.util.*;</code>
      </source_code>
      <source_code type="import">
        <location start="3712" end="3740" />
        <code>import org.eclipse.swt.SWT;</code>
      </source_code>
      <source_code type="import">
        <location start="3741" end="3774" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="3775" end="3811" />
        <code>import org.eclipse.swt.widgets.List;</code>
      </source_code>
      <source_code type="import">
        <location start="3812" end="3846" />
        <code>import org.eclipse.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="3847" end="3888" />
        <code>import org.eclipse.swt.layout.FillLayout;</code>
      </source_code>
      <source_code type="class">
        <location start="3890" end="4589" />
        <code>public class ListFonts {
	public static void main(String args[]) {
		Display display= Display.getDefault();
		Shell shell= new Shell(display);
		shell.setBounds(200, 50, 300, 600);
		shell.setLayout(new FillLayout());
		List list= new List(shell, SWT.V_SCROLL);
		Set s= new HashSet();
		FontData[] fd= display.getFontList(null, true);
		for (int i= 0; i &lt; fd.length; ++i)
			s.add(fd[i].getName());
		String[] answer= new String[s.size()];
		s.toArray(answer);
		Arrays.sort(answer);
		for (int i= 0; i &lt; answer.length; ++i)
			list.add(answer[i]);
		shell.layout(true);
		shell.open();
		while (!shell.isDisposed())
			if (!display.readAndDispatch())
				display.sleep();
		display.dispose();
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Running the following program on my Mac...

import java.util.*;
import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.graphics.*;
public class ListFonts {
public static void main(String[] args) {
    final Display display = new Display();
    Set s = new HashSet();
    FontData[] fd = display.getFontList(null, true);
    for (int i=0; i&lt;fd.length; ++i) {
        s.add(fd[i].getName());
    }
    String[] answer = new String[s.size()];
    s.toArray(answer);
    Arrays.sort(answer);
    for (int i=0; i&lt;answer.length; ++i) {
        System.out.println(answer[i]);
    }
    display.dispose();
}}

... produces output that looks like this...

#PC????
#??????
#??????
#????????A
.Aqua ????
.Aqua ???? ?{?[???h
.Keyboard
.LastResort
Abadi MT Condensed Extra Bold
...

(continues for many more fonts)

The problem is, if I look in the Mac font viewer, the only font that begins with the characters "#PC" 
is "#PCMyungjo". The "#PC????" that was printed by the program's output contains unicode 
characters that did not print properly (I checked). The question is: Assuming that "#PC????" is really 
"#PCMyungjo", why can the font viewer find a nice (translated) name for the font, but we can't?

It also seems odd to me that I could not display the characters in the name. My encoding was UTF-
8, and I could not get the characters to print even if I picked _that_same_font_ as the text font. 
Presumably, the odd characters in the name are actually characters specified by the font, so it 
seems like it should have worked.

The byte to character copying code in Display.getFontList() is wrong because bytes are sign 
extended to characters:

		OS.FMGetFontFamilyName(fontFamily[0], buffer);
		int length = buffer[0] &amp; 0xFF;
		char[] chars = new char[length];
		for (int i=0; i&lt;length; i++) {
			chars[i]= (char)buffer[i+1];
		}
		String name = new String(chars);

Correct (and shorter) would be:

		OS.FMGetFontFamilyName(fontFamily[0], buffer);
		int length = buffer[0] &amp; 0xFF;
		String name = new String(buffer, 1, length, "MacRoman");

However, I tried various encodings and could not find one that would get rid of the '?' in the 
output.
(BTW: before debugging this piece of code, it helps to apply the patch from bug #41619)

The encoding of the font names in my machine is GB18030 (new chinise encoding).  I 
am not sure how to figure out this programaticaly.

The following code produces good font names. Note that they are still not printed 
properly in the console.  Use the debugger to see them.

		OS.FMGetFontFamilyName(fontFamily[0], buffer);
		int length = buffer[0] &amp; 0xFF;
		String name = new String(buffer, 1, length, "GB18030");
Ok, only some of the font names are encoded in GB18030.
Hmm, so there must be a place to get the encoding for a font name...
I believe this is the proper code, but in my machine there are still two names that are not 
converted properly. I will investigate more.

 	OS.FMGetFontFamilyName(fontFamily[0], buffer);
		OS.FMGetFontFamilyTextEncoding(fontFamily[0], textEncoding);
		OS.CreateTextToUnicodeInfoByEncoding(textEncoding[0], textEncodingInfo);
		OS.ConvertFromPStringToUnicode(textEncodingInfo[0], buffer, chars.length * 2, nchars, 
chars);
		OS.DisposeTextToUnicodeInfo(textEncodingInfo);
		String name = new String(chars, 0, nchars[0] / 2);

Yes, it almost works. I'm using the following program to show the Unicode font names.
However, the font names still aren't identical to the names shown in Apple's font viewer:
some font names seem to use the Unicode characters the font represents, so the Symbol font uses 
Greek letters and all the Japanese and Chinese fonts use Japanes an Chinese characters.

import java.util.*;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.layout.FillLayout;

public class ListFonts {
	public static void main(String args[]) {
		Display display= Display.getDefault();
		Shell shell= new Shell(display);
		shell.setBounds(200, 50, 300, 600);
		shell.setLayout(new FillLayout());
		List list= new List(shell, SWT.V_SCROLL);
		Set s= new HashSet();
		FontData[] fd= display.getFontList(null, true);
		for (int i= 0; i &lt; fd.length; ++i)
			s.add(fd[i].getName());
		String[] answer= new String[s.size()];
		s.toArray(answer);
		Arrays.sort(answer);
		for (int i= 0; i &lt; answer.length; ++i)
			list.add(answer[i]);
		shell.layout(true);
		shell.open();
		while (!shell.isDisposed())
			if (!display.readAndDispatch())
				display.sleep();
		display.dispose();
	}
} 
Created attachment 5914
Unicode font names
Note: I actually don't have a problem with it using the name made out of characters in the national 
language of the font. I just want to be able to display them properly. I *do* think it's odd that the 
font dialog can present romanized names for them, but this is less important.
Fixed &gt; 20030905.

Names returned are the same as the ones in FontDialog now.</WithStack>
    <WithOutStack>Running the following program on my Mac...

import java.util.*;
import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.graphics.*;
public class ListFonts {
public static void main(String[] args) {
    final Display display = new Display();
    Set s = new HashSet();
    FontData[] fd = display.getFontList(null, true);
    for (int i=0; i&lt;fd.length; ++i) {
        s.add(fd[i].getName());
    }
    String[] answer = new String[s.size()];
    s.toArray(answer);
    Arrays.sort(answer);
    for (int i=0; i&lt;answer.length; ++i) {
        System.out.println(answer[i]);
    }
    display.dispose();
}}

... produces output that looks like this...

#PC????
#??????
#??????
#????????A
.Aqua ????
.Aqua ???? ?{?[???h
.Keyboard
.LastResort
Abadi MT Condensed Extra Bold
...

(continues for many more fonts)

The problem is, if I look in the Mac font viewer, the only font that begins with the characters "#PC" 
is "#PCMyungjo". The "#PC????" that was printed by the program's output contains unicode 
characters that did not print properly (I checked). The question is: Assuming that "#PC????" is really 
"#PCMyungjo", why can the font viewer find a nice (translated) name for the font, but we can't?

It also seems odd to me that I could not display the characters in the name. My encoding was UTF-
8, and I could not get the characters to print even if I picked _that_same_font_ as the text font. 
Presumably, the odd characters in the name are actually characters specified by the font, so it 
seems like it should have worked.

The byte to character copying code in Display.getFontList() is wrong because bytes are sign 
extended to characters:

		OS.FMGetFontFamilyName(fontFamily[0], buffer);
		int length = buffer[0] &amp; 0xFF;
		char[] chars = new char[length];
		for (int i=0; i&lt;length; i++) {
			chars[i]= (char)buffer[i+1];
		}
		String name = new String(chars);

Correct (and shorter) would be:

		OS.FMGetFontFamilyName(fontFamily[0], buffer);
		int length = buffer[0] &amp; 0xFF;
		String name = new String(buffer, 1, length, "MacRoman");

However, I tried various encodings and could not find one that would get rid of the '?' in the 
output.
(BTW: before debugging this piece of code, it helps to apply the patch from bug #41619)

The encoding of the font names in my machine is GB18030 (new chinise encoding).  I 
am not sure how to figure out this programaticaly.

The following code produces good font names. Note that they are still not printed 
properly in the console.  Use the debugger to see them.

		OS.FMGetFontFamilyName(fontFamily[0], buffer);
		int length = buffer[0] &amp; 0xFF;
		String name = new String(buffer, 1, length, "GB18030");
Ok, only some of the font names are encoded in GB18030.
Hmm, so there must be a place to get the encoding for a font name...
I believe this is the proper code, but in my machine there are still two names that are not 
converted properly. I will investigate more.

 	OS.FMGetFontFamilyName(fontFamily[0], buffer);
		OS.FMGetFontFamilyTextEncoding(fontFamily[0], textEncoding);
		OS.CreateTextToUnicodeInfoByEncoding(textEncoding[0], textEncodingInfo);
		OS.ConvertFromPStringToUnicode(textEncodingInfo[0], buffer, chars.length * 2, nchars, 
chars);
		OS.DisposeTextToUnicodeInfo(textEncodingInfo);
		String name = new String(chars, 0, nchars[0] / 2);

Yes, it almost works. I'm using the following program to show the Unicode font names.
However, the font names still aren't identical to the names shown in Apple's font viewer:
some font names seem to use the Unicode characters the font represents, so the Symbol font uses 
Greek letters and all the Japanese and Chinese fonts use Japanes an Chinese characters.

import java.util.*;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.layout.FillLayout;

public class ListFonts {
	public static void main(String args[]) {
		Display display= Display.getDefault();
		Shell shell= new Shell(display);
		shell.setBounds(200, 50, 300, 600);
		shell.setLayout(new FillLayout());
		List list= new List(shell, SWT.V_SCROLL);
		Set s= new HashSet();
		FontData[] fd= display.getFontList(null, true);
		for (int i= 0; i &lt; fd.length; ++i)
			s.add(fd[i].getName());
		String[] answer= new String[s.size()];
		s.toArray(answer);
		Arrays.sort(answer);
		for (int i= 0; i &lt; answer.length; ++i)
			list.add(answer[i]);
		shell.layout(true);
		shell.open();
		while (!shell.isDisposed())
			if (!display.readAndDispatch())
				display.sleep();
		display.dispose();
	}
} 
Created attachment 5914
Unicode font names
Note: I actually don't have a problem with it using the name made out of characters in the national 
language of the font. I just want to be able to display them properly. I *do* think it's odd that the 
font dialog can present romanized names for them, but this is less important.
Fixed &gt; 20030905.

Names returned are the same as the ones in FontDialog now.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="41900" />
    <CreationDate amount="2003-08-24 12:46:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="3.0" />
    <rep_platform amount="Macintosh" />
    <op_sys amount="Mac OS X - Carbon (unsup.)" />
    <priority amount="P3" />
    <bug_severity amount="trivial" />
    <Summery>Suspicious code in FontData constructor</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="ifstatement">
        <location start="98" end="168" />
        <code>if (platform.equals("CARBON") &amp;&amp; version2.equals("1")) {
		return;
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The follow code appears at the end of the FontData constructor "public FontData(String string)". 
	if (platform.equals("CARBON") &amp;&amp; version2.equals("1")) {
		return;
	}
Since the method exits immediately anyway, it's not clear what the purpose of this code is.
FontData objects returned by FontDialog.open() and Display.getFontList() have more 
information than name/style/height. This info is supposed to be added to the string 
returned by toString() and parsed in the constructor, so that this info is not lost when
saving the object.

The purpose of this code is just to remind me that on this platform we are not saving
this info. We should fix this (or at least comment the code).

Note that photon and gtk have the same problem.
Found this old bug report.  The code is still there.
Closing report, platform is discontinued.

Cocoa does not have similar code.</WithStack>
    <WithOutStack>The follow code appears at the end of the FontData constructor "public FontData(String string)". 
	if (platform.equals("CARBON") &amp;&amp; version2.equals("1")) {
		return;
	}
Since the method exits immediately anyway, it's not clear what the purpose of this code is.
FontData objects returned by FontDialog.open() and Display.getFontList() have more 
information than name/style/height. This info is supposed to be added to the string 
returned by toString() and parsed in the constructor, so that this info is not lost when
saving the object.

The purpose of this code is just to remind me that on this platform we are not saving
this info. We should fix this (or at least comment the code).

Note that photon and gtk have the same problem.
Found this old bug report.  The code is still there.
Closing report, platform is discontinued.

Cocoa does not have similar code.</WithOutStack>
  </Bug>
</infozilla-output>

