<?xml version="1.0" encoding="UTF-8"?>
<infozilla-output>
  <Bug>
    <BugId amount="4501" />
    <CreationDate amount="2001-10-11 14:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>SWT OLE Problems (1FRT735)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1) in regedit find the CLSID for "ClearQuest.Application2" by looking under HKEY_CLASSES_ROOT -&gt; ClearQuest.Application2 -&gt; CLSID</Line>
          <Line>2) in regedit look at the CLSID entry HKEY_CLASSES_ROOT -&gt; CLSID -&gt; {the CLSID you found above}</Line>
          <Line>Under the CLSID it should list something like InProcServer32 or InProcHandler32 or LocalServer32 indicating the supported CLSCTX type.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>(3/14/00 11:38:43 AM) VK

I am having some trouble getting the swt ole classes to work the way I would like them to.  
I need to a create a non-visual OLE object in order to access other OLE objects.  

when using this constructor 
new OleControlSite(frame, SWT.NONE, clsid)
and a valid OLE clsid I get a "SWTOLE.ERROR_CANNOT_CREATE_OBJECT" error and the following 
return code -2147221164 from OLE.OleCreate().

Is there another way to deal with non-visual objects?

Does this return code mean anything?

Is there any way for me to get a hold of the source for the swt.dll? 

NOTES:
(3/14/00 11:39:05 AM) VK

I am relaying this info on behalf of internal user ... not sure if the above is sufficient for you to respond to.
If you need more info, please be specific 


KH (3/20/00 3:40:01 PM)

	The source for the SWT dll will not help you. It implements a JNI wrapper to the Windows calls. All of the 
interesting work is done in Java.  Perhaps the problem is the result of trying to create the OleControlSite using
a clsid instead of a  program ID. 

	The OLE Demo example does something similiar when it opens the common controls. See: 

			Demo.createCommonDialogControl(int index)


If this still does not help, please provide more information so we can investigate the problem further. 

VK (3/24/00 8:39:33 AM)

see walleye, directory incoming/1FRT735 for more details.

VI (3/31/00 8:50:01 AM)

The error  -2147221164 is the REGDB_E_CLASSNOTREG error which means the specified class is not registered in the registration 
database. It also can indicate that the type of server you requested in the CLSCTX enumeration is not registered or the values 
for the server types in the registry are corrupt.  In the CLSCTX enumeration, you can specify the type of server used to 
manage the object. The constants can be CLSCTX_INPROC_SERVER, CLSCTX_INPROC_HANDLER, CLSCTX_LOCAL_SERVER, 
or any combination of these values. 

In SWT OLE all Controls are created with the CLSCTX value of CLSCTX_INPROC_SERVER or CLSCTX_INPROC_HANDLER.

I am guessing that the ClearQuest control is registered as a CLSCTX_LOCAL_SERVER only.  To determine this, do the following:
	1) in regedit find the CLSID for "ClearQuest.Application2" by looking under HKEY_CLASSES_ROOT -&gt; ClearQuest.Application2 -&gt; CLSID
	2) in regedit look at the CLSID entry HKEY_CLASSES_ROOT -&gt; CLSID -&gt; {the CLSID you found above}
	Under the CLSID it should list something like InProcServer32 or InProcHandler32 or LocalServer32 indicating the supported CLSCTX type.		

If the control is registered as CLSCTX_LOCAL_SERVER only,  is it possible to change it to 
CLSCTX_INPROC_HANDLER?  When we get the software to install ClearQuest I will look into this further.
PRODUCT VERSION: 0.01b



Vlad, is this still an issue for you?
Vlad,
I am closing this bug report since it does not appear to be an issue for you 
any more.  Please reopen if this is still a problem.</WithStack>
    <WithOutStack>(3/14/00 11:38:43 AM) VK

I am having some trouble getting the swt ole classes to work the way I would like them to.  
I need to a create a non-visual OLE object in order to access other OLE objects.  

when using this constructor 
new OleControlSite(frame, SWT.NONE, clsid)
and a valid OLE clsid I get a "SWTOLE.ERROR_CANNOT_CREATE_OBJECT" error and the following 
return code -2147221164 from OLE.OleCreate().

Is there another way to deal with non-visual objects?

Does this return code mean anything?

Is there any way for me to get a hold of the source for the swt.dll? 

NOTES:
(3/14/00 11:39:05 AM) VK

I am relaying this info on behalf of internal user ... not sure if the above is sufficient for you to respond to.
If you need more info, please be specific 


KH (3/20/00 3:40:01 PM)

	The source for the SWT dll will not help you. It implements a JNI wrapper to the Windows calls. All of the 
interesting work is done in Java.  Perhaps the problem is the result of trying to create the OleControlSite using
a clsid instead of a  program ID. 

	The OLE Demo example does something similiar when it opens the common controls. See: 

			Demo.createCommonDialogControl(int index)


If this still does not help, please provide more information so we can investigate the problem further. 

VK (3/24/00 8:39:33 AM)

see walleye, directory incoming/1FRT735 for more details.

VI (3/31/00 8:50:01 AM)

The error  -2147221164 is the REGDB_E_CLASSNOTREG error which means the specified class is not registered in the registration 
database. It also can indicate that the type of server you requested in the CLSCTX enumeration is not registered or the values 
for the server types in the registry are corrupt.  In the CLSCTX enumeration, you can specify the type of server used to 
manage the object. The constants can be CLSCTX_INPROC_SERVER, CLSCTX_INPROC_HANDLER, CLSCTX_LOCAL_SERVER, 
or any combination of these values. 

In SWT OLE all Controls are created with the CLSCTX value of CLSCTX_INPROC_SERVER or CLSCTX_INPROC_HANDLER.

I am guessing that the ClearQuest control is registered as a CLSCTX_LOCAL_SERVER only.  To determine this, do the following:
	1) in regedit find the CLSID for "ClearQuest.Application2" by looking under HKEY_CLASSES_ROOT -&gt; ClearQuest.Application2 -&gt; CLSID
	2) in regedit look at the CLSID entry HKEY_CLASSES_ROOT -&gt; CLSID -&gt; {the CLSID you found above}
	Under the CLSID it should list something like InProcServer32 or InProcHandler32 or LocalServer32 indicating the supported CLSCTX type.		

If the control is registered as CLSCTX_LOCAL_SERVER only,  is it possible to change it to 
CLSCTX_INPROC_HANDLER?  When we get the software to install ClearQuest I will look into this further.
PRODUCT VERSION: 0.01b



Vlad, is this still an issue for you?
Vlad,
I am closing this bug report since it does not appear to be an issue for you 
any more.  Please reopen if this is still a problem.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4502" />
    <CreationDate amount="2001-10-11 14:17:00 -0400" />
    <DupId amount="4396" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>cannot disable a Composite (1FSHKAV)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>- if I #setVisible(boolean) on a Composite, all of the Composite's widgets appear/disappear appropriately</Line>
          <Line>- however if I #setEnabled(boolean) on a Composite, its widgets are not visually affected (though they do</Line>
          <Line>stop responding to ui events)</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>- if I #setVisible(boolean) on a Composite, all of the Composite's widgets appear/disappear appropriately
- however if I #setEnabled(boolean) on a Composite, its widgets are not visually affected (though they do
	stop responding to ui events)

NOTES:

	SN (3/27/00 3:27:18 PM)
		This PR has the wrong title.  You can disable a composite and it stop events going
		to the children.  It does not gray out children.  This is Windows platform behavior.

	SN (3/28/00 10:10:18 AM)
		Not a bug.  Platform behavior.

	GDA (4/6/00 6:19:05 PM)
		We want to make sure we do this the recommended way so please advise...
		What is SWT's recommended approach for how the many clients that need this
		correct UI behavior to achieve it.  Clearly having clients looping over all of the
		widgets isn't the right answer. Please advise.

	DB (4/12/00 5:37:46 PM)
		We have implemented a utility class in JFace which exactly has the bahaviour
		GWG has asked for. The class name is com.ibm.jface.wizards.ControlEnableState.
		The class is currently private. It can be made public if requested.

	SN (4/14/00 12:03:43 PM)  This is a DCR and has already been requested by LK.
		1PQTA8U: SWT:ALL - DCR - Composite setEnabled

	SN (4/14/00 12:12:52 PM)
		I checked ControlEnableState.  This class also adds the fancy capability to skip
		enabling and disabling certain widgets in the widget tree.  This kind of feature is
		pretty application specific and wouldn't make sense as part of the basic API but
		is something I can see an application wishing to do.

GDA(4/18/00 10:13:48 PM) 
	Since the recommended approach is to call the extra (cake) utility class,
	or invent our own utility class (rather than work around it at each occasion) 
	we have changed our code to call it accordingly. 

	Dirk, can you please pass the chocolate sprinkles &amp; make the utility class be public.

	Aside:
	Even with the "fancy capability" described above, it isn't that special.
	It's not uncommon for composites containing a set of some enabled 
	&amp; some disabled widgets (especially in wizards and dialogs).
	Clearly disabling and reenabling the group should return those that were originally
	disabled back to their disabled state (and should not enable them).
	Clearly there is also a need for a force enable api.
	But I guess this is moot anyways and not worth argueing about.
	
SN (4/19/00 2:58:04 PM)
	The behavior you describe exists on X/Motif.  The API call is XtSetSensitive ().
	We are modeling the Windows behavior.  The ControlEnableState class does
	more than XtSetSensitive does (ie. save and restore the old state).  It offers API
	to skip certain widgets in the tree.

	When I described it as "fancy", I did not mean an insult you or DB.
	
	It is not unreasonable to "know what's going on" and disable/enable specific
	leaf widgets in a widget tree.  It is also not unreasonable (but more work on
	Windows) to implement the behavior of XtSetSensitive ().  However, a design
	decision has been made.  If the XtSetSensitive () behavior was implemented,
	clients could not get the behavior where they didn't want the child widgets to
	be gray.  Also, we are modeling Windows behavior, not Motif.

KH (4/19/00 6:29:59 PM)

	The behaviour also exists on GTK.

SN (4/20/00 10:25:50 AM)
	What is the API?  OS/2 does it the Windows way.  Wonder what Photon does?

EG (4/26/00 6:00:54 PM)
	for the beta please leave the behaviour as it is. We have made our helper
	public so Greg can use it as well.

	McQ (2/1/01 4:44:51 PM) -
		No action at this time. It bothers me that we aren't using the capability
		that unix provides.
PRODUCT VERSION:
swt 0.38


LK has requested this and has ownership of the duplicate request.


*** This bug has been marked as a duplicate of 4396 ***</WithStack>
    <WithOutStack>- if I #setVisible(boolean) on a Composite, all of the Composite's widgets appear/disappear appropriately
- however if I #setEnabled(boolean) on a Composite, its widgets are not visually affected (though they do
	stop responding to ui events)

NOTES:

	SN (3/27/00 3:27:18 PM)
		This PR has the wrong title.  You can disable a composite and it stop events going
		to the children.  It does not gray out children.  This is Windows platform behavior.

	SN (3/28/00 10:10:18 AM)
		Not a bug.  Platform behavior.

	GDA (4/6/00 6:19:05 PM)
		We want to make sure we do this the recommended way so please advise...
		What is SWT's recommended approach for how the many clients that need this
		correct UI behavior to achieve it.  Clearly having clients looping over all of the
		widgets isn't the right answer. Please advise.

	DB (4/12/00 5:37:46 PM)
		We have implemented a utility class in JFace which exactly has the bahaviour
		GWG has asked for. The class name is com.ibm.jface.wizards.ControlEnableState.
		The class is currently private. It can be made public if requested.

	SN (4/14/00 12:03:43 PM)  This is a DCR and has already been requested by LK.
		1PQTA8U: SWT:ALL - DCR - Composite setEnabled

	SN (4/14/00 12:12:52 PM)
		I checked ControlEnableState.  This class also adds the fancy capability to skip
		enabling and disabling certain widgets in the widget tree.  This kind of feature is
		pretty application specific and wouldn't make sense as part of the basic API but
		is something I can see an application wishing to do.

GDA(4/18/00 10:13:48 PM) 
	Since the recommended approach is to call the extra (cake) utility class,
	or invent our own utility class (rather than work around it at each occasion) 
	we have changed our code to call it accordingly. 

	Dirk, can you please pass the chocolate sprinkles &amp; make the utility class be public.

	Aside:
	Even with the "fancy capability" described above, it isn't that special.
	It's not uncommon for composites containing a set of some enabled 
	&amp; some disabled widgets (especially in wizards and dialogs).
	Clearly disabling and reenabling the group should return those that were originally
	disabled back to their disabled state (and should not enable them).
	Clearly there is also a need for a force enable api.
	But I guess this is moot anyways and not worth argueing about.
	
SN (4/19/00 2:58:04 PM)
	The behavior you describe exists on X/Motif.  The API call is XtSetSensitive ().
	We are modeling the Windows behavior.  The ControlEnableState class does
	more than XtSetSensitive does (ie. save and restore the old state).  It offers API
	to skip certain widgets in the tree.

	When I described it as "fancy", I did not mean an insult you or DB.
	
	It is not unreasonable to "know what's going on" and disable/enable specific
	leaf widgets in a widget tree.  It is also not unreasonable (but more work on
	Windows) to implement the behavior of XtSetSensitive ().  However, a design
	decision has been made.  If the XtSetSensitive () behavior was implemented,
	clients could not get the behavior where they didn't want the child widgets to
	be gray.  Also, we are modeling Windows behavior, not Motif.

KH (4/19/00 6:29:59 PM)

	The behaviour also exists on GTK.

SN (4/20/00 10:25:50 AM)
	What is the API?  OS/2 does it the Windows way.  Wonder what Photon does?

EG (4/26/00 6:00:54 PM)
	for the beta please leave the behaviour as it is. We have made our helper
	public so Greg can use it as well.

	McQ (2/1/01 4:44:51 PM) -
		No action at this time. It bothers me that we aren't using the capability
		that unix provides.
PRODUCT VERSION:
swt 0.38


LK has requested this and has ownership of the duplicate request.


*** This bug has been marked as a duplicate of 4396 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4503" />
    <CreationDate amount="2001-10-11 14:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>FontDialog is missing fonts (1FSMRV0)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="12">
        <Lines>
          <Line>1) It calls display.getFontList() twice, once for scalable and once for non-scalable.</Line>
          <Line>This is perhaps due to confusion about what the API actually does.</Line>
          <Line>Calling with false will means I don't care whether it is scalable or not.</Line>
          <Line>In this case you will get ALL fonts returned.</Line>
          <Line>Calling with true means I only want scalable fonts.</Line>
          <Line />
          <Line>So in this case, the second call is redundant and gives you duplicate fonts.</Line>
          <Line />
          <Line>2) I have many fonts on my system that don't show up in the font dialog.</Line>
          <Line>For example, adobe-courier, adobe-times, etc.</Line>
          <Line>It appears that it is actually quite a small subset of my actual fonts</Line>
          <Line>that appear in the dialog.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>A couple of things about the font dialog.

1) It calls display.getFontList() twice, once for scalable and once for non-scalable.
	This is perhaps due to confusion about what the API actually does.
	Calling with false will means I don't care whether it is scalable or not.
	In this case you will get ALL fonts returned.
	Calling with true means I only want scalable fonts.

	So in this case, the second call is redundant and gives you duplicate fonts.

2) I have many fonts on my system that don't show up in the font dialog.
	For example, adobe-courier, adobe-times, etc.
	It appears that it is actually quite a small subset of my actual fonts
	that appear in the dialog.

NOTES:

KR (03/31/00 10:55:07)
	I do have the adobe courier, times, helvetica in the font dialog on my system.
	Note that the font dialog displays the fonts sorted by character set. In order 
	to see the adobe foundry fonts, not the adobe character set fonts you have to 
	scroll down to the iso8859/Western character set.
	Perhaps it would be useful to display the system character set at the top of the 
	list?
	The only fonts that don't show up in the font dialog are the ones with slant o 
	(oblique). FontData.getStyle() only returns BOLD and ITALIC. Should there be an
	OBLIQUE slant as well? Otherwise I would have to check the slant field for "o" 
	directly.
	Also, if a font has both scalable and fixed size versions you can only use the 
	scalable version.

JM (3/31/00 11:16:45 AM) -
	Okay, I found courier and times... but I think that there's something bogus with character
	set selection, unless I'm just filling the fields in wrong. Adobe is not a character set, and
	if I do
		xlsfonts | grep adobe
	on my machine, it shows that all the adobe courier, times, etc. fonts have the iso8859 character
	set. Similarly, FontData returned from Display.getFontList() for courier have the iso8859 character
	set filled in. How are you detecting the charset?
	
	We should consider putting the oblique style in in the future, but it's probably not critical for the
	time being. 

KR (03/31/00 12:04:20)
	I use the FontData.characterSetRegistry and prefix it with a descriptive name like Western or 
	Korean.
	If you do 
		xlsfonts | grep adobe-font
	you will get the fonts listed below. It's bogus that X has fonts with an "adobe" character set
	but there's nothing we can do about it. 

-adobe-symbol-medium-r-normal--10-100-75-75-p-61-adobe-fontspecific
-adobe-symbol-medium-r-normal--12-120-75-75-p-74-adobe-fontspecific
-adobe-symbol-medium-r-normal--14-140-75-75-p-85-adobe-fontspecific
-adobe-symbol-medium-r-normal--18-180-75-75-p-107-adobe-fontspecific
-adobe-symbol-medium-r-normal--24-240-75-75-p-142-adobe-fontspecific
-adobe-symbol-medium-r-normal--8-80-75-75-p-51-adobe-fontspecific
-urw-symbol-medium-r-normal--0-0-0-0-p-0-adobe-fontspecific
-urw-zapf dingbats-medium-r-normal--0-0-0-0-p-0-adobe-fontspecific   
		
JM (03/31/00 14:44:37) - I understand. It would probably be less confusing for the user if the system 
	character set is at the top.

JM (5/9/00 8:27:54 AM) - Just a note. The way you do it now (i.e. "know" about certain character
sets and print them nicely - "isoxxxx (Western)" makes it less confusing. I don't think anything
necessarily needs to be done about this.

KR (05/15/00 %r)
	It would be nice to have the system character set at the top. Especially since 
	our Western character set is now at the bottom and you always have to scroll down 
	to find it.
PRODUCT VERSION:

SWT 0.40


FontDialog has been re-written to improve its behavior.</WithStack>
    <WithOutStack>A couple of things about the font dialog.

1) It calls display.getFontList() twice, once for scalable and once for non-scalable.
	This is perhaps due to confusion about what the API actually does.
	Calling with false will means I don't care whether it is scalable or not.
	In this case you will get ALL fonts returned.
	Calling with true means I only want scalable fonts.

	So in this case, the second call is redundant and gives you duplicate fonts.

2) I have many fonts on my system that don't show up in the font dialog.
	For example, adobe-courier, adobe-times, etc.
	It appears that it is actually quite a small subset of my actual fonts
	that appear in the dialog.

NOTES:

KR (03/31/00 10:55:07)
	I do have the adobe courier, times, helvetica in the font dialog on my system.
	Note that the font dialog displays the fonts sorted by character set. In order 
	to see the adobe foundry fonts, not the adobe character set fonts you have to 
	scroll down to the iso8859/Western character set.
	Perhaps it would be useful to display the system character set at the top of the 
	list?
	The only fonts that don't show up in the font dialog are the ones with slant o 
	(oblique). FontData.getStyle() only returns BOLD and ITALIC. Should there be an
	OBLIQUE slant as well? Otherwise I would have to check the slant field for "o" 
	directly.
	Also, if a font has both scalable and fixed size versions you can only use the 
	scalable version.

JM (3/31/00 11:16:45 AM) -
	Okay, I found courier and times... but I think that there's something bogus with character
	set selection, unless I'm just filling the fields in wrong. Adobe is not a character set, and
	if I do
		xlsfonts | grep adobe
	on my machine, it shows that all the adobe courier, times, etc. fonts have the iso8859 character
	set. Similarly, FontData returned from Display.getFontList() for courier have the iso8859 character
	set filled in. How are you detecting the charset?
	
	We should consider putting the oblique style in in the future, but it's probably not critical for the
	time being. 

KR (03/31/00 12:04:20)
	I use the FontData.characterSetRegistry and prefix it with a descriptive name like Western or 
	Korean.
	If you do 
		xlsfonts | grep adobe-font
	you will get the fonts listed below. It's bogus that X has fonts with an "adobe" character set
	but there's nothing we can do about it. 

-adobe-symbol-medium-r-normal--10-100-75-75-p-61-adobe-fontspecific
-adobe-symbol-medium-r-normal--12-120-75-75-p-74-adobe-fontspecific
-adobe-symbol-medium-r-normal--14-140-75-75-p-85-adobe-fontspecific
-adobe-symbol-medium-r-normal--18-180-75-75-p-107-adobe-fontspecific
-adobe-symbol-medium-r-normal--24-240-75-75-p-142-adobe-fontspecific
-adobe-symbol-medium-r-normal--8-80-75-75-p-51-adobe-fontspecific
-urw-symbol-medium-r-normal--0-0-0-0-p-0-adobe-fontspecific
-urw-zapf dingbats-medium-r-normal--0-0-0-0-p-0-adobe-fontspecific   
		
JM (03/31/00 14:44:37) - I understand. It would probably be less confusing for the user if the system 
	character set is at the top.

JM (5/9/00 8:27:54 AM) - Just a note. The way you do it now (i.e. "know" about certain character
sets and print them nicely - "isoxxxx (Western)" makes it less confusing. I don't think anything
necessarily needs to be done about this.

KR (05/15/00 %r)
	It would be nice to have the system character set at the top. Especially since 
	our Western character set is now at the bottom and you always have to scroll down 
	to find it.
PRODUCT VERSION:

SWT 0.40


FontDialog has been re-written to improve its behavior.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4504" />
    <CreationDate amount="2001-10-11 14:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Cannot ALT+TAB to SWT window (1FSN8XH)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>STB (03/30/00 17:12:55)
	On Linux when I run i.e. BitmapExample, I cannot activate the shell
	window using ALT+TAB as I can with all the other windows including VAJ.

JM (3/30/00 5:08:13 PM) - Note STB is running Enlightenment window manager

	McQ (2/1/01 4:49:47 PM) -
		Worked correctly for some simple examples on a single test case.
		To be looked at again later.
I can not make this happen on current drops.</WithStack>
    <WithOutStack>STB (03/30/00 17:12:55)
	On Linux when I run i.e. BitmapExample, I cannot activate the shell
	window using ALT+TAB as I can with all the other windows including VAJ.

JM (3/30/00 5:08:13 PM) - Note STB is running Enlightenment window manager

	McQ (2/1/01 4:49:47 PM) -
		Worked correctly for some simple examples on a single test case.
		To be looked at again later.
I can not make this happen on current drops.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4505" />
    <CreationDate amount="2001-10-11 14:17:00 -0400" />
    <DupId amount="13467" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Need API to disable table's resize behavior when resizing table column (1FT1A65)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="8">
      <source_code type="package">
        <location start="392" end="427" />
        <code>package com.oti.dbaeumer.swt.tests;</code>
      </source_code>
      <source_code type="import">
        <location start="428" end="450" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="451" end="479" />
        <code>import com.ibm.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="480" end="510" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="511" end="539" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="540" end="569" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="571" end="3091" />
        <code>public class TableLayoutTest {
	Shell shell;
	Table table;
	TableColumn tc1, tc2;
	ResizeListener listener= new ResizeListener();
	int fLayoutCounter;
	
	private class ResizeListener extends ControlAdapter {
		public void controlResized(ControlEvent e) {
			if (fLayoutCounter &gt; 0)
				return;
				
			fLayoutCounter++;
			TableColumn c= (TableColumn)e.widget;
			int width= c.getWidth();
			if (width &lt; 20) {
				width= 20;
				c.setWidth(width);
			}
			int available= table.getClientArea().width;
			int newWidth= available - width;
			int correct= -1;
			if (newWidth &lt; 20) {
				newWidth= 20;
				correct= available - newWidth;
			}
			if (c == tc1) {
				tc2.setWidth(newWidth);
				if (correct != -1)
					tc1.setWidth(correct);
			} else {
				tc1.setWidth(newWidth);	
				if (correct != -1)
					tc2.setWidth(correct);
			}	
			fLayoutCounter--;	
		}
	}
		
	
	public TableLayoutTest() {
	}
	
	public TableLayoutTest close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		table= null;
		return this;
	}
	
	public TableLayoutTest open () {
		shell = new Shell ();
		shell.setText ("Table Layout Test");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		table= new Table(shell, SWT.BORDER);
		GridData gd= new GridData();
		gd.horizontalAlignment= gd.FILL; gd.grabExcessHorizontalSpace= true;
		gd.verticalAlignment= gd.FILL; gd.grabExcessVerticalSpace= true;
		table.setLayoutData(gd);
		
		tc1= new TableColumn(table, SWT.NONE);
		tc1.setText("Column 1");
		tc1.addControlListener(listener);
		
		tc2= new TableColumn(table, SWT.NONE);
		tc2.setText("Column 2");
		tc2.addControlListener(listener);
		
		for (int i= 0; i &lt; 30; i++) {
			TableItem item= new TableItem(table, SWT.NONE);
			item.setText(0, "Item " + i + " [0]");
			item.setText(1, "Item " + i + " [1]");
		}
		
		table.setHeaderVisible(true);
		table.addControlListener(new ControlAdapter() {
			public void controlResized(ControlEvent e) {
				if (fLayoutCounter &gt; 0)
					return;
				fLayoutCounter++;
				Rectangle rect= ((Table)e.widget).getClientArea();
				tc1.setWidth(rect.width / 2);
				tc2.setWidth(rect.width / 2);
				fLayoutCounter--;
			}
		});
			
		shell.open ();
		return this;
	}
	
	public TableLayoutTest run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		new TableLayoutTest().open().run().close();
	}
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="4174" end="5450" />
        <code>public static void main (String [] args) {
	final Display display = new Display ();
	final Shell shell = new Shell (display);
	final Table table = new Table (shell, 0);
	table.setHeaderVisible (true);
	final int columns = 4;
	for (int i=0; i&lt;columns; i++) {
		new TableColumn (table, 0);
	}
	final int rows = 12;
	for (int i=0; i&lt;rows; i++) {
		TableItem item = new TableItem (table, 0);
		for (int j=0; j&lt;columns; j++) {
			item.setText (j, "Item " + i + "-" + j);
		}
	}
	shell.addListener (SWT.Resize, new Listener () {
		public void handleEvent (Event e) {
			table.setRedraw (false);
			table.setBounds (shell.getClientArea ());
			Rectangle rect = table.getClientArea ();
			for (int i=0; i&lt;columns; i++) {
				TableColumn column = table.getColumn (i);
				column.setWidth (rect.width / columns);
			}					
			table.setRedraw (true);
			Rectangle rect2 = table.getClientArea ();
			if (!rect.equals (rect2)) {
				table.setRedraw (false);
				rect.width = rect2.width;
				for (int i=0; i&lt;columns; i++) {
					TableColumn column = table.getColumn (i);
					column.setWidth (rect.width / columns);
				}
				table.setRedraw (true);
				table.update ();
			}
		}
	});
	shell.open ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>We started to implement a TableLayout in JFace which tracks table column resizing and 
	adjust other table columns, so that all columns fit into the table's client area.

	But the table as a standard behavior when a table column is resized (add a horizontal scroll bar).
	This produces a lot of flickering. To see what I mean run the attached sample code. Try to
	resize a column to size 0.

package com.oti.dbaeumer.swt.tests;

import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class TableLayoutTest {
	Shell shell;
	Table table;
	TableColumn tc1, tc2;
	ResizeListener listener= new ResizeListener();
	int fLayoutCounter;
	
	private class ResizeListener extends ControlAdapter {
		public void controlResized(ControlEvent e) {
			if (fLayoutCounter &gt; 0)
				return;
				
			fLayoutCounter++;
			TableColumn c= (TableColumn)e.widget;
			int width= c.getWidth();
			if (width &lt; 20) {
				width= 20;
				c.setWidth(width);
			}
			int available= table.getClientArea().width;
			int newWidth= available - width;
			int correct= -1;
			if (newWidth &lt; 20) {
				newWidth= 20;
				correct= available - newWidth;
			}
			if (c == tc1) {
				tc2.setWidth(newWidth);
				if (correct != -1)
					tc1.setWidth(correct);
			} else {
				tc1.setWidth(newWidth);	
				if (correct != -1)
					tc2.setWidth(correct);
			}	
			fLayoutCounter--;	
		}
	}
		
	
	public TableLayoutTest() {
	}
	
	public TableLayoutTest close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		table= null;
		return this;
	}
	
	public TableLayoutTest open () {
		shell = new Shell ();
		shell.setText ("Table Layout Test");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		table= new Table(shell, SWT.BORDER);
		GridData gd= new GridData();
		gd.horizontalAlignment= gd.FILL; gd.grabExcessHorizontalSpace= true;
		gd.verticalAlignment= gd.FILL; gd.grabExcessVerticalSpace= true;
		table.setLayoutData(gd);
		
		tc1= new TableColumn(table, SWT.NONE);
		tc1.setText("Column 1");
		tc1.addControlListener(listener);
		
		tc2= new TableColumn(table, SWT.NONE);
		tc2.setText("Column 2");
		tc2.addControlListener(listener);
		
		for (int i= 0; i &lt; 30; i++) {
			TableItem item= new TableItem(table, SWT.NONE);
			item.setText(0, "Item " + i + " [0]");
			item.setText(1, "Item " + i + " [1]");
		}
		
		table.setHeaderVisible(true);
		table.addControlListener(new ControlAdapter() {
			public void controlResized(ControlEvent e) {
				if (fLayoutCounter &gt; 0)
					return;
				fLayoutCounter++;
				Rectangle rect= ((Table)e.widget).getClientArea();
				tc1.setWidth(rect.width / 2);
				tc2.setWidth(rect.width / 2);
				fLayoutCounter--;
			}
		});
			
		shell.open ();
		return this;
	}
	
	public TableLayoutTest run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		new TableLayoutTest().open().run().close();
	}
}


NOTES:

	KH (4/11/00 10:16:27 AM)

		You will have to deal with the recursive resize callbacks. Setting the column widths may cause the widget to resize and send
	the programmer a resize event. Making calls that change a widget's size within a resize callback is always dangerous and often
	lead to recursive death.  

DB (4/19/00 11:40:32 AM)
	Only applying the layout strategy once to the table removes the descibed behaviour (for sure it does, because the behaviour
	only occurs, if the layout is tracked on user changes).

	McQ (2/1/01 5:00:37 PM) -
		Information only.

	CM &amp; SN (3/23/2001 5:28:06 PM)
		This is the "flickering scrollbars in Table" PR.
		See also:
			1G5WW8R: SWT:Linux - Composite.setBounds causes JFace TableLayout to fail
			1FT1OI7: SWT:WINNT - Strange TableEditor behavior

	CM (3/23/2001 5:39:59 PM)
		P1/M1 (April 1)

SN (3/27/01 6:25:31 PM)
	This code is close but still has a few problems.  It flashes once the first
	time a scroll bar is required and has not been tested on Motif.  I think it
	is making use of an undocumented Windows feature ...

public static void main (String [] args) {
	final Display display = new Display ();
	final Shell shell = new Shell (display);
	final Table table = new Table (shell, 0);
	table.setHeaderVisible (true);
	final int columns = 4;
	for (int i=0; i&lt;columns; i++) {
		new TableColumn (table, 0);
	}
	final int rows = 12;
	for (int i=0; i&lt;rows; i++) {
		TableItem item = new TableItem (table, 0);
		for (int j=0; j&lt;columns; j++) {
			item.setText (j, "Item " + i + "-" + j);
		}
	}
	shell.addListener (SWT.Resize, new Listener () {
		public void handleEvent (Event e) {
			table.setRedraw (false);
			table.setBounds (shell.getClientArea ());
			Rectangle rect = table.getClientArea ();
			for (int i=0; i&lt;columns; i++) {
				TableColumn column = table.getColumn (i);
				column.setWidth (rect.width / columns);
			}					
			table.setRedraw (true);
			Rectangle rect2 = table.getClientArea ();
			if (!rect.equals (rect2)) {
				table.setRedraw (false);
				rect.width = rect2.width;
				for (int i=0; i&lt;columns; i++) {
					TableColumn column = table.getColumn (i);
					column.setWidth (rect.width / columns);
				}
				table.setRedraw (true);
				table.update ();
			}
		}
	});
	shell.open ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

CM (3/27/2001 6:40:27 PM)
	Talked to NE, and he says he doesn't want the new code because he has something that works,
	and it is too dangerous to put in the new code now.

CM (3/28/01 11:46:59 AM)
	Moving out of Active-Committed.
PRODUCT VERSION:
	SWT 0.40




*** This bug has been marked as a duplicate of 13467 ***</WithStack>
    <WithOutStack>We started to implement a TableLayout in JFace which tracks table column resizing and 
	adjust other table columns, so that all columns fit into the table's client area.

	But the table as a standard behavior when a table column is resized (add a horizontal scroll bar).
	This produces a lot of flickering. To see what I mean run the attached sample code. Try to
	resize a column to size 0.

package com.oti.dbaeumer.swt.tests;

import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class TableLayoutTest {
	Shell shell;
	Table table;
	TableColumn tc1, tc2;
	ResizeListener listener= new ResizeListener();
	int fLayoutCounter;
	
	private class ResizeListener extends ControlAdapter {
		public void controlResized(ControlEvent e) {
			if (fLayoutCounter &gt; 0)
				return;
				
			fLayoutCounter++;
			TableColumn c= (TableColumn)e.widget;
			int width= c.getWidth();
			if (width &lt; 20) {
				width= 20;
				c.setWidth(width);
			}
			int available= table.getClientArea().width;
			int newWidth= available - width;
			int correct= -1;
			if (newWidth &lt; 20) {
				newWidth= 20;
				correct= available - newWidth;
			}
			if (c == tc1) {
				tc2.setWidth(newWidth);
				if (correct != -1)
					tc1.setWidth(correct);
			} else {
				tc1.setWidth(newWidth);	
				if (correct != -1)
					tc2.setWidth(correct);
			}	
			fLayoutCounter--;	
		}
	}
		
	
	public TableLayoutTest() {
	}
	
	public TableLayoutTest close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		table= null;
		return this;
	}
	
	public TableLayoutTest open () {
		shell = new Shell ();
		shell.setText ("Table Layout Test");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		table= new Table(shell, SWT.BORDER);
		GridData gd= new GridData();
		gd.horizontalAlignment= gd.FILL; gd.grabExcessHorizontalSpace= true;
		gd.verticalAlignment= gd.FILL; gd.grabExcessVerticalSpace= true;
		table.setLayoutData(gd);
		
		tc1= new TableColumn(table, SWT.NONE);
		tc1.setText("Column 1");
		tc1.addControlListener(listener);
		
		tc2= new TableColumn(table, SWT.NONE);
		tc2.setText("Column 2");
		tc2.addControlListener(listener);
		
		for (int i= 0; i &lt; 30; i++) {
			TableItem item= new TableItem(table, SWT.NONE);
			item.setText(0, "Item " + i + " [0]");
			item.setText(1, "Item " + i + " [1]");
		}
		
		table.setHeaderVisible(true);
		table.addControlListener(new ControlAdapter() {
			public void controlResized(ControlEvent e) {
				if (fLayoutCounter &gt; 0)
					return;
				fLayoutCounter++;
				Rectangle rect= ((Table)e.widget).getClientArea();
				tc1.setWidth(rect.width / 2);
				tc2.setWidth(rect.width / 2);
				fLayoutCounter--;
			}
		});
			
		shell.open ();
		return this;
	}
	
	public TableLayoutTest run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		new TableLayoutTest().open().run().close();
	}
}


NOTES:

	KH (4/11/00 10:16:27 AM)

		You will have to deal with the recursive resize callbacks. Setting the column widths may cause the widget to resize and send
	the programmer a resize event. Making calls that change a widget's size within a resize callback is always dangerous and often
	lead to recursive death.  

DB (4/19/00 11:40:32 AM)
	Only applying the layout strategy once to the table removes the descibed behaviour (for sure it does, because the behaviour
	only occurs, if the layout is tracked on user changes).

	McQ (2/1/01 5:00:37 PM) -
		Information only.

	CM &amp; SN (3/23/2001 5:28:06 PM)
		This is the "flickering scrollbars in Table" PR.
		See also:
			1G5WW8R: SWT:Linux - Composite.setBounds causes JFace TableLayout to fail
			1FT1OI7: SWT:WINNT - Strange TableEditor behavior

	CM (3/23/2001 5:39:59 PM)
		P1/M1 (April 1)

SN (3/27/01 6:25:31 PM)
	This code is close but still has a few problems.  It flashes once the first
	time a scroll bar is required and has not been tested on Motif.  I think it
	is making use of an undocumented Windows feature ...

public static void main (String [] args) {
	final Display display = new Display ();
	final Shell shell = new Shell (display);
	final Table table = new Table (shell, 0);
	table.setHeaderVisible (true);
	final int columns = 4;
	for (int i=0; i&lt;columns; i++) {
		new TableColumn (table, 0);
	}
	final int rows = 12;
	for (int i=0; i&lt;rows; i++) {
		TableItem item = new TableItem (table, 0);
		for (int j=0; j&lt;columns; j++) {
			item.setText (j, "Item " + i + "-" + j);
		}
	}
	shell.addListener (SWT.Resize, new Listener () {
		public void handleEvent (Event e) {
			table.setRedraw (false);
			table.setBounds (shell.getClientArea ());
			Rectangle rect = table.getClientArea ();
			for (int i=0; i&lt;columns; i++) {
				TableColumn column = table.getColumn (i);
				column.setWidth (rect.width / columns);
			}					
			table.setRedraw (true);
			Rectangle rect2 = table.getClientArea ();
			if (!rect.equals (rect2)) {
				table.setRedraw (false);
				rect.width = rect2.width;
				for (int i=0; i&lt;columns; i++) {
					TableColumn column = table.getColumn (i);
					column.setWidth (rect.width / columns);
				}
				table.setRedraw (true);
				table.update ();
			}
		}
	});
	shell.open ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

CM (3/27/2001 6:40:27 PM)
	Talked to NE, and he says he doesn't want the new code because he has something that works,
	and it is too dangerous to put in the new code now.

CM (3/28/01 11:46:59 AM)
	Moving out of Active-Committed.
PRODUCT VERSION:
	SWT 0.40




*** This bug has been marked as a duplicate of 13467 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4506" />
    <CreationDate amount="2001-10-11 14:17:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>OLE Demo example walkback (100DZN5)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. Start example</Line>
          <Line>2. Click on OLE documents</Line>
          <Line>3. Click on Media Player</Line>
          <Line>4. Close the app by clicking on X</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>STB (4/12/00 11:14:48 AM)
	I ran the ole demo example and received a walkback from OS.DispatchMessage
	after I closed the app.  I will try to reproduce and provide more details. 

STB (4/12/00 11:22:36 AM)
	I am running on NT4 and got the walkback again after playing with the example. 
	Below is the stack trace:

	Debugger Stack Trace Report:

	Thread[main,5,main] (Alive)
	Primitive failed in: PlatformFunction&gt;&gt;#callWith: due to General protection fault - read from invalid memory location

	OS.DispatchMessage(MSG)
	Display.readAndDispatch()
		this=(com.ibm.swt.widgets.Display) com.ibm.swt.widgets.Display@2366
	Demo.run()
		this=(com.ibm.swt.ole.examples.Demo) com.ibm.swt.ole.examples.Demo@5e22
		display=(com.ibm.swt.widgets.Display) com.ibm.swt.widgets.Display@2366
	Demo.main(String [])
		args=([Ljava.lang.String;) [Ljava.lang.String;@57d6
		workspace=(com.ibm.swt.ole.examples.Demo) com.ibm.swt.ole.examples.Demo@5e22

STB (4/12/00 11:28:31 AM)
	I can reproduce the problem now. 

	1. Start example
	2. Click on OLE documents
	3. Click on Media Player
	4. Close the app by clicking on X

	VI (10/10/2000 10:13:53 AM) -
		The problem is that the media player has some event handling that does
		not stop when you deactivate the control. As a result, when you shutdown
		it is still active. And that's why it blows. This will be investigated in the future.
VI to comment if there is anything left to do here.

Later.
Post 2.0. Re-opening bug reports for review.
Closing this problem report because it is very old and no longer seems to 
happen.</WithStack>
    <WithOutStack>STB (4/12/00 11:14:48 AM)
	I ran the ole demo example and received a walkback from OS.DispatchMessage
	after I closed the app.  I will try to reproduce and provide more details. 

STB (4/12/00 11:22:36 AM)
	I am running on NT4 and got the walkback again after playing with the example. 
	Below is the stack trace:

	Debugger Stack Trace Report:

	Thread[main,5,main] (Alive)
	Primitive failed in: PlatformFunction&gt;&gt;#callWith: due to General protection fault - read from invalid memory location

	OS.DispatchMessage(MSG)
	Display.readAndDispatch()
		this=(com.ibm.swt.widgets.Display) com.ibm.swt.widgets.Display@2366
	Demo.run()
		this=(com.ibm.swt.ole.examples.Demo) com.ibm.swt.ole.examples.Demo@5e22
		display=(com.ibm.swt.widgets.Display) com.ibm.swt.widgets.Display@2366
	Demo.main(String [])
		args=([Ljava.lang.String;) [Ljava.lang.String;@57d6
		workspace=(com.ibm.swt.ole.examples.Demo) com.ibm.swt.ole.examples.Demo@5e22

STB (4/12/00 11:28:31 AM)
	I can reproduce the problem now. 

	1. Start example
	2. Click on OLE documents
	3. Click on Media Player
	4. Close the app by clicking on X

	VI (10/10/2000 10:13:53 AM) -
		The problem is that the media player has some event handling that does
		not stop when you deactivate the control. As a result, when you shutdown
		it is still active. And that's why it blows. This will be investigated in the future.
VI to comment if there is anything left to do here.

Later.
Post 2.0. Re-opening bug reports for review.
Closing this problem report because it is very old and no longer seems to 
happen.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4507" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>RichText: Ctrl+&lt;aChar&gt; while caps lock is on results in bogus character (1FTF0SC)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>When caps lock is on and I press ctrl + some key (ie. ctrl-s to save the compilation unit)
an invisible character is inserted in the CU.
This results in the method not being saved and in a subsequent compilation error (if you 
use the mouse to save and build).
SWT on X should treat CTRL input the same whether it's caps locked or not.

NOTES:

SN (4/17/00 10:41:20 AM)
	Can you confirm that the native control is doing this?

KR (4/18/00 1:31:52 PM)
	Does Motif have a native RichEdit?
	The SWT Windows RichEdit has the same behavior whether caps lock is on or not.

KH (4/18/00 6:48:34 PM)

	Motif does not have a native RichEdit.

SN (4/19/00 10:12:51 AM)
	I didn't say anything about "RichText" on Motif.  I asked if the native control,
	(ie. the normal text widget), is inserting the control character or if JFace is
	doing it.  It may still resolve into an SWT problem.  If the native control lets
	you embed control characters, this is platform behavior.

	I seem to remember that accel keys on Motif are case sensitive and that this
	is the correct Motif behavior.
PRODUCT VERSION:
SWT 0.40 patch 1 (LF405)


RichText no longer supported</WithStack>
    <WithOutStack>When caps lock is on and I press ctrl + some key (ie. ctrl-s to save the compilation unit)
an invisible character is inserted in the CU.
This results in the method not being saved and in a subsequent compilation error (if you 
use the mouse to save and build).
SWT on X should treat CTRL input the same whether it's caps locked or not.

NOTES:

SN (4/17/00 10:41:20 AM)
	Can you confirm that the native control is doing this?

KR (4/18/00 1:31:52 PM)
	Does Motif have a native RichEdit?
	The SWT Windows RichEdit has the same behavior whether caps lock is on or not.

KH (4/18/00 6:48:34 PM)

	Motif does not have a native RichEdit.

SN (4/19/00 10:12:51 AM)
	I didn't say anything about "RichText" on Motif.  I asked if the native control,
	(ie. the normal text widget), is inserting the control character or if JFace is
	doing it.  It may still resolve into an SWT problem.  If the native control lets
	you embed control characters, this is platform behavior.

	I seem to remember that accel keys on Motif are case sensitive and that this
	is the correct Motif behavior.
PRODUCT VERSION:
SWT 0.40 patch 1 (LF405)


RichText no longer supported</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4508" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Table viewer selection is discontinued where icons would be (1FTQ7J8)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="8">
      <source_code type="assignment">
        <location start="1041" end="1068" />
        <code>Shell shell = new Shell ();</code>
      </source_code>
      <source_code type="assignment">
        <location start="1069" end="1133" />
        <code>Table table = new Table (shell, SWT.MULTI | SWT.FULL_SELECTION);</code>
      </source_code>
      <source_code type="assignment">
        <location start="1134" end="1198" />
        <code>TableColumn c0 = new TableColumn (table, 0);  c0.setWidth (200);</code>
      </source_code>
      <source_code type="assignment">
        <location start="1199" end="1263" />
        <code>TableColumn c1 = new TableColumn (table, 0);  c1.setWidth (200);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1264" end="1293" />
        <code>table.setLinesVisible (true);</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1294" end="1510" />
        <code>for (int i=0; i&lt;32; i++) {
	TableItem item = new TableItem (table, 0);
	item.setText (new String [] {"Item " + i, "Item " + i});
	item.setImage (new Image [] {image});
//	item.setImage (new Image [] {image, null});
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1511" end="1525" />
        <code>shell.open ();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1526" end="1551" />
        <code>table.setSize (400, 400);</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>When row selection is set for the table viewer, and some columns do not provide icons,
dark blue selection indication is discontinued in 16x16 boxes where icons would be.

I guess this is probably a SWT bug, but check if it has something to do with you first.

NOTES:

DG (4/20/00 6:13:19 PM)
I just saw your comment near the fix of 1FTMGSL. I guess this IS a SWT bug.
You are free to use this one to track the problem or close it.

DG (4/20/00 10:36:37 PM)
Another problem is that text in columns that do not set icons is
nevertheless shifted to the right. This is probably caused by the
same bug.

EG (4/26/00 10:24:02 AM)
	moved to SWT

SN (4/26/00 9:59:40 AM)
	This is what the platform does.  No test case so I can't be sure what
	you are doing.

SN (4/26/00 10:34:03 AM)
	Ok, I wrote the sample code for you.  Why couldn't you write this simple code?

	*** NOTE you will need to change the GIF to one that you can see or the code will fail ***

Image image = new Image (null,
"q:\\common\\team\\steve\\dev-win\\ide\\program\\va.gif");
Shell shell = new Shell ();
Table table = new Table (shell, SWT.MULTI | SWT.FULL_SELECTION);
TableColumn c0 = new TableColumn (table, 0);  c0.setWidth (200);
TableColumn c1 = new TableColumn (table, 0);  c1.setWidth (200);
table.setLinesVisible (true);
for (int i=0; i&lt;32; i++) {
	TableItem item = new TableItem (table, 0);
	item.setText (new String [] {"Item " + i, "Item " + i});
	item.setImage (new Image [] {image});
//	item.setImage (new Image [] {image, null});
}
shell.open ();
table.setSize (400, 400);

	If you only set the first image, then no space is left for the image in the second
	column.  If you set the image in the second column to null or any image, space
	will be left in the second column.

	This is not a bug.  This is just what Windows does.

KH (5/3/00 1:25:36 PM)
	Can this be deferred till after tech preview

GDA (5/3/00 1:25:57 PM)
	yes. see below

DG(5/3/00 1:25:46 PM)
	
I have provided a workaround in the task list, so we don't need the fix for
beta. Apparently, if you set an image on a TableItem, even if that image is
null, table will reserve space for image in that column. I have subclassed
JFace TableViewerColumn and provided my implementation of 'updateItem' in
which I only set text. I can safely do this for a number of TaskList
columns because I know they will display only text (description, file,
line).

I marked the class and the code with UIHackFinder.fixPR for future
reference.

SN (5/9/00 6:45:13 PM)
	DB, please understand that this is not bug, it's just what the native
	control does.  Your "work around" is not really a work around.
	Unfortunately for us, the table is behaving properly!

	McQ (2/1/01 5:27:00 PM) -
		Could be fixed by writing a custom widget.
PRODUCT VERSION:
119


This is native behaviour.</WithStack>
    <WithOutStack>When row selection is set for the table viewer, and some columns do not provide icons,
dark blue selection indication is discontinued in 16x16 boxes where icons would be.

I guess this is probably a SWT bug, but check if it has something to do with you first.

NOTES:

DG (4/20/00 6:13:19 PM)
I just saw your comment near the fix of 1FTMGSL. I guess this IS a SWT bug.
You are free to use this one to track the problem or close it.

DG (4/20/00 10:36:37 PM)
Another problem is that text in columns that do not set icons is
nevertheless shifted to the right. This is probably caused by the
same bug.

EG (4/26/00 10:24:02 AM)
	moved to SWT

SN (4/26/00 9:59:40 AM)
	This is what the platform does.  No test case so I can't be sure what
	you are doing.

SN (4/26/00 10:34:03 AM)
	Ok, I wrote the sample code for you.  Why couldn't you write this simple code?

	*** NOTE you will need to change the GIF to one that you can see or the code will fail ***

Image image = new Image (null,
"q:\\common\\team\\steve\\dev-win\\ide\\program\\va.gif");
Shell shell = new Shell ();
Table table = new Table (shell, SWT.MULTI | SWT.FULL_SELECTION);
TableColumn c0 = new TableColumn (table, 0);  c0.setWidth (200);
TableColumn c1 = new TableColumn (table, 0);  c1.setWidth (200);
table.setLinesVisible (true);
for (int i=0; i&lt;32; i++) {
	TableItem item = new TableItem (table, 0);
	item.setText (new String [] {"Item " + i, "Item " + i});
	item.setImage (new Image [] {image});
//	item.setImage (new Image [] {image, null});
}
shell.open ();
table.setSize (400, 400);

	If you only set the first image, then no space is left for the image in the second
	column.  If you set the image in the second column to null or any image, space
	will be left in the second column.

	This is not a bug.  This is just what Windows does.

KH (5/3/00 1:25:36 PM)
	Can this be deferred till after tech preview

GDA (5/3/00 1:25:57 PM)
	yes. see below

DG(5/3/00 1:25:46 PM)
	
I have provided a workaround in the task list, so we don't need the fix for
beta. Apparently, if you set an image on a TableItem, even if that image is
null, table will reserve space for image in that column. I have subclassed
JFace TableViewerColumn and provided my implementation of 'updateItem' in
which I only set text. I can safely do this for a number of TaskList
columns because I know they will display only text (description, file,
line).

I marked the class and the code with UIHackFinder.fixPR for future
reference.

SN (5/9/00 6:45:13 PM)
	DB, please understand that this is not bug, it's just what the native
	control does.  Your "work around" is not really a work around.
	Unfortunately for us, the table is behaving properly!

	McQ (2/1/01 5:27:00 PM) -
		Could be fixed by writing a custom widget.
PRODUCT VERSION:
119


This is native behaviour.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4509" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Can't select text in Text Widget if drag and drop enabled (1FUSUI0)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="6">
      <source_code type="import">
        <location start="341" end="368" />
        <code>import com.ibm.swt.dnd.*;</code>
      </source_code>
      <source_code type="import">
        <location start="369" end="390" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="391" end="419" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="420" end="449" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="451" end="475" />
        <code>public class PR1FUSUI0 {</code>
      </source_code>
      <source_code type="functiondef">
        <location start="476" end="1360" />
        <code>public static void main (String [] args) {
	Shell shell = new Shell ();
	shell.setLayout(new FillLayout());

	final Text text = new Text(shell, SWT.MULTI);
	int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;
	final DragSource dragSource = new DragSource(text, operations);
	dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});			
	DragSourceListener listener = new DragSourceListener() {
		public void dragSetData(DragSourceEvent event){
			event.data = text.getSelectionText();
		}
		public void dragFinished(DragSourceEvent event){
		}
	};
	dragSource.addDragListener(listener);
	
	text.addListener(SWT.DragDetect, new Listener() {
		public void handleEvent(Event e){
			dragSource.startDrag();
		};
	});
		
	shell.open ();

	Display display = shell.getDisplay ();
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When you hook DragDetect in a Text widget and start dragging on receiving this event, you can no longer
select text in the Text widget.  The DragDetect event should not be sent if selection is happening.

In Smalltalk they use :	
	hasNoSelectionProcessing
			"Private - Answer true if mouse selection interferes with drag and drop."
		^true


import com.ibm.swt.dnd.*;
import com.ibm.swt.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class PR1FUSUI0 {
public static void main (String [] args) {
	Shell shell = new Shell ();
	shell.setLayout(new FillLayout());

	final Text text = new Text(shell, SWT.MULTI);
	int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;
	final DragSource dragSource = new DragSource(text, operations);
	dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});			
	DragSourceListener listener = new DragSourceListener() {
		public void dragSetData(DragSourceEvent event){
			event.data = text.getSelectionText();
		}
		public void dragFinished(DragSourceEvent event){
		}
	};
	dragSource.addDragListener(listener);
	
	text.addListener(SWT.DragDetect, new Listener() {
		public void handleEvent(Event e){
			dragSource.startDrag();
		};
	});
		
	shell.open ();

	Display display = shell.getDisplay ();
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

NOTES:

	McQ (27/02/2001 10:22:47 AM) -
		We need to support both drag select and D&amp;D on text widgets.
PRODUCT VERSION:

0.43


Will revisit after R2.0.
Post 2.0. Re-opening bug reports for review.
Fixed in 3.2 - you must start the drag in the selected text.  Otherwise, normal selection occurs.</WithStack>
    <WithOutStack>When you hook DragDetect in a Text widget and start dragging on receiving this event, you can no longer
select text in the Text widget.  The DragDetect event should not be sent if selection is happening.

In Smalltalk they use :	
	hasNoSelectionProcessing
			"Private - Answer true if mouse selection interferes with drag and drop."
		^true


import com.ibm.swt.dnd.*;
import com.ibm.swt.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class PR1FUSUI0 {
public static void main (String [] args) {
	Shell shell = new Shell ();
	shell.setLayout(new FillLayout());

	final Text text = new Text(shell, SWT.MULTI);
	int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;
	final DragSource dragSource = new DragSource(text, operations);
	dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});			
	DragSourceListener listener = new DragSourceListener() {
		public void dragSetData(DragSourceEvent event){
			event.data = text.getSelectionText();
		}
		public void dragFinished(DragSourceEvent event){
		}
	};
	dragSource.addDragListener(listener);
	
	text.addListener(SWT.DragDetect, new Listener() {
		public void handleEvent(Event e){
			dragSource.startDrag();
		};
	});
		
	shell.open ();

	Display display = shell.getDisplay ();
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

NOTES:

	McQ (27/02/2001 10:22:47 AM) -
		We need to support both drag select and D&amp;D on text widgets.
PRODUCT VERSION:

0.43


Will revisit after R2.0.
Post 2.0. Re-opening bug reports for review.
Fixed in 3.2 - you must start the drag in the selected text.  Otherwise, normal selection occurs.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4510" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="enhancement" />
    <Summery>[CCombo] CCombo should allow images for items (1FUUQS2)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="NEW" />
    <resolution amount="" />
    <WithStack>At the moment, ComboBoxCellEditor uses SWT List widget for the popup. This precludes users to
use images in addition to text for combo box items.

The desktop has a need for a combo box cell editor that can accept an image in front of the text item.
Most of the current ComboBoxCellEditor can be preserved, but with usage of Tree or Table instead
of List for the actual popup. 

Since this is not the most common case, I recommend ComboBoxCellEditor to be left as-is,
and a new one (probably a subclass) to be added (something like ImageComboBoxCellEditor).
This one would accept not only presentation text and value for an item, but also an optional 
presentation image.

NOTES:
EG (5/15/00 9:30:27 AM)
	We are using the SWT pop-up list, there is no SWT support for combo boxes as editor
	overlays. 
	I agree with DG that no change is required for the beta.
	Moving to SWT.

	McQ (2/1/01 5:34:28 PM) -
		Could be implemented in a custom widget.
PRODUCT VERSION:
121


ComboBoxCellEditor uses CCombo, which is implemented using a List.
If CCombo used Table instead, it could support icons.
Changing title to reflect that this requires improvements to CCombo.

This is not likely to happen unless someone on the UI team indicates that this 
is an important enhancement.

I'd like to use icons in a CCombo too... Now using E 3.1.1.
See also bug 93809 (requests the same for Combo).
Our tooling has a requirement to use a drop down combo box, and we must have associated icons with the combo items (plus tooltips).  Therefore this feature is important to us.

Is it possible to prioritize this?
Nebula will get such a widget in the next week. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=291432
Back to inbox.
I am trying to add images to combo items, But comboViewer is not supporting the images in getImage() method in LabelProvider.</WithStack>
    <WithOutStack>At the moment, ComboBoxCellEditor uses SWT List widget for the popup. This precludes users to
use images in addition to text for combo box items.

The desktop has a need for a combo box cell editor that can accept an image in front of the text item.
Most of the current ComboBoxCellEditor can be preserved, but with usage of Tree or Table instead
of List for the actual popup. 

Since this is not the most common case, I recommend ComboBoxCellEditor to be left as-is,
and a new one (probably a subclass) to be added (something like ImageComboBoxCellEditor).
This one would accept not only presentation text and value for an item, but also an optional 
presentation image.

NOTES:
EG (5/15/00 9:30:27 AM)
	We are using the SWT pop-up list, there is no SWT support for combo boxes as editor
	overlays. 
	I agree with DG that no change is required for the beta.
	Moving to SWT.

	McQ (2/1/01 5:34:28 PM) -
		Could be implemented in a custom widget.
PRODUCT VERSION:
121


ComboBoxCellEditor uses CCombo, which is implemented using a List.
If CCombo used Table instead, it could support icons.
Changing title to reflect that this requires improvements to CCombo.

This is not likely to happen unless someone on the UI team indicates that this 
is an important enhancement.

I'd like to use icons in a CCombo too... Now using E 3.1.1.
See also bug 93809 (requests the same for Combo).
Our tooling has a requirement to use a drop down combo box, and we must have associated icons with the combo items (plus tooltips).  Therefore this feature is important to us.

Is it possible to prioritize this?
Nebula will get such a widget in the next week. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=291432
Back to inbox.
I am trying to add images to combo items, But comboViewer is not supporting the images in getImage() method in LabelProvider.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4511" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>Pane title update flashes tool bar buttons (1FUUR7A)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Old problem, still unsolved: when a pane title bar area is also used to host tool bar, 
	pane title update causes ALL the buttons to noticeably flash. It seems 
	unresonable, unless title widget and tool bar widget are constantly fighting
	for space and pane title update causes both widgets to resize and
	refresh due to resize.

NOTES:

	EG (5/15/00 9:33:16 AM) -
		see: 1FUC0NM: SWT:WINNT - ToolBar.computeSize calculates wrong size if control is embedded
		moving to SWT

	SN (5/15/00 4:04:54 PM) -
		EG, is this fixed when 1FUC0NM is fixed?  1FUC0NM should be fixed in SWT
		0.43 patch 0.001.

	DB (5/25/00 6:26:43 PM) -
		No. SWT 0.43 patch 0.001 only fixes the layout problem. The tool bar still flashes
		on computeSize.
	
	SN (2/1/01 5:35:44 PM) -
		We currently rely on resizing the toolbar with refresh off to compute the
		size. Unfortunately this is the only way we can figure out how to do it.
		A side-effect of this, is the flashing behavior (even though it should not
		be occurring with refresh off). SN to look at one more time.

	McQ (26/06/2001 10:29:03 AM) -
		The API SN was hoping to use did not work. We are unable to find a
		way to get rid of the flashing.
PRODUCT VERSION:

	121


Some flashing toolbar cases have been fixed but not all.  In Eclipse, the 
toolbars still flash when they wrap and in other cases.
Fixed &gt; 20020704</WithStack>
    <WithOutStack>Old problem, still unsolved: when a pane title bar area is also used to host tool bar, 
	pane title update causes ALL the buttons to noticeably flash. It seems 
	unresonable, unless title widget and tool bar widget are constantly fighting
	for space and pane title update causes both widgets to resize and
	refresh due to resize.

NOTES:

	EG (5/15/00 9:33:16 AM) -
		see: 1FUC0NM: SWT:WINNT - ToolBar.computeSize calculates wrong size if control is embedded
		moving to SWT

	SN (5/15/00 4:04:54 PM) -
		EG, is this fixed when 1FUC0NM is fixed?  1FUC0NM should be fixed in SWT
		0.43 patch 0.001.

	DB (5/25/00 6:26:43 PM) -
		No. SWT 0.43 patch 0.001 only fixes the layout problem. The tool bar still flashes
		on computeSize.
	
	SN (2/1/01 5:35:44 PM) -
		We currently rely on resizing the toolbar with refresh off to compute the
		size. Unfortunately this is the only way we can figure out how to do it.
		A side-effect of this, is the flashing behavior (even though it should not
		be occurring with refresh off). SN to look at one more time.

	McQ (26/06/2001 10:29:03 AM) -
		The API SN was hoping to use did not work. We are unable to find a
		way to get rid of the flashing.
PRODUCT VERSION:

	121


Some flashing toolbar cases have been fixed but not all.  In Eclipse, the 
toolbars still flash when they wrap and in other cases.
Fixed &gt; 20020704</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4512" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Previous selection ghost disappears when mouse moved (1FV26PZ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="assignment">
        <location start="659" end="685" />
        <code>Shell shell = new Shell();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="686" end="720" />
        <code>shell.setLayout(new FillLayout());</code>
      </source_code>
      <source_code type="assignment">
        <location start="721" end="759" />
        <code>Tree tree = new Tree(shell, SWT.NONE);</code>
      </source_code>
      <source_code type="functiondef">
        <location start="760" end="882" />
        <code>for (int i = 0, length = 10; i &lt; length; i++){
	TreeItem item = new TreeItem(tree, SWT.NONE);
	item.setText("Item "+i);	
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="883" end="896" />
        <code>shell.open();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>In the navigator, create a folder with a file.
Select the folder.
Then select the file, hold the mouse button down, but don't move the mouse.
It shows a ghost selection on the folder.
Now move the mouse.
The ghost selection disappears.

Sounds like a minor annoyance, but it's actually pretty distracting since the 
mouse is usually
moving a bit when you make a selection, so there's flicker.

NOTES:
	SS (5/16/00 3:56:54 PM)
Related to Drag and Drop? VI, please check.

VI (5/16/00 4:25:11 PM)

It is not caused by adding Drag and Drop to the tree.

It will occur in the following wad which does not hook DragDetect and which 
does not create a DragSource.

Shell shell = new Shell();
shell.setLayout(new FillLayout());
Tree tree = new Tree(shell, SWT.NONE);
for (int i = 0, length = 10; i &lt; length; i++){
	TreeItem item = new TreeItem(tree, SWT.NONE);
	item.setText("Item "+i);	
}
shell.open();

SN (5/17/00 2:49:32 PM)
	I can't see what the problem with the current behavior is.  Seems like 
a low priority PR?
	Can we move this to Time-Permitting?
PRODUCT VERSION:
013


Marking as won't fix for lack of interest.</WithStack>
    <WithOutStack>In the navigator, create a folder with a file.
Select the folder.
Then select the file, hold the mouse button down, but don't move the mouse.
It shows a ghost selection on the folder.
Now move the mouse.
The ghost selection disappears.

Sounds like a minor annoyance, but it's actually pretty distracting since the 
mouse is usually
moving a bit when you make a selection, so there's flicker.

NOTES:
	SS (5/16/00 3:56:54 PM)
Related to Drag and Drop? VI, please check.

VI (5/16/00 4:25:11 PM)

It is not caused by adding Drag and Drop to the tree.

It will occur in the following wad which does not hook DragDetect and which 
does not create a DragSource.

Shell shell = new Shell();
shell.setLayout(new FillLayout());
Tree tree = new Tree(shell, SWT.NONE);
for (int i = 0, length = 10; i &lt; length; i++){
	TreeItem item = new TreeItem(tree, SWT.NONE);
	item.setText("Item "+i);	
}
shell.open();

SN (5/17/00 2:49:32 PM)
	I can't see what the problem with the current behavior is.  Seems like 
a low priority PR?
	Can we move this to Time-Permitting?
PRODUCT VERSION:
013


Marking as won't fix for lack of interest.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4513" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Embedded Word-in-Word combination causes in-place editor to blank (1FV26TX)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1. Import and open a Microsoft word document on the workbench.</Line>
          <Line>2. Open a another file, like a java file.  Return to the word document.</Line>
          <Line>3. From the Windows File Explorer, drag-and-drop another word document into the original word</Line>
          <Line>document on the Workbench.  It will OLE-embed itself.</Line>
          <Line>4. Double click on the embedded document's frame.  An external Word editor will open.</Line>
          <Line>5. Close the external editor.  The containing the word document will now be blank gray.</Line>
          <Line>6. Switch to the other file you opened and then return again to the word document.  It will</Line>
          <Line>have returned completely.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>1. Import and open a Microsoft word document on the workbench.
2. Open a another file, like a java file.  Return to the word document.
3. From the Windows File Explorer, drag-and-drop another word document into the original word
	document on the Workbench.  It will OLE-embed itself.
4. Double click on the embedded document's frame.  An external Word editor will open.
5. Close the external editor.  The containing the word document will now be blank gray.
6. Switch to the other file you opened and then return again to the word document.  It will
	have returned completely.

NOTES:

VI (5/17/00 3:30:56 PM)
Closing the external Word application is causing the embedded Word Document to be
deactivated - need to figure how to stop this from happening.

This problem is particular to Word becuase Word reuses the application and creates 
sub documents.  When you kill the externally launched application it shuts down every instance of Word.
PRODUCT VERSION:
0.012a


Found while cleaning out my old PR backlog...
Later.
Post 2.0. Re-opening bug reports for review.
The problem described is a bug which will not be fixed in the current version 
of eclipse.

If you would like to contribute a fix for this problem, please attach a patch 
file and reopen this bug report.
Reopen
Works for me in 3.3M6.</WithStack>
    <WithOutStack>1. Import and open a Microsoft word document on the workbench.
2. Open a another file, like a java file.  Return to the word document.
3. From the Windows File Explorer, drag-and-drop another word document into the original word
	document on the Workbench.  It will OLE-embed itself.
4. Double click on the embedded document's frame.  An external Word editor will open.
5. Close the external editor.  The containing the word document will now be blank gray.
6. Switch to the other file you opened and then return again to the word document.  It will
	have returned completely.

NOTES:

VI (5/17/00 3:30:56 PM)
Closing the external Word application is causing the embedded Word Document to be
deactivated - need to figure how to stop this from happening.

This problem is particular to Word becuase Word reuses the application and creates 
sub documents.  When you kill the externally launched application it shuts down every instance of Word.
PRODUCT VERSION:
0.012a


Found while cleaning out my old PR backlog...
Later.
Post 2.0. Re-opening bug reports for review.
The problem described is a bug which will not be fixed in the current version 
of eclipse.

If you would like to contribute a fix for this problem, please attach a patch 
file and reopen this bug report.
Reopen
Works for me in 3.3M6.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4514" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>Smoke: Editor doesn't show last couple of lines (1FV3TDU)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="41">
      <source_code type="assignment">
        <location start="1163" end="1189" />
        <code>Shell shell = new Shell();</code>
      </source_code>
      <source_code type="assignment">
        <location start="1191" end="1269" />
        <code>RichText edit = new RichText(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI );</code>
      </source_code>
      <source_code type="assignment">
        <location start="1271" end="1283" />
        <code>String s="";</code>
      </source_code>
      <source_code type="assignment">
        <location start="1309" end="1321" />
        <code>s=s+i+"\n";</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="1322" end="1370" />
        <code>// Comment the next line out to "fix" the bug.</code>
      </source_code>
      <source_code type="assignment">
        <location start="1370" end="1468" />
        <code>s+="text text text text text text text text text text text text text text text text text text \n";</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1480" end="1496" />
        <code>edit.setText(s);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1498" end="1520" />
        <code>edit.setSize(100,100);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1522" end="1535" />
        <code>shell.open();</code>
      </source_code>
      <source_code type="assignment">
        <location start="1537" end="1574" />
        <code>Display display = shell.getDisplay();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1611" end="1628" />
        <code>display.sleep();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2531" end="2557" />
        <code>Shell shell = new Shell();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2558" end="2595" />
        <code>Display display = shell.getDisplay();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2597" end="2663" />
        <code>byte [] lpLibFileName = Converter.wcsToMbcs (0, "riched20.dll\0");</code>
      </source_code>
      <source_code type="assignment">
        <location start="2664" end="2702" />
        <code>byte [] EditClass = OS.RICHEDIT_CLASS;</code>
      </source_code>
      <source_code type="assignment">
        <location start="2703" end="2748" />
        <code>int hModule = OS.LoadLibrary (lpLibFileName);</code>
      </source_code>
      <source_code type="assignment">
        <location start="2749" end="2791" />
        <code>WNDCLASSEX lpWndClass = new WNDCLASSEX ();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2792" end="2830" />
        <code>lpWndClass.cbSize = WNDCLASSEX.sizeof;</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2831" end="2876" />
        <code>OS.GetClassInfoEx (0, EditClass, lpWndClass);</code>
      </source_code>
      <source_code type="assignment">
        <location start="2877" end="2915" />
        <code>int EditProc = lpWndClass.lpfnWndProc;</code>
      </source_code>
      <source_code type="assignment">
        <location start="3144" end="3196" />
        <code>int hwndParent = (shell != null) ? shell.handle : 0;</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="3336" end="3390" />
        <code>if (handle == 0) 
{
	System.out.println("handle 0");
}</code>
      </source_code>
      <source_code type="assignment">
        <location start="3392" end="3415" />
        <code>int LIMIT = 0x7FFFFFFF;</code>
      </source_code>
      <source_code type="functioncall">
        <location start="3416" end="3469" />
        <code>OS.SendMessage (handle, OS.EM_EXLIMITTEXT, 0, LIMIT);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="3470" end="3532" />
        <code>OS.SendMessage (handle, OS.EM_SETEVENTMASK, 0, OS.ENM_CHANGE);</code>
      </source_code>
      <source_code type="assignment">
        <location start="3534" end="3586" />
        <code>int hFont = OS.GetStockObject (OS.DEFAULT_GUI_FONT);</code>
      </source_code>
      <source_code type="assignment">
        <location start="3587" end="3646" />
        <code>if (hFont == 0) hFont = OS.GetStockObject (OS.SYSTEM_FONT);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="3647" end="3696" />
        <code>OS.SendMessage (handle, OS.WM_SETFONT, hFont, 0);</code>
      </source_code>
      <source_code type="assignment">
        <location start="3698" end="3715" />
        <code>String text = "";</code>
      </source_code>
      <source_code type="assignment">
        <location start="3741" end="3764" />
        <code>text = text + i +"\n";</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="3765" end="3813" />
        <code>// Comment the next line out to "fix" the bug.</code>
      </source_code>
      <source_code type="assignment">
        <location start="3813" end="3915" />
        <code>text += "text text text text text text text text text text text text text text text text text text\n";</code>
      </source_code>
      <source_code type="functioncall">
        <location start="3933" end="3946" />
        <code>shell.open();</code>
      </source_code>
      <source_code type="assignment">
        <location start="3948" end="4001" />
        <code>byte [] buffer = Converter.wcsToMbcs (0, text, true);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="4002" end="4036" />
        <code>OS.SetWindowText (handle, buffer);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="4037" end="4137" />
        <code>OS.SetWindowPos (handle, 0, 0, 0, 100, 100, OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE);</code>
      </source_code>
      <source_code type="assignment">
        <location start="4139" end="4217" />
        <code>RichText edit = new RichText(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI );</code>
      </source_code>
      <source_code type="functioncall">
        <location start="4218" end="4253" />
        <code>edit.setBounds( 150, 0, 100, 100 );</code>
      </source_code>
      <source_code type="functioncall">
        <location start="4254" end="4273" />
        <code>edit.setText(text);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="4338" end="4356" />
        <code>display.sleep();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="4358" end="4383" />
        <code>OS.DestroyWindow(handle);</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>1) start VA2000</Line>
          <Line>2) in the navigator drill down to a file whose displayed content needs more space than available in the editor area</Line>
          <Line>3) open the file with the defaul text editor</Line>
          <Line>4) grap the vertical scroller thumb of the newly opened editor and move it to the lower end</Line>
          <Line>-&gt; the last visible line not the last line in the file</Line>
          <Line>5) release the thumb</Line>
          <Line>-&gt; it moves up a little, you can now scroll down to the end of the file</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>In the smoke test, when the editor is opened on TestCase.java, and you scroll down to check the
syntax colouring, if you scroll all the way to the end, the last couple of lines aren't always visible.
Clicking the down array a few times reveals them, after which scrolling is OK.

NOTES:

NE (5/17/00 1:00:27 PM) Seems to only do it when first opened, and first scroll goes all the way to the bottom.

EG (5/23/00 4:20:14 PM)
	pls try to reproduce and move it.

KUM (5/23/00 5:54:34 PM)
	Since this also happens in the default text viewer, i.e. without any highlighting, I suspect it to be a SWT issue.
	Here are the steps to reproduce the problem:
	1) start VA2000
	2) in the navigator drill down to a file whose displayed content needs more space than available in the editor area
	3) open the file with the defaul text editor
	4) grap the vertical scroller thumb of the newly opened editor and move it to the lower end
	-&gt; the last visible line not the last line in the file
	5) release the thumb
	-&gt; it moves up a little, you can now scroll down to the end of the file

	Moved to SWT.

Sunir Shah (5/31/00 6:06:15 PM)
    This code reproduces the bug:

&lt;CODE&gt;
Shell shell = new Shell();

RichText edit = new RichText(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI );

String s="";
for( int i =0;i&lt;30;i++ )
	s=s+i+"\n";

// Comment the next line out to "fix" the bug.
s+="text text text text text text text text text text text text text text text text text text \n";
s+="end";	
edit.setText(s);

edit.setSize(100,100);

shell.open();

Display display = shell.getDisplay();
while( !display.readAndDispatch() )
	display.sleep();
&lt;/CODE&gt;

    This bug only appears when text is wider than the display. I'm guessing 
	the "Missing lines" equate to the height of the horizontal scroll bar rounded 
    to the next line. 

    You must have a horizontal scroll bar.

    A setText() anywhere else fixes the bug unless
    you are just reseting the same text again.

    A Text widget doesn't exhibit this behaviour, nor does
    WordPad.

Sunir Shah (6/1/00 10:25:56 AM)
	I can reproduce this on Win98 as well.

Sunir Shah (6/5/00 10:38:05 AM)
	This code compares the (almost) bare Win32 calls on the left 
	with the SWT RichText widget on the right. The bug doesn't
	appear in the control on the right (the SWT widget)...

************	The bug happens when you set the text before setting the ************
************	bounds of the widget.                                                                         ************

&lt;CODE&gt;
Shell shell = new Shell();
Display display = shell.getDisplay();

byte [] lpLibFileName = Converter.wcsToMbcs (0, "riched20.dll\0");
byte [] EditClass = OS.RICHEDIT_CLASS;
int hModule = OS.LoadLibrary (lpLibFileName);
WNDCLASSEX lpWndClass = new WNDCLASSEX ();
lpWndClass.cbSize = WNDCLASSEX.sizeof;
OS.GetClassInfoEx (0, EditClass, lpWndClass);
int EditProc = lpWndClass.lpfnWndProc;

int style = OS.WS_VSCROLL 
			| OS.WS_HSCROLL 
			| OS.WS_CHILD 
			| OS.WS_VISIBLE 
			| OS.WS_CLIPSIBLINGS 
			| OS.ES_DISABLENOSCROLL 
			| OS.WS_TABSTOP 
			| OS.ES_MULTILINE 
			| OS.ES_AUTOHSCROLL 
			| OS.ES_NOHIDESEL;

int hwndParent = (shell != null) ? shell.handle : 0;

int handle = OS.CreateWindowEx (
	0,
	EditClass,
	null,
	style,
	0, 
	0, 
	0, 
	0,
	hwndParent,
	0,
	OS.GetModuleHandle (null),
	null
);

if (handle == 0) 
{
	System.out.println("handle 0");
}

int LIMIT = 0x7FFFFFFF;
OS.SendMessage (handle, OS.EM_EXLIMITTEXT, 0, LIMIT);
OS.SendMessage (handle, OS.EM_SETEVENTMASK, 0, OS.ENM_CHANGE);

int hFont = OS.GetStockObject (OS.DEFAULT_GUI_FONT);
if (hFont == 0) hFont = OS.GetStockObject (OS.SYSTEM_FONT);
OS.SendMessage (handle, OS.WM_SETFONT, hFont, 0);

String text = "";
for( int i =0;i&lt;30;i++ )
	text = text + i +"\n";

// Comment the next line out to "fix" the bug.
text += "text text text text text text text text text text text text text text text text text text\n";
text += "end";	

shell.open();

byte [] buffer = Converter.wcsToMbcs (0, text, true);
OS.SetWindowText (handle, buffer);
OS.SetWindowPos (handle, 0, 0, 0, 100, 100, OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE);

RichText edit = new RichText(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI );
edit.setBounds( 150, 0, 100, 100 );
edit.setText(text);

while( !shell.isDisposed() )
	if( !display.readAndDispatch() )
		display.sleep();

OS.DestroyWindow(handle);
&lt;/CODE&gt;

	McQ (2/1/01 5:40:50 PM) -
		This is a real bug. It will not be fixed unless it is marked as high priority.
PRODUCT VERSION:
013, IBM SWT Implementation [win32 0.43 Patch 0.002]


Still no indication that this is high priority.
Moving from Later.
RichText no longer exists.</WithStack>
    <WithOutStack>In the smoke test, when the editor is opened on TestCase.java, and you scroll down to check the
syntax colouring, if you scroll all the way to the end, the last couple of lines aren't always visible.
Clicking the down array a few times reveals them, after which scrolling is OK.

NOTES:

NE (5/17/00 1:00:27 PM) Seems to only do it when first opened, and first scroll goes all the way to the bottom.

EG (5/23/00 4:20:14 PM)
	pls try to reproduce and move it.

KUM (5/23/00 5:54:34 PM)
	Since this also happens in the default text viewer, i.e. without any highlighting, I suspect it to be a SWT issue.
	Here are the steps to reproduce the problem:
	1) start VA2000
	2) in the navigator drill down to a file whose displayed content needs more space than available in the editor area
	3) open the file with the defaul text editor
	4) grap the vertical scroller thumb of the newly opened editor and move it to the lower end
	-&gt; the last visible line not the last line in the file
	5) release the thumb
	-&gt; it moves up a little, you can now scroll down to the end of the file

	Moved to SWT.

Sunir Shah (5/31/00 6:06:15 PM)
    This code reproduces the bug:

&lt;CODE&gt;
Shell shell = new Shell();

RichText edit = new RichText(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI );

String s="";
for( int i =0;i&lt;30;i++ )
	s=s+i+"\n";

// Comment the next line out to "fix" the bug.
s+="text text text text text text text text text text text text text text text text text text \n";
s+="end";	
edit.setText(s);

edit.setSize(100,100);

shell.open();

Display display = shell.getDisplay();
while( !display.readAndDispatch() )
	display.sleep();
&lt;/CODE&gt;

    This bug only appears when text is wider than the display. I'm guessing 
	the "Missing lines" equate to the height of the horizontal scroll bar rounded 
    to the next line. 

    You must have a horizontal scroll bar.

    A setText() anywhere else fixes the bug unless
    you are just reseting the same text again.

    A Text widget doesn't exhibit this behaviour, nor does
    WordPad.

Sunir Shah (6/1/00 10:25:56 AM)
	I can reproduce this on Win98 as well.

Sunir Shah (6/5/00 10:38:05 AM)
	This code compares the (almost) bare Win32 calls on the left 
	with the SWT RichText widget on the right. The bug doesn't
	appear in the control on the right (the SWT widget)...

************	The bug happens when you set the text before setting the ************
************	bounds of the widget.                                                                         ************

&lt;CODE&gt;
Shell shell = new Shell();
Display display = shell.getDisplay();

byte [] lpLibFileName = Converter.wcsToMbcs (0, "riched20.dll\0");
byte [] EditClass = OS.RICHEDIT_CLASS;
int hModule = OS.LoadLibrary (lpLibFileName);
WNDCLASSEX lpWndClass = new WNDCLASSEX ();
lpWndClass.cbSize = WNDCLASSEX.sizeof;
OS.GetClassInfoEx (0, EditClass, lpWndClass);
int EditProc = lpWndClass.lpfnWndProc;

int style = OS.WS_VSCROLL 
			| OS.WS_HSCROLL 
			| OS.WS_CHILD 
			| OS.WS_VISIBLE 
			| OS.WS_CLIPSIBLINGS 
			| OS.ES_DISABLENOSCROLL 
			| OS.WS_TABSTOP 
			| OS.ES_MULTILINE 
			| OS.ES_AUTOHSCROLL 
			| OS.ES_NOHIDESEL;

int hwndParent = (shell != null) ? shell.handle : 0;

int handle = OS.CreateWindowEx (
	0,
	EditClass,
	null,
	style,
	0, 
	0, 
	0, 
	0,
	hwndParent,
	0,
	OS.GetModuleHandle (null),
	null
);

if (handle == 0) 
{
	System.out.println("handle 0");
}

int LIMIT = 0x7FFFFFFF;
OS.SendMessage (handle, OS.EM_EXLIMITTEXT, 0, LIMIT);
OS.SendMessage (handle, OS.EM_SETEVENTMASK, 0, OS.ENM_CHANGE);

int hFont = OS.GetStockObject (OS.DEFAULT_GUI_FONT);
if (hFont == 0) hFont = OS.GetStockObject (OS.SYSTEM_FONT);
OS.SendMessage (handle, OS.WM_SETFONT, hFont, 0);

String text = "";
for( int i =0;i&lt;30;i++ )
	text = text + i +"\n";

// Comment the next line out to "fix" the bug.
text += "text text text text text text text text text text text text text text text text text text\n";
text += "end";	

shell.open();

byte [] buffer = Converter.wcsToMbcs (0, text, true);
OS.SetWindowText (handle, buffer);
OS.SetWindowPos (handle, 0, 0, 0, 100, 100, OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE);

RichText edit = new RichText(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI );
edit.setBounds( 150, 0, 100, 100 );
edit.setText(text);

while( !shell.isDisposed() )
	if( !display.readAndDispatch() )
		display.sleep();

OS.DestroyWindow(handle);
&lt;/CODE&gt;

	McQ (2/1/01 5:40:50 PM) -
		This is a real bug. It will not be fixed unless it is marked as high priority.
PRODUCT VERSION:
013, IBM SWT Implementation [win32 0.43 Patch 0.002]


Still no indication that this is high priority.
Moving from Later.
RichText no longer exists.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4515" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Carrots and Anchors (1FV5UKI)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Anchor at the beginning of the selection. Carrot at the end. Need to make
sure this is true on all platforms.

Check for code like  TextEditor.getCaretLocation() that assumes that the carrot
location is at the beginning of the selection.


NOTES:

	McQ (2/1/01 5:42:15 PM) -
		Not the case right now, but we aren't going to get to it.
LATER == Inactive in bugzilla
Moving from Later.
We have no control over where the caret is placed in the native control.  I 
believe this is not an issue in StyledText (we can place the caret).</WithStack>
    <WithOutStack>Anchor at the beginning of the selection. Carrot at the end. Need to make
sure this is true on all platforms.

Check for code like  TextEditor.getCaretLocation() that assumes that the carrot
location is at the beginning of the selection.


NOTES:

	McQ (2/1/01 5:42:15 PM) -
		Not the case right now, but we aren't going to get to it.
LATER == Inactive in bugzilla
Moving from Later.
We have no control over where the caret is placed in the native control.  I 
believe this is not an issue in StyledText (we can place the caret).</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4516" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR Cursor changes in "hot spots" (1FV7K4Z)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>I'd like to be able to create areas ("hot spots") in my control where the cursor
changes to something context-dependent, like a West-East resize arrow
as opposed to the normal mouse arrow. For instance, links in a web browser
change the cursor to the pick cursor, or the resize window frame changes
the cursor as it hovers around the edges.

Normally, I can simply track SWT.MouseMove and Control.SetCursor()
according to the mouse position. However, if there are child windows--especially 
some that are either adjacent to or close to the "hot spot"--when I move the mouse out
of the "hot spot" I don't receive the SWT.MouseMove message to SetCursor(null).

If the child window asks for the cursor from the parent window (the one 
containing the "hot spot"), then the child window receives the cursor loaded
in the parent window--say the West-East resize arrow--instead of the default
cursor for the child window.

A solution may be to listen for SWT.MouseMoves on the child windows 
(all of them, recursively), but if a child window adds a window to itself
without telling us, the parent, then we won't know to track movements on
this new window, leaving us where we started.

NOTES:

SS (5/19/00 1:40:13 PM) 
  -- This is currently affecting the platform independent CoolBar which 
      is living (currently) in "IBM SWT Coolbar 0.006 SS bogus".

	McQ (2/1/01 5:44:39 PM) -
		Inactive.
PRODUCT VERSION:
IBM SWT Implementation win32 0.43
com.ibm.swt swt 0.027
com.ibm.swt.SWT 0.059
com.ibm.swt.widgets win32 0.057
com.ibm.swt.widgets.Control win32 0.020
com.ibm.swt.win32 0.038
com.ibm.swt.win32.OS 0.130

running on WINNT4 with VisualAge for Java 2.0,(NC) 3/29/00 [JDK 1.2] IV3-3 JDK[OTI changes JDK 1.2.2] 0.8

PROBLEM 
Emulated CoolBar does not exhibit this problem any longer. Closing PR. 
Re-open if someone still finds this to be a problem.</WithStack>
    <WithOutStack>I'd like to be able to create areas ("hot spots") in my control where the cursor
changes to something context-dependent, like a West-East resize arrow
as opposed to the normal mouse arrow. For instance, links in a web browser
change the cursor to the pick cursor, or the resize window frame changes
the cursor as it hovers around the edges.

Normally, I can simply track SWT.MouseMove and Control.SetCursor()
according to the mouse position. However, if there are child windows--especially 
some that are either adjacent to or close to the "hot spot"--when I move the mouse out
of the "hot spot" I don't receive the SWT.MouseMove message to SetCursor(null).

If the child window asks for the cursor from the parent window (the one 
containing the "hot spot"), then the child window receives the cursor loaded
in the parent window--say the West-East resize arrow--instead of the default
cursor for the child window.

A solution may be to listen for SWT.MouseMoves on the child windows 
(all of them, recursively), but if a child window adds a window to itself
without telling us, the parent, then we won't know to track movements on
this new window, leaving us where we started.

NOTES:

SS (5/19/00 1:40:13 PM) 
  -- This is currently affecting the platform independent CoolBar which 
      is living (currently) in "IBM SWT Coolbar 0.006 SS bogus".

	McQ (2/1/01 5:44:39 PM) -
		Inactive.
PRODUCT VERSION:
IBM SWT Implementation win32 0.43
com.ibm.swt swt 0.027
com.ibm.swt.SWT 0.059
com.ibm.swt.widgets win32 0.057
com.ibm.swt.widgets.Control win32 0.020
com.ibm.swt.win32 0.038
com.ibm.swt.win32.OS 0.130

running on WINNT4 with VisualAge for Java 2.0,(NC) 3/29/00 [JDK 1.2] IV3-3 JDK[OTI changes JDK 1.2.2] 0.8

PROBLEM 
Emulated CoolBar does not exhibit this problem any longer. Closing PR. 
Re-open if someone still finds this to be a problem.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4517" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>icons in task view are not centered (1FV9N6E)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="7">
        <Lines>
          <Line>1) The icons in the task view are not centered. This is platform behaviour. The OS left-justifies all</Line>
          <Line>icons in table columns. There is nothing we can do to center them.</Line>
          <Line>2) The icons have a vertical column of pixels eaten by the table widget. This is the fault of the OS.</Line>
          <Line>When you ask for lines in the table, windows takes the space for the line out of what would otherwise</Line>
          <Line>be where your icon is, and neglects to shift the icon over to the right to compensate for this. The</Line>
          <Line>exception to this appears to be the first column, in which there is a fixed-width 2-pixel margin to the left</Line>
          <Line>of the image - this behaviour may be dependent on the OS or comctl version in use.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="4">
        <Lines>
          <Line>- complete , incomplete</Line>
          <Line>- task priorities</Line>
          <Line>When they are shown in the task views column they are not properly centered</Line>
          <Line>in the horizontal direction.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>I have placed in the official complete &amp; incomplete icons from Linda {Tor}
and in doing so noticed that despite the fact the following graphics
are properly centered in their GIF
	- complete , incomplete
	- task priorities
When they are shown in the task views column they are not properly centered
in the horizontal direction.

A snapshot in q:\viper\team\dejan\1FV9N6E.bmp  shows the problem

*	In the top of the snapshot is before I put in the new complete &amp; complete.
*	In the bottom is after I put in the toronto graphics
-&gt; notice that in the bottom picture the checkbox is not horizontally centered
-&gt; notice also the priority is not centered in either one -- thus indicating its not a tor graphic problem

NOTES:

DG (23/05/00 11:40:03 AM)
It looks like Table widget is 'eating' one vertical row of pixels i.e. images start at -1,0 not 0,0. This
causes them to be visually shifted to the left. Notified KH.

GDA (5/24/00 1:39:44 PM)
Moving to swt

JM (5/26/00 11:46:49 AM)
	There are two separate issues here, so I'll address them both
	1) The icons in the task view are not centered. This is platform behaviour. The OS left-justifies all
	icons in table columns. There is nothing we can do to center them.
	2) The icons have a vertical column of pixels eaten by the table widget. This is the fault of the OS.
	When you ask for lines in the table, windows takes the space for the line out of what would otherwise
	be where your icon is, and neglects to shift the icon over to the right to compensate for this. The
	exception to this appears to be the first column, in which there is a fixed-width 2-pixel margin to the left
	of the image - this behaviour may be dependent on the OS or comctl version in use.

	The workaround for this behaviour is to ensure that the GIF has an extra pixel column on its left size,
	and to ensure that the column is the correct size so that the image appears to be centered (when in
	actuality it is left-justified).

	McQ (2/1/01 5:45:25 PM) -
		Could be fixed by writing a custom widget.
PRODUCT VERSION:
014d


No custom widget for this for R2.0.

Moving from Later.
We have no control over how Windows draws the items in the table.  This 
problem report is really old.  Closing.</WithStack>
    <WithOutStack>I have placed in the official complete &amp; incomplete icons from Linda {Tor}
and in doing so noticed that despite the fact the following graphics
are properly centered in their GIF
	- complete , incomplete
	- task priorities
When they are shown in the task views column they are not properly centered
in the horizontal direction.

A snapshot in q:\viper\team\dejan\1FV9N6E.bmp  shows the problem

*	In the top of the snapshot is before I put in the new complete &amp; complete.
*	In the bottom is after I put in the toronto graphics
-&gt; notice that in the bottom picture the checkbox is not horizontally centered
-&gt; notice also the priority is not centered in either one -- thus indicating its not a tor graphic problem

NOTES:

DG (23/05/00 11:40:03 AM)
It looks like Table widget is 'eating' one vertical row of pixels i.e. images start at -1,0 not 0,0. This
causes them to be visually shifted to the left. Notified KH.

GDA (5/24/00 1:39:44 PM)
Moving to swt

JM (5/26/00 11:46:49 AM)
	There are two separate issues here, so I'll address them both
	1) The icons in the task view are not centered. This is platform behaviour. The OS left-justifies all
	icons in table columns. There is nothing we can do to center them.
	2) The icons have a vertical column of pixels eaten by the table widget. This is the fault of the OS.
	When you ask for lines in the table, windows takes the space for the line out of what would otherwise
	be where your icon is, and neglects to shift the icon over to the right to compensate for this. The
	exception to this appears to be the first column, in which there is a fixed-width 2-pixel margin to the left
	of the image - this behaviour may be dependent on the OS or comctl version in use.

	The workaround for this behaviour is to ensure that the GIF has an extra pixel column on its left size,
	and to ensure that the column is the correct size so that the image appears to be centered (when in
	actuality it is left-justified).

	McQ (2/1/01 5:45:25 PM) -
		Could be fixed by writing a custom widget.
PRODUCT VERSION:
014d


No custom widget for this for R2.0.

Moving from Later.
We have no control over how Windows draws the items in the table.  This 
problem report is really old.  Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4518" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="13467" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 98" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>The task list should resize its columns to fit (1FVKNEQ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>- the table widget shows scroll bars when the user shrinks the table.</Line>
          <Line>- after that (now the scroll bars are visible) the widget generates a resize event.</Line>
          <Line>- JFace reacts on the resize event by making some columns smaller. Now the scroll bars disappear again which causes</Line>
          <Line>flickering.</Line>
          <Line>- Furthermore we tried to define a minimum width for a table column which also introduces a lot of flickering since</Line>
          <Line>the native widget doesn't support a minimun width for a column. As a result the column first shrinks and on the resize</Line>
          <Line>event JFace resizes the column to the minimum width.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Make the Navigator view wider... this causes the task list &amp; editor to shrink but the columns in the task
list do not resize to fit its new dimensions.

Its very easy to shrink the task list a little &amp; as a result, no longer see the line numbers.

NOTES:

DG (5/26/00 3:18:29 PM)
This is a consequence of JFace modification of TableViewer where they decided to
stop auto-adjustment of table columns on resize. More information can be obtained
from JFace/SWT teams. I remember something about 'recursive death' on table
resize.

Bottom line: auto-resize must be part of TableViewer. Task list should not
implement it.

	SS (5/29/00 11:34:02 AM)
Moving to JFUIF

DB (5/30/00 9:37:21 AM)
	We had an implementation in JFace for this. Due to some problems with native widgets
	under Windows we had to remove the code. The related SWT PRs are:

	1FT1OI7: SWT:WINNT - Strange TableEditor behavior 
	1FT1A65: SWT:Linux - Need API to disable table's resize behavior when resizing table column 

	Moving to SWT. PR can not be fixed by JFace unless SWT fixes the above PRs.

SN (5/30/00 10:02:41 AM)
	Thanks.  It's not a problem in the native widgets.  When you resize the columns
	in a table, the table can resize in order to hide and show scroll bars.  This correctly
	causes a recursive resize callback and application code needs to handle this case,
	otherwise the application can cause recursive resize death.

DB (5/30/00 5:51:13 PM)
	We handled the recursive resize death problem properly in JFace. The problem I am taking about
	was the flickering. The was caused because:

	- the table widget shows scroll bars when the user shrinks the table.
	- after that (now the scroll bars are visible) the widget generates a resize event.
	- JFace reacts on the resize event by making some columns smaller. Now the scroll bars disappear again which causes
	  flickering.
	- Furthermore we tried to define a minimum width for a table column which also introduces a lot of flickering since
	  the native widget doesn't support a minimun width for a column. As a result the column first shrinks and on the resize
	  event JFace resizes the column to the minimum width.

	What I have asked for in the PRs was a possibility to suppress the table's resize behaviour. So instead of showing scroll
	bars the table should simply clip the right most / left most column. 

SN (5/30/00 1:34:43 PM)
	I would suggest creating the table without scroll bars but this is not currently supported by Microsoft.
	The table flickers because you ask it to do things that cause redraws.  Did you try using setRedraw ()
	to collapse all of the redraws into one?  Wish I could help more.

	McQ (2/1/01 5:50:32 PM) -
		Our hands are tied. Could only be fixed using a custom widget.
PRODUCT VERSION:
15a




*** This bug has been marked as a duplicate of 13467 ***</WithStack>
    <WithOutStack>Make the Navigator view wider... this causes the task list &amp; editor to shrink but the columns in the task
list do not resize to fit its new dimensions.

Its very easy to shrink the task list a little &amp; as a result, no longer see the line numbers.

NOTES:

DG (5/26/00 3:18:29 PM)
This is a consequence of JFace modification of TableViewer where they decided to
stop auto-adjustment of table columns on resize. More information can be obtained
from JFace/SWT teams. I remember something about 'recursive death' on table
resize.

Bottom line: auto-resize must be part of TableViewer. Task list should not
implement it.

	SS (5/29/00 11:34:02 AM)
Moving to JFUIF

DB (5/30/00 9:37:21 AM)
	We had an implementation in JFace for this. Due to some problems with native widgets
	under Windows we had to remove the code. The related SWT PRs are:

	1FT1OI7: SWT:WINNT - Strange TableEditor behavior 
	1FT1A65: SWT:Linux - Need API to disable table's resize behavior when resizing table column 

	Moving to SWT. PR can not be fixed by JFace unless SWT fixes the above PRs.

SN (5/30/00 10:02:41 AM)
	Thanks.  It's not a problem in the native widgets.  When you resize the columns
	in a table, the table can resize in order to hide and show scroll bars.  This correctly
	causes a recursive resize callback and application code needs to handle this case,
	otherwise the application can cause recursive resize death.

DB (5/30/00 5:51:13 PM)
	We handled the recursive resize death problem properly in JFace. The problem I am taking about
	was the flickering. The was caused because:

	- the table widget shows scroll bars when the user shrinks the table.
	- after that (now the scroll bars are visible) the widget generates a resize event.
	- JFace reacts on the resize event by making some columns smaller. Now the scroll bars disappear again which causes
	  flickering.
	- Furthermore we tried to define a minimum width for a table column which also introduces a lot of flickering since
	  the native widget doesn't support a minimun width for a column. As a result the column first shrinks and on the resize
	  event JFace resizes the column to the minimum width.

	What I have asked for in the PRs was a possibility to suppress the table's resize behaviour. So instead of showing scroll
	bars the table should simply clip the right most / left most column. 

SN (5/30/00 1:34:43 PM)
	I would suggest creating the table without scroll bars but this is not currently supported by Microsoft.
	The table flickers because you ask it to do things that cause redraws.  Did you try using setRedraw ()
	to collapse all of the redraws into one?  Wish I could help more.

	McQ (2/1/01 5:50:32 PM) -
		Our hands are tied. Could only be fixed using a custom widget.
PRODUCT VERSION:
15a




*** This bug has been marked as a duplicate of 13467 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4519" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>Icons allocate a lot of colour objects (1FVQ09V)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>While profiling some code, I noticed that there are a lot of com.ibm.swt.graphics.Color objects allocated.
Under relatively light usage, these took up over 200K according to OptimizeIt.

I suspect that each of the icons we load has its own palette containing many Color objects.
We could try to share the palettes somehow, or have one image (per plugin) containing all the icons.

NOTES:

NE (5/29/00 12:36:56 PM) Defer.

JM (5/29/00 2:34:13 PM)
	SWT does not allocate ANY Color objects when loading images.
	Took a quick look for references to Color constructors (and win32_new) and didn't
	see anything suspicious.

Sunir Shah (6/2/00 10:03:48 AM)
	Display&gt;&gt;public Color getSystemColor (int id) is called frequently and calls
	win32_new() each time. Perhaps we should cache the values here. 

Sunir Shah (6/2/00 11:16:02 AM)
	I tested WebSphere 0.016b VAJ by opening/closing perspective windows (tool 
	windows), open closing HTML files, forcing repaints, etc. The instance
	count stayed fairly low (&lt;25). Using 0.015a VAJ, the instance count &lt; 40.

	I did leak some (18) after an exception was thrown.

Sunir Shah (6/5/00 3:48:28 PM)
	It's com.ibm.swt.graphics.RGB that's "leaking" (9000 references), almost entirely
	from com.ibm.swt.image.GIFFileFormat.readPalette(). At 256 colors per palette,
	that's only around 40 images.

	McQ (2/1/01 5:52:44 PM) -
		Duplicate PR.

	CM (5/30/2001 12:07:34 PM)
		Not sure what can be done here. RGB's are stored in Palettes, and each ImageData
		has a palette. This is what is needed to store the platform-independent representation
		of an image. If the application is holding on to all of the ImageData's that are read in,
		there will be a lot of RGB's hanging around. RGB's don't need to be disposed.
		I don't think it makes sense to share them - but I guess I could look into it.
		Perhaps we should have used ints instead of RGB objects to represent platform-independent
		colors, but it is way too late to change that.
PRODUCT VERSION:
015d on JDK


They can't be shared because they can be modified.  If this is API, it cannot 
be changed.  CAR to decide whether we should close this PR.
I suppose we _could_ use an array of ints internally in PaletteData to store 
the 256 RGB's. Then we have the old speed-space tradeoff, because creating a 
PaletteData would be slower (have to convert all those Color objects to ints), 
and accessing colors in the PaletteData would be slower (have to change back 
and forth from ints to Colors when setting or getting).

So is it worth it? The idea behind the Graphics "Data" objects is that they 
are just used to hold the info needed for creating, accessing the fields of, 
and manipulating the "real" graphics objects - in this case an Image.

Really, an application should not be holding on to the ImageData or 
PaletteData, instead, they should be holding on to the Image. The Data objects 
are more of a temporary thing. You can always ask an Image for its ImageData 
and/or PaletteData if you need to manipulate something or look at something.

If this is not the case in eclipse, i.e. if eclipse is holding on to bunches 
of ImageData's or PaletteData's for some reason, can you please tell me the 
reason, and we can see if maybe the eclipse usage should be reviewed in order 
to minimize the number of objects being held.

Nick, to address the original reason that this bug was opened, did you really 
mean Color objects, or is it RGB objects? And when you say "icon", is that an 
Image read from an ICO file, or maybe a GIF Image, as is mentioned in 
comment "6/5/00 3:48:28 PM"?
This can be closed.  I just poked around in with YourKit and don't see an
excessive number of Color or RGB objects being held onto.

Thank-you! Closing...</WithStack>
    <WithOutStack>While profiling some code, I noticed that there are a lot of com.ibm.swt.graphics.Color objects allocated.
Under relatively light usage, these took up over 200K according to OptimizeIt.

I suspect that each of the icons we load has its own palette containing many Color objects.
We could try to share the palettes somehow, or have one image (per plugin) containing all the icons.

NOTES:

NE (5/29/00 12:36:56 PM) Defer.

JM (5/29/00 2:34:13 PM)
	SWT does not allocate ANY Color objects when loading images.
	Took a quick look for references to Color constructors (and win32_new) and didn't
	see anything suspicious.

Sunir Shah (6/2/00 10:03:48 AM)
	Display&gt;&gt;public Color getSystemColor (int id) is called frequently and calls
	win32_new() each time. Perhaps we should cache the values here. 

Sunir Shah (6/2/00 11:16:02 AM)
	I tested WebSphere 0.016b VAJ by opening/closing perspective windows (tool 
	windows), open closing HTML files, forcing repaints, etc. The instance
	count stayed fairly low (&lt;25). Using 0.015a VAJ, the instance count &lt; 40.

	I did leak some (18) after an exception was thrown.

Sunir Shah (6/5/00 3:48:28 PM)
	It's com.ibm.swt.graphics.RGB that's "leaking" (9000 references), almost entirely
	from com.ibm.swt.image.GIFFileFormat.readPalette(). At 256 colors per palette,
	that's only around 40 images.

	McQ (2/1/01 5:52:44 PM) -
		Duplicate PR.

	CM (5/30/2001 12:07:34 PM)
		Not sure what can be done here. RGB's are stored in Palettes, and each ImageData
		has a palette. This is what is needed to store the platform-independent representation
		of an image. If the application is holding on to all of the ImageData's that are read in,
		there will be a lot of RGB's hanging around. RGB's don't need to be disposed.
		I don't think it makes sense to share them - but I guess I could look into it.
		Perhaps we should have used ints instead of RGB objects to represent platform-independent
		colors, but it is way too late to change that.
PRODUCT VERSION:
015d on JDK


They can't be shared because they can be modified.  If this is API, it cannot 
be changed.  CAR to decide whether we should close this PR.
I suppose we _could_ use an array of ints internally in PaletteData to store 
the 256 RGB's. Then we have the old speed-space tradeoff, because creating a 
PaletteData would be slower (have to convert all those Color objects to ints), 
and accessing colors in the PaletteData would be slower (have to change back 
and forth from ints to Colors when setting or getting).

So is it worth it? The idea behind the Graphics "Data" objects is that they 
are just used to hold the info needed for creating, accessing the fields of, 
and manipulating the "real" graphics objects - in this case an Image.

Really, an application should not be holding on to the ImageData or 
PaletteData, instead, they should be holding on to the Image. The Data objects 
are more of a temporary thing. You can always ask an Image for its ImageData 
and/or PaletteData if you need to manipulate something or look at something.

If this is not the case in eclipse, i.e. if eclipse is holding on to bunches 
of ImageData's or PaletteData's for some reason, can you please tell me the 
reason, and we can see if maybe the eclipse usage should be reviewed in order 
to minimize the number of objects being held.

Nick, to address the original reason that this bug was opened, did you really 
mean Color objects, or is it RGB objects? And when you say "icon", is that an 
Image read from an ICO file, or maybe a GIF Image, as is mentioned in 
comment "6/5/00 3:48:28 PM"?
This can be closed.  I just poked around in with YourKit and don't see an
excessive number of Color or RGB objects being held onto.

Thank-you! Closing...</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4520" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Inserting a table row is proportional to the number of columns. (1G03D19)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="package">
        <location start="1200" end="1233" />
        <code>package com.oti.dbaeumer.swt.prs;</code>
      </source_code>
      <source_code type="import">
        <location start="1234" end="1256" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1257" end="1286" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="1288" end="2585" />
        <code>public class PR_1G03D19 {

	public static void main(String[] args) {
		Shell shell= new Shell();
		Table table= new Table(shell, SWT.NONE);
		TableColumn column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);
		TableItem item;

		shell.setBounds(100, 100, 400, 200);
		table.setBounds(0,0, 350, 150);
		
		// Make sure code is loaded and memory is committed.
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			item.setText(0, "text");
		}
		table.removeAll();
		
		// Try to run a gc.
		System.gc();
		
		long sum= 0;
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			long start= System.currentTimeMillis();
			item.setText(0, "text");
			sum+= (System.currentTimeMillis() - start);
		}
		System.out.println("Time needed (1 column):  " + sum);
		
		table.removeAll();
		
		column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);
		column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);

		sum= 0;		
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			long start= System.currentTimeMillis();
			item.setText(0, "text");
			item.setText(1, "text");
			item.setText(2, "text");
			sum+= (System.currentTimeMillis() - start);
		}
		System.out.println("Time needed (3 columns): " + sum);
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Inserting a row in a table is proportional to the number of columns since each column must be
	updated using a separate setText, setImage call. Each set* call is one native call.

	For example inserting 200 table entries with one column takes 137 ms.
	Doing the same with a with 3 columns takes 250 ms.

	I have noticed the method setText(String[]).

NOTES:

SN (8/23/00 11:15:39 AM)
	Thanks Dirk.  Can you paste the code into this PR that you used to get these
	numbers and we'll take a look at it?

DB (8/24/00 10:02:47 AM)
	I did the measurement by adding some statements to a JFace Table Viewer. So there
	isn't any standalone SWT test case that I can paste into this PR. Sorry. 

SN (8/24/00 10:47:10 AM)
	Ok, but without a benchmark, how can I know that I am optimizing the right thing?
	If you want, I can write one but I hate to do this because I could spend a lot of time
	optimizing code that you're not running.

	You could also provide us with a JFace example but and we'll fix whatever code
	is necessary but an SWT example would be way better for obvious reasons.

DB (8/25/00 10:36:58 AM)
	You know what to optimize because it is clear what I am talking about. But here is
	the code:

package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class PR_1G03D19 {

	public static void main(String[] args) {
		Shell shell= new Shell();
		Table table= new Table(shell, SWT.NONE);
		TableColumn column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);
		TableItem item;

		shell.setBounds(100, 100, 400, 200);
		table.setBounds(0,0, 350, 150);
		
		// Make sure code is loaded and memory is committed.
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			item.setText(0, "text");
		}
		table.removeAll();
		
		// Try to run a gc.
		System.gc();
		
		long sum= 0;
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			long start= System.currentTimeMillis();
			item.setText(0, "text");
			sum+= (System.currentTimeMillis() - start);
		}
		System.out.println("Time needed (1 column):  " + sum);
		
		table.removeAll();
		
		column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);
		column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);

		sum= 0;		
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			long start= System.currentTimeMillis();
			item.setText(0, "text");
			item.setText(1, "text");
			item.setText(2, "text");
			sum+= (System.currentTimeMillis() - start);
		}
		System.out.println("Time needed (3 columns): " + sum);
	}
}

SN (2/5/01 1:01:54 PM)
	Sorry, ran out of time to look at this.

EG (3/5/01 12:49:53 PM)
	the search results use a 2 column table. When there are many
	search matches then the Table doesn't scale.
	We should be able to show 1000 matches &lt; 4 seconds. It is
	currently on the order of 10 seconds.

EG (3/20/01 11:38:33 AM)
	we changed search to use a single column only
Moved to SWT
Setting ownership to SN to remind him to look at this again when he has a free 
moment.

PRODUCT VERSION:
	SWT 0.45 *


This is a really old bug report but still true.  Anyways, ...

On Windows, there isn't a way to set an entire row of text in a table row so 
multiple operating system calls are needed for each item in the row.  However 
in 3.0, SWT.VIRTUAL can be used to get the operating system to query items on 
demand which avoids making the operating system call.</WithStack>
    <WithOutStack>Inserting a row in a table is proportional to the number of columns since each column must be
	updated using a separate setText, setImage call. Each set* call is one native call.

	For example inserting 200 table entries with one column takes 137 ms.
	Doing the same with a with 3 columns takes 250 ms.

	I have noticed the method setText(String[]).

NOTES:

SN (8/23/00 11:15:39 AM)
	Thanks Dirk.  Can you paste the code into this PR that you used to get these
	numbers and we'll take a look at it?

DB (8/24/00 10:02:47 AM)
	I did the measurement by adding some statements to a JFace Table Viewer. So there
	isn't any standalone SWT test case that I can paste into this PR. Sorry. 

SN (8/24/00 10:47:10 AM)
	Ok, but without a benchmark, how can I know that I am optimizing the right thing?
	If you want, I can write one but I hate to do this because I could spend a lot of time
	optimizing code that you're not running.

	You could also provide us with a JFace example but and we'll fix whatever code
	is necessary but an SWT example would be way better for obvious reasons.

DB (8/25/00 10:36:58 AM)
	You know what to optimize because it is clear what I am talking about. But here is
	the code:

package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class PR_1G03D19 {

	public static void main(String[] args) {
		Shell shell= new Shell();
		Table table= new Table(shell, SWT.NONE);
		TableColumn column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);
		TableItem item;

		shell.setBounds(100, 100, 400, 200);
		table.setBounds(0,0, 350, 150);
		
		// Make sure code is loaded and memory is committed.
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			item.setText(0, "text");
		}
		table.removeAll();
		
		// Try to run a gc.
		System.gc();
		
		long sum= 0;
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			long start= System.currentTimeMillis();
			item.setText(0, "text");
			sum+= (System.currentTimeMillis() - start);
		}
		System.out.println("Time needed (1 column):  " + sum);
		
		table.removeAll();
		
		column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);
		column= new TableColumn(table, SWT.NONE);
		column.setWidth(100);

		sum= 0;		
		for (int i= 0; i &lt; 200; i++) {
			item= new TableItem(table, SWT.NONE);
			long start= System.currentTimeMillis();
			item.setText(0, "text");
			item.setText(1, "text");
			item.setText(2, "text");
			sum+= (System.currentTimeMillis() - start);
		}
		System.out.println("Time needed (3 columns): " + sum);
	}
}

SN (2/5/01 1:01:54 PM)
	Sorry, ran out of time to look at this.

EG (3/5/01 12:49:53 PM)
	the search results use a 2 column table. When there are many
	search matches then the Table doesn't scale.
	We should be able to show 1000 matches &lt; 4 seconds. It is
	currently on the order of 10 seconds.

EG (3/20/01 11:38:33 AM)
	we changed search to use a single column only
Moved to SWT
Setting ownership to SN to remind him to look at this again when he has a free 
moment.

PRODUCT VERSION:
	SWT 0.45 *


This is a really old bug report but still true.  Anyways, ...

On Windows, there isn't a way to set an entire row of text in a table row so 
multiple operating system calls are needed for each item in the row.  However 
in 3.0, SWT.VIRTUAL can be used to get the operating system to query items on 
demand which avoids making the operating system call.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4521" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Display.syncExec or Display.asyncExec can block processing of native events (1G03DF0)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="24">
      <source_code type="package">
        <location start="373" end="406" />
        <code>package com.oti.dbaeumer.swt.prs;</code>
      </source_code>
      <source_code type="import">
        <location start="407" end="429" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="430" end="458" />
        <code>import com.ibm.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="459" end="487" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="488" end="517" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="519" end="544" />
        <code>public class PR_1G03DF0 {</code>
      </source_code>
      <source_code type="functiondef">
        <location start="591" end="616" />
        <code>public PR_1G03DF0() {
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="619" end="763" />
        <code>public PR_1G03DF0 close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		table= null;
		return this;
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="766" end="1822" />
        <code>public PR_1G03DF0 open () {
		shell = new Shell ();
		shell.setText ("Block Example");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		table= new Table(shell, SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
		GridData gd= new GridData();
		gd.horizontalAlignment= gd.FILL; gd.grabExcessHorizontalSpace= true;
		gd.verticalAlignment= gd.FILL; gd.grabExcessVerticalSpace= true;
		table.setLayoutData(gd);
		
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		TableColumn tc1= new TableColumn(table, SWT.NONE);
		tc1.setWidth(80);
		tc1.setText("Column 1");
		TableColumn tc2= new TableColumn(table, SWT.NONE);
		tc2.setWidth(80);
		tc2.setText("Column 2");
		
		for (int i= 0; i &lt; 2; i++) {
			TableItem item= new TableItem(table, SWT.NONE);
			item.setText(0, "Item " + i);
			item.setText(1, "Item " + i);
		}
		
		table.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent event) {
				System.out.println("Element selected");
			}
		});
		
		shell.open ();
		return this;
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1825" end="2002" />
        <code>public PR_1G03DF0 run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2005" end="2802" />
        <code>public static void main(java.lang.String[] args) {
		PR_1G03DF0 window= new PR_1G03DF0().open();
		final Display display= window.shell.getDisplay();
		
		// Only need to make sure the problem shows up.
		Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
		
		Thread thread= new Thread(new Runnable() {
			public void run() {
				int counter= 0;
				do {
					// display.asyncExec(new Runnable() {
					display.syncExec(new Runnable() {
						public void run() {
						}
					});
					counter++;
					if (counter == 10000) {
						System.out.println("10000 items produced");
						counter= 0;
					}
				} while (true);	
			}
		}, "Producer");


		// Only need to make sure the problem shows up.
		thread.setPriority(Thread.MAX_PRIORITY);		
		thread.start();
		
		window.run().close();
	}
}</code>
      </source_code>
      <source_code type="import">
        <location start="7146" end="7174" />
        <code>import org.eclipse.swt.SWT;</code>
      </source_code>
      <source_code type="import">
        <location start="7175" end="7222" />
        <code>import org.eclipse.swt.events.SelectionAdapter;</code>
      </source_code>
      <source_code type="import">
        <location start="7223" end="7268" />
        <code>import org.eclipse.swt.events.SelectionEvent;</code>
      </source_code>
      <source_code type="import">
        <location start="7269" end="7317" />
        <code>import org.eclipse.swt.events.SelectionListener;</code>
      </source_code>
      <source_code type="import">
        <location start="7318" end="7357" />
        <code>import org.eclipse.swt.layout.GridData;</code>
      </source_code>
      <source_code type="import">
        <location start="7358" end="7399" />
        <code>import org.eclipse.swt.layout.GridLayout;</code>
      </source_code>
      <source_code type="import">
        <location start="7400" end="7438" />
        <code>import org.eclipse.swt.widgets.Button;</code>
      </source_code>
      <source_code type="import">
        <location start="7439" end="7478" />
        <code>import org.eclipse.swt.widgets.Display;</code>
      </source_code>
      <source_code type="import">
        <location start="7479" end="7516" />
        <code>import org.eclipse.swt.widgets.Shell;</code>
      </source_code>
      <source_code type="import">
        <location start="7517" end="7554" />
        <code>import org.eclipse.swt.widgets.Table;</code>
      </source_code>
      <source_code type="import">
        <location start="7555" end="7598" />
        <code>import org.eclipse.swt.widgets.TableColumn;</code>
      </source_code>
      <source_code type="import">
        <location start="7599" end="7640" />
        <code>import org.eclipse.swt.widgets.TableItem;</code>
      </source_code>
      <source_code type="class">
        <location start="7642" end="9100" />
        <code>public class PR_4521 {

	Shell shell;
	Button button;
	
	public PR_4521() {
	}
	
	public PR_4521 close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		return this;
	}
	
	public PR_4521 open () {
		shell = new Shell ();
		shell.setText ("Block Example");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		button= new Button(shell, SWT.PUSH);
		button.setText("Press Me");
		button.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Button pressed");
			}
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
			
		shell.open ();
		return this;
	}
	
	public PR_4521 run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		PR_4521 window= new PR_4521().open();
		final Display display= window.shell.getDisplay();
		final Shell shell = window.shell;
				
		Thread producer= new Thread(new Runnable() {
			public void run() {
				do {
					if (shell.isDisposed()) break;
					display.asyncExec(new Runnable() {
						public void run() {
							try {
							
	Thread.currentThread().sleep(10);
							} catch 
(InterruptedException e) {
							}
						}
					});
				} while (true);	
			}
		}, "Producer");


		producer.start();
		
		window.run().close();
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="4">
      <Enumeration lines="2">
        <Lines>
          <Line>1.) although there are native events created long before the runnables have been posted into the event queue, and</Line>
          <Line>2.) I guarantee the activation of the UI thread by using syncExec</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- the problem occures with both syncExec and asyncExec.</Line>
          <Line>- the problem even showed up on my system if both threads have the same priority (NORM_PRIORITY). I only</Line>
          <Line>changed to priority to make sure that the problem shows up.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="2">
        <Lines>
          <Line>- I start a thread having a display. This thread processes UI events. Lets call the thread the UI thread.</Line>
          <Line>- I start a second thread that post runnable synchronously into the UI thread. Lets call the thread the producer thread.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="10">
        <Lines>
          <Line>- the UI thread gets activated every time the producer thread post the runnable into the UI thread, because the</Line>
          <Line>runnable is posted using syncExec. At this point the producer thread waits until the runnable is executed.</Line>
          <Line>- the UI thread executes the event in the method runAsyncMessages(). So the UI thread is active. After the</Line>
          <Line>runnable is executed via the call "look.run()"  the "synchronized (lock)" block is finished and a thread scheduling</Line>
          <Line>can occur (which is very probably since most VM schedule threads after a synchronized block of after a notifyAll()</Line>
          <Line>call). If the producer thread gets activated then it produces a new runnable and post it synchronously into the event</Line>
          <Line>queue.</Line>
          <Line>- This again activates the UI thread. Since it is still in the do-while(true)  loop in runAsyncMessages it removes the</Line>
          <Line>first runnable form the message queue (and there is one since the produces thread has just created one) and executes</Line>
          <Line>the runnable. This produces the blocking of the native UI events since the runAsyncMessages method is never left.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Run the attached test case. I tested it on a Sun JDK 1.2.2.

	Some notes:
		- the problem occures with both syncExec and asyncExec.
		- the problem even showed up on my system if both threads have the same priority (NORM_PRIORITY). I only
		  changed to priority to make sure that the problem shows up.


=================== Test Case =====================================
package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class PR_1G03DF0 {
	Shell shell;
	Table table;
	Button button;
	
	public PR_1G03DF0() {
	}
	
	public PR_1G03DF0 close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		table= null;
		return this;
	}
	
	public PR_1G03DF0 open () {
		shell = new Shell ();
		shell.setText ("Block Example");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		table= new Table(shell, SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
		GridData gd= new GridData();
		gd.horizontalAlignment= gd.FILL; gd.grabExcessHorizontalSpace= true;
		gd.verticalAlignment= gd.FILL; gd.grabExcessVerticalSpace= true;
		table.setLayoutData(gd);
		
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		TableColumn tc1= new TableColumn(table, SWT.NONE);
		tc1.setWidth(80);
		tc1.setText("Column 1");
		TableColumn tc2= new TableColumn(table, SWT.NONE);
		tc2.setWidth(80);
		tc2.setText("Column 2");
		
		for (int i= 0; i &lt; 2; i++) {
			TableItem item= new TableItem(table, SWT.NONE);
			item.setText(0, "Item " + i);
			item.setText(1, "Item " + i);
		}
		
		table.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent event) {
				System.out.println("Element selected");
			}
		});
		
		shell.open ();
		return this;
	}
	
	public PR_1G03DF0 run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		PR_1G03DF0 window= new PR_1G03DF0().open();
		final Display display= window.shell.getDisplay();
		
		// Only need to make sure the problem shows up.
		Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
		
		Thread thread= new Thread(new Runnable() {
			public void run() {
				int counter= 0;
				do {
					// display.asyncExec(new Runnable() {
					display.syncExec(new Runnable() {
						public void run() {
						}
					});
					counter++;
					if (counter == 10000) {
						System.out.println("10000 items produced");
						counter= 0;
					}
				} while (true);	
			}
		}, "Producer");


		// Only need to make sure the problem shows up.
		thread.setPriority(Thread.MAX_PRIORITY);		
		thread.start();
		
		window.run().close();
	}
}

NOTES:

	VI (8/28/00 4:10:21 PM)
	I have tried this example on Windows 98.  With the priorities as set above, I get the behaviour that the table selection events are not
	getting processed but this is what I would expect to happen because the UI thread has been given such a low relative priority.
	When I changed the example so that both threads have the NORM_PRIORITY thread priority, the UI events get processed regularly.
	I tried this both under J9 and JDK 1.2.2.  Is there something I am missing?

DB (8/29/00 10:21:14 AM)
	I sometimes get the behavior on my machine even if I set the priority of both threads to NORM_PRIORITY. In general I
	have the following problem with the example from above:

	- I start a thread having a display. This thread processes UI events. Lets call the thread the UI thread.
	- I start a second thread that post runnable synchronously into the UI thread. Lets call the thread the producer thread.

	Now you get the following behavior: 
		- the UI thread gets activated every time the producer thread post the runnable into the UI thread, because the
		  runnable is posted using syncExec. At this point the producer thread waits until the runnable is executed.
		- the UI thread executes the event in the method runAsyncMessages(). So the UI thread is active. After the
		  runnable is executed via the call "look.run()"  the "synchronized (lock)" block is finished and a thread scheduling
		  can occur (which is very probably since most VM schedule threads after a synchronized block of after a notifyAll() 
		  call). If the producer thread gets activated then it produces a new runnable and post it synchronously into the event
		  queue.
		- This again activates the UI thread. Since it is still in the do-while(true)  loop in runAsyncMessages it removes the
		  first runnable form the message queue (and there is one since the produces thread has just created one) and executes
		  the runnable. This produces the blocking of the native UI events since the runAsyncMessages method is never left.

	The problem that I have with this behaviour is, that 
		1.) although there are native events created long before the runnables have been posted into the event queue, and 
		2.) I guarantee the activation of the UI thread by using syncExec 

	the native UI events from the native event queue get never "worked off" because the UI thread never leaves the 
	runAsyncMessages method. In my opinion that should not happen even if the UI thread runs on LOW_PRIORITY.

	Using asyncExec instead of syncExec doesn't change anything in general. If I use asyncExec the event thread gets activated
	from time to time and should also check in runAsyncMessages if there are new native UI events which wait for processing.

SN (2/5/01 2:46:40 PM)
	No further action.  We were unable to get the code to fail.

DB (06.02.2001 12:19:33)
	This is still an open issue in Eclipse and it seems that VI was able to reproduce the problem.

	McQ (26/06/2001 10:37:38 AM) -
		VI claims that she was *unable* to reproduce the problem.
		SSQ should read this to see if he understands what's going on.
PRODUCT VERSION:
	SWT 0.45.


Dirk, we fixed a bug recently where repeately asyncExec'ing caused the UI 
thread to block.  What this what you were seeing?

Can we close this PR?  It seems that when you set the thread priority low for 
the UI thread, the UI becomes unresponsive but this is expected.
The problem still exists. The code has been moved to a new class but still has 
the same characteristics. If a thread produces more runnables and post them to 
the UI thread using async or sync exec than the UI thread can process, then the 
do {....} while(true) loop in Synchronizer is never left and therefore no 
native events are processed.

I created a smaller example that demonstrates this. It is attached to the PR. 
Run it and try to press the button or the shell's close box. Nothing happens. 
Clicking on the close box several times opens a dialog saying that the 
application is not responding to user events.
Created attachment 1728
Example code
Fixed &gt; 20020731.  Note that then old example code hangs Windows 98 because the 
UI thread exits and the producer thread keeps going, adding work to the queue 
which is no longer getting taken off.

Here is new DB example code that does not hang Windows 98 and works:

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

public class PR_4521 {

	Shell shell;
	Button button;
	
	public PR_4521() {
	}
	
	public PR_4521 close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		return this;
	}
	
	public PR_4521 open () {
		shell = new Shell ();
		shell.setText ("Block Example");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		button= new Button(shell, SWT.PUSH);
		button.setText("Press Me");
		button.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Button pressed");
			}
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
			
		shell.open ();
		return this;
	}
	
	public PR_4521 run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		PR_4521 window= new PR_4521().open();
		final Display display= window.shell.getDisplay();
		final Shell shell = window.shell;
				
		Thread producer= new Thread(new Runnable() {
			public void run() {
				do {
					if (shell.isDisposed()) break;
					display.asyncExec(new Runnable() {
						public void run() {
							try {
							
	Thread.currentThread().sleep(10);
							} catch 
(InterruptedException e) {
							}
						}
					});
				} while (true);	
			}
		}, "Producer");


		producer.start();
		
		window.run().close();
	}
}</WithStack>
    <WithOutStack>Run the attached test case. I tested it on a Sun JDK 1.2.2.

	Some notes:
		- the problem occures with both syncExec and asyncExec.
		- the problem even showed up on my system if both threads have the same priority (NORM_PRIORITY). I only
		  changed to priority to make sure that the problem shows up.


=================== Test Case =====================================
package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class PR_1G03DF0 {
	Shell shell;
	Table table;
	Button button;
	
	public PR_1G03DF0() {
	}
	
	public PR_1G03DF0 close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		table= null;
		return this;
	}
	
	public PR_1G03DF0 open () {
		shell = new Shell ();
		shell.setText ("Block Example");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		table= new Table(shell, SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
		GridData gd= new GridData();
		gd.horizontalAlignment= gd.FILL; gd.grabExcessHorizontalSpace= true;
		gd.verticalAlignment= gd.FILL; gd.grabExcessVerticalSpace= true;
		table.setLayoutData(gd);
		
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		TableColumn tc1= new TableColumn(table, SWT.NONE);
		tc1.setWidth(80);
		tc1.setText("Column 1");
		TableColumn tc2= new TableColumn(table, SWT.NONE);
		tc2.setWidth(80);
		tc2.setText("Column 2");
		
		for (int i= 0; i &lt; 2; i++) {
			TableItem item= new TableItem(table, SWT.NONE);
			item.setText(0, "Item " + i);
			item.setText(1, "Item " + i);
		}
		
		table.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent event) {
				System.out.println("Element selected");
			}
		});
		
		shell.open ();
		return this;
	}
	
	public PR_1G03DF0 run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		PR_1G03DF0 window= new PR_1G03DF0().open();
		final Display display= window.shell.getDisplay();
		
		// Only need to make sure the problem shows up.
		Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
		
		Thread thread= new Thread(new Runnable() {
			public void run() {
				int counter= 0;
				do {
					// display.asyncExec(new Runnable() {
					display.syncExec(new Runnable() {
						public void run() {
						}
					});
					counter++;
					if (counter == 10000) {
						System.out.println("10000 items produced");
						counter= 0;
					}
				} while (true);	
			}
		}, "Producer");


		// Only need to make sure the problem shows up.
		thread.setPriority(Thread.MAX_PRIORITY);		
		thread.start();
		
		window.run().close();
	}
}

NOTES:

	VI (8/28/00 4:10:21 PM)
	I have tried this example on Windows 98.  With the priorities as set above, I get the behaviour that the table selection events are not
	getting processed but this is what I would expect to happen because the UI thread has been given such a low relative priority.
	When I changed the example so that both threads have the NORM_PRIORITY thread priority, the UI events get processed regularly.
	I tried this both under J9 and JDK 1.2.2.  Is there something I am missing?

DB (8/29/00 10:21:14 AM)
	I sometimes get the behavior on my machine even if I set the priority of both threads to NORM_PRIORITY. In general I
	have the following problem with the example from above:

	- I start a thread having a display. This thread processes UI events. Lets call the thread the UI thread.
	- I start a second thread that post runnable synchronously into the UI thread. Lets call the thread the producer thread.

	Now you get the following behavior: 
		- the UI thread gets activated every time the producer thread post the runnable into the UI thread, because the
		  runnable is posted using syncExec. At this point the producer thread waits until the runnable is executed.
		- the UI thread executes the event in the method runAsyncMessages(). So the UI thread is active. After the
		  runnable is executed via the call "look.run()"  the "synchronized (lock)" block is finished and a thread scheduling
		  can occur (which is very probably since most VM schedule threads after a synchronized block of after a notifyAll() 
		  call). If the producer thread gets activated then it produces a new runnable and post it synchronously into the event
		  queue.
		- This again activates the UI thread. Since it is still in the do-while(true)  loop in runAsyncMessages it removes the
		  first runnable form the message queue (and there is one since the produces thread has just created one) and executes
		  the runnable. This produces the blocking of the native UI events since the runAsyncMessages method is never left.

	The problem that I have with this behaviour is, that 
		1.) although there are native events created long before the runnables have been posted into the event queue, and 
		2.) I guarantee the activation of the UI thread by using syncExec 

	the native UI events from the native event queue get never "worked off" because the UI thread never leaves the 
	runAsyncMessages method. In my opinion that should not happen even if the UI thread runs on LOW_PRIORITY.

	Using asyncExec instead of syncExec doesn't change anything in general. If I use asyncExec the event thread gets activated
	from time to time and should also check in runAsyncMessages if there are new native UI events which wait for processing.

SN (2/5/01 2:46:40 PM)
	No further action.  We were unable to get the code to fail.

DB (06.02.2001 12:19:33)
	This is still an open issue in Eclipse and it seems that VI was able to reproduce the problem.

	McQ (26/06/2001 10:37:38 AM) -
		VI claims that she was *unable* to reproduce the problem.
		SSQ should read this to see if he understands what's going on.
PRODUCT VERSION:
	SWT 0.45.


Dirk, we fixed a bug recently where repeately asyncExec'ing caused the UI 
thread to block.  What this what you were seeing?

Can we close this PR?  It seems that when you set the thread priority low for 
the UI thread, the UI becomes unresponsive but this is expected.
The problem still exists. The code has been moved to a new class but still has 
the same characteristics. If a thread produces more runnables and post them to 
the UI thread using async or sync exec than the UI thread can process, then the 
do {....} while(true) loop in Synchronizer is never left and therefore no 
native events are processed.

I created a smaller example that demonstrates this. It is attached to the PR. 
Run it and try to press the button or the shell's close box. Nothing happens. 
Clicking on the close box several times opens a dialog saying that the 
application is not responding to user events.
Created attachment 1728
Example code
Fixed &gt; 20020731.  Note that then old example code hangs Windows 98 because the 
UI thread exits and the producer thread keeps going, adding work to the queue 
which is no longer getting taken off.

Here is new DB example code that does not hang Windows 98 and works:

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

public class PR_4521 {

	Shell shell;
	Button button;
	
	public PR_4521() {
	}
	
	public PR_4521 close () {
		if ((shell != null) &amp;&amp; (!shell.isDisposed ())) shell.dispose ();
		shell= null;
		return this;
	}
	
	public PR_4521 open () {
		shell = new Shell ();
		shell.setText ("Block Example");
		shell.setSize (300, 200);
		shell.setLayout(new GridLayout());
	
		button= new Button(shell, SWT.PUSH);
		button.setText("Press Me");
		button.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Button pressed");
			}
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
			
		shell.open ();
		return this;
	}
	
	public PR_4521 run () {
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		return this;
	}
	
	public static void main(java.lang.String[] args) {
		PR_4521 window= new PR_4521().open();
		final Display display= window.shell.getDisplay();
		final Shell shell = window.shell;
				
		Thread producer= new Thread(new Runnable() {
			public void run() {
				do {
					if (shell.isDisposed()) break;
					display.asyncExec(new Runnable() {
						public void run() {
							try {
							
	Thread.currentThread().sleep(10);
							} catch 
(InterruptedException e) {
							}
						}
					});
				} while (true);	
			}
		}, "Producer");


		producer.start();
		
		window.run().close();
	}
}</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4522" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>Wrong name being displayed in progress bar (1FVQB1M)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="import">
        <location start="489" end="512" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="513" end="544" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="545" end="575" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="577" end="982" />
        <code>public class PR_1FVQB1M {
		public static void main(String[] args) {
		
			Shell shell= new Shell();
			shell.setBounds(100, 100, 300, 200);

			Label label= new Label(shell, SWT.LEFT);
			label.setText("b&amp;b");
			label.setBounds(0,0, 250, 100);
		
			shell.open();
		
			Display display= shell.getDisplay();
			while (!shell.isDisposed())
				if (!display.readAndDispatch())
					display.sleep();
		}
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1605" end="1897" />
        <code>public static String escapeMetaCharacters(String in) {
		int length = in.length();
		StringBuffer out = new StringBuffer(length);
		for (int i = 0; i &lt; in.length(); i++) {
			if (in.charAt(i) == '&amp;')
				out.append("&amp;&amp;");
			else
				out.append(in.charAt(i));
		}
		return out.toString();
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>- create solution called "b&amp;b"</Line>
          <Line>- set server index</Line>
          <Line>- refresh sync status from server</Line>
          <Line>- name flashes by in progress indicator</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>When a name with an "&amp;" is passed into ProgressMonitor subtask, it is
	incorrectly being displayed in the UI.

STEPS:
	low-level: call ProgressMonitor.subTask("b&amp;b")

	high-level:
		- create solution called "b&amp;b"
		- set server index
		- refresh sync status from server
		- name flashes by in progress indicator

NOTES:
GDA (5/29/2000 6:13:07 PM)
	Moving to jface

DB (5/31/00 10:41:43 AM)
	We set the string b&amp;b to a SWT Label object.

	SWT test case:

	package com.oti.dbaeumer.swt.prs;

	import com.ibm.swt.*;
	import com.ibm.swt.graphics.*;
	import com.ibm.swt.widgets.*;

	public class PR_1FVQB1M {
		public static void main(String[] args) {
		
			Shell shell= new Shell();
			shell.setBounds(100, 100, 300, 200);

			Label label= new Label(shell, SWT.LEFT);
			label.setText("b&amp;b");
			label.setBounds(0,0, 250, 100);
		
			shell.open();
		
			Display display= shell.getDisplay();
			while (!shell.isDisposed())
				if (!display.readAndDispatch())
					display.sleep();
		}
	}

EG (5/31/00 10:47:55 AM)
	moving to SWT

KH (5/31/00 9:34:03 AM)

	Sunir pls investigate

JM (05/31/00 09:54:23)
	In tool items, menu items, buttons and labels, an ampersand indicates a mnemonic
	character, i.e. one that will be underlined. In order to show an actual ampersand,
	you must escape it by using two: label.setText("b&amp;&amp;b")

Sunir Shah (5/31/00 11:29:32 AM)
   In Win32, you prefix the hot character with &amp;. In X, you
   postfix the hot character with &amp;. In both, you use a double
   &amp;&amp; to show an actual ampersand. The caller should escape
   the string to be "b&amp;&amp;b", possibly with a helper method:

	Label&gt;&gt;
	public static String escapeMetaCharacters(String in) {
		int length = in.length();
		StringBuffer out = new StringBuffer(length);
		for (int i = 0; i &lt; in.length(); i++) {
			if (in.charAt(i) == '&amp;')
				out.append("&amp;&amp;");
			else
				out.append(in.charAt(i));
		}
		return out.toString();
	}

KH (6/1/00 2:57:31 PM)

	Moving to ITPUI. 

GDA (6/1/2000 3:22:34 PM)
	The clients (e.g. the desktop) should not have to alter the message being
	passed into the progress bar.
	They literally just say "I want you to show this message" somehow.
	The client doesn't need/care to know that its a label that shows it and as a result
	of that certain things need to be escaped.
	If this were done every single call to progress would have to be changed
	to look for any special characters.
	Moving to JFUIF for comment

EG (6/3/00 11:42:00 PM)
	It is surprising that labels also do mnemonic processing. However this makes
	sense for providing mnemonic support for check boxes. There the label is
	where the mnemonic is shown.
	
	However, I don't think that the mnemonic pre-processing should be in JFace.
	It is platform specific (you are lucky that it is the same on X and Win) but mnemonic escaping
	could be different on a future SWT platform. 
	I Suggest that SWT gives a style bit to force plain labels where no
	mnemonic processing should be done. 

AW (05.06.00 10:11:54)
	Style bit for SWT Label is OK, but Label is implementation detail of ProgressMonitor.
	So clients shouldn't know that JFace uses Label.

AW (05.06.00 11:15:16)
	Fixed in 129 for all cases where a Label is used as an implementation detail:
	Added method com.ibm.jface.util.Utilities.escapeMetaCharacters(String).
	Applied escapeMetaCharacters in:
		InputDialog.fErrorMessage
		MessageDialog.fMessageLabel
		PreferenceDialog.fTitle
		ProgressMonitorDialog.fLabel
		WizardDialog.fTitle
		WizardDialog.fDescription

EG (6/5/00 3:45:10 PM)
	Moving to SWT (no action is required for the tech preview).
	The code to escapeMetaCharacters shouldn't be in JFace.

	McQ (2/1/01 5:59:08 PM) -
		Agree that this could be handled by allowing configurability of
		whether or not &amp; is mapped to mnemonic underscore. We will 
		not get to this right now. Low priority, since customer can work
		around it.
PRODUCT VERSION:
	016b drop running in VAJ


As of now, we are not planning to fix this.</WithStack>
    <WithOutStack>When a name with an "&amp;" is passed into ProgressMonitor subtask, it is
	incorrectly being displayed in the UI.

STEPS:
	low-level: call ProgressMonitor.subTask("b&amp;b")

	high-level:
		- create solution called "b&amp;b"
		- set server index
		- refresh sync status from server
		- name flashes by in progress indicator

NOTES:
GDA (5/29/2000 6:13:07 PM)
	Moving to jface

DB (5/31/00 10:41:43 AM)
	We set the string b&amp;b to a SWT Label object.

	SWT test case:

	package com.oti.dbaeumer.swt.prs;

	import com.ibm.swt.*;
	import com.ibm.swt.graphics.*;
	import com.ibm.swt.widgets.*;

	public class PR_1FVQB1M {
		public static void main(String[] args) {
		
			Shell shell= new Shell();
			shell.setBounds(100, 100, 300, 200);

			Label label= new Label(shell, SWT.LEFT);
			label.setText("b&amp;b");
			label.setBounds(0,0, 250, 100);
		
			shell.open();
		
			Display display= shell.getDisplay();
			while (!shell.isDisposed())
				if (!display.readAndDispatch())
					display.sleep();
		}
	}

EG (5/31/00 10:47:55 AM)
	moving to SWT

KH (5/31/00 9:34:03 AM)

	Sunir pls investigate

JM (05/31/00 09:54:23)
	In tool items, menu items, buttons and labels, an ampersand indicates a mnemonic
	character, i.e. one that will be underlined. In order to show an actual ampersand,
	you must escape it by using two: label.setText("b&amp;&amp;b")

Sunir Shah (5/31/00 11:29:32 AM)
   In Win32, you prefix the hot character with &amp;. In X, you
   postfix the hot character with &amp;. In both, you use a double
   &amp;&amp; to show an actual ampersand. The caller should escape
   the string to be "b&amp;&amp;b", possibly with a helper method:

	Label&gt;&gt;
	public static String escapeMetaCharacters(String in) {
		int length = in.length();
		StringBuffer out = new StringBuffer(length);
		for (int i = 0; i &lt; in.length(); i++) {
			if (in.charAt(i) == '&amp;')
				out.append("&amp;&amp;");
			else
				out.append(in.charAt(i));
		}
		return out.toString();
	}

KH (6/1/00 2:57:31 PM)

	Moving to ITPUI. 

GDA (6/1/2000 3:22:34 PM)
	The clients (e.g. the desktop) should not have to alter the message being
	passed into the progress bar.
	They literally just say "I want you to show this message" somehow.
	The client doesn't need/care to know that its a label that shows it and as a result
	of that certain things need to be escaped.
	If this were done every single call to progress would have to be changed
	to look for any special characters.
	Moving to JFUIF for comment

EG (6/3/00 11:42:00 PM)
	It is surprising that labels also do mnemonic processing. However this makes
	sense for providing mnemonic support for check boxes. There the label is
	where the mnemonic is shown.
	
	However, I don't think that the mnemonic pre-processing should be in JFace.
	It is platform specific (you are lucky that it is the same on X and Win) but mnemonic escaping
	could be different on a future SWT platform. 
	I Suggest that SWT gives a style bit to force plain labels where no
	mnemonic processing should be done. 

AW (05.06.00 10:11:54)
	Style bit for SWT Label is OK, but Label is implementation detail of ProgressMonitor.
	So clients shouldn't know that JFace uses Label.

AW (05.06.00 11:15:16)
	Fixed in 129 for all cases where a Label is used as an implementation detail:
	Added method com.ibm.jface.util.Utilities.escapeMetaCharacters(String).
	Applied escapeMetaCharacters in:
		InputDialog.fErrorMessage
		MessageDialog.fMessageLabel
		PreferenceDialog.fTitle
		ProgressMonitorDialog.fLabel
		WizardDialog.fTitle
		WizardDialog.fDescription

EG (6/5/00 3:45:10 PM)
	Moving to SWT (no action is required for the tech preview).
	The code to escapeMetaCharacters shouldn't be in JFace.

	McQ (2/1/01 5:59:08 PM) -
		Agree that this could be handled by allowing configurability of
		whether or not &amp; is mapped to mnemonic underscore. We will 
		not get to this right now. Low priority, since customer can work
		around it.
PRODUCT VERSION:
	016b drop running in VAJ


As of now, we are not planning to fix this.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4523" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>Release selection pane flashes a lot (1FVQNQD)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="780" end="970" />
        <code>TableTreeItem::public void setExpanded (boolean expand) {	
			getParent().setRedraw(false);
			if (expand)
				expandItem();
			else
				collapseItem();
			getParent().setRedraw(true);
		}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Populate a Java or Web project with a bunch of files in different folders.
Choose release on the project.
In the release dialog, expand the resource hierarchy a few levels.
It redraws completely each time.


NOTES:

GDA (5/30/2000 1:42:56 AM)
	JDK or VAJ?

NE (5/30/00 10:01:09 AM) Sorry, VAJ

GDA (5/30/2000 1:38:58 PM)
	moving to jface

EG (5/31/00 10:54:53 AM)
	the ReleaseAction is using a TableTree in the ServerSynchronizationDialgo.
	We observe the same flicker in our TableTreeViewer test cases
		com.ibm.jface.examples.viewertest.TestTableTree when you expand nodes.
	On the JDK the flickering is still disturbing when you are having a large tree.

KH (5/31/00 9:33:51 AM)

	VI pls investigate

VI (5/31/2000 11:51:25 AM)

	The code that is causing the flicker is this:

		TableTreeItem::public void setExpanded (boolean expand) {	
			getParent().setRedraw(false);
			if (expand)
				expandItem();
			else
				collapseItem();
			getParent().setRedraw(true);
		}

	Unfortunately, if I remove the setRedraw calls, while the top part of the tree no longer flashes, on collapse the bottom part
	of the tree is redrawn for every item that is being hidden.

	The Tree widget also redraws the bottom part of the tree for each item on collapse but does so much faster.

	What is worse, one flash or multiple redraws as the tree collapses?

	There may also be some issues concerning editable table cells and multiple redraws.

	McQ (2/2/01 1:17:42 PM) -
		We are stuck with the above behavior, as long as we keep the existing API.
		It might be possible to have an "add a collection" of items.
PRODUCT VERSION:
016a


Later
Post 2.0. Re-opening bug reports for review.
Nick, I ran across this PR and am going to close it because it's really old.  
You can reopen it if you want, with some code that shows the problem.  Thanks.</WithStack>
    <WithOutStack>Populate a Java or Web project with a bunch of files in different folders.
Choose release on the project.
In the release dialog, expand the resource hierarchy a few levels.
It redraws completely each time.


NOTES:

GDA (5/30/2000 1:42:56 AM)
	JDK or VAJ?

NE (5/30/00 10:01:09 AM) Sorry, VAJ

GDA (5/30/2000 1:38:58 PM)
	moving to jface

EG (5/31/00 10:54:53 AM)
	the ReleaseAction is using a TableTree in the ServerSynchronizationDialgo.
	We observe the same flicker in our TableTreeViewer test cases
		com.ibm.jface.examples.viewertest.TestTableTree when you expand nodes.
	On the JDK the flickering is still disturbing when you are having a large tree.

KH (5/31/00 9:33:51 AM)

	VI pls investigate

VI (5/31/2000 11:51:25 AM)

	The code that is causing the flicker is this:

		TableTreeItem::public void setExpanded (boolean expand) {	
			getParent().setRedraw(false);
			if (expand)
				expandItem();
			else
				collapseItem();
			getParent().setRedraw(true);
		}

	Unfortunately, if I remove the setRedraw calls, while the top part of the tree no longer flashes, on collapse the bottom part
	of the tree is redrawn for every item that is being hidden.

	The Tree widget also redraws the bottom part of the tree for each item on collapse but does so much faster.

	What is worse, one flash or multiple redraws as the tree collapses?

	There may also be some issues concerning editable table cells and multiple redraws.

	McQ (2/2/01 1:17:42 PM) -
		We are stuck with the above behavior, as long as we keep the existing API.
		It might be possible to have an "add a collection" of items.
PRODUCT VERSION:
016a


Later
Post 2.0. Re-opening bug reports for review.
Nick, I ran across this PR and am going to close it because it's really old.  
You can reopen it if you want, with some code that shows the problem.  Thanks.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4524" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>CTRL sequences not handled gracefully by TextEditor (1FVSBTS)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="package">
        <location start="625" end="639" />
        <code>package kr.PR;</code>
      </source_code>
      <source_code type="import">
        <location start="640" end="662" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="663" end="693" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="694" end="723" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="725" end="1523" />
        <code>public class PR_1FVSBTS {
	Shell shell;
	Text textBad;
	Text textGood;	
	
void create() {
	shell = new Shell();
	textBad = new Text(shell, SWT.MULTI);
	textBad.setBounds(0, 0, 200, 130);
	textBad.setText("List(shell\r, 0);\nCourier 13");
	textBad.setFont(new Font(shell.getDisplay(), "courier", 13, 0));
	
	textGood = new Text(shell, SWT.MULTI);
	textGood.setBounds(0, 140, 200, 130);
	textGood.setText("List(shell\r, 0);\nCourier 12");
	textGood.setFont(new Font(shell.getDisplay(), "courier", 12, 0));
	
	shell.setSize(200, 350);
	shell.open();
}

public static void main(String arguments[]) {
	PR_1FVSBTS pr = new PR_1FVSBTS();
	pr.create();
	pr.run();
}

void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>With certain Text widget font configurations CTRL characters are not handled well.
In the code below I set text that includes a carriage return into a text widget with 
a courier-13 font. When you swipe select with the mouse back and forth over the location 
of the CR you'll notice that the text is changing. For example the comma moves or 
disappears. If you now press ctrl+a or ctrl+d you will see other strange behavior.
If you do the same on the bottom text widget that has a courier-12 font set you'll
see different behavior. Ctrl+a and ctrl+d are always inserted as spaces. Mouse selection
does not change the text.


package kr.PR;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1FVSBTS {
	Shell shell;
	Text textBad;
	Text textGood;	
	
void create() {
	shell = new Shell();
	textBad = new Text(shell, SWT.MULTI);
	textBad.setBounds(0, 0, 200, 130);
	textBad.setText("List(shell\r, 0);\nCourier 13");
	textBad.setFont(new Font(shell.getDisplay(), "courier", 13, 0));
	
	textGood = new Text(shell, SWT.MULTI);
	textGood.setBounds(0, 140, 200, 130);
	textGood.setText("List(shell\r, 0);\nCourier 12");
	textGood.setFont(new Font(shell.getDisplay(), "courier", 12, 0));
	
	shell.setSize(200, 350);
	shell.open();
}

public static void main(String arguments[]) {
	PR_1FVSBTS pr = new PR_1FVSBTS();
	pr.create();
	pr.run();
}

void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}

NOTES:

LK (6/1/00 5:11:49 PM)
	One solution could be to disallow user-specified font sizes (i.e., ones that are not listed).
	The problem does not happen if the font is not scaled.

KR (6/2/00 8:45:49 PM)
	I noticed that the adobe courier 13 font I was using is available as both scalable and 
	non-scalable. Ie. xlsfonts lists one medium-r-normal-0-0-0-0-m-0-iso8859-1 and then
	medium-r-normal-12-120-75-75-m-70-iso8859-1 
	medium-r-normal-14-140-75-75-m-90-iso8859-1 
	What happens when I ask SWT for an adobe courier 13? I would expect Motif to use the 
	scalable font and not to try and scale the non-scalable font. What happens if I ask for a 
	13 point font and there's neither a scalable version of the font nor a fixed size font of that 
	size? Is it allowed to do that in Motif?
	I'm asking because I let users enter the font size in the FontDialog and don't check 
	whether the font is actually scalable or available in that exact size.

JM (06/29/00 %r)
	If you ask for a 13 point font and there is neither a 13-point non-scalable font nor a
	scalable font, you get a default font (fixed) which is ugly, so there is likely a need
	to check this case in the font dialog.

	However, the problem still exists, as choosing a scalable font in any size is a valid
	thing to do. Investigating.

JM (07/04/00 11:32:51)
	This appears to be a bug in the platform; other than changing the string in setText(), which
	seems very wrong, there is nothing that we could do to fix this. Is it really critical? What
	is the effect of this in the product?

LK (7/5/00 12:27:55 PM)
	Only happens with CTRL-M.  We have worked around for now (filtering it out), so not critical.
PRODUCT VERSION:
SWT 0.42


SWT Linux/Motif no longer shows the strange mouse selection behavior. 
The only difference between the two widgets with different font sizes is that 
the one in Courier 12 shows a square for CTRL character combinations and the 
one in Courier 13 shows just a space.

Assigning back to McQ in case he wants to investigate why the square is not 
displayed in both cases.
I suspect that it may just be a difference in the fonts. In any case, since 
the original issue seems to be fixed, and the remaining difference doesn't 
seem interesting, I'm marking this fixed.</WithStack>
    <WithOutStack>With certain Text widget font configurations CTRL characters are not handled well.
In the code below I set text that includes a carriage return into a text widget with 
a courier-13 font. When you swipe select with the mouse back and forth over the location 
of the CR you'll notice that the text is changing. For example the comma moves or 
disappears. If you now press ctrl+a or ctrl+d you will see other strange behavior.
If you do the same on the bottom text widget that has a courier-12 font set you'll
see different behavior. Ctrl+a and ctrl+d are always inserted as spaces. Mouse selection
does not change the text.


package kr.PR;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1FVSBTS {
	Shell shell;
	Text textBad;
	Text textGood;	
	
void create() {
	shell = new Shell();
	textBad = new Text(shell, SWT.MULTI);
	textBad.setBounds(0, 0, 200, 130);
	textBad.setText("List(shell\r, 0);\nCourier 13");
	textBad.setFont(new Font(shell.getDisplay(), "courier", 13, 0));
	
	textGood = new Text(shell, SWT.MULTI);
	textGood.setBounds(0, 140, 200, 130);
	textGood.setText("List(shell\r, 0);\nCourier 12");
	textGood.setFont(new Font(shell.getDisplay(), "courier", 12, 0));
	
	shell.setSize(200, 350);
	shell.open();
}

public static void main(String arguments[]) {
	PR_1FVSBTS pr = new PR_1FVSBTS();
	pr.create();
	pr.run();
}

void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}

NOTES:

LK (6/1/00 5:11:49 PM)
	One solution could be to disallow user-specified font sizes (i.e., ones that are not listed).
	The problem does not happen if the font is not scaled.

KR (6/2/00 8:45:49 PM)
	I noticed that the adobe courier 13 font I was using is available as both scalable and 
	non-scalable. Ie. xlsfonts lists one medium-r-normal-0-0-0-0-m-0-iso8859-1 and then
	medium-r-normal-12-120-75-75-m-70-iso8859-1 
	medium-r-normal-14-140-75-75-m-90-iso8859-1 
	What happens when I ask SWT for an adobe courier 13? I would expect Motif to use the 
	scalable font and not to try and scale the non-scalable font. What happens if I ask for a 
	13 point font and there's neither a scalable version of the font nor a fixed size font of that 
	size? Is it allowed to do that in Motif?
	I'm asking because I let users enter the font size in the FontDialog and don't check 
	whether the font is actually scalable or available in that exact size.

JM (06/29/00 %r)
	If you ask for a 13 point font and there is neither a 13-point non-scalable font nor a
	scalable font, you get a default font (fixed) which is ugly, so there is likely a need
	to check this case in the font dialog.

	However, the problem still exists, as choosing a scalable font in any size is a valid
	thing to do. Investigating.

JM (07/04/00 11:32:51)
	This appears to be a bug in the platform; other than changing the string in setText(), which
	seems very wrong, there is nothing that we could do to fix this. Is it really critical? What
	is the effect of this in the product?

LK (7/5/00 12:27:55 PM)
	Only happens with CTRL-M.  We have worked around for now (filtering it out), so not critical.
PRODUCT VERSION:
SWT 0.42


SWT Linux/Motif no longer shows the strange mouse selection behavior. 
The only difference between the two widgets with different font sizes is that 
the one in Courier 12 shows a square for CTRL character combinations and the 
one in Courier 13 shows just a space.

Assigning back to McQ in case he wants to investigate why the square is not 
displayed in both cases.
I suspect that it may just be a difference in the fonts. In any case, since 
the original issue seems to be fixed, and the remaining difference doesn't 
seem interesting, I'm marking this fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4525" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Property viewer doesn't adapt to bg color changes (1FX8XL1)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="6">
      <source_code type="import">
        <location start="1536" end="1558" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1559" end="1589" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1590" end="1619" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1620" end="1648" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1649" end="1677" />
        <code>import com.ibm.swt.custom.*;</code>
      </source_code>
      <source_code type="class">
        <location start="1679" end="3257" />
        <code>public class PR_1FX8XL1 {

public static void main (String [] args) {
	Shell shell = new Shell();
	Image image = new Image(null, 20, 20);
	Color red = new Color(null, 255, 0, 0);
	GC gc = new GC(image);
	gc.setBackground(red);
	gc.fillRectangle(image.getBounds());
	gc.dispose();
	red.dispose();
	TableTree tableTree = new TableTree(shell, SWT.BORDER);
	tableTree.setSize(320, 200);
	Table table = tableTree.getTable();
	table.setHeaderVisible(true);
	table.setLinesVisible(true);
	for (int col = 0; col &lt; 3; col++) {
		TableColumn column = new TableColumn(table, SWT.NONE, col);
		column.setText("Column " + col);
		column.setWidth(100);
	}
	for (int iRoot = 0; iRoot &lt; 8; iRoot++) {
		TableTreeItem root = new TableTreeItem(tableTree, SWT.NONE);
		root.setText("Root " + iRoot);
		for (int iBranch = 0; iBranch &lt; 4; iBranch++) {
			TableTreeItem branch = new TableTreeItem(root, SWT.NONE);
			branch.setText("Branch " + iBranch);
			for (int col = 1; col &lt; 3; col++) {
				branch.setImage(col, image);
				branch.setText(col, "R" + iRoot + "B" + iBranch + "C" + col);
			}
			for (int iLeaf = 0; iLeaf &lt; 4; iLeaf++) {
				TableTreeItem leaf = new TableTreeItem(branch, SWT.NONE);
				leaf.setText("Leaf " + iLeaf);
				for (int col = 1; col &lt; 3; col++) {
					leaf.setImage(col, image);
					leaf.setText(col, "R" + iRoot + "B" + iBranch + "L" + iLeaf + "C" + col);
				}
			}
		}
	}
	shell.pack();
	shell.open();
	//tableTree.setEnabled(false);
	Display display = shell.getDisplay ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If I change the window's background color in Control Panel/Display/Appearance the Properties viewer doesn't adapt.


NOTES:
	SS (6/28/00 12:27:53 PM)
Confirmed in 033 vaj build. If you have properties displaying, the cells with values have the correct colour.
Only blank cells remain white. The properties Viewwer does nothing to change the colour. Could be the
underlying TableTree. Moving to SWT for comment.

VI (6/28/2000 3:40:53 PM)

The Table cell editors are the wrong colour, the empty columns and rows are the wrong colour and the
parts where the table has been indented are the wrong colour.  I have not touched this stuff so I am not sure
why it is wrong.

The [+]/[-] icon is the wrong colour - this I draw once and re-use so I can understand why it is the wrong colour.

Note: The colour is only mismatched if you change the colours while the application is running.  If you close the application and
reopen, it the colours are correct.

AW (29.06.00 11:11:21)
	The status bar of the properties viewer has the same problem.
	(the JFace statusbar does not!)

CM (2/6/01 1:45:02 PM)
	This PR is very old and may have been fixed since it was entered.
	I changed the window background color with a little TableTree example running,
	and the [+]/[-] icons change colors just fine. (i.e. I did not have to restart).
	Please check with AW to see if this is still a problem in his new world,
	and if so, can he write a little tiny example that shows the problem?
	If it helps any, here is the little TableTree example I was using.

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.custom.*;

public class PR_1FX8XL1 {

public static void main (String [] args) {
	Shell shell = new Shell();
	Image image = new Image(null, 20, 20);
	Color red = new Color(null, 255, 0, 0);
	GC gc = new GC(image);
	gc.setBackground(red);
	gc.fillRectangle(image.getBounds());
	gc.dispose();
	red.dispose();
	TableTree tableTree = new TableTree(shell, SWT.BORDER);
	tableTree.setSize(320, 200);
	Table table = tableTree.getTable();
	table.setHeaderVisible(true);
	table.setLinesVisible(true);
	for (int col = 0; col &lt; 3; col++) {
		TableColumn column = new TableColumn(table, SWT.NONE, col);
		column.setText("Column " + col);
		column.setWidth(100);
	}
	for (int iRoot = 0; iRoot &lt; 8; iRoot++) {
		TableTreeItem root = new TableTreeItem(tableTree, SWT.NONE);
		root.setText("Root " + iRoot);
		for (int iBranch = 0; iBranch &lt; 4; iBranch++) {
			TableTreeItem branch = new TableTreeItem(root, SWT.NONE);
			branch.setText("Branch " + iBranch);
			for (int col = 1; col &lt; 3; col++) {
				branch.setImage(col, image);
				branch.setText(col, "R" + iRoot + "B" + iBranch + "C" + col);
			}
			for (int iLeaf = 0; iLeaf &lt; 4; iLeaf++) {
				TableTreeItem leaf = new TableTreeItem(branch, SWT.NONE);
				leaf.setText("Leaf " + iLeaf);
				for (int col = 1; col &lt; 3; col++) {
					leaf.setImage(col, image);
					leaf.setText(col, "R" + iRoot + "B" + iBranch + "L" + iLeaf + "C" + col);
				}
			}
		}
	}
	shell.pack();
	shell.open();
	//tableTree.setEnabled(false);
	Display display = shell.getDisplay ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}
}

SN (2/6/01 4:50:16 PM)
	The "+" icons are fixed but the "-" icons are not.  Try expanding the tree.

SN (2/6/01 4:54:33 PM)
	No fix at this time.
PRODUCT VERSION:
032 jre


Retested. Both + and - are displayed correctly now.</WithStack>
    <WithOutStack>If I change the window's background color in Control Panel/Display/Appearance the Properties viewer doesn't adapt.


NOTES:
	SS (6/28/00 12:27:53 PM)
Confirmed in 033 vaj build. If you have properties displaying, the cells with values have the correct colour.
Only blank cells remain white. The properties Viewwer does nothing to change the colour. Could be the
underlying TableTree. Moving to SWT for comment.

VI (6/28/2000 3:40:53 PM)

The Table cell editors are the wrong colour, the empty columns and rows are the wrong colour and the
parts where the table has been indented are the wrong colour.  I have not touched this stuff so I am not sure
why it is wrong.

The [+]/[-] icon is the wrong colour - this I draw once and re-use so I can understand why it is the wrong colour.

Note: The colour is only mismatched if you change the colours while the application is running.  If you close the application and
reopen, it the colours are correct.

AW (29.06.00 11:11:21)
	The status bar of the properties viewer has the same problem.
	(the JFace statusbar does not!)

CM (2/6/01 1:45:02 PM)
	This PR is very old and may have been fixed since it was entered.
	I changed the window background color with a little TableTree example running,
	and the [+]/[-] icons change colors just fine. (i.e. I did not have to restart).
	Please check with AW to see if this is still a problem in his new world,
	and if so, can he write a little tiny example that shows the problem?
	If it helps any, here is the little TableTree example I was using.

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.custom.*;

public class PR_1FX8XL1 {

public static void main (String [] args) {
	Shell shell = new Shell();
	Image image = new Image(null, 20, 20);
	Color red = new Color(null, 255, 0, 0);
	GC gc = new GC(image);
	gc.setBackground(red);
	gc.fillRectangle(image.getBounds());
	gc.dispose();
	red.dispose();
	TableTree tableTree = new TableTree(shell, SWT.BORDER);
	tableTree.setSize(320, 200);
	Table table = tableTree.getTable();
	table.setHeaderVisible(true);
	table.setLinesVisible(true);
	for (int col = 0; col &lt; 3; col++) {
		TableColumn column = new TableColumn(table, SWT.NONE, col);
		column.setText("Column " + col);
		column.setWidth(100);
	}
	for (int iRoot = 0; iRoot &lt; 8; iRoot++) {
		TableTreeItem root = new TableTreeItem(tableTree, SWT.NONE);
		root.setText("Root " + iRoot);
		for (int iBranch = 0; iBranch &lt; 4; iBranch++) {
			TableTreeItem branch = new TableTreeItem(root, SWT.NONE);
			branch.setText("Branch " + iBranch);
			for (int col = 1; col &lt; 3; col++) {
				branch.setImage(col, image);
				branch.setText(col, "R" + iRoot + "B" + iBranch + "C" + col);
			}
			for (int iLeaf = 0; iLeaf &lt; 4; iLeaf++) {
				TableTreeItem leaf = new TableTreeItem(branch, SWT.NONE);
				leaf.setText("Leaf " + iLeaf);
				for (int col = 1; col &lt; 3; col++) {
					leaf.setImage(col, image);
					leaf.setText(col, "R" + iRoot + "B" + iBranch + "L" + iLeaf + "C" + col);
				}
			}
		}
	}
	shell.pack();
	shell.open();
	//tableTree.setEnabled(false);
	Display display = shell.getDisplay ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}
}

SN (2/6/01 4:50:16 PM)
	The "+" icons are fixed but the "-" icons are not.  Try expanding the tree.

SN (2/6/01 4:54:33 PM)
	No fix at this time.
PRODUCT VERSION:
032 jre


Retested. Both + and - are displayed correctly now.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4526" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>severe - Delete key is not redirected to editor (1FVXDST)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1) Open HTML editor</Line>
          <Line>2) Drag GIF from naviagtor onto editor</Line>
          <Line>3) Click in HTML editor</Line>
          <Line>Notice selection is navigator is grey not blue indicating it does not have</Line>
          <Line>focus. Cursor is in editor, indicating it does have focus. You can even type</Line>
          <Line>and the characters get entered into the editor</Line>
          <Line>4) Press Delete key, and you get the message asking to confirm delete</Line>
          <Line>of resources. The navigator is incorrectly getting the Delete key.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1) Open HTML editor
	2) Drag GIF from naviagtor onto editor
	3) Click in HTML editor
		Notice selection is navigator is grey not blue indicating it does not have
		focus. Cursor is in editor, indicating it does have focus. You can even type
		and the characters get entered into the editor
	4) Press Delete key, and you get the message asking to confirm delete
		of resources. The navigator is incorrectly getting the Delete key.

NOTES:

GDA (6/2/2000 2:04:49 PM)
	Asked DS to comment

DS (6/2/00 5:05:22 PM)
	When the drop occurs the ole control receives platform focus.  Unfortunately 
	the desktop and jface framework are unaware of this focus change, so the 
	desktop focus variable contains the old focus part.  When delete is hit 
	doDelete is sent to the old focus.

	Note: This problem also occurs if you open a page designer, click on the
	navigator, and then click on page designer.  The platform focus is in the
	ole control but the desktop focus is in the navigator.

	Veronika is looking for ways to hook focus events on the ole control so 
	we can update the desktop focus.

KH/VI (6/13/00 10:28:18 AM)

	ActiveX controls do not in general, provide focus change notifications. Since we
	wrote the HTML editor it would be possible for it to provide focus notifications but 
	there it is not possible to get MS Word to send focus notifications.  

	See: 1FW2S00: SWT:WIN98 - Need FocusIn event for OleClientSite 

KH (6/13/00 1:23:41 PM)

	Defer
Fixed.  Focus events are now sent.</WithStack>
    <WithOutStack>1) Open HTML editor
	2) Drag GIF from naviagtor onto editor
	3) Click in HTML editor
		Notice selection is navigator is grey not blue indicating it does not have
		focus. Cursor is in editor, indicating it does have focus. You can even type
		and the characters get entered into the editor
	4) Press Delete key, and you get the message asking to confirm delete
		of resources. The navigator is incorrectly getting the Delete key.

NOTES:

GDA (6/2/2000 2:04:49 PM)
	Asked DS to comment

DS (6/2/00 5:05:22 PM)
	When the drop occurs the ole control receives platform focus.  Unfortunately 
	the desktop and jface framework are unaware of this focus change, so the 
	desktop focus variable contains the old focus part.  When delete is hit 
	doDelete is sent to the old focus.

	Note: This problem also occurs if you open a page designer, click on the
	navigator, and then click on page designer.  The platform focus is in the
	ole control but the desktop focus is in the navigator.

	Veronika is looking for ways to hook focus events on the ole control so 
	we can update the desktop focus.

KH/VI (6/13/00 10:28:18 AM)

	ActiveX controls do not in general, provide focus change notifications. Since we
	wrote the HTML editor it would be possible for it to provide focus notifications but 
	there it is not possible to get MS Word to send focus notifications.  

	See: 1FW2S00: SWT:WIN98 - Need FocusIn event for OleClientSite 

KH (6/13/00 1:23:41 PM)

	Defer
Fixed.  Focus events are now sent.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4527" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>IME mode on J box overwrites scroll bar (1G91MAP)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="2">
        <Lines>
          <Line>1. Run the SwtStyledTextUseCase.</Line>
          <Line>2. Go into Japanese/IME mode.  Type until you get to the end of the line.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1. Run the SwtStyledTextUseCase.
2. Go into Japanese/IME mode.  Type until you get to the end of the line.

	Notice that the IME mode overwrites the scrollbar and doesn't wrap until the edge of the
	window is reached.  If you do the same thing in Notepad, the wrapping occurs when you 
	reach the left edge of the vertical scrollbar.

NOTES:

LK (2/12/01 12:29:07 PM)
	We are not doing anything funky here (i.e., just creating the StyledText with V_SCROLL style), but
	maybe we need to be doing something more.  SN, any idea why this is happening?

LK (2/12/01 2:09:43 PM)
	The font is not being initially set for the StyledText in the use case.  The use case was modified
	to not set the font initially.  The changes to the use case are released in the team stream.
	
SN (3/7/01 3:50:10 PM)
	I looked quickly and could not find a call to set the IME bounds to be the client area.
	Can we defer this for now?
PRODUCT VERSION:
SWT 0.059


FH, is this still happening on XP?
Yes, it does.
fixed in HEAD &gt; 20041013</WithStack>
    <WithOutStack>1. Run the SwtStyledTextUseCase.
2. Go into Japanese/IME mode.  Type until you get to the end of the line.

	Notice that the IME mode overwrites the scrollbar and doesn't wrap until the edge of the
	window is reached.  If you do the same thing in Notepad, the wrapping occurs when you 
	reach the left edge of the vertical scrollbar.

NOTES:

LK (2/12/01 12:29:07 PM)
	We are not doing anything funky here (i.e., just creating the StyledText with V_SCROLL style), but
	maybe we need to be doing something more.  SN, any idea why this is happening?

LK (2/12/01 2:09:43 PM)
	The font is not being initially set for the StyledText in the use case.  The use case was modified
	to not set the font initially.  The changes to the use case are released in the team stream.
	
SN (3/7/01 3:50:10 PM)
	I looked quickly and could not find a call to set the IME bounds to be the client area.
	Can we defer this for now?
PRODUCT VERSION:
SWT 0.059


FH, is this still happening on XP?
Yes, it does.
fixed in HEAD &gt; 20041013</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4528" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 98" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>Need FocusIn event for OleClientSite (1FW2S00)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="assignment">
        <location start="1409" end="1448" />
        <code>Control control = getControl(null);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1500" end="1511" />
        <code>()) return;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="2">
      <Enumeration lines="4">
        <Lines>
          <Line>1. Open an ole editor in the desktop.</Line>
          <Line>2. Click on the navigator.</Line>
          <Line>3. Click on the editor.</Line>
          <Line>4. Hit delete.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="36">
        <Lines>
          <Line>1) Change the navigator code such that it does not actually perform the</Line>
          <Line>Delete action if it does not have the focus:</Line>
          <Line />
          <Line>ResourceViewer::public void doDelete(final Window</Line>
          <Line>context) {</Line>
          <Line />
          <Line />
          <Line>if (control == null || !control.isFocusControl</Line>
          <Line />
          <Line>...</Line>
          <Line>}</Line>
          <Line />
          <Line>This covers the one particular scenario but there can be many</Line>
          <Line>others.  Also, the user will hit the delete key and nothing will</Line>
          <Line>happen.</Line>
          <Line />
          <Line>2) Modify the HPBCTL control to send a special event whenever it gets</Line>
          <Line>focus.  The PageDesigner would then have to listen for this</Line>
          <Line>special event and when it is received, call requestFocus() on</Line>
          <Line>itself.</Line>
          <Line />
          <Line>This would solve the problem for the HPBCTL Control but there</Line>
          <Line>would still be a problem with Word, Excel, Internet Explorer,</Line>
          <Line>DHTML Control (used in ActiveX Example).</Line>
          <Line />
          <Line>3) The OLE Container is notified of mouse down events.  We could</Line>
          <Line>perform a requestFocus on each mouse down event.</Line>
          <Line />
          <Line>Unfortunately, there are other ways in which an ActiveX Control</Line>
          <Line>can get the focus so it would not cover all cases</Line>
          <Line>and also it would case extra requestFocus calls to occur</Line>
          <Line>because we would not know if this were the first time the mouse</Line>
          <Line>was clicked.</Line>
          <Line />
          <Line>4) Change the framework so that it is not dependent on the FocusIn</Line>
          <Line>event.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Veronika has asked me to log a PR for this in SWT ..

1. Open an ole editor in the desktop.
2. Click on the navigator.
3. Click on the editor.
4. Hit delete.  

Result: Focus indication for the desktop ( black border ) is still navigator.  
However, platform focus is in the editor.  Hence, delete is performed by
the navigator even though editor has focus.  This is VERY BAD.
See 1FVXDST: ITPUI:ALL - severe - Delete key is not redirected to editor

Cause: The desktop is not aware that focus has been handed to
the ole control ( or more specifically, a window within the ole control ). 
There is
currently no way in SWT to hook this event.

Solution: Veronika says we need a hook to listen to FocusIn events on the ole 
control. 
This hook can be used to update the focus variable in the desktop.

NOTES:

VI (6/6/2000 12:02:13 PM)
	Unfortunately, ActiveX does not have a standard way for the Control or 
Document to let the container know when
	it has gained or lost the focus.

	There is a method IOleControlSite.OnFocus but this only gets called 
when the Control (does not apply to documents) changes
	from the activate to the inactive state or vice versa.  This is not 
sufficient.

	Some of the things we could do:
	1) Change the navigator code such that it does not actually perform the 
Delete action if it does not have the focus:

			ResourceViewer::public void doDelete(final Window 
context) {

				Control control = getControl(null);
				if (control == null || !control.isFocusControl
()) return;
				...
			}

		This covers the one particular scenario but there can be many 
others.  Also, the user will hit the delete key and nothing will
		happen.
	
	2) Modify the HPBCTL control to send a special event whenever it gets 
focus.  The PageDesigner would then have to listen for this
		special event and when it is received, call requestFocus() on 
itself.

		This would solve the problem for the HPBCTL Control but there 
would still be a problem with Word, Excel, Internet Explorer, 
		DHTML Control (used in ActiveX Example).

	3) The OLE Container is notified of mouse down events.  We could 
perform a requestFocus on each mouse down event.

		Unfortunately, there are other ways in which an ActiveX Control 
can get the focus so it would not cover all cases
		and also it would case extra requestFocus calls to occur 
because we would not know if this were the first time the mouse 
		was clicked.

	4) Change the framework so that it is not dependent on the FocusIn 
event.

KH (6/13/00 1:23:52 PM)

	Defer

	McQ (27/02/2001 10:19:48 AM) -
		VI to investigate if they have worked around this.
Focus in events provided in Eclipse 1.0</WithStack>
    <WithOutStack>Veronika has asked me to log a PR for this in SWT ..

1. Open an ole editor in the desktop.
2. Click on the navigator.
3. Click on the editor.
4. Hit delete.  

Result: Focus indication for the desktop ( black border ) is still navigator.  
However, platform focus is in the editor.  Hence, delete is performed by
the navigator even though editor has focus.  This is VERY BAD.
See 1FVXDST: ITPUI:ALL - severe - Delete key is not redirected to editor

Cause: The desktop is not aware that focus has been handed to
the ole control ( or more specifically, a window within the ole control ). 
There is
currently no way in SWT to hook this event.

Solution: Veronika says we need a hook to listen to FocusIn events on the ole 
control. 
This hook can be used to update the focus variable in the desktop.

NOTES:

VI (6/6/2000 12:02:13 PM)
	Unfortunately, ActiveX does not have a standard way for the Control or 
Document to let the container know when
	it has gained or lost the focus.

	There is a method IOleControlSite.OnFocus but this only gets called 
when the Control (does not apply to documents) changes
	from the activate to the inactive state or vice versa.  This is not 
sufficient.

	Some of the things we could do:
	1) Change the navigator code such that it does not actually perform the 
Delete action if it does not have the focus:

			ResourceViewer::public void doDelete(final Window 
context) {

				Control control = getControl(null);
				if (control == null || !control.isFocusControl
()) return;
				...
			}

		This covers the one particular scenario but there can be many 
others.  Also, the user will hit the delete key and nothing will
		happen.
	
	2) Modify the HPBCTL control to send a special event whenever it gets 
focus.  The PageDesigner would then have to listen for this
		special event and when it is received, call requestFocus() on 
itself.

		This would solve the problem for the HPBCTL Control but there 
would still be a problem with Word, Excel, Internet Explorer, 
		DHTML Control (used in ActiveX Example).

	3) The OLE Container is notified of mouse down events.  We could 
perform a requestFocus on each mouse down event.

		Unfortunately, there are other ways in which an ActiveX Control 
can get the focus so it would not cover all cases
		and also it would case extra requestFocus calls to occur 
because we would not know if this were the first time the mouse 
		was clicked.

	4) Change the framework so that it is not dependent on the FocusIn 
event.

KH (6/13/00 1:23:52 PM)

	Defer

	McQ (27/02/2001 10:19:48 AM) -
		VI to investigate if they have worked around this.
Focus in events provided in Eclipse 1.0</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4529" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>Closing external MS Word makes in-place MS Word disappear (1FWG9AR)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>In scenario E1.7, if you don't close the in-place MS Word in step 12, you can still open
the external editor in E1.8, step 4. When you do this, the in-place MS Word disappears
when you close the external MS Word application. The tab for it is still there, however,
and clicking on another tab and then on the sample.doc tab again brings it back.

NOTES:
	SS (6/13/00 9:30:51 AM)
Moving to SWT for comment. 

	KH/VI (6/15/00 9:41:56 AM)

	This is the way Word works. Defer
PRODUCT VERSION:
0.023 JDK


Assigning to proper owner. ;-)

Fixed.</WithStack>
    <WithOutStack>In scenario E1.7, if you don't close the in-place MS Word in step 12, you can still open
the external editor in E1.8, step 4. When you do this, the in-place MS Word disappears
when you close the external MS Word application. The tab for it is still there, however,
and clicking on another tab and then on the sample.doc tab again brings it back.

NOTES:
	SS (6/13/00 9:30:51 AM)
Moving to SWT for comment. 

	KH/VI (6/15/00 9:41:56 AM)

	This is the way Word works. Defer
PRODUCT VERSION:
0.023 JDK


Assigning to proper owner. ;-)

Fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4530" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>RichText: Resize resets top index (1FX9KLM)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="6">
      <source_code type="import">
        <location start="168" end="191" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="192" end="220" />
        <code>import com.ibm.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="221" end="251" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="252" end="280" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="281" end="310" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="312" end="1274" />
        <code>public class PR_1FX8BHZ {
	Shell shell;
	RichText edit;

void create() {
	GridLayout layout = new GridLayout();
	GridData spec = new GridData();;
	shell = new Shell();
	edit = new RichText(shell, SWT.MULTI | SWT.HORIZONTAL | SWT.VERTICAL);
	
	shell.setLayout(layout);
	spec.grabExcessVerticalSpace = true;
	spec.grabExcessHorizontalSpace = true;
	spec.horizontalAlignment = spec.FILL;	
	spec.verticalAlignment = spec.FILL;
	edit.setLayoutData(spec);
	edit.setText("line 1line 1line 1line 1line 1line 1line 1line 1\r\nline 2\r\nline 3\r\nline 4\r\nline 5\r\nline 6\r\nline 7\r\nline 8\r\nline 9\r\nline 5\r\nline 6\r\nline 7\r\nline 8\r\nline 9");
	shell.open();
	shell.setSize(200, 200);
	edit.setTopIndex(5);	
}

public static void main(String arguments[]) {
	PR_1FX8BHZ pr = new PR_1FX8BHZ();
	pr.create();
	pr.run();
}

void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Run the code below. Resize the shell so that the scroll bars are no longer neccessary 
and are disabled.
When the scroll bars are disabled, the top index changes to 0.


import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class PR_1FX8BHZ {
	Shell shell;
	RichText edit;

void create() {
	GridLayout layout = new GridLayout();
	GridData spec = new GridData();;
	shell = new Shell();
	edit = new RichText(shell, SWT.MULTI | SWT.HORIZONTAL | SWT.VERTICAL);
	
	shell.setLayout(layout);
	spec.grabExcessVerticalSpace = true;
	spec.grabExcessHorizontalSpace = true;
	spec.horizontalAlignment = spec.FILL;	
	spec.verticalAlignment = spec.FILL;
	edit.setLayoutData(spec);
	edit.setText("line 1line 1line 1line 1line 1line 1line 1line 1\r\nline 2\r\nline 3\r\nline 4\r\nline 5\r\nline 6\r\nline 7\r\nline 8\r\nline 9\r\nline 5\r\nline 6\r\nline 7\r\nline 8\r\nline 9");
	shell.open();
	shell.setSize(200, 200);
	edit.setTopIndex(5);	
}

public static void main(String arguments[]) {
	PR_1FX8BHZ pr = new PR_1FX8BHZ();
	pr.create();
	pr.run();
}

void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}




NOTES:

JM (07/04/00 11:17:03)
	We noticed this behaviour in WordPad, it seems to be a feature of the rich text control.
	How important is this? Does it cause the breakpoint indicators or other markers to fail?

KR (7/7/00 10:30:40 AM)
	See 1FX8BHZ. All that happens is that people loose their source position and have to
	scroll and find the old code location again - a major annoyance until you learn not to make 
	the scroll bars go away.

SN (7/13/00 10:25:49 AM)
	We have tracked this down to a bug in Windows that occurs when ES_DISABLENOSCROLL
	is used  with the RichText.  When this style is not set, the text widget scroll bars appear
	and disappear as necessary (like the List widget).  The bug cannot be reproduced in
	Wordpad.exe because they do not set this style.

	We set this style bit to be consistent with the plain text widget and because people
	expect the scroll bars in a text widget to be static.  We could not set this bit, but we
	would need to do lots of testing to make sure nothing subtle breaks.

	McQ (2/2/01 3:27:58 PM) -
		Not very interesting now that Eclipse has switched to StyledText and
		the ehWT work uses only Text.
PRODUCT VERSION:
0.43 Patch 6


RichText no longer exists.</WithStack>
    <WithOutStack>Run the code below. Resize the shell so that the scroll bars are no longer neccessary 
and are disabled.
When the scroll bars are disabled, the top index changes to 0.


import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;

public class PR_1FX8BHZ {
	Shell shell;
	RichText edit;

void create() {
	GridLayout layout = new GridLayout();
	GridData spec = new GridData();;
	shell = new Shell();
	edit = new RichText(shell, SWT.MULTI | SWT.HORIZONTAL | SWT.VERTICAL);
	
	shell.setLayout(layout);
	spec.grabExcessVerticalSpace = true;
	spec.grabExcessHorizontalSpace = true;
	spec.horizontalAlignment = spec.FILL;	
	spec.verticalAlignment = spec.FILL;
	edit.setLayoutData(spec);
	edit.setText("line 1line 1line 1line 1line 1line 1line 1line 1\r\nline 2\r\nline 3\r\nline 4\r\nline 5\r\nline 6\r\nline 7\r\nline 8\r\nline 9\r\nline 5\r\nline 6\r\nline 7\r\nline 8\r\nline 9");
	shell.open();
	shell.setSize(200, 200);
	edit.setTopIndex(5);	
}

public static void main(String arguments[]) {
	PR_1FX8BHZ pr = new PR_1FX8BHZ();
	pr.create();
	pr.run();
}

void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}




NOTES:

JM (07/04/00 11:17:03)
	We noticed this behaviour in WordPad, it seems to be a feature of the rich text control.
	How important is this? Does it cause the breakpoint indicators or other markers to fail?

KR (7/7/00 10:30:40 AM)
	See 1FX8BHZ. All that happens is that people loose their source position and have to
	scroll and find the old code location again - a major annoyance until you learn not to make 
	the scroll bars go away.

SN (7/13/00 10:25:49 AM)
	We have tracked this down to a bug in Windows that occurs when ES_DISABLENOSCROLL
	is used  with the RichText.  When this style is not set, the text widget scroll bars appear
	and disappear as necessary (like the List widget).  The bug cannot be reproduced in
	Wordpad.exe because they do not set this style.

	We set this style bit to be consistent with the plain text widget and because people
	expect the scroll bars in a text widget to be static.  We could not set this bit, but we
	would need to do lots of testing to make sure nothing subtle breaks.

	McQ (2/2/01 3:27:58 PM) -
		Not very interesting now that Eclipse has switched to StyledText and
		the ehWT work uses only Text.
PRODUCT VERSION:
0.43 Patch 6


RichText no longer exists.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4531" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>excessive flashing on shift select in list (1FWFZKZ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>*	Create the sample servlet &amp; jsp web example (this will give you lots of 
files)
*	In the navigator
*	Go into one of the folders with many files (e.g. servlets)
*	Select the top file
*	Shift select the next file.
*	Shift select the next file below that

BUG
As you gradually shift select one file after the next (to extend the selection) 
you will see the entire
list redo its selection.

NOTES:

SN (6/13/00 10:58:00 AM)
	It's not a list, it's a tree (this is important).  The flashing is 
caused by our implementation
	of muti-selection in the Windows tree.  Tough to fix because we are 
doing serious tweaking
	behind the scenes to support this feature because Windows does not 
support it.

GDA (6/16/2000 12:01:53 PM)
	We should defer for now but need to revisit the *TREE* issues 
	(I think there is a list now of issues...or perhaps its a tree of 
issues)
	after tech preview. 

	McQ (2/2/01 3:16:57 PM) -
		Need to consider this again in the context of building a custom
		tree control.
PRODUCT VERSION:

023


No further action for R2.0
Moving from Later.
This is a really old problem report that we are unable to do anything about.  
Sorry about that.  Closing.</WithStack>
    <WithOutStack>*	Create the sample servlet &amp; jsp web example (this will give you lots of 
files)
*	In the navigator
*	Go into one of the folders with many files (e.g. servlets)
*	Select the top file
*	Shift select the next file.
*	Shift select the next file below that

BUG
As you gradually shift select one file after the next (to extend the selection) 
you will see the entire
list redo its selection.

NOTES:

SN (6/13/00 10:58:00 AM)
	It's not a list, it's a tree (this is important).  The flashing is 
caused by our implementation
	of muti-selection in the Windows tree.  Tough to fix because we are 
doing serious tweaking
	behind the scenes to support this feature because Windows does not 
support it.

GDA (6/16/2000 12:01:53 PM)
	We should defer for now but need to revisit the *TREE* issues 
	(I think there is a list now of issues...or perhaps its a tree of 
issues)
	after tech preview. 

	McQ (2/2/01 3:16:57 PM) -
		Need to consider this again in the context of building a custom
		tree control.
PRODUCT VERSION:

023


No further action for R2.0
Moving from Later.
This is a really old problem report that we are unable to do anything about.  
Sorry about that.  Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4532" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>Empty lines created in word documents when selecting text (1FWG8SP)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>create a new web project
select the web folder
pop up the menu, select new file
type test.doc , finish
in the word doc, type "blablabla"
Select the text, keep your left button pressed and move your mouse up
As you see, some empty lines have been created at the top...


NOTES:

CRJ (6/13/2000 12:32:56 PM)
	Moving to SWT

KH (6/16/00 9:07:21 AM)

	The behavior you are seeing is part of the Word ActiveX control.
PRODUCT VERSION:
023 jdk
WINNT


We will not fix the behavior of Word.</WithStack>
    <WithOutStack>create a new web project
select the web folder
pop up the menu, select new file
type test.doc , finish
in the word doc, type "blablabla"
Select the text, keep your left button pressed and move your mouse up
As you see, some empty lines have been created at the top...


NOTES:

CRJ (6/13/2000 12:32:56 PM)
	Moving to SWT

KH (6/16/00 9:07:21 AM)

	The behavior you are seeing is part of the Word ActiveX control.
PRODUCT VERSION:
023 jdk
WINNT


We will not fix the behavior of Word.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4533" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 2000" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Cheese when resizing toolbar (1FWL943)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="17">
      <source_code type="package">
        <location start="516" end="549" />
        <code>package com.oti.dbaeumer.swt.prs;</code>
      </source_code>
      <source_code type="import">
        <location start="550" end="572" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="573" end="603" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="604" end="633" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="635" end="2215" />
        <code>public class PR_1FUC0NM {
public static void main(String[] args) {
	Display display = Display.getDefault();
	@@@@@ FIX THIS PATH @@@@@
	Image image = new Image(display, PR1FUC0NM.class.getResourceAsStream("test1.gif"));
	final Shell shell = new Shell(display);
	final ToolBar toolBar = new ToolBar(shell, SWT.FLAT | SWT.WRAP);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
	Combo combo = new Combo(toolBar, SWT.NULL);
	for (int i = 0; i &lt; 16; i++) {
		combo.add("Item " + i);
	}
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	ToolItem item = new ToolItem(toolBar, SWT.SEPARATOR);
	item.setWidth(100);
	item.setControl(combo);
	new ToolItem(toolBar, SWT.SEPARATOR);
	new ToolItem(toolBar, SWT.NULL).setImage(image);
	toolBar.pack();
	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = toolBar.getSize();
			Rectangle rect = shell.getClientArea();
			toolBar.setSize(rect.width, size.y);
			int toolHeight = toolBar.getSize().y, count = toolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = toolBar.getItems()[count - 1].getBounds();
				toolBar.setSize(rect.width, toolHeight = itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}</code>
      </source_code>
      <source_code type="package">
        <location start="2460" end="2474" />
        <code>package steve;</code>
      </source_code>
      <source_code type="import">
        <location start="2475" end="2501" />
        <code>import org.eclipse.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="2502" end="2536" />
        <code>import org.eclipse.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="2537" end="2570" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="2571" end="2588" />
        <code>import java.io.*;</code>
      </source_code>
      <source_code type="class">
        <location start="2590" end="4421" />
        <code>public class PR_4533 {
public static void main(String[] args) {
	Display display = Display.getDefault();
	Image image = null;
	try {
		image = new Image(display, new FileInputStream
("j:\\teamswt\\malice\\cello.gif"));
	} catch (Exception ex) {
		System.out.println("failed");
		System.exit(0);
	}
	final Shell shell = new Shell(display);
	final ToolBar toolBar = new ToolBar(shell, SWT.FLAT | SWT.WRAP);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | 
SWT.V_SCROLL);
//	Combo combo = new Combo(toolBar, SWT.NULL);
//	for (int i = 0; i &lt; 16; i++) {
//		combo.add("Item " + i);
//	}
	Button combo = new Button (toolBar, SWT.PUSH);
	combo.setText ("Fred");
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	ToolItem item = new ToolItem(toolBar, SWT.SEPARATOR);
	item.setWidth(100);
	item.setControl(combo);
	new ToolItem(toolBar, SWT.SEPARATOR);
	new ToolItem(toolBar, SWT.NULL).setImage(image);
	toolBar.pack();
	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = toolBar.getSize();
			Rectangle rect = shell.getClientArea();
			toolBar.setSize(rect.width, size.y);
//			int toolHeight = size.y /*toolBar.getSize().y*/, count 
= toolBar.getItemCount();
			int toolHeight = toolBar.getSize().y, count = 
toolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = toolBar.getItems()[count - 
1].getBounds();
				toolBar.setSize(rect.width, toolHeight = 
itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, 
rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}</code>
      </source_code>
      <source_code type="import">
        <location start="6537" end="6562" />
        <code>import org.eclipse.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="6563" end="6597" />
        <code>import org.eclipse.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="6598" end="6631" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="6632" end="6664" />
        <code>import org.eclipse.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="6665" end="6697" />
        <code>import org.eclipse.swt.events.*;</code>
      </source_code>
      <source_code type="class">
        <location start="6699" end="8698" />
        <code>public class PR_1FUC0NM {
public static void main(String[] args) {
	Display display = Display.getDefault();
        @@@@ fix this path @@@@
	Image image = new Image(display, "j:\\teamswt\\malice\\cello.gif");
	final Shell shell = new Shell(display);
    final CoolBar coolBar = new CoolBar(shell, SWT.BORDER | SWT.FLAT);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | 
SWT.V_SCROLL);

	ToolBar toolBar = new ToolBar(coolBar, SWT.FLAT);
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	toolBar.pack();
    CoolItem coolItem = new CoolItem(coolBar, SWT.DROP_DOWN);
    coolItem.setControl(toolBar);
    Point size = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    Point pt = coolItem.computeSize (size.x, size.y);
    coolItem.setSize(pt);
    coolItem.setMinimumSize(24, pt.y);

	Combo combo = new Combo(coolBar, SWT.NULL);
	for (int i = 0; i &lt; 16; i++) {
		combo.add("Item " + i);
	}
    coolItem = new CoolItem(coolBar, SWT.NONE);
    coolItem.setControl(combo);
    size = combo.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    coolItem.setSize(coolItem.computeSize (size.x, size.y));
    coolItem.setMinimumSize(combo.computeSize(SWT.DEFAULT, SWT.DEFAULT, true));

	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = coolBar.getSize();
			Rectangle rect = shell.getClientArea();
			coolBar.setSize(rect.width, size.y);
			int toolHeight = coolBar.getSize().y, count = 
coolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = coolBar.getItems()[count - 
1].getBounds();
				coolBar.setSize(rect.width, toolHeight = 
itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, 
rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="2">
      <Enumeration lines="4">
        <Lines>
          <Line>a) There is no such thing as "wrap" any more - CoolItems can be repositioned by</Line>
          <Line>the user.</Line>
          <Line>b) There does not seem to be any more cheese or anything - I will send you a</Line>
          <Line>little example that shows this.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="18">
        <Lines>
          <Line>1) I believe that the first type of cheese mentioned ("the line below the combo</Line>
          <Line>box is all broken") is no longer a problem - I can't see it any more.</Line>
          <Line />
          <Line>2) If I use 16 x 16 icons, the vertical line cheese (a separator behind the</Line>
          <Line>combo) does not show up because the combo is the same height as the icons. (I</Line>
          <Line>don't know if that helps, because maybe you need to have 24 x 32 icons, but I</Line>
          <Line>just thought I'd mention it).</Line>
          <Line />
          <Line>3) I agree that the wrap behavior is unfortunately not correct. The toolbar</Line>
          <Line>thinks that the item is a separator, so the toolbar doesn't think it needs to</Line>
          <Line>wrap until the next icon to the left wraps.</Line>
          <Line />
          <Line>4) Eclipse now uses CoolBars instead of ToolBars. I believe that if you put</Line>
          <Line>your combo into a CoolBar, this fixes all of your problems, because:</Line>
          <Line>a) There is no such thing as "wrap" any more - CoolItems can be repositioned by</Line>
          <Line>the user.</Line>
          <Line>b) There does not seem to be any more cheese or anything - I will send you a</Line>
          <Line>little example that shows this.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I was retesting PR 1FUC0NM.

I used the main method suggested by Steve and included below.
For my image I used a 24 by 32 pixel gif.

Run the example.
Resize the toolbar so that only part of the combo box is visible.
Now make the toolbar slightly bigger - notice that the line below the combo box is all broken.

Also, when resizing the toolbar, the combo box does not get wrapped to the next line unless a
wrap is required by one of the images.
Also, there is vertical line behind the combo box which looks funny.

package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1FUC0NM {
public static void main(String[] args) {
	Display display = Display.getDefault();
	@@@@@ FIX THIS PATH @@@@@
	Image image = new Image(display, PR1FUC0NM.class.getResourceAsStream("test1.gif"));
	final Shell shell = new Shell(display);
	final ToolBar toolBar = new ToolBar(shell, SWT.FLAT | SWT.WRAP);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
	Combo combo = new Combo(toolBar, SWT.NULL);
	for (int i = 0; i &lt; 16; i++) {
		combo.add("Item " + i);
	}
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	ToolItem item = new ToolItem(toolBar, SWT.SEPARATOR);
	item.setWidth(100);
	item.setControl(combo);
	new ToolItem(toolBar, SWT.SEPARATOR);
	new ToolItem(toolBar, SWT.NULL).setImage(image);
	toolBar.pack();
	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = toolBar.getSize();
			Rectangle rect = shell.getClientArea();
			toolBar.setSize(rect.width, size.y);
			int toolHeight = toolBar.getSize().y, count = toolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = toolBar.getItems()[count - 1].getBounds();
				toolBar.setSize(rect.width, toolHeight = itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}

NOTES:

SN (2/5/01 5:32:10 PM)
	Platform problem.  No work around at this time.
PRODUCT VERSION:

25a VA Java
WIN 2000


We have some comboboxes on the toolbar, so this bug is critical for us.

Here is new code that shows the cheese problem:

package steve;

import org.eclipse.swt.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.widgets.*;
import java.io.*;

public class PR_4533 {
public static void main(String[] args) {
	Display display = Display.getDefault();
	Image image = null;
	try {
		image = new Image(display, new FileInputStream
("j:\\teamswt\\malice\\cello.gif"));
	} catch (Exception ex) {
		System.out.println("failed");
		System.exit(0);
	}
	final Shell shell = new Shell(display);
	final ToolBar toolBar = new ToolBar(shell, SWT.FLAT | SWT.WRAP);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | 
SWT.V_SCROLL);
//	Combo combo = new Combo(toolBar, SWT.NULL);
//	for (int i = 0; i &lt; 16; i++) {
//		combo.add("Item " + i);
//	}
	Button combo = new Button (toolBar, SWT.PUSH);
	combo.setText ("Fred");
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	ToolItem item = new ToolItem(toolBar, SWT.SEPARATOR);
	item.setWidth(100);
	item.setControl(combo);
	new ToolItem(toolBar, SWT.SEPARATOR);
	new ToolItem(toolBar, SWT.NULL).setImage(image);
	toolBar.pack();
	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = toolBar.getSize();
			Rectangle rect = shell.getClientArea();
			toolBar.setSize(rect.width, size.y);
//			int toolHeight = size.y /*toolBar.getSize().y*/, count 
= toolBar.getItemCount();
			int toolHeight = toolBar.getSize().y, count = 
toolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = toolBar.getItems()[count - 
1].getBounds();
				toolBar.setSize(rect.width, toolHeight = 
itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, 
rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}
If this bug is not fixed in 2.0, at least we need workaround for this.
Please let me know status of this bug ?
Please let me know the status. Freeze will come soon.
Why Windows SWT has this bug, while Linux SWT works fine?
We are not going to fix this for 2.0.
It is considered very low priority because eclipse removed all of its combo 
boxes from the toolbars.
The difference between windows and linux is because this is a bug in the 
Windows OS that we will have to work around.
Why this is considered as priority low ?
Eclipse is a platform not an application.
Any tools on the Eclipse platform can put any control on Toolbar.
That is a functionality which is provided for the tool developer of Eclipse.

Actually our tool want to put combobox on the toolbar, 
so this bug is critical for us. If cannot fix, please give me workaround. 


I have a couple of observations and questions for you.

1) I believe that the first type of cheese mentioned ("the line below the combo 
box is all broken") is no longer a problem - I can't see it any more.

2) If I use 16 x 16 icons, the vertical line cheese (a separator behind the 
combo) does not show up because the combo is the same height as the icons. (I 
don't know if that helps, because maybe you need to have 24 x 32 icons, but I 
just thought I'd mention it).

3) I agree that the wrap behavior is unfortunately not correct. The toolbar 
thinks that the item is a separator, so the toolbar doesn't think it needs to 
wrap until the next icon to the left wraps.

4) Eclipse now uses CoolBars instead of ToolBars. I believe that if you put 
your combo into a CoolBar, this fixes all of your problems, because:
a) There is no such thing as "wrap" any more - CoolItems can be repositioned by 
the user.
b) There does not seem to be any more cheese or anything - I will send you a 
little example that shows this.

So please let us know if the latest stable build of Eclipse (called F1) works 
for you, and if you are happy with having CoolBars instead of ToolBars.


Here is the little class that shows how to rewrite your little SWT example code 
to use CoolBar:
import org.eclipse.swt.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.events.*;

public class PR_1FUC0NM {
public static void main(String[] args) {
	Display display = Display.getDefault();
        @@@@ fix this path @@@@
	Image image = new Image(display, "j:\\teamswt\\malice\\cello.gif");
	final Shell shell = new Shell(display);
    final CoolBar coolBar = new CoolBar(shell, SWT.BORDER | SWT.FLAT);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | 
SWT.V_SCROLL);

	ToolBar toolBar = new ToolBar(coolBar, SWT.FLAT);
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	toolBar.pack();
    CoolItem coolItem = new CoolItem(coolBar, SWT.DROP_DOWN);
    coolItem.setControl(toolBar);
    Point size = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    Point pt = coolItem.computeSize (size.x, size.y);
    coolItem.setSize(pt);
    coolItem.setMinimumSize(24, pt.y);

	Combo combo = new Combo(coolBar, SWT.NULL);
	for (int i = 0; i &lt; 16; i++) {
		combo.add("Item " + i);
	}
    coolItem = new CoolItem(coolBar, SWT.NONE);
    coolItem.setControl(combo);
    size = combo.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    coolItem.setSize(coolItem.computeSize (size.x, size.y));
    coolItem.setMinimumSize(combo.computeSize(SWT.DEFAULT, SWT.DEFAULT, true));

	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = coolBar.getSize();
			Rectangle rect = shell.getClientArea();
			coolBar.setSize(rect.width, size.y);
			int toolHeight = coolBar.getSize().y, count = 
coolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = coolBar.getItems()[count - 
1].getBounds();
				coolBar.setSize(rect.width, toolHeight = 
itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, 
rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}


SSQ and I fixed the cheese problem.  The wrap problem is Windows behavior.  I'm 
not sure how to work around this.
Thank you for the comment. 
I understand the wrap problem is come from Windows problem.
We have tried to implement our toolbar on Coolbar on F1 build.
Then, we have some troubles. Another bug (17477) is opened to track the problem.
The cheese is fixed.  The wrap problem is a bug in Windows that I cannot work 
around at this time.  I'm closing this PR because the other PR's cover the 
remaining issues.</WithStack>
    <WithOutStack>I was retesting PR 1FUC0NM.

I used the main method suggested by Steve and included below.
For my image I used a 24 by 32 pixel gif.

Run the example.
Resize the toolbar so that only part of the combo box is visible.
Now make the toolbar slightly bigger - notice that the line below the combo box is all broken.

Also, when resizing the toolbar, the combo box does not get wrapped to the next line unless a
wrap is required by one of the images.
Also, there is vertical line behind the combo box which looks funny.

package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1FUC0NM {
public static void main(String[] args) {
	Display display = Display.getDefault();
	@@@@@ FIX THIS PATH @@@@@
	Image image = new Image(display, PR1FUC0NM.class.getResourceAsStream("test1.gif"));
	final Shell shell = new Shell(display);
	final ToolBar toolBar = new ToolBar(shell, SWT.FLAT | SWT.WRAP);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
	Combo combo = new Combo(toolBar, SWT.NULL);
	for (int i = 0; i &lt; 16; i++) {
		combo.add("Item " + i);
	}
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	ToolItem item = new ToolItem(toolBar, SWT.SEPARATOR);
	item.setWidth(100);
	item.setControl(combo);
	new ToolItem(toolBar, SWT.SEPARATOR);
	new ToolItem(toolBar, SWT.NULL).setImage(image);
	toolBar.pack();
	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = toolBar.getSize();
			Rectangle rect = shell.getClientArea();
			toolBar.setSize(rect.width, size.y);
			int toolHeight = toolBar.getSize().y, count = toolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = toolBar.getItems()[count - 1].getBounds();
				toolBar.setSize(rect.width, toolHeight = itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}

NOTES:

SN (2/5/01 5:32:10 PM)
	Platform problem.  No work around at this time.
PRODUCT VERSION:

25a VA Java
WIN 2000


We have some comboboxes on the toolbar, so this bug is critical for us.

Here is new code that shows the cheese problem:

package steve;

import org.eclipse.swt.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.widgets.*;
import java.io.*;

public class PR_4533 {
public static void main(String[] args) {
	Display display = Display.getDefault();
	Image image = null;
	try {
		image = new Image(display, new FileInputStream
("j:\\teamswt\\malice\\cello.gif"));
	} catch (Exception ex) {
		System.out.println("failed");
		System.exit(0);
	}
	final Shell shell = new Shell(display);
	final ToolBar toolBar = new ToolBar(shell, SWT.FLAT | SWT.WRAP);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | 
SWT.V_SCROLL);
//	Combo combo = new Combo(toolBar, SWT.NULL);
//	for (int i = 0; i &lt; 16; i++) {
//		combo.add("Item " + i);
//	}
	Button combo = new Button (toolBar, SWT.PUSH);
	combo.setText ("Fred");
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	ToolItem item = new ToolItem(toolBar, SWT.SEPARATOR);
	item.setWidth(100);
	item.setControl(combo);
	new ToolItem(toolBar, SWT.SEPARATOR);
	new ToolItem(toolBar, SWT.NULL).setImage(image);
	toolBar.pack();
	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = toolBar.getSize();
			Rectangle rect = shell.getClientArea();
			toolBar.setSize(rect.width, size.y);
//			int toolHeight = size.y /*toolBar.getSize().y*/, count 
= toolBar.getItemCount();
			int toolHeight = toolBar.getSize().y, count = 
toolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = toolBar.getItems()[count - 
1].getBounds();
				toolBar.setSize(rect.width, toolHeight = 
itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, 
rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}
If this bug is not fixed in 2.0, at least we need workaround for this.
Please let me know status of this bug ?
Please let me know the status. Freeze will come soon.
Why Windows SWT has this bug, while Linux SWT works fine?
We are not going to fix this for 2.0.
It is considered very low priority because eclipse removed all of its combo 
boxes from the toolbars.
The difference between windows and linux is because this is a bug in the 
Windows OS that we will have to work around.
Why this is considered as priority low ?
Eclipse is a platform not an application.
Any tools on the Eclipse platform can put any control on Toolbar.
That is a functionality which is provided for the tool developer of Eclipse.

Actually our tool want to put combobox on the toolbar, 
so this bug is critical for us. If cannot fix, please give me workaround. 


I have a couple of observations and questions for you.

1) I believe that the first type of cheese mentioned ("the line below the combo 
box is all broken") is no longer a problem - I can't see it any more.

2) If I use 16 x 16 icons, the vertical line cheese (a separator behind the 
combo) does not show up because the combo is the same height as the icons. (I 
don't know if that helps, because maybe you need to have 24 x 32 icons, but I 
just thought I'd mention it).

3) I agree that the wrap behavior is unfortunately not correct. The toolbar 
thinks that the item is a separator, so the toolbar doesn't think it needs to 
wrap until the next icon to the left wraps.

4) Eclipse now uses CoolBars instead of ToolBars. I believe that if you put 
your combo into a CoolBar, this fixes all of your problems, because:
a) There is no such thing as "wrap" any more - CoolItems can be repositioned by 
the user.
b) There does not seem to be any more cheese or anything - I will send you a 
little example that shows this.

So please let us know if the latest stable build of Eclipse (called F1) works 
for you, and if you are happy with having CoolBars instead of ToolBars.


Here is the little class that shows how to rewrite your little SWT example code 
to use CoolBar:
import org.eclipse.swt.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.events.*;

public class PR_1FUC0NM {
public static void main(String[] args) {
	Display display = Display.getDefault();
        @@@@ fix this path @@@@
	Image image = new Image(display, "j:\\teamswt\\malice\\cello.gif");
	final Shell shell = new Shell(display);
    final CoolBar coolBar = new CoolBar(shell, SWT.BORDER | SWT.FLAT);
	final Text text = new Text(shell, SWT.BORDER | SWT.H_SCROLL | 
SWT.V_SCROLL);

	ToolBar toolBar = new ToolBar(coolBar, SWT.FLAT);
	for (int i = 0; i &lt; 5; i++) {
		new ToolItem(toolBar, SWT.PUSH).setImage(image);
		new ToolItem(toolBar, SWT.SEPARATOR);
	}
	toolBar.pack();
    CoolItem coolItem = new CoolItem(coolBar, SWT.DROP_DOWN);
    coolItem.setControl(toolBar);
    Point size = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    Point pt = coolItem.computeSize (size.x, size.y);
    coolItem.setSize(pt);
    coolItem.setMinimumSize(24, pt.y);

	Combo combo = new Combo(coolBar, SWT.NULL);
	for (int i = 0; i &lt; 16; i++) {
		combo.add("Item " + i);
	}
    coolItem = new CoolItem(coolBar, SWT.NONE);
    coolItem.setControl(combo);
    size = combo.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    coolItem.setSize(coolItem.computeSize (size.x, size.y));
    coolItem.setMinimumSize(combo.computeSize(SWT.DEFAULT, SWT.DEFAULT, true));

	Listener resizeListener = new Listener() {
		public void handleEvent(Event event) {
			Point size = coolBar.getSize();
			Rectangle rect = shell.getClientArea();
			coolBar.setSize(rect.width, size.y);
			int toolHeight = coolBar.getSize().y, count = 
coolBar.getItemCount();
			if (count &gt; 0) {
				Rectangle itemRect = coolBar.getItems()[count - 
1].getBounds();
				coolBar.setSize(rect.width, toolHeight = 
itemRect.y + itemRect.height);
			}
			text.setBounds(rect.x, rect.y + toolHeight, rect.width, 
rect.height - toolHeight);
		}
	};
	shell.addListener(SWT.Resize, resizeListener);
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	image.dispose();
}
}


SSQ and I fixed the cheese problem.  The wrap problem is Windows behavior.  I'm 
not sure how to work around this.
Thank you for the comment. 
I understand the wrap problem is come from Windows problem.
We have tried to implement our toolbar on Coolbar on F1 build.
Then, we have some troubles. Another bug (17477) is opened to track the problem.
The cheese is fixed.  The wrap problem is a bug in Windows that I cannot work 
around at this time.  I'm closing this PR because the other PR's cover the 
remaining issues.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4534" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Flashing when computeSize called on Toolbar (1FWLD1E)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="package">
        <location start="478" end="511" />
        <code>package com.oti.dbaeumer.swt.prs;</code>
      </source_code>
      <source_code type="import">
        <location start="512" end="534" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="535" end="565" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="566" end="595" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="597" end="2039" />
        <code>public class PR1FUC0NM {
	public static void main(String[] args) {
		
		Shell shell= new Shell();

		ToolBar tb= new ToolBar(shell,  SWT.FLAT | SWT.WRAP | SWT.BORDER);

		@@@ Use an existing image
		Image image = new Image(shell.getDisplay(), PR1FUC0NM.class.getResourceAsStream("test1.gif"));

		Combo combo= new Combo(tb, SWT.NULL);
		for (int i= 0; i &lt; 10; i++)
			combo.add("item " + i);
				
		ToolItem ti;
				
		for (int i= 0; i &lt; 5; i++) {
			ti= new ToolItem(tb, SWT.NULL);
			ti.setImage(image);		
			ti= new ToolItem(tb, SWT.SEPARATOR);
		}	

		ti= new ToolItem(tb, SWT.SEPARATOR);
		ti.setWidth(100);
		ti.setControl(combo);			
		ti= new ToolItem(tb, SWT.SEPARATOR);

		ti= new ToolItem(tb, SWT.NULL);
		ti.setImage(image);

		Listener resizeListener= new Listener() {
			public void handleEvent(Event event) {
				Shell shell= (Shell) event.widget;
				Rectangle rect= shell.getClientArea();
				ToolBar toolBar= (ToolBar) shell.getChildren()[0];
				Point size= toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
				if (size.x &gt; rect.width) {
					size= toolBar.computeSize(rect.width, SWT.DEFAULT, true);
				}
				toolBar.setBounds(rect.width - size.x, 0, size.x, size.y);
				System.out.println("Size : " + size);
			}
		};
		shell.addListener(SWT.Resize, resizeListener);

		shell.open();
		
		Display display= shell.getDisplay();
		while (!shell.isDisposed())
			if (!display.readAndDispatch())
				display.sleep();
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1.) Run the attached test case</Line>
          <Line>2.) Resize the shell</Line>
          <Line>3.) Look for flashing</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>While fixing PR "1FUC0NM: SWT:WINNT - ToolBar.computeSize calculates wrong size if control is embedded"
	it was noticed that there is flashing when computeSize is called.

	The worong size issue in PR 1FUC0NM was fixed but the flashing still occurs.


	1.) Run the attached test case
	2.) Resize the shell
	3.) Look for flashing

	========================= Test Case =======================================
	Note: you have to change the code so that it uses an existing image.

package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR1FUC0NM {
	public static void main(String[] args) {
		
		Shell shell= new Shell();

		ToolBar tb= new ToolBar(shell,  SWT.FLAT | SWT.WRAP | SWT.BORDER);

		@@@ Use an existing image
		Image image = new Image(shell.getDisplay(), PR1FUC0NM.class.getResourceAsStream("test1.gif"));

		Combo combo= new Combo(tb, SWT.NULL);
		for (int i= 0; i &lt; 10; i++)
			combo.add("item " + i);
				
		ToolItem ti;
				
		for (int i= 0; i &lt; 5; i++) {
			ti= new ToolItem(tb, SWT.NULL);
			ti.setImage(image);		
			ti= new ToolItem(tb, SWT.SEPARATOR);
		}	

		ti= new ToolItem(tb, SWT.SEPARATOR);
		ti.setWidth(100);
		ti.setControl(combo);			
		ti= new ToolItem(tb, SWT.SEPARATOR);

		ti= new ToolItem(tb, SWT.NULL);
		ti.setImage(image);

		Listener resizeListener= new Listener() {
			public void handleEvent(Event event) {
				Shell shell= (Shell) event.widget;
				Rectangle rect= shell.getClientArea();
				ToolBar toolBar= (ToolBar) shell.getChildren()[0];
				Point size= toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
				if (size.x &gt; rect.width) {
					size= toolBar.computeSize(rect.width, SWT.DEFAULT, true);
				}
				toolBar.setBounds(rect.width - size.x, 0, size.x, size.y);
				System.out.println("Size : " + size);
			}
		};
		shell.addListener(SWT.Resize, resizeListener);

		shell.open();
		
		Display display= shell.getDisplay();
		while (!shell.isDisposed())
			if (!display.readAndDispatch())
				display.sleep();
	}
}

NOTES:

	McQ (2/2/01 3:20:55 PM) -
		The flash is caused because the work is being done within a defer redraw.
The toolbar still flashes on move but the computesize issue has been fixed.</WithStack>
    <WithOutStack>While fixing PR "1FUC0NM: SWT:WINNT - ToolBar.computeSize calculates wrong size if control is embedded"
	it was noticed that there is flashing when computeSize is called.

	The worong size issue in PR 1FUC0NM was fixed but the flashing still occurs.


	1.) Run the attached test case
	2.) Resize the shell
	3.) Look for flashing

	========================= Test Case =======================================
	Note: you have to change the code so that it uses an existing image.

package com.oti.dbaeumer.swt.prs;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR1FUC0NM {
	public static void main(String[] args) {
		
		Shell shell= new Shell();

		ToolBar tb= new ToolBar(shell,  SWT.FLAT | SWT.WRAP | SWT.BORDER);

		@@@ Use an existing image
		Image image = new Image(shell.getDisplay(), PR1FUC0NM.class.getResourceAsStream("test1.gif"));

		Combo combo= new Combo(tb, SWT.NULL);
		for (int i= 0; i &lt; 10; i++)
			combo.add("item " + i);
				
		ToolItem ti;
				
		for (int i= 0; i &lt; 5; i++) {
			ti= new ToolItem(tb, SWT.NULL);
			ti.setImage(image);		
			ti= new ToolItem(tb, SWT.SEPARATOR);
		}	

		ti= new ToolItem(tb, SWT.SEPARATOR);
		ti.setWidth(100);
		ti.setControl(combo);			
		ti= new ToolItem(tb, SWT.SEPARATOR);

		ti= new ToolItem(tb, SWT.NULL);
		ti.setImage(image);

		Listener resizeListener= new Listener() {
			public void handleEvent(Event event) {
				Shell shell= (Shell) event.widget;
				Rectangle rect= shell.getClientArea();
				ToolBar toolBar= (ToolBar) shell.getChildren()[0];
				Point size= toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
				if (size.x &gt; rect.width) {
					size= toolBar.computeSize(rect.width, SWT.DEFAULT, true);
				}
				toolBar.setBounds(rect.width - size.x, 0, size.x, size.y);
				System.out.println("Size : " + size);
			}
		};
		shell.addListener(SWT.Resize, resizeListener);

		shell.open();
		
		Display display= shell.getDisplay();
		while (!shell.isDisposed())
			if (!display.readAndDispatch())
				display.sleep();
	}
}

NOTES:

	McQ (2/2/01 3:20:55 PM) -
		The flash is caused because the work is being done within a defer redraw.
The toolbar still flashes on move but the computesize issue has been fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4535" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 98" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>'Esc' in BMP editor causes contents to disappear (1FWST15)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="4">
        <Lines>
          <Line>1. Open a *.bmp file up in the desktop.</Line>
          <Line>2. Click in the editor space.</Line>
          <Line>3. Press the 'escape' key.</Line>
          <Line>4. The control within the tab disappears.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="6">
        <Lines>
          <Line>1. Open a second .bmp file</Line>
          <Line>2. Follow steps above.</Line>
          <Line>3. Click on tab of second .bmp file</Line>
          <Line>4. Click on tab of first .bmp file.</Line>
          <Line>==&gt; control is back.</Line>
          <Line>Moving to SWT for comment. Not stop ship.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>1. Open a *.bmp file up in the desktop.
2. Click in the editor space.
3. Press the 'escape' key.
4. The control within the tab disappears.

NOTES:
	SS (6/19/00 1:10:59 PM)
1. Open a second .bmp file
2. Follow steps above.
3. Click on tab of second .bmp file
4. Click on tab of first .bmp file.
==&gt; control is back.
Moving to SWT for comment. Not stop ship.

SN (6/19/00 1:14:31 PM)
	I remember that VI and KH noticed this.  It's a feature of some MS controls.
	Try it in Word?

VI (6/20/2000 8:55:45 AM)
	ESC is the common way for deactivating an in-place document.
PRODUCT VERSION:
jdk + win 98 + confidential source + exe install


Pls try this in the latest 2.0 builds. 
Esc is how we deactivate OLE documents (this is an accessibilty requirement). 
Nothing to fix.</WithStack>
    <WithOutStack>1. Open a *.bmp file up in the desktop.
2. Click in the editor space.
3. Press the 'escape' key.
4. The control within the tab disappears.

NOTES:
	SS (6/19/00 1:10:59 PM)
1. Open a second .bmp file
2. Follow steps above.
3. Click on tab of second .bmp file
4. Click on tab of first .bmp file.
==&gt; control is back.
Moving to SWT for comment. Not stop ship.

SN (6/19/00 1:14:31 PM)
	I remember that VI and KH noticed this.  It's a feature of some MS controls.
	Try it in Word?

VI (6/20/2000 8:55:45 AM)
	ESC is the common way for deactivating an in-place document.
PRODUCT VERSION:
jdk + win 98 + confidential source + exe install


Pls try this in the latest 2.0 builds. 
Esc is how we deactivate OLE documents (this is an accessibilty requirement). 
Nothing to fix.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4536" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR - No children listener interface for Composite (1G9GBSS)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>1) If a new child is added before the shell is opened, you can catch it in the initial resize,</Line>
          <Line>or maybe in shellActivated, or focusGained, or paint, if any of those is more convenient.</Line>
          <Line>2) If a new child is added when the shell is already open, whoever has added the child will</Line>
          <Line>typically have to force a relayout and either recompute the composite's or shell's size</Line>
          <Line>and call setSize/setBounds or just call pack. Since either of these forces a resize event</Line>
          <Line>and probably a repaint as well, the application can tell that a child has been added simply</Line>
          <Line>by keeping track of the children.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>PRODUCT VERSION:

SWT 057

I found no Interface in com.ibm.swt.events for listening to when a child Control is added to a Composite.
What is the workaround?

SN (3/2/01 2:20:45 PM)
	Added DCR to title.

CM (3/10/01 12:18:54 PM)
	Talked to SN, and at this time we are merely speculating as to why they might need this.
	Usually, an application knows when a child has been added, but if that is not the case (i.e. a framework), then:
		1) If a new child is added before the shell is opened, you can catch it in the initial resize,
			or maybe in shellActivated, or focusGained, or paint, if any of those is more convenient.
		2) If a new child is added when the shell is already open, whoever has added the child will
			typically have to force a relayout and either recompute the composite's or shell's size
			and call setSize/setBounds or just call pack. Since either of these forces a resize event
			and probably a repaint as well, the application can tell that a child has been added simply
			by keeping track of the children.

	Having said that, we suppose it is still possible that this feature could be added if it is really needed.
	McQ to get more info on why they need this, and if they still do, so that we can decide whether or not
	to implement it for this release.

CM (3/14/01 11:44:00 AM)
	Moving to Inactive. We will not do this at this time.
No further action planned.</WithStack>
    <WithOutStack>PRODUCT VERSION:

SWT 057

I found no Interface in com.ibm.swt.events for listening to when a child Control is added to a Composite.
What is the workaround?

SN (3/2/01 2:20:45 PM)
	Added DCR to title.

CM (3/10/01 12:18:54 PM)
	Talked to SN, and at this time we are merely speculating as to why they might need this.
	Usually, an application knows when a child has been added, but if that is not the case (i.e. a framework), then:
		1) If a new child is added before the shell is opened, you can catch it in the initial resize,
			or maybe in shellActivated, or focusGained, or paint, if any of those is more convenient.
		2) If a new child is added when the shell is already open, whoever has added the child will
			typically have to force a relayout and either recompute the composite's or shell's size
			and call setSize/setBounds or just call pack. Since either of these forces a resize event
			and probably a repaint as well, the application can tell that a child has been added simply
			by keeping track of the children.

	Having said that, we suppose it is still possible that this feature could be added if it is really needed.
	McQ to get more info on why they need this, and if they still do, so that we can decide whether or not
	to implement it for this release.

CM (3/14/01 11:44:00 AM)
	Moving to Inactive. We will not do this at this time.
No further action planned.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4537" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="enhancement" />
    <Summery>DCR Ability to paint with a brush pattern (1G0I8BE)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="package">
        <location start="781" end="794" />
        <code>package test;</code>
      </source_code>
      <source_code type="import">
        <location start="795" end="817" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="818" end="848" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="849" end="878" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="880" end="2043" />
        <code>public class _GraphicsScrapbook {

	public static void main(String[] args) {
		Shell shell = new Shell();
		Display display = shell.getDisplay();

		Color white = display.getSystemColor(SWT.COLOR_WHITE);
		Color shadow = display.getSystemColor
(SWT.COLOR_WIDGET_BACKGROUND);
		PaletteData palette = new PaletteData(new RGB[] {
			new RGB(white.getRed(), white.getGreen(), white.getBlue
()),
			new RGB(shadow.getRed(), shadow.getGreen(), 
shadow.getBlue())});
		
		int width = 18; // your scrollbar width
		int height = 200; // your scrollbar height
		ImageData imageData = new ImageData(width, height, 1, palette);
		for (int y = 0; y &lt; height; y++) {
			for (int x = 0; x &lt; width; x++) {
				if ((x + y) % 2 == 0) {
					imageData.setPixel(x, y, 1);
				} else {
					imageData.setPixel(x, y, 0);
				}
			}
		}

		shell.setSize(width + 20, height);
		shell.setBackground(white); // to see the image more easily
		shell.open();
		Image image = new Image(display, imageData);
		GC gc = new GC(shell);
		gc.drawImage(image, 10, 0);
		gc.dispose();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}
		
		image.dispose();
	}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I am trying to paint something that looks like a Native Scrollbar. If you look 
at a Windows Scrollbar,
	it has a small checkerboard pattern of White and System.ControlColor.

	To achieve this in SWT, we would need some type of pattern (I believe 
this is called a Brush)
	that can be set and will affect all GC operations afterwards.  Windows, 
I believe, supports an
	8x8 bit pattern, maybe other sizes as well.  There are many other uses 
for patterns, including
	drawing an approximation of a drop shadow, since transparent colors 
currently are not supported in SWT.

NOTES:
	CM (11/23/00 3:43:57 PM)
		You currently can't do a pattern paint.
		The work-around is to use an Image.
		For your example of a scrollbar, the following example code may 
be close to what you want:

package test;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class _GraphicsScrapbook {

	public static void main(String[] args) {
		Shell shell = new Shell();
		Display display = shell.getDisplay();

		Color white = display.getSystemColor(SWT.COLOR_WHITE);
		Color shadow = display.getSystemColor
(SWT.COLOR_WIDGET_BACKGROUND);
		PaletteData palette = new PaletteData(new RGB[] {
			new RGB(white.getRed(), white.getGreen(), white.getBlue
()),
			new RGB(shadow.getRed(), shadow.getGreen(), 
shadow.getBlue())});
		
		int width = 18; // your scrollbar width
		int height = 200; // your scrollbar height
		ImageData imageData = new ImageData(width, height, 1, palette);
		for (int y = 0; y &lt; height; y++) {
			for (int x = 0; x &lt; width; x++) {
				if ((x + y) % 2 == 0) {
					imageData.setPixel(x, y, 1);
				} else {
					imageData.setPixel(x, y, 0);
				}
			}
		}

		shell.setSize(width + 20, height);
		shell.setBackground(white); // to see the image more easily
		shell.open();
		Image image = new Image(display, imageData);
		GC gc = new GC(shell);
		gc.drawImage(image, 10, 0);
		gc.dispose();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}
		
		image.dispose();
	}

}

TRH (11/27/2000 11:02:32 AM)
	I have a question about this workaround.  Is ImageData Platform 
Specific?
	I was hesitant to create Palettes and ImageData since it might not work 
on all platforms.
	Maybe Indexed Images (above) ARE cross-platform.  What about True-
color, RGB vs. GBR, etc.
	Also, I would probably statically cache this Image rather than create 
it and dispose it.  Are
	there any problems doing that?

TRH (1/17/2001 9:16:42 AM)
We will
	need the ability to Tile an Image in a GC.  The region for tiling may 
be Non-rectangular:
		&lt;HTML&gt;
			&lt;B bgImage = "tile.gif"&gt;
				Some text &lt;BR&gt;
				Some more text
			&lt;/B&gt;
		&lt;/HTML&gt;

	This is one of Many features that is required to properly render HTML.  
Another would be transparency.

CM (2/5/01 9:50:00 PM)
	ImageData and PaletteData are NOT platform-specific. They are device-
independent
	data classes. Transparency is supported in ImageData.

SN (2/5/01 6:39:16 PM)
	No plans to do this at this time.

TRH (4/19/2001 10:12:39 AM)
	Sorry for getting off the subject of 8x8 brush patterns.  By 
transparency in HTML, I meant
	transparency of a layer, which can contain HTML.  While transparency is 
supported for Image,
	we would need it for drawString(), drawLine(), etc.
PRODUCT VERSION:

	SWT all versions.


To be revisited as part of a rework of the SWT graphics support.

Moving from Later.
Could this be done with a region and copyArea()?  In any case, moving to SSQ.
Fixed in HEAD. See GC.setBackgroundPattern().</WithStack>
    <WithOutStack>I am trying to paint something that looks like a Native Scrollbar. If you look 
at a Windows Scrollbar,
	it has a small checkerboard pattern of White and System.ControlColor.

	To achieve this in SWT, we would need some type of pattern (I believe 
this is called a Brush)
	that can be set and will affect all GC operations afterwards.  Windows, 
I believe, supports an
	8x8 bit pattern, maybe other sizes as well.  There are many other uses 
for patterns, including
	drawing an approximation of a drop shadow, since transparent colors 
currently are not supported in SWT.

NOTES:
	CM (11/23/00 3:43:57 PM)
		You currently can't do a pattern paint.
		The work-around is to use an Image.
		For your example of a scrollbar, the following example code may 
be close to what you want:

package test;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class _GraphicsScrapbook {

	public static void main(String[] args) {
		Shell shell = new Shell();
		Display display = shell.getDisplay();

		Color white = display.getSystemColor(SWT.COLOR_WHITE);
		Color shadow = display.getSystemColor
(SWT.COLOR_WIDGET_BACKGROUND);
		PaletteData palette = new PaletteData(new RGB[] {
			new RGB(white.getRed(), white.getGreen(), white.getBlue
()),
			new RGB(shadow.getRed(), shadow.getGreen(), 
shadow.getBlue())});
		
		int width = 18; // your scrollbar width
		int height = 200; // your scrollbar height
		ImageData imageData = new ImageData(width, height, 1, palette);
		for (int y = 0; y &lt; height; y++) {
			for (int x = 0; x &lt; width; x++) {
				if ((x + y) % 2 == 0) {
					imageData.setPixel(x, y, 1);
				} else {
					imageData.setPixel(x, y, 0);
				}
			}
		}

		shell.setSize(width + 20, height);
		shell.setBackground(white); // to see the image more easily
		shell.open();
		Image image = new Image(display, imageData);
		GC gc = new GC(shell);
		gc.drawImage(image, 10, 0);
		gc.dispose();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}
		
		image.dispose();
	}

}

TRH (11/27/2000 11:02:32 AM)
	I have a question about this workaround.  Is ImageData Platform 
Specific?
	I was hesitant to create Palettes and ImageData since it might not work 
on all platforms.
	Maybe Indexed Images (above) ARE cross-platform.  What about True-
color, RGB vs. GBR, etc.
	Also, I would probably statically cache this Image rather than create 
it and dispose it.  Are
	there any problems doing that?

TRH (1/17/2001 9:16:42 AM)
We will
	need the ability to Tile an Image in a GC.  The region for tiling may 
be Non-rectangular:
		&lt;HTML&gt;
			&lt;B bgImage = "tile.gif"&gt;
				Some text &lt;BR&gt;
				Some more text
			&lt;/B&gt;
		&lt;/HTML&gt;

	This is one of Many features that is required to properly render HTML.  
Another would be transparency.

CM (2/5/01 9:50:00 PM)
	ImageData and PaletteData are NOT platform-specific. They are device-
independent
	data classes. Transparency is supported in ImageData.

SN (2/5/01 6:39:16 PM)
	No plans to do this at this time.

TRH (4/19/2001 10:12:39 AM)
	Sorry for getting off the subject of 8x8 brush patterns.  By 
transparency in HTML, I meant
	transparency of a layer, which can contain HTML.  While transparency is 
supported for Image,
	we would need it for drawString(), drawLine(), etc.
PRODUCT VERSION:

	SWT all versions.


To be revisited as part of a rework of the SWT graphics support.

Moving from Later.
Could this be done with a region and copyArea()?  In any case, moving to SSQ.
Fixed in HEAD. See GC.setBackgroundPattern().</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4538" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="15165" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>BiDi flags for Windows (1FXQ3A2)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="assignment">
        <location start="622" end="662" />
        <code>bits |= OS.MB_RTLREADING | OS.MB_RIGHT;</code>
      </source_code>
      <source_code type="assignment">
        <location start="663" end="727" />
        <code>int code = OS.MessageBox (hwndParent, buffer1, buffer2, bits );</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>The following bits should be twiddled for (almost) correct BiDi implementation

Control.createHandle()
	widgetExtStyle() |
		OS.WS_EX_RIGHT |
		OS.WS_EX_LEFTSCROLLBAR |
		OS.WS_RTLREADING

Button.widgetStyle() [checkbox or radio buttons only]
#define BS_LEFTTEXT 0x00000020L
	OS.BS_LEFTTEXT

Button( SWT.RIGHT )

Label( SWT.RIGHT )

Table, TableItem, TableColumn( SWT.RIGHT ) 

MenuItem.widgetStyle()
	OS.MFT_RIGHTORDER

Group
	&amp; ~OS.WS_EX_RIGHT
	(that is, the right justification doesn't work correctly)

MessageBox.open()
#define MB_RTLREADING               0x00100000L
#define MB_RIGHT                    0x00080000L
	
	bits |= OS.MB_RTLREADING | OS.MB_RIGHT;
	int code = OS.MessageBox (hwndParent, buffer1, buffer2, bits );

TabItem.setText()
#define TCIF_RTLREADING         0x0004
	tcItem.mask |= TCIF_RTLREADING

Tree.widgetStyle()
	TVS_RTLREADING

NOTES:

Windows clears the OS.WS_EX_RIGHT flag when cycling
through code pages with the keyboard (Alt-Shift). 

Also TabFolder TCS_RIGHTJUSTIFY doesn't do anything. It has
a value of 0, so "oring" it in doesn't do anything.

In Table, forcing LVCFMT_RIGHT on columns doesn't work. This
is a known bug.

	McQ (2/2/01 3:31:00 PM) -
		We will use this PR as a placeholder for BiDi discussions.
		Note that as of this date, BiDi is not in plan for R1.0 of 
Eclipse.

SN (9/18/01 10:50:23 AM)
	It is likely we will need to use the new mirroring bits for 98 and 2000
	instead of the bits that are described in this PR.  The mirroring bits
	are the only way to get the shell to have the close box on the right.


*** This bug has been marked as a duplicate of 15165 ***</WithStack>
    <WithOutStack>The following bits should be twiddled for (almost) correct BiDi implementation

Control.createHandle()
	widgetExtStyle() |
		OS.WS_EX_RIGHT |
		OS.WS_EX_LEFTSCROLLBAR |
		OS.WS_RTLREADING

Button.widgetStyle() [checkbox or radio buttons only]
#define BS_LEFTTEXT 0x00000020L
	OS.BS_LEFTTEXT

Button( SWT.RIGHT )

Label( SWT.RIGHT )

Table, TableItem, TableColumn( SWT.RIGHT ) 

MenuItem.widgetStyle()
	OS.MFT_RIGHTORDER

Group
	&amp; ~OS.WS_EX_RIGHT
	(that is, the right justification doesn't work correctly)

MessageBox.open()
#define MB_RTLREADING               0x00100000L
#define MB_RIGHT                    0x00080000L
	
	bits |= OS.MB_RTLREADING | OS.MB_RIGHT;
	int code = OS.MessageBox (hwndParent, buffer1, buffer2, bits );

TabItem.setText()
#define TCIF_RTLREADING         0x0004
	tcItem.mask |= TCIF_RTLREADING

Tree.widgetStyle()
	TVS_RTLREADING

NOTES:

Windows clears the OS.WS_EX_RIGHT flag when cycling
through code pages with the keyboard (Alt-Shift). 

Also TabFolder TCS_RIGHTJUSTIFY doesn't do anything. It has
a value of 0, so "oring" it in doesn't do anything.

In Table, forcing LVCFMT_RIGHT on columns doesn't work. This
is a known bug.

	McQ (2/2/01 3:31:00 PM) -
		We will use this PR as a placeholder for BiDi discussions.
		Note that as of this date, BiDi is not in plan for R1.0 of 
Eclipse.

SN (9/18/01 10:50:23 AM)
	It is likely we will need to use the new mirroring bits for 98 and 2000
	instead of the bits that are described in this PR.  The mirroring bits
	are the only way to get the shell to have the close box on the right.


*** This bug has been marked as a duplicate of 15165 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4539" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 2000" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>WM_IME_COMPOSITION RichEdit control hack fails in multilingual Win2000 (1FXQ427)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="ifstatement">
        <location start="639" end="746" />
        <code>if (hooks (SWT.Verify)) {
//				OS.SendMessage (handle, OS.EM_SETSEL, position 
+ i, position + i);
			}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1. Run a RichEdit control</Line>
          <Line>(e.g. Run IBM SWT Internationalization Tests 0.05 Sunir  &gt;&gt;</Line>
          <Line>com.ibm.swt.internationalization.tests &gt;&gt; ArabicEditable)</Line>
          <Line>2. Put focus on the RichText edit control (e.g. second column, second row in</Line>
          <Line>example above)</Line>
          <Line>3. Switch to Japanese (from Arabic)</Line>
          <Line>4. ALT-` to get into the Latin -&gt; Japanese IME mode</Line>
          <Line>5. Type nippon&lt;SPACE&gt;&lt;ENTER&gt;</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>1. Run a RichEdit control 
	(e.g. Run IBM SWT Internationalization Tests 0.05 Sunir  &gt;&gt; 
com.ibm.swt.internationalization.tests &gt;&gt; ArabicEditable)
2. Put focus on the RichText edit control (e.g. second column, second row in 
example above)
3. Switch to Japanese (from Arabic)
4. ALT-` to get into the Latin -&gt; Japanese IME mode
5. Type nippon&lt;SPACE&gt;&lt;ENTER&gt;

This should enter the Kanji for "Japan". It does, but it then pastes the two 
characters again,
leaving the underline bit turned on. Switch back to English and type randomly 
to see.

The problem disappears when this line is commented out in 
RichText.WM_IME_COMPOSITION(int,int)

			if (hooks (SWT.Verify)) {
//				OS.SendMessage (handle, OS.EM_SETSEL, position 
+ i, position + i);
			}

I have ran the example on WinNT4 RichEdit 2.0 and the problem does not occur.

NOTES:

	McQ (2/2/01 3:32:15 PM) -
		RichText is not being used. BiDi is not supported for R1.0
PRODUCT VERSION:
IBM SWT Implementation win32 0.043 patch 0.010
Win2000 with Japanese and Arabic codepages installed, Arabic locale default for 
user
RichEdit 3.0.


RichText no longer exists.</WithStack>
    <WithOutStack>1. Run a RichEdit control 
	(e.g. Run IBM SWT Internationalization Tests 0.05 Sunir  &gt;&gt; 
com.ibm.swt.internationalization.tests &gt;&gt; ArabicEditable)
2. Put focus on the RichText edit control (e.g. second column, second row in 
example above)
3. Switch to Japanese (from Arabic)
4. ALT-` to get into the Latin -&gt; Japanese IME mode
5. Type nippon&lt;SPACE&gt;&lt;ENTER&gt;

This should enter the Kanji for "Japan". It does, but it then pastes the two 
characters again,
leaving the underline bit turned on. Switch back to English and type randomly 
to see.

The problem disappears when this line is commented out in 
RichText.WM_IME_COMPOSITION(int,int)

			if (hooks (SWT.Verify)) {
//				OS.SendMessage (handle, OS.EM_SETSEL, position 
+ i, position + i);
			}

I have ran the example on WinNT4 RichEdit 2.0 and the problem does not occur.

NOTES:

	McQ (2/2/01 3:32:15 PM) -
		RichText is not being used. BiDi is not supported for R1.0
PRODUCT VERSION:
IBM SWT Implementation win32 0.043 patch 0.010
Win2000 with Japanese and Arabic codepages installed, Arabic locale default for 
user
RichEdit 3.0.


RichText no longer exists.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4540" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR - Need verticalIndent on GridData (1FXZ8J6)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="5">
        <Lines>
          <Line>- create a label that spans both columns.</Line>
          <Line>- create a text field in column one (with indent) and a button in column two.</Line>
          <Line />
          <Line>- create another label spaning both columns.</Line>
          <Line>- create some additional controls.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="2">
        <Lines>
          <Line>- create another label spaning both columns.</Line>
          <Line>- create some additional controls.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>GridData provides a horizontalIndent to tweak the layout. We also need a verticalIndent. Consider the following
	situation:

	- Grid with 2 columns.

	- create a label that spans both columns.
	- create a text field in column one (with indent) and a button in column two.
	
	- create another label spaning both columns.
	- create some additional controls.

	Note the vertical spacing between all rows is the same. But we want to build the visual impression of
    two separate editors, both of them with a label on top. This is currently impossible using standard grid
	data and layout functionality.



NOTES:

SN (2/5/01 6:38:42 PM)
	No plans to do this at this time.
Moved to SWT
PRODUCT VERSION:
	SWT 0.44


We have provided a FormLayout class which has a greater degree of 
control over where objects are layed out. There is no plan to extend the 
GridLayout API at this time.</WithStack>
    <WithOutStack>GridData provides a horizontalIndent to tweak the layout. We also need a verticalIndent. Consider the following
	situation:

	- Grid with 2 columns.

	- create a label that spans both columns.
	- create a text field in column one (with indent) and a button in column two.
	
	- create another label spaning both columns.
	- create some additional controls.

	Note the vertical spacing between all rows is the same. But we want to build the visual impression of
    two separate editors, both of them with a label on top. This is currently impossible using standard grid
	data and layout functionality.



NOTES:

SN (2/5/01 6:38:42 PM)
	No plans to do this at this time.
Moved to SWT
PRODUCT VERSION:
	SWT 0.44


We have provided a FormLayout class which has a greater degree of 
control over where objects are layed out. There is no plan to extend the 
GridLayout API at this time.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4541" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Display.getShell seems to be inefficient (1FY2R0W)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>We want to terminate a event loop if no more shells for a given display exists. Using Display.getShells seems to
	be inefficient for this purpose  (two for loops and another two for loops in WidgetTable.getShells()). 

	Is there a better way to determine if a display has open shells than check getShells().length != 0.

NOTES:

	SN (7/14/00 10:54:04 AM)
		Of course there is a better way than building a collection of shells simply to ask for it's length
		but I'm sorry to say that there's no SWT API you can use.  We could consider adding the API
		Display.getShellCount () that could do better or you can simply count the shells that you create
		and dispose and exit your event loop when the count is zero.

	DB (7/17/00 10:05:25 AM) 
		JFace currently maintains and open shell count. But in my opinion this sort of code belongs more
		to SWT than to JFace. So adding the method would simplify code in JFace.

	SN (7/17/00 12:08:05 PM)
		Fine, but there is no OS call in any operating system that answers the top level shell count.
		If SWT is to remain a thin layer on the OS, then we shouldn't be adding convenience API.

	DB (7/21/00 11:37:01 AM)
		I think it should be very simple for SWT to maintain an open shell count, since a shell can only
		be created for a given display. The current implementation in JFace is based on convention (whenever
		you create a shell you have to increment that count) and is therefore susceptible for errors. 

	SN (7/21/00 4:53:00 PM)
		We will consider adding the API.

	McQ (2/2/01 3:34:50 PM) -
		No action.
It is ok for me to close this PR. 
PRODUCT VERSION:
	0.44


Closing the PR.</WithStack>
    <WithOutStack>We want to terminate a event loop if no more shells for a given display exists. Using Display.getShells seems to
	be inefficient for this purpose  (two for loops and another two for loops in WidgetTable.getShells()). 

	Is there a better way to determine if a display has open shells than check getShells().length != 0.

NOTES:

	SN (7/14/00 10:54:04 AM)
		Of course there is a better way than building a collection of shells simply to ask for it's length
		but I'm sorry to say that there's no SWT API you can use.  We could consider adding the API
		Display.getShellCount () that could do better or you can simply count the shells that you create
		and dispose and exit your event loop when the count is zero.

	DB (7/17/00 10:05:25 AM) 
		JFace currently maintains and open shell count. But in my opinion this sort of code belongs more
		to SWT than to JFace. So adding the method would simplify code in JFace.

	SN (7/17/00 12:08:05 PM)
		Fine, but there is no OS call in any operating system that answers the top level shell count.
		If SWT is to remain a thin layer on the OS, then we shouldn't be adding convenience API.

	DB (7/21/00 11:37:01 AM)
		I think it should be very simple for SWT to maintain an open shell count, since a shell can only
		be created for a given display. The current implementation in JFace is based on convention (whenever
		you create a shell you have to increment that count) and is therefore susceptible for errors. 

	SN (7/21/00 4:53:00 PM)
		We will consider adding the API.

	McQ (2/2/01 3:34:50 PM) -
		No action.
It is ok for me to close this PR. 
PRODUCT VERSION:
	0.44


Closing the PR.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4542" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Menu accelerators CTRL+ / and CTRL + SHIFT + / don't work (1FYAF8V)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="import">
        <location start="234" end="256" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="257" end="286" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="288" end="1411" />
        <code>public class PR_1FYAF8V {
	public static void main(String[] args) {
		Shell shell = new Shell();
		Menu menuBar = new Menu(shell, SWT.BAR);
		MenuItem item0 = new MenuItem(menuBar, SWT.CASCADE);
		Menu menu = new Menu(menuBar);
		MenuItem item1 = new MenuItem(menu, SWT.PUSH);
		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
		MenuItem item3 = new MenuItem(menu, SWT.PUSH);
		
		item0.setText("item0");
		item0.setMenu(menu);
		shell.setMenuBar(menuBar);
		item1.setText("item1	CTRL + /");
		item1.setAccelerator(SWT.CTRL | '/');
		item2.setText("item2	CTRL + SHIFT + /");
		item2.setAccelerator(SWT.CTRL | SWT.SHIFT | '/');
		item3.setText("item3	CTRL + R");
		item3.setAccelerator(SWT.CTRL | 'R');
		
		Listener listener = new Listener() {
			public void handleEvent(Event e) {
				System.out.println(e.widget);
			}
		};
		item1.addListener(SWT.Selection, listener);
		item2.addListener(SWT.Selection, listener);
		item3.addListener(SWT.Selection, listener);		
		
		shell.open();
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}	
	
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I'm setting the CTRL + / and CTRL + SHIFT + /  as menu accelerators. They don't work.
To reproduce run the test case below and press CTRL + /. You should see output in the 
console. Press CTRL + R and you will see output as expected.

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class PR_1FYAF8V {
	public static void main(String[] args) {
		Shell shell = new Shell();
		Menu menuBar = new Menu(shell, SWT.BAR);
		MenuItem item0 = new MenuItem(menuBar, SWT.CASCADE);
		Menu menu = new Menu(menuBar);
		MenuItem item1 = new MenuItem(menu, SWT.PUSH);
		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
		MenuItem item3 = new MenuItem(menu, SWT.PUSH);
		
		item0.setText("item0");
		item0.setMenu(menu);
		shell.setMenuBar(menuBar);
		item1.setText("item1	CTRL + /");
		item1.setAccelerator(SWT.CTRL | '/');
		item2.setText("item2	CTRL + SHIFT + /");
		item2.setAccelerator(SWT.CTRL | SWT.SHIFT | '/');
		item3.setText("item3	CTRL + R");
		item3.setAccelerator(SWT.CTRL | 'R');
		
		Listener listener = new Listener() {
			public void handleEvent(Event e) {
				System.out.println(e.widget);
			}
		};
		item1.addListener(SWT.Selection, listener);
		item2.addListener(SWT.Selection, listener);
		item3.addListener(SWT.Selection, listener);		
		
		shell.open();
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}	
	
	}
}


NOTES:

VI (10/4/00 11:31:58 AM)
	There is code in Display that is commented out that maps the KeyPad keys for the accelerator table.  If I uncomment
	the SWT.KP_DIVIDE entry, I can cause the CTRL + SHIFT + '/' case to work but only when I use the '/' key in the
	numeric keypad.

SN (2/5/01 2:40:41 PM)
	Spent some time looking into this.  Need to write a DLL only example.
PRODUCT VERSION:
SWT 0.44


Fixed in R2.0.</WithStack>
    <WithOutStack>I'm setting the CTRL + / and CTRL + SHIFT + /  as menu accelerators. They don't work.
To reproduce run the test case below and press CTRL + /. You should see output in the 
console. Press CTRL + R and you will see output as expected.

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class PR_1FYAF8V {
	public static void main(String[] args) {
		Shell shell = new Shell();
		Menu menuBar = new Menu(shell, SWT.BAR);
		MenuItem item0 = new MenuItem(menuBar, SWT.CASCADE);
		Menu menu = new Menu(menuBar);
		MenuItem item1 = new MenuItem(menu, SWT.PUSH);
		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
		MenuItem item3 = new MenuItem(menu, SWT.PUSH);
		
		item0.setText("item0");
		item0.setMenu(menu);
		shell.setMenuBar(menuBar);
		item1.setText("item1	CTRL + /");
		item1.setAccelerator(SWT.CTRL | '/');
		item2.setText("item2	CTRL + SHIFT + /");
		item2.setAccelerator(SWT.CTRL | SWT.SHIFT | '/');
		item3.setText("item3	CTRL + R");
		item3.setAccelerator(SWT.CTRL | 'R');
		
		Listener listener = new Listener() {
			public void handleEvent(Event e) {
				System.out.println(e.widget);
			}
		};
		item1.addListener(SWT.Selection, listener);
		item2.addListener(SWT.Selection, listener);
		item3.addListener(SWT.Selection, listener);		
		
		shell.open();
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}	
	
	}
}


NOTES:

VI (10/4/00 11:31:58 AM)
	There is code in Display that is commented out that maps the KeyPad keys for the accelerator table.  If I uncomment
	the SWT.KP_DIVIDE entry, I can cause the CTRL + SHIFT + '/' case to work but only when I use the '/' key in the
	numeric keypad.

SN (2/5/01 2:40:41 PM)
	Spent some time looking into this.  Need to write a DLL only example.
PRODUCT VERSION:
SWT 0.44


Fixed in R2.0.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4543" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="minor" />
    <Summery>DCR - need flipping image support ala awt.Graphics.drawImage() (1FZ0C7G)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>PJM (8/1/00 10:06:12 AM)
	Ware writing some code in java.awt.Graphics to support the
	awt notion of image flipping.  This is basically just flipping an image 
around
	the X or Y access.  We should probably add this to SWT itself, in the
	image package.  This is needed for the drawImage() API (see javaDoc for
	more information on this API).

	Actually, now that I think about it, we should have a few 
	more goodies in here, including cropping and scaling.  Done as natives.

	Not a pressing need, just something I've noticed that would be nice to 
have.

NOTES:

JM (8/4/00 3:49:33 PM)
	Also must remember we need support for flipping alpha blending.

JM (8/6/00 12:27:37 PM)
	The support for flipping ImageData in vertical and/or horizontal 
direction already
	exists in the stretching code, just need to attach it to some API.

CM (2/6/01 1:42:53 PM)
	SQ to investigate.
PRODUCT VERSION:

	SWT 0.32


Fixed in Eclipse 3.1 M5.

See GC.setTransform().</WithStack>
    <WithOutStack>PJM (8/1/00 10:06:12 AM)
	Ware writing some code in java.awt.Graphics to support the
	awt notion of image flipping.  This is basically just flipping an image 
around
	the X or Y access.  We should probably add this to SWT itself, in the
	image package.  This is needed for the drawImage() API (see javaDoc for
	more information on this API).

	Actually, now that I think about it, we should have a few 
	more goodies in here, including cropping and scaling.  Done as natives.

	Not a pressing need, just something I've noticed that would be nice to 
have.

NOTES:

JM (8/4/00 3:49:33 PM)
	Also must remember we need support for flipping alpha blending.

JM (8/6/00 12:27:37 PM)
	The support for flipping ImageData in vertical and/or horizontal 
direction already
	exists in the stretching code, just need to attach it to some API.

CM (2/6/01 1:42:53 PM)
	SQ to investigate.
PRODUCT VERSION:

	SWT 0.32


Fixed in Eclipse 3.1 M5.

See GC.setTransform().</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4544" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>CTRL combination not handled as accelerators when Caps are locked (1FZQDGR)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="import">
        <location start="615" end="637" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="638" end="667" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="669" end="1683" />
        <code>public class PR_1FZQDGR {
	public static void main(String[] args) {
		Shell shell = new Shell();
		Text text = new Text(shell, SWT.MULTI);
		Menu menuBar = new Menu(shell, SWT.BAR);
		MenuItem item0 = new MenuItem(menuBar, SWT.CASCADE);
		Menu menu = new Menu(menuBar);
		MenuItem item1 = new MenuItem(menu, SWT.PUSH);
		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
		
		item0.setText("item0");
		item0.setMenu(menu);
		shell.setMenuBar(menuBar);
		item1.setText("item1	CTRL + I");
		item1.setAccelerator(SWT.CTRL | 'I');
		item2.setText("item2	CTRL + R");
		item2.setAccelerator(SWT.CTRL | 'R');
		
		Listener listener = new Listener() {
			public void handleEvent(Event e) {
				System.out.println(e.widget);
			}
		};
		item1.addListener(SWT.Selection, listener);
		item2.addListener(SWT.Selection, listener);
		
		text.setBounds(shell.getClientArea());
		shell.open();
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}	
	
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. Turn on caps lock</Line>
          <Line>2. Select text</Line>
          <Line>3. Hit Ctrl+I to indent the text</Line>
          <Line>-&gt; the selection is replaced with a space</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When caps lock is on any CTRL key combination results in space being inserted
in the text. Selected text is deleted/replaced with the space.

To reproduce:
1. Turn on caps lock
2. Select text
3. Hit Ctrl+I to indent the text
-&gt; the selection is replaced with a space


NOTES:

LK (8/15/00 11:40:12 AM)
	Document in release notes.

KR (8/15/00 11:44:44 AM)
	This is a SWT bug. Run the test case below. Type some characters, turn caps lock off,
	type CTRL+R. This is handled as an accelerator.
	Turn caps lock on and type CTRL+R again. On Linux a space is inserted, on Windows it
	is still handled as an accelerator.

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class PR_1FZQDGR {
	public static void main(String[] args) {
		Shell shell = new Shell();
		Text text = new Text(shell, SWT.MULTI);
		Menu menuBar = new Menu(shell, SWT.BAR);
		MenuItem item0 = new MenuItem(menuBar, SWT.CASCADE);
		Menu menu = new Menu(menuBar);
		MenuItem item1 = new MenuItem(menu, SWT.PUSH);
		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
		
		item0.setText("item0");
		item0.setMenu(menu);
		shell.setMenuBar(menuBar);
		item1.setText("item1	CTRL + I");
		item1.setAccelerator(SWT.CTRL | 'I');
		item2.setText("item2	CTRL + R");
		item2.setAccelerator(SWT.CTRL | 'R');
		
		Listener listener = new Listener() {
			public void handleEvent(Event e) {
				System.out.println(e.widget);
			}
		};
		item1.addListener(SWT.Selection, listener);
		item2.addListener(SWT.Selection, listener);
		
		text.setBounds(shell.getClientArea());
		shell.open();
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}	
	
	}
}

KR (8/15/00 12:22:41 PM)
	We don't need the fix for VAME 1.2.

	McQ (8/18/2000 12:21:04 PM) -
		Linux applications handle the mapping of "shifted" (i.e. Shift or Caps Lock)
		control character accelerators inconsistantly. I have seen some which behave
		like windows, and some which do not.

		On windows, the platform behavior is to override the "shiftedness" of the 
		key when the control key is pressed. On X, it is not, so applications
		must handle both cases themselves.

		Arguably then, we are providing platform behavior, but this is clearly
		unpleasant. I'll talk to SN about it when he gets back.
		
KR (8/25/00 3:17:23 PM)
	Do you mean that setAccelerator(SWT.CTRL | 'R' | 'r'); should work? It doesn't.

JH (10/4/00 2:44:18 PM)
	Not a bug. Strangely enough, this is platform behavior.

	McQ (10/10/2000 10:01:55 AM) -
		Note: There *is* an issue here. Currently, there is *no* way to hook both
		the shifted and un-shifted version of the accelerator.
PRODUCT VERSION:
LF510/SWT 0.45 Patch 3


Tested on Linux/Motif. This works now. Accelerators are no longer case 
sensitive.</WithStack>
    <WithOutStack>When caps lock is on any CTRL key combination results in space being inserted
in the text. Selected text is deleted/replaced with the space.

To reproduce:
1. Turn on caps lock
2. Select text
3. Hit Ctrl+I to indent the text
-&gt; the selection is replaced with a space


NOTES:

LK (8/15/00 11:40:12 AM)
	Document in release notes.

KR (8/15/00 11:44:44 AM)
	This is a SWT bug. Run the test case below. Type some characters, turn caps lock off,
	type CTRL+R. This is handled as an accelerator.
	Turn caps lock on and type CTRL+R again. On Linux a space is inserted, on Windows it
	is still handled as an accelerator.

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class PR_1FZQDGR {
	public static void main(String[] args) {
		Shell shell = new Shell();
		Text text = new Text(shell, SWT.MULTI);
		Menu menuBar = new Menu(shell, SWT.BAR);
		MenuItem item0 = new MenuItem(menuBar, SWT.CASCADE);
		Menu menu = new Menu(menuBar);
		MenuItem item1 = new MenuItem(menu, SWT.PUSH);
		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
		
		item0.setText("item0");
		item0.setMenu(menu);
		shell.setMenuBar(menuBar);
		item1.setText("item1	CTRL + I");
		item1.setAccelerator(SWT.CTRL | 'I');
		item2.setText("item2	CTRL + R");
		item2.setAccelerator(SWT.CTRL | 'R');
		
		Listener listener = new Listener() {
			public void handleEvent(Event e) {
				System.out.println(e.widget);
			}
		};
		item1.addListener(SWT.Selection, listener);
		item2.addListener(SWT.Selection, listener);
		
		text.setBounds(shell.getClientArea());
		shell.open();
		Display display = shell.getDisplay ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}	
	
	}
}

KR (8/15/00 12:22:41 PM)
	We don't need the fix for VAME 1.2.

	McQ (8/18/2000 12:21:04 PM) -
		Linux applications handle the mapping of "shifted" (i.e. Shift or Caps Lock)
		control character accelerators inconsistantly. I have seen some which behave
		like windows, and some which do not.

		On windows, the platform behavior is to override the "shiftedness" of the 
		key when the control key is pressed. On X, it is not, so applications
		must handle both cases themselves.

		Arguably then, we are providing platform behavior, but this is clearly
		unpleasant. I'll talk to SN about it when he gets back.
		
KR (8/25/00 3:17:23 PM)
	Do you mean that setAccelerator(SWT.CTRL | 'R' | 'r'); should work? It doesn't.

JH (10/4/00 2:44:18 PM)
	Not a bug. Strangely enough, this is platform behavior.

	McQ (10/10/2000 10:01:55 AM) -
		Note: There *is* an issue here. Currently, there is *no* way to hook both
		the shifted and un-shifted version of the accelerator.
PRODUCT VERSION:
LF510/SWT 0.45 Patch 3


Tested on Linux/Motif. This works now. Accelerators are no longer case 
sensitive.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4545" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>No OS.GetKeyState function on motif (1FZQOZM)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Add statemask info to Selection event. Wouldn't break anything but this info is only used in such</Line>
          <Line>a rare cases that it seems silly to add it to every selection event.</Line>
          <Line>2) Add GetKeyState to OS in motif. But wasn't the idea not to have the Desktop calling any OS</Line>
          <Line>functions?</Line>
          <Line>3) Change the desktop behavior.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>On the VA2000 desktop there is the following feature. If the shift key is held down while the user
selects a new perspective, the new perspective is opened in a new detached window. This is
activated by a SelectionEvent. This event does not contain StateMask information. So currently under
Windows in the event handler a call to OS.GetKeyState is made. This function does not exist on motif
and hence, this code is broken on motif.
There are a few solutions. 
1) Add statemask info to Selection event. Wouldn't break anything but this info is only used in such 
a rare cases that it seems silly to add it to every selection event.
2) Add GetKeyState to OS in motif. But wasn't the idea not to have the Desktop calling any OS 
functions?
3) Change the desktop behavior.

NOTES:

SN (8/21/00 11:29:19 AM)
	For portability reasons and also because classes in com.ibm.swt.win32 are not API,
	the desktop should not be making this call.  Because selection events are not necessarily
	caused by the a key or mouse event, adding this information to every Selection event
	is not appealing.
PRODUCT VERSION:
motif 0.46


Key state information is now available in mouse selection events. This is 
being used in the Eclipse UI.</WithStack>
    <WithOutStack>On the VA2000 desktop there is the following feature. If the shift key is held down while the user
selects a new perspective, the new perspective is opened in a new detached window. This is
activated by a SelectionEvent. This event does not contain StateMask information. So currently under
Windows in the event handler a call to OS.GetKeyState is made. This function does not exist on motif
and hence, this code is broken on motif.
There are a few solutions. 
1) Add statemask info to Selection event. Wouldn't break anything but this info is only used in such 
a rare cases that it seems silly to add it to every selection event.
2) Add GetKeyState to OS in motif. But wasn't the idea not to have the Desktop calling any OS 
functions?
3) Change the desktop behavior.

NOTES:

SN (8/21/00 11:29:19 AM)
	For portability reasons and also because classes in com.ibm.swt.win32 are not API,
	the desktop should not be making this call.  Because selection events are not necessarily
	caused by the a key or mouse event, adding this information to every Selection event
	is not appealing.
PRODUCT VERSION:
motif 0.46


Key state information is now available in mouse selection events. This is 
being used in the Eclipse UI.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4546" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Text setTopIndex/getTopIndex fails (1G01GJL)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="8">
      <source_code type="assignment">
        <location start="191" end="218" />
        <code>Shell shell = new Shell();</code>
      </source_code>
      <source_code type="assignment">
        <location start="219" end="258" />
        <code>Text text = new Text(shell, SWT.NONE);</code>
      </source_code>
      <source_code type="functiondef">
        <location start="259" end="320" />
        <code>for (int i = 0; i &lt; 10; i++) {
		text.append("abcdef\n");
	}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="321" end="465" />
        <code>for (int i = 1; i &lt;= 10; i++) {
		text.setTopIndex(i);
		System.out.println("Set top index to "+i+". Top index is now "+text.getTopIndex());
	}</code>
      </source_code>
      <source_code type="import">
        <location start="955" end="977" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="978" end="1007" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1008" end="1036" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="class">
        <location start="1038" end="1640" />
        <code>public class TextTopIndexTest {

public static void main(String[] args) {
	Shell shell = new Shell();
	shell.setLayout(new FillLayout());
	Text text = new Text(shell, SWT.V_SCROLL | SWT.MULTI);
	shell.open();
	for (int i = 0; i &lt; 11; i++) {
		text.append("abcdef\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n");
	}
	for (int i = 1; i &lt;= 10; i++) {
		text.setTopIndex(i);
		System.out.println("Set top index to "+i+". Top index is now "+text.getTopIndex());
	}

    Display display = shell.getDisplay();
    while (!shell.isDisposed())
        if (!display.readAndDispatch())
            display.sleep();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>After you set the top index of the Text to some value and then query the value of the top index you always get 0.
Either setTopIndex is failing or getTopIndex is returning the wrong answer.

	Shell shell = new Shell();
	Text text = new Text(shell, SWT.NONE);
	for (int i = 0; i &lt; 10; i++) {
		text.append("abcdef\n");
	}
	for (int i = 1; i &lt;= 10; i++) {
		text.setTopIndex(i);
		System.out.println("Set top index to "+i+". Top index is now "+text.getTopIndex());
	}
NOTES:

JH (9/20/00 6:03:04 PM) - On Windows, this test case always returns 0 as well. It seems like setTopIndex() only
works if the Text widget has a vertical scroll bar, is set to be a multi-line text widget, and has enough text to fill
the whole widget after scrolling to the index given. That is, if the widget hold x lines of text and can display y 
lines at one time, you can't set the index to be greater than (x - y).

The following example shows the multi-line/scroll bar thingy:

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.layout.*;

public class TextTopIndexTest {

public static void main(String[] args) {
	Shell shell = new Shell();
	shell.setLayout(new FillLayout());
	Text text = new Text(shell, SWT.V_SCROLL | SWT.MULTI);
	shell.open();
	for (int i = 0; i &lt; 11; i++) {
		text.append("abcdef\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n");
	}
	for (int i = 1; i &lt;= 10; i++) {
		text.setTopIndex(i);
		System.out.println("Set top index to "+i+". Top index is now "+text.getTopIndex());
	}

    Display display = shell.getDisplay();
    while (!shell.isDisposed())
        if (!display.readAndDispatch())
            display.sleep();
}
}
PRODUCT VERSION:

0.046 under J9 (Leap Frog)


I think this is working correctly.  If the Text widget is large enough to show 
all the lines then the top index will not change when calling setTopIndex</WithStack>
    <WithOutStack>After you set the top index of the Text to some value and then query the value of the top index you always get 0.
Either setTopIndex is failing or getTopIndex is returning the wrong answer.

	Shell shell = new Shell();
	Text text = new Text(shell, SWT.NONE);
	for (int i = 0; i &lt; 10; i++) {
		text.append("abcdef\n");
	}
	for (int i = 1; i &lt;= 10; i++) {
		text.setTopIndex(i);
		System.out.println("Set top index to "+i+". Top index is now "+text.getTopIndex());
	}
NOTES:

JH (9/20/00 6:03:04 PM) - On Windows, this test case always returns 0 as well. It seems like setTopIndex() only
works if the Text widget has a vertical scroll bar, is set to be a multi-line text widget, and has enough text to fill
the whole widget after scrolling to the index given. That is, if the widget hold x lines of text and can display y 
lines at one time, you can't set the index to be greater than (x - y).

The following example shows the multi-line/scroll bar thingy:

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.layout.*;

public class TextTopIndexTest {

public static void main(String[] args) {
	Shell shell = new Shell();
	shell.setLayout(new FillLayout());
	Text text = new Text(shell, SWT.V_SCROLL | SWT.MULTI);
	shell.open();
	for (int i = 0; i &lt; 11; i++) {
		text.append("abcdef\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n");
	}
	for (int i = 1; i &lt;= 10; i++) {
		text.setTopIndex(i);
		System.out.println("Set top index to "+i+". Top index is now "+text.getTopIndex());
	}

    Display display = shell.getDisplay();
    while (!shell.isDisposed())
        if (!display.readAndDispatch())
            display.sleep();
}
}
PRODUCT VERSION:

0.046 under J9 (Leap Frog)


I think this is working correctly.  If the Text widget is large enough to show 
all the lines then the top index will not change when calling setTopIndex</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4547" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>setText on Button fails with \n (1G01HCZ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="6">
      <source_code type="assignment">
        <location start="113" end="140" />
        <code>Shell shell = new Shell();</code>
      </source_code>
      <source_code type="assignment">
        <location start="141" end="186" />
        <code>Button button = new Button(shell, SWT.NONE);</code>
      </source_code>
      <source_code type="assignment">
        <location start="187" end="234" />
        <code>String string = "abc\n def\n ghi\b jkl\t mno";</code>
      </source_code>
      <source_code type="functioncall">
        <location start="235" end="259" />
        <code>button.setText(string);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="260" end="347" />
        <code>System.out.println("set and get Text are the same: "+string.equals(button.getText()));</code>
      </source_code>
      <source_code type="functioncall">
        <location start="348" end="409" />
        <code>System.out.println("Button text is &gt;"+button.getText()+"&lt;");</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Set text of Button to a string including a new line and you only get the part of the string up to the new line:

	Shell shell = new Shell();
	Button button = new Button(shell, SWT.NONE);
	String string = "abc\n def\n ghi\b jkl\t mno";
	button.setText(string);
	System.out.println("set and get Text are the same: "+string.equals(button.getText()));
	System.out.println("Button text is &gt;"+button.getText()+"&lt;");

The output is:
	set and get Text are the same: false
	Button text is &gt;abc&lt;
Expected output is:
	set and get Text are the same: true
	Button text is &gt;abc
 def
 ghi jkl	 mno&lt;

NOTES:

JH (9/21/00 1:37:21 PM)
	Not sure this is a bug. The method comment states that the text "must
	not contain line delimiters".
PRODUCT VERSION:

0.046 under J9 (Leap Frog)


Works correctly.</WithStack>
    <WithOutStack>Set text of Button to a string including a new line and you only get the part of the string up to the new line:

	Shell shell = new Shell();
	Button button = new Button(shell, SWT.NONE);
	String string = "abc\n def\n ghi\b jkl\t mno";
	button.setText(string);
	System.out.println("set and get Text are the same: "+string.equals(button.getText()));
	System.out.println("Button text is &gt;"+button.getText()+"&lt;");

The output is:
	set and get Text are the same: false
	Button text is &gt;abc&lt;
Expected output is:
	set and get Text are the same: true
	Button text is &gt;abc
 def
 ghi jkl	 mno&lt;

NOTES:

JH (9/21/00 1:37:21 PM)
	Not sure this is a bug. The method comment states that the text "must
	not contain line delimiters".
PRODUCT VERSION:

0.046 under J9 (Leap Frog)


Works correctly.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4548" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR: TableTree should support icon in 1st column (1G06WFT)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Images of different sizes can be added to the control, however the size of the image displayed in the associated</Line>
          <Line>Windows Common Control will be constrained to the size of the first image added to the ImageList.</Line>
          <Line>Images for all columns are added to the same ImageList and therefore must have the exact same height and WIDTH.</Line>
          <Line>This makes merging the +/- and the first column image have impact on every image in the TableTree</Line>
          <Line>2) There is a limit to how may images I can cram in the ImageList.  Having potentially 3 per row I think will quickly exceed the limit.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>EG (8/24/00 3:41:25 PM)	
	TableTree doesn't support showing an icon in the first column. The icon is eaten up
	by the +/- icon.
	Not being able to have an icon in the first column reduces the applicability
	of TableTree (we would like to use it in the Java plugin, but we can't).

NOTES:

VI (8/24/00 10:54:39 AM)
	TableTree is implemented using the Windows table widget and this only allows
	one image per column.  Sorry, there's nothing we can do.

AW (24.08.00 17:31:06)
	Why not combining the +/- icon with the client's icon into a single icon?

EG (8/29/00 3:35:01 PM)
	JFace has support for compositing icons see: 
		com.ibm.jface.examples.compositeimage.CompositeImageExample

CM (3/17/01 5:29:49 PM)
	P1/M1 (April 1st, 2001)
	Need to know the priority of 1GAJ9KP: SWT:ALL - TableTree class has no selection support for the SWT.CHECK style
	because these two PRs may conflict.

CM (3/28/01 5:09:33 PM)
	We investigated using the Windows "state image" feature in Table, but this is already being used by
	checkboxes if the Table is created with check style. It would also mean that we would have to provide
	platform-specific public API on Table to allow TableTree class to set/get state images. So we decided
	against this.

	VI is going to investigate merging the [+]/[-] images with the user's image. We would try to write it
	in such a way that only those who actually put an image in the first column would have to pay for
	the added slowness. We suspect there may be issues such as background color/transparency
	problems, hit test problems, selection highlight problems, and cheese problems, but we will have
	to try it first before we know for sure.

VI (4/4/2001 10:41:59 AM)
	Two major issues which prevent us from merging the [+]/[-] with the user's image and using the normal first column image:
	1) Images of different sizes can be added to the control, however the size of the image displayed in the associated 
        Windows Common Control will be constrained to the size of the first image added to the ImageList.
		Images for all columns are added to the same ImageList and therefore must have the exact same height and WIDTH.
		This makes merging the +/- and the first column image have impact on every image in the TableTree
	2) There is a limit to how may images I can cram in the ImageList.  Having potentially 3 per row I think will quickly exceed the limit.

VI (4/4/2001 05:20 PM)

	We have a PR that requests support for an image in the first column of a TableTree and I believe that you
	are the prime requestor.

	I have tried to make this work and below is the best I can do.  As you can see, there is a limitation on the
	underlying native widget which is that all images in the TableTree must have the exact same height and width.
	Consequently, when I leave enough room to merge the +/- image with the image you wish to show in the first column,
	this causes all the other images in the TableTree to be stretched width wise.

	&lt;picture&gt;

	It is my opinion that the current TableTree can not be made to work any better than this.  If this is not
	adequate for your use, the only alternative is to write a custom widget that does this and does not
	use the native widget.  Writing a full custom widget is not trivial.  It will probably require a month or
	two and will probably not give all the capability that is present in native List or Tree widgets (just
	because there are a lot of subtle things going on there and I won't have time to get them all).  I need
	to know if I should commence with a custom widget.  Also, as I have other responsibilities, Mike and I will
	have to discuss which of them will be set aside before I can do this work.

VI (4/27/2001 8:42:19 AM)
	Have received no feedback requesting a custom Tree or implementation of the solution presented above.
	Moving to Inactive.
Closing this bug report.  A new DCR should be raised from a better custom table 
tree.</WithStack>
    <WithOutStack>EG (8/24/00 3:41:25 PM)	
	TableTree doesn't support showing an icon in the first column. The icon is eaten up
	by the +/- icon.
	Not being able to have an icon in the first column reduces the applicability
	of TableTree (we would like to use it in the Java plugin, but we can't).

NOTES:

VI (8/24/00 10:54:39 AM)
	TableTree is implemented using the Windows table widget and this only allows
	one image per column.  Sorry, there's nothing we can do.

AW (24.08.00 17:31:06)
	Why not combining the +/- icon with the client's icon into a single icon?

EG (8/29/00 3:35:01 PM)
	JFace has support for compositing icons see: 
		com.ibm.jface.examples.compositeimage.CompositeImageExample

CM (3/17/01 5:29:49 PM)
	P1/M1 (April 1st, 2001)
	Need to know the priority of 1GAJ9KP: SWT:ALL - TableTree class has no selection support for the SWT.CHECK style
	because these two PRs may conflict.

CM (3/28/01 5:09:33 PM)
	We investigated using the Windows "state image" feature in Table, but this is already being used by
	checkboxes if the Table is created with check style. It would also mean that we would have to provide
	platform-specific public API on Table to allow TableTree class to set/get state images. So we decided
	against this.

	VI is going to investigate merging the [+]/[-] images with the user's image. We would try to write it
	in such a way that only those who actually put an image in the first column would have to pay for
	the added slowness. We suspect there may be issues such as background color/transparency
	problems, hit test problems, selection highlight problems, and cheese problems, but we will have
	to try it first before we know for sure.

VI (4/4/2001 10:41:59 AM)
	Two major issues which prevent us from merging the [+]/[-] with the user's image and using the normal first column image:
	1) Images of different sizes can be added to the control, however the size of the image displayed in the associated 
        Windows Common Control will be constrained to the size of the first image added to the ImageList.
		Images for all columns are added to the same ImageList and therefore must have the exact same height and WIDTH.
		This makes merging the +/- and the first column image have impact on every image in the TableTree
	2) There is a limit to how may images I can cram in the ImageList.  Having potentially 3 per row I think will quickly exceed the limit.

VI (4/4/2001 05:20 PM)

	We have a PR that requests support for an image in the first column of a TableTree and I believe that you
	are the prime requestor.

	I have tried to make this work and below is the best I can do.  As you can see, there is a limitation on the
	underlying native widget which is that all images in the TableTree must have the exact same height and width.
	Consequently, when I leave enough room to merge the +/- image with the image you wish to show in the first column,
	this causes all the other images in the TableTree to be stretched width wise.

	&lt;picture&gt;

	It is my opinion that the current TableTree can not be made to work any better than this.  If this is not
	adequate for your use, the only alternative is to write a custom widget that does this and does not
	use the native widget.  Writing a full custom widget is not trivial.  It will probably require a month or
	two and will probably not give all the capability that is present in native List or Tree widgets (just
	because there are a lot of subtle things going on there and I won't have time to get them all).  I need
	to know if I should commence with a custom widget.  Also, as I have other responsibilities, Mike and I will
	have to discuss which of them will be set aside before I can do this work.

VI (4/27/2001 8:42:19 AM)
	Have received no feedback requesting a custom Tree or implementation of the solution presented above.
	Moving to Inactive.
Closing this bug report.  A new DCR should be raised from a better custom table 
tree.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4549" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Default button lost after Button.setEnabled(false) (1G0KEH5)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="import">
        <location start="161" end="183" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="184" end="212" />
        <code>import com.ibm.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="213" end="243" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="244" end="273" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="275" end="1215" />
        <code>public class PR_1G07S0G {
	Shell shell;
	Button search;
	Button stop;
	
void create() {
	shell = new Shell();
	
	search = new Button(shell, 0);	
	search.setBounds(0, 35, 120, 30);
	search.setText("&amp;Search");
	
	stop = new Button(shell, 0);	
	stop.setBounds(0, 70, 120, 30);
	stop.setText("Sto&amp;p");
		
	shell.setDefaultButton(search);
	
	search.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			search.setEnabled(false);
			search.setEnabled(true);
		}
	});			

	shell.addListener(SWT.Activate, new Listener() {
		public void handleEvent(Event e) {
			search.setEnabled(false);
			search.setEnabled(true);
		}
	});
	shell.setSize(200, 200);
	shell.open();	
}

public static void main(String arguments[]) {
	PR_1G07S0G pr = new PR_1G07S0G();
	pr.create();
	pr.run();
}
void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Run the code below and notice that the stop button is the default button.
On Windows the default button is restored to the search button. 
This is inconsistent.

import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1G07S0G {
	Shell shell;
	Button search;
	Button stop;
	
void create() {
	shell = new Shell();
	
	search = new Button(shell, 0);	
	search.setBounds(0, 35, 120, 30);
	search.setText("&amp;Search");
	
	stop = new Button(shell, 0);	
	stop.setBounds(0, 70, 120, 30);
	stop.setText("Sto&amp;p");
		
	shell.setDefaultButton(search);
	
	search.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			search.setEnabled(false);
			search.setEnabled(true);
		}
	});			

	shell.addListener(SWT.Activate, new Listener() {
		public void handleEvent(Event e) {
			search.setEnabled(false);
			search.setEnabled(true);
		}
	});
	shell.setSize(200, 200);
	shell.open();	
}

public static void main(String arguments[]) {
	PR_1G07S0G pr = new PR_1G07S0G();
	pr.create();
	pr.run();
}
void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}

NOTES:

SN (2/5/01 6:39:43 PM)
	Platform problem.  Motif should be restoring the default button.
PRODUCT VERSION:
0.46 Motif


Looks like the behavior changed on Windows.
On Windows, when initially running the test case the search button is the 
default button. On subsequent search button selections the stop button becomes 
the default button.
On Motif the stop button is always the default button (this is the same 
behavior I originally PRd).
The question is what should happen to the default button when it is disabled 
(should there be no default button?) and when it is enabled again (should it be 
restored?). 

This behavior caused a bug in Leapfrog but doesn't currently cause problems to 
my knowledge.



On Windows
This has been fixed for a while.  The behavior is consistent between Windows 
and Motif.  This was fixed as part of the fixFocus() code that went into 
setEnabled() for 3.0.</WithStack>
    <WithOutStack>Run the code below and notice that the stop button is the default button.
On Windows the default button is restored to the search button. 
This is inconsistent.

import com.ibm.swt.*;
import com.ibm.swt.events.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1G07S0G {
	Shell shell;
	Button search;
	Button stop;
	
void create() {
	shell = new Shell();
	
	search = new Button(shell, 0);	
	search.setBounds(0, 35, 120, 30);
	search.setText("&amp;Search");
	
	stop = new Button(shell, 0);	
	stop.setBounds(0, 70, 120, 30);
	stop.setText("Sto&amp;p");
		
	shell.setDefaultButton(search);
	
	search.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			search.setEnabled(false);
			search.setEnabled(true);
		}
	});			

	shell.addListener(SWT.Activate, new Listener() {
		public void handleEvent(Event e) {
			search.setEnabled(false);
			search.setEnabled(true);
		}
	});
	shell.setSize(200, 200);
	shell.open();	
}

public static void main(String arguments[]) {
	PR_1G07S0G pr = new PR_1G07S0G();
	pr.create();
	pr.run();
}
void run() {
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ())
		if (!display.readAndDispatch ()) display.sleep ();
}
}

NOTES:

SN (2/5/01 6:39:43 PM)
	Platform problem.  Motif should be restoring the default button.
PRODUCT VERSION:
0.46 Motif


Looks like the behavior changed on Windows.
On Windows, when initially running the test case the search button is the 
default button. On subsequent search button selections the stop button becomes 
the default button.
On Motif the stop button is always the default button (this is the same 
behavior I originally PRd).
The question is what should happen to the default button when it is disabled 
(should there be no default button?) and when it is enabled again (should it be 
restored?). 

This behavior caused a bug in Leapfrog but doesn't currently cause problems to 
my knowledge.



On Windows
This has been fixed for a while.  The behavior is consistent between Windows 
and Motif.  This was fixed as part of the fixFocus() code that went into 
setEnabled() for 3.0.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4550" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>JUnit tests assumes boundary condition which is setting dependant (1G0LQKD)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If I set my Display properties to be True Color 32 and 1152 x 864, the JUnit tests listed below fail because in these tests
there is a hard coded boundary condition of screen size 1292 x 1036 which of course is not true in this case.  The boundary
condition should probably be obtained from system resources.

	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetBounds_1
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetBounds_2
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetBounds_3
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetSize_1
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetSize_2
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetSize_3

NOTES:

SN (2/5/01 1:04:50 PM)
	Fix this to avoid the hard code.
PRODUCT VERSION:

0.047
Windows


Should have been marked FIXED long ago.</WithStack>
    <WithOutStack>If I set my Display properties to be True Color 32 and 1152 x 864, the JUnit tests listed below fail because in these tests
there is a hard coded boundary condition of screen size 1292 x 1036 which of course is not true in this case.  The boundary
condition should probably be obtained from system resources.

	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetBounds_1
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetBounds_2
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetBounds_3
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetSize_1
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetSize_2
	com.ibm.swt.junit.automated.Test_com_ibm_swt_widgets_Shell.test_getSetSize_3

NOTES:

SN (2/5/01 1:04:50 PM)
	Fix this to avoid the hard code.
PRODUCT VERSION:

0.047
Windows


Should have been marked FIXED long ago.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4551" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Running 2 SWT explorers causes fatal error (1G0LXVB)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Running two SWT explorer examples will punt you out of VA/Java. The image that I was testing
has the new C DLL's installed. In previous versions there was Smalltalk code that explicitly prevented 
this case from happening.

NOTES:

SN (2/2/01 6:39:53 PM)
	Mcq to investigate.
PRODUCT VERSION:

Dev-win32-VA2000-SHIPPED-0.034
==&gt; NOTE: This has the new C code for the SWT natives





VAJ is no longer a supported platform,</WithStack>
    <WithOutStack>Running two SWT explorer examples will punt you out of VA/Java. The image that I was testing
has the new C DLL's installed. In previous versions there was Smalltalk code that explicitly prevented 
this case from happening.

NOTES:

SN (2/2/01 6:39:53 PM)
	Mcq to investigate.
PRODUCT VERSION:

Dev-win32-VA2000-SHIPPED-0.034
==&gt; NOTE: This has the new C code for the SWT natives





VAJ is no longer a supported platform,</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4552" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Adobe doesn't like ImageData... (1G0ZBE0)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I loaded then unloaded a GIF file (without applying any changes). The first one (the loaded) I'm able to read it with Adobe Photoshop5.0 (of course it made it)
but the other one generated by our GIFFileFormat... Adobe doesn't like it. It shows me this nice and usefull message:
		"Could not open the document because the file-format module cannot parse the file"

But, I can read it, for example, using IE or an other shareware like Paint Shop Pro...

I would not care if I I was not changing the ImageData building a new one. But I need to be able
to use Adobe Photoshop5.0 to check if the transformation is correct...

Any idea ? (including an other graphic tool to purchase :-) !)

Signed: The Artist !


NOTES:

SN (2/5/01 5:25:35 PM)
	This PR has timed out.  No sample code or image, nothing to work with.
Significant changes have been made in the image handling code. Since 
we have not heard from the customer, and do not have the tools to 
replicate the problem here, I'm closing the PR. Optimistically marking the 
PR as FIXED.</WithStack>
    <WithOutStack>I loaded then unloaded a GIF file (without applying any changes). The first one (the loaded) I'm able to read it with Adobe Photoshop5.0 (of course it made it)
but the other one generated by our GIFFileFormat... Adobe doesn't like it. It shows me this nice and usefull message:
		"Could not open the document because the file-format module cannot parse the file"

But, I can read it, for example, using IE or an other shareware like Paint Shop Pro...

I would not care if I I was not changing the ImageData building a new one. But I need to be able
to use Adobe Photoshop5.0 to check if the transformation is correct...

Any idea ? (including an other graphic tool to purchase :-) !)

Signed: The Artist !


NOTES:

SN (2/5/01 5:25:35 PM)
	This PR has timed out.  No sample code or image, nothing to work with.
Significant changes have been made in the image handling code. Since 
we have not heard from the customer, and do not have the tools to 
replicate the problem here, I'm closing the PR. Optimistically marking the 
PR as FIXED.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4553" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Motif on KDE2: Things don't redraw (1GA4H7Z)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When running VAME1.3 on Mandrake 7.2 using KDE2.01, things look like KDE
is stealing PAINT events.  I'll get a RH7 machine running and look into this.

NOTES:
	CM (3/8/01 3:54:20 PM)
		BGS to investigate.
PRODUCT VERSION:
VAME1.3 on Linux/Motif, running on KDE 2.01


This bug is old and eclipse is drawing properly on KDE 3. Closing.</WithStack>
    <WithOutStack>When running VAME1.3 on Mandrake 7.2 using KDE2.01, things look like KDE
is stealing PAINT events.  I'll get a RH7 machine running and look into this.

NOTES:
	CM (3/8/01 3:54:20 PM)
		BGS to investigate.
PRODUCT VERSION:
VAME1.3 on Linux/Motif, running on KDE 2.01


This bug is old and eclipse is drawing properly on KDE 3. Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4554" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Combo selection scrolls for certain fonts (1G1AD9Y)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="package">
        <location start="130" end="143" />
        <code>package test;</code>
      </source_code>
      <source_code type="import">
        <location start="144" end="166" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="167" end="197" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="198" end="227" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="229" end="893" />
        <code>public class PR_1G1AD9Y {

	public static void main(String[] args) {
		
		Shell shell= new Shell();
		Display display = shell.getDisplay();	
		Combo combo = new Combo(shell, SWT.NULL);
		Font font = new Font(display, "Times", 20, 0);
		combo.setFont(font);
		combo.setItems (new String [] {
			"0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1",
			"1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2",
			"3", "4", "5", "6", "7", "8", "9", "10"});
		combo.select(combo.indexOf("1"));
		combo.pack ();
				
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}
		font.dispose();
	}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1) Execute the following class.</Line>
          <Line>2) Drop down the combo box and select the value "1.2"</Line>
          <Line>3) Notice that all you can see is ".2"</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1) Execute the following class.
	2) Drop down the combo box and select the value "1.2"
	3) Notice that all you can see is ".2"

[
package test;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1G1AD9Y {

	public static void main(String[] args) {
		
		Shell shell= new Shell();
		Display display = shell.getDisplay();	
		Combo combo = new Combo(shell, SWT.NULL);
		Font font = new Font(display, "Times", 20, 0);
		combo.setFont(font);
		combo.setItems (new String [] {
			"0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1",
			"1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2",
			"3", "4", "5", "6", "7", "8", "9", "10"});
		combo.select(combo.indexOf("1"));
		combo.pack ();
				
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}
		font.dispose();
	}

}
]

NOTES:
	CM (9/14/00 5:18:13 PM)
		The value is scrolled to the right - if you move the text cursor
		to the left you can see the beginning of the "1.2".

	CM (9/14/00 5:19:32 PM)
		If you set SWT.READ_ONLY when you create the combo, then the bogus behavior
		does not happen (because there is no text cursor).

	CM (9/14/00 5:21:11 PM)
		This is not a problem for courier, Script, and Ariel.
		Note however that "Comic Sans MS" also fails in the same manner.
		Did not try any other fonts.

SN (2/5/01 1:08:53 PM)
	SN to fix. (base on fix for 1 line text)
PRODUCT VERSION:
	SWT win32 0.047a


Fixed &gt; 20020815</WithStack>
    <WithOutStack>1) Execute the following class.
	2) Drop down the combo box and select the value "1.2"
	3) Notice that all you can see is ".2"

[
package test;

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1G1AD9Y {

	public static void main(String[] args) {
		
		Shell shell= new Shell();
		Display display = shell.getDisplay();	
		Combo combo = new Combo(shell, SWT.NULL);
		Font font = new Font(display, "Times", 20, 0);
		combo.setFont(font);
		combo.setItems (new String [] {
			"0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1",
			"1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2",
			"3", "4", "5", "6", "7", "8", "9", "10"});
		combo.select(combo.indexOf("1"));
		combo.pack ();
				
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) display.sleep();
		}
		font.dispose();
	}

}
]

NOTES:
	CM (9/14/00 5:18:13 PM)
		The value is scrolled to the right - if you move the text cursor
		to the left you can see the beginning of the "1.2".

	CM (9/14/00 5:19:32 PM)
		If you set SWT.READ_ONLY when you create the combo, then the bogus behavior
		does not happen (because there is no text cursor).

	CM (9/14/00 5:21:11 PM)
		This is not a problem for courier, Script, and Ariel.
		Note however that "Comic Sans MS" also fails in the same manner.
		Did not try any other fonts.

SN (2/5/01 1:08:53 PM)
	SN to fix. (base on fix for 1 line text)
PRODUCT VERSION:
	SWT win32 0.047a


Fixed &gt; 20020815</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4555" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>calling setImage on a table item a second time results in image being scaled to previous image size (1G1ZZUE)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="6">
      <source_code type="import">
        <location start="418" end="448" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="449" end="470" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="471" end="501" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="502" end="529" />
        <code>import com.ibm.swt.image.*;</code>
      </source_code>
      <source_code type="import">
        <location start="530" end="558" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="class">
        <location start="560" end="1790" />
        <code>public class PR_1G1ZZUE {

public static void main(String[] args) {
	
	Color red = new Color(null, 255, 0, 0);
	Color blue = new Color(null, 0, 0, 255);
	Font font = new Font(null, "MS Sans Serif", 31, SWT.NULL);
	
	Shell shell = new Shell();
	Canvas canvas = new Canvas (shell, SWT.NONE);
	canvas.setBounds(10, 10, 200, 200);
	Table table = new Table(shell, SWT.NONE);
	table.setBounds(220, 10, 200, 200);
	TableItem item = new TableItem(table, SWT.NONE);
	item.setText("Table entry");
	shell.open();
	
	ImageData source = new ImageData(PR_1G1ZZUE.class.getResourceAsStream("image.bmp"));
	Image image2 = new Image(null, source);
	
	GC gc = new GC(canvas);
	gc.drawImage(image2, 0, 0);
	gc.dispose();
		
	item.setImage(image2);
	
	Image image1 = new Image(null, 20, 20);
	gc = new GC(image1);
	gc.setBackground(red);
	gc.fillRectangle(0, 0, 20, 20);
	gc.dispose();
	
	gc = new GC(canvas);
	gc.drawImage(image1, 0, 0);
	gc.dispose();
	
	item.setImage(image1);
	
	Display display = shell.getDisplay();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}

	if ((shell != null) &amp;&amp; (!shell.isDisposed()))
		shell.dispose();
	shell = null;
	
	red.dispose();
	image1.dispose();
	image2.dispose();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Set the image of a table item to an image of one size and then set it again to an image of a different size.
The second time you set the image,  the image in the table remains the size of the first image and the image in
the table is scaled to (either stretched or shrunk dependding on the size change).

!!!!! Before running this code, create an image called image.bmp that is much bigger than 20 pixels x 20 pixels.

import com.ibm.swt.widgets.*;
import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.image.*;
import com.ibm.swt.layout.*;

public class PR_1G1ZZUE {

public static void main(String[] args) {
	
	Color red = new Color(null, 255, 0, 0);
	Color blue = new Color(null, 0, 0, 255);
	Font font = new Font(null, "MS Sans Serif", 31, SWT.NULL);
	
	Shell shell = new Shell();
	Canvas canvas = new Canvas (shell, SWT.NONE);
	canvas.setBounds(10, 10, 200, 200);
	Table table = new Table(shell, SWT.NONE);
	table.setBounds(220, 10, 200, 200);
	TableItem item = new TableItem(table, SWT.NONE);
	item.setText("Table entry");
	shell.open();
	
	ImageData source = new ImageData(PR_1G1ZZUE.class.getResourceAsStream("image.bmp"));
	Image image2 = new Image(null, source);
	
	GC gc = new GC(canvas);
	gc.drawImage(image2, 0, 0);
	gc.dispose();
		
	item.setImage(image2);
	
	Image image1 = new Image(null, 20, 20);
	gc = new GC(image1);
	gc.setBackground(red);
	gc.fillRectangle(0, 0, 20, 20);
	gc.dispose();
	
	gc = new GC(canvas);
	gc.drawImage(image1, 0, 0);
	gc.dispose();
	
	item.setImage(image1);
	
	Display display = shell.getDisplay();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}

	if ((shell != null) &amp;&amp; (!shell.isDisposed()))
		shell.dispose();
	shell = null;
	
	red.dispose();
	image1.dispose();
	image2.dispose();
}
}

NOTES:

SN (2/5/01 6:40:32 PM)
	No plans to fix this at this time.
PRODUCT VERSION:

WIN 98


closing</WithStack>
    <WithOutStack>Set the image of a table item to an image of one size and then set it again to an image of a different size.
The second time you set the image,  the image in the table remains the size of the first image and the image in
the table is scaled to (either stretched or shrunk dependding on the size change).

!!!!! Before running this code, create an image called image.bmp that is much bigger than 20 pixels x 20 pixels.

import com.ibm.swt.widgets.*;
import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.image.*;
import com.ibm.swt.layout.*;

public class PR_1G1ZZUE {

public static void main(String[] args) {
	
	Color red = new Color(null, 255, 0, 0);
	Color blue = new Color(null, 0, 0, 255);
	Font font = new Font(null, "MS Sans Serif", 31, SWT.NULL);
	
	Shell shell = new Shell();
	Canvas canvas = new Canvas (shell, SWT.NONE);
	canvas.setBounds(10, 10, 200, 200);
	Table table = new Table(shell, SWT.NONE);
	table.setBounds(220, 10, 200, 200);
	TableItem item = new TableItem(table, SWT.NONE);
	item.setText("Table entry");
	shell.open();
	
	ImageData source = new ImageData(PR_1G1ZZUE.class.getResourceAsStream("image.bmp"));
	Image image2 = new Image(null, source);
	
	GC gc = new GC(canvas);
	gc.drawImage(image2, 0, 0);
	gc.dispose();
		
	item.setImage(image2);
	
	Image image1 = new Image(null, 20, 20);
	gc = new GC(image1);
	gc.setBackground(red);
	gc.fillRectangle(0, 0, 20, 20);
	gc.dispose();
	
	gc = new GC(canvas);
	gc.drawImage(image1, 0, 0);
	gc.dispose();
	
	item.setImage(image1);
	
	Display display = shell.getDisplay();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}

	if ((shell != null) &amp;&amp; (!shell.isDisposed()))
		shell.dispose();
	shell = null;
	
	red.dispose();
	image1.dispose();
	image2.dispose();
}
}

NOTES:

SN (2/5/01 6:40:32 PM)
	No plans to fix this at this time.
PRODUCT VERSION:

WIN 98


closing</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4556" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>SWT windows are not closed when java program is terminated in the debugger. (1G1OO9D)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Open the "WebSphere Studio Workbench"
	Open the VAJ debugger.
	Terminate the program.
	
	The "WebSphere Studio Workbench" does not close.

NOTES:

	McQ (04/10/2000 9:34:20 AM) -
		Do the windows close as expected when this is run under windows?

SN (2/2/01 6:48:24 PM)
	Mcq to investigate this under VAJ.
PRODUCT VERSION:
	VAJ 3.5 dev image + SWT 047.


VAJ is no longer a supported platform.</WithStack>
    <WithOutStack>Open the "WebSphere Studio Workbench"
	Open the VAJ debugger.
	Terminate the program.
	
	The "WebSphere Studio Workbench" does not close.

NOTES:

	McQ (04/10/2000 9:34:20 AM) -
		Do the windows close as expected when this is run under windows?

SN (2/2/01 6:48:24 PM)
	Mcq to investigate this under VAJ.
PRODUCT VERSION:
	VAJ 3.5 dev image + SWT 047.


VAJ is no longer a supported platform.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4557" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Neutrino" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Use shared memory for image data (1G1P6RF)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>We are currently using plain-old memory for image data, but could get 
performance gains by
using shared memory instead.  To do this, we need to use the PgDrawImage_mx 
function
instead of PgDrawImage function.  Also, we need to allocate/free the memory 
with different
code.  I have some code to do this already in com.ibm.swt.widgets.CVoidShmem.  
The
idea is to allocate the image data where needed (I think just in the 
com.ibm.swt.graphics.Image
class) using this class instead of the typical CVoid class. 

Having said all that, we need to better understand the implications of using 
shared memory.
For instance, if the java app traps, this memory is not automatically freed, so 
you can quickly
start to get out-of-memory conditions.  We need to talk to QSSL about this.  
Darrin Fry 
suggested adding a signal handler to do the clean up, but I don't have any more 
details.

NOTES:

PJM (2/2/01 8:51:46 AM)
	Also need to keep in mind:
		we'd probably want to put the alpha data in shared memory
		if we run out of shared memory, we will want to fall back to 
non-shared memory

CM (3/19/01 12:32:08 PM)
	No time for this kind of change at this point.
	Moving to Inactive.

SSQ (4/10/01 4:32:55 PM) -
	Things to remember:

		1) Drawing on memory context using the "mx" functions with non 
shared memory fails

PJM (9/5/2001 3:13:36 PM)
	Moving back to Inbox since this perceived as "high priority" Some 
amount of work has been done here; needs to cleaned up, formalized, 
rationalized, etc ...
	I'll see if I can't get them to append to the PR some of their 
experimental results.

PJM (9/5/2001 3:21:06 PM)
	Current thoughts are providing 'pools' of memory for which we can 
suballocate image
	data; one for video memory, one for shared memory.  When these fill up, 
we resort
	back to standard os memory.  Memory limits should be set by system 
properties, with
	the defaults for both pools set to 0.  Customers can decide if they 
want to use non-os
	memory for image data, and how much they want to use ...
PRODUCT VERSION:

	SWT 0.32 for NTO as of 2000/09/22


This is a really old problem report and much has changed since then.  From memory, in the benchmarks we ran at the time, the shared memory calls were not much faster and came with various restrictions.  Closing.</WithStack>
    <WithOutStack>We are currently using plain-old memory for image data, but could get 
performance gains by
using shared memory instead.  To do this, we need to use the PgDrawImage_mx 
function
instead of PgDrawImage function.  Also, we need to allocate/free the memory 
with different
code.  I have some code to do this already in com.ibm.swt.widgets.CVoidShmem.  
The
idea is to allocate the image data where needed (I think just in the 
com.ibm.swt.graphics.Image
class) using this class instead of the typical CVoid class. 

Having said all that, we need to better understand the implications of using 
shared memory.
For instance, if the java app traps, this memory is not automatically freed, so 
you can quickly
start to get out-of-memory conditions.  We need to talk to QSSL about this.  
Darrin Fry 
suggested adding a signal handler to do the clean up, but I don't have any more 
details.

NOTES:

PJM (2/2/01 8:51:46 AM)
	Also need to keep in mind:
		we'd probably want to put the alpha data in shared memory
		if we run out of shared memory, we will want to fall back to 
non-shared memory

CM (3/19/01 12:32:08 PM)
	No time for this kind of change at this point.
	Moving to Inactive.

SSQ (4/10/01 4:32:55 PM) -
	Things to remember:

		1) Drawing on memory context using the "mx" functions with non 
shared memory fails

PJM (9/5/2001 3:13:36 PM)
	Moving back to Inbox since this perceived as "high priority" Some 
amount of work has been done here; needs to cleaned up, formalized, 
rationalized, etc ...
	I'll see if I can't get them to append to the PR some of their 
experimental results.

PJM (9/5/2001 3:21:06 PM)
	Current thoughts are providing 'pools' of memory for which we can 
suballocate image
	data; one for video memory, one for shared memory.  When these fill up, 
we resort
	back to standard os memory.  Memory limits should be set by system 
properties, with
	the defaults for both pools set to 0.  Customers can decide if they 
want to use non-os
	memory for image data, and how much they want to use ...
PRODUCT VERSION:

	SWT 0.32 for NTO as of 2000/09/22


This is a really old problem report and much has changed since then.  From memory, in the benchmarks we ran at the time, the shared memory calls were not much faster and came with various restrictions.  Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4558" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="4727" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Unable to have Save Dialog do overwrite? check (1G21QFN)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>When using native system dialogs, I am unable to have the "Save" dialog check to see if
	the file exists and cause an "Overwrite?" message box. The dialog returns only a String
	representing the filename that was entered and overwrite checking can be done once the
	"Save" dialog has been closed.  However, the correct behaviour should be to have the
	"Save" dialog do the file exists check and have the user able to choose Yes/No, and be
	able to choose another filename if no (automatically returning to the "Save" dialog without
	closing it).  That is, the "Save" dialog would be the parent of the "Overwrite?" message box.

NOTES:

	KWMK (9/29/00 12:03:23 PM) -
		The work around is to have the "Save" dialog close and then do file exists checking
		afterwards.  If the user clicks "no" to the overwrite message box, however, they are
		not automatically returned to the "Save" dialog on which they clicked the "save" button.

VI (10/5/2000 11:44:37 AM)
 The OFN_OVERWRITEPROMPT flag will give this behaviour.

	SN (2/5/01 1:10:15 PM)
		It is not easy (possible?) to offer this functionality on Motif.  The problem is that there
		is no hook into file dialog on Motif and that means we will not be able to implement
		this feature.  If we offer the feature on Windows, the code/behavior will not be portable.
PRODUCT VERSION:

	com.ibm.swt.widgets &lt;win32 0.047a&gt;


Can not provide this functionality portably.

Couldn't this be implemented as a hint that would not do anything on Motif and 
other platforms that don't support this?
If this is implemented as a hint, then code will be written to rely on this and 
that code will not check for overwrite on platforms other than Windows.  David 
and MCQ, do you have any ideas?
Sorry MCQ, reassigning to me.
On those other platforms, the method that answers whether the save operation 
was successful would always return true, since that's basically what is 
happening right now without the overwrite check.
How is the application supposed to know whether it needs to prompt for an 
overwrite?  It will either never prompt or prompt twice on Windows.  I suppose 
we could prompt on the other plaforms after the user selects the file, if the 
file exist and the user doesn't want to overwrite then open the file dialog 
again.

This is currently low priority.


*** This bug has been marked as a duplicate of 4727 ***</WithStack>
    <WithOutStack>When using native system dialogs, I am unable to have the "Save" dialog check to see if
	the file exists and cause an "Overwrite?" message box. The dialog returns only a String
	representing the filename that was entered and overwrite checking can be done once the
	"Save" dialog has been closed.  However, the correct behaviour should be to have the
	"Save" dialog do the file exists check and have the user able to choose Yes/No, and be
	able to choose another filename if no (automatically returning to the "Save" dialog without
	closing it).  That is, the "Save" dialog would be the parent of the "Overwrite?" message box.

NOTES:

	KWMK (9/29/00 12:03:23 PM) -
		The work around is to have the "Save" dialog close and then do file exists checking
		afterwards.  If the user clicks "no" to the overwrite message box, however, they are
		not automatically returned to the "Save" dialog on which they clicked the "save" button.

VI (10/5/2000 11:44:37 AM)
 The OFN_OVERWRITEPROMPT flag will give this behaviour.

	SN (2/5/01 1:10:15 PM)
		It is not easy (possible?) to offer this functionality on Motif.  The problem is that there
		is no hook into file dialog on Motif and that means we will not be able to implement
		this feature.  If we offer the feature on Windows, the code/behavior will not be portable.
PRODUCT VERSION:

	com.ibm.swt.widgets &lt;win32 0.047a&gt;


Can not provide this functionality portably.

Couldn't this be implemented as a hint that would not do anything on Motif and 
other platforms that don't support this?
If this is implemented as a hint, then code will be written to rely on this and 
that code will not check for overwrite on platforms other than Windows.  David 
and MCQ, do you have any ideas?
Sorry MCQ, reassigning to me.
On those other platforms, the method that answers whether the save operation 
was successful would always return true, since that's basically what is 
happening right now without the overwrite check.
How is the application supposed to know whether it needs to prompt for an 
overwrite?  It will either never prompt or prompt twice on Windows.  I suppose 
we could prompt on the other plaforms after the user selects the file, if the 
file exist and the user doesn't want to overwrite then open the file dialog 
again.

This is currently low priority.


*** This bug has been marked as a duplicate of 4727 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4559" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="7845" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR: add API setItemCount to Combo (1G2O7LQ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Would like to be able to set the number of items in a combo.
	I have 6 items in my combo, and it is silly that	the user has
	to scroll to choose item number 6. (because the combo comes
	up with only 5 items in the list).

NOTES:

SN (2/5/01 5:24:26 PM)
	Not a priority.
PRODUCT VERSION:
	SWT 0.047




*** This bug has been marked as a duplicate of 7845 ***</WithStack>
    <WithOutStack>Would like to be able to set the number of items in a combo.
	I have 6 items in my combo, and it is silly that	the user has
	to scroll to choose item number 6. (because the combo comes
	up with only 5 items in the list).

NOTES:

SN (2/5/01 5:24:26 PM)
	Not a priority.
PRODUCT VERSION:
	SWT 0.047




*** This bug has been marked as a duplicate of 7845 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4560" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="24877" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="enhancement" />
    <Summery>DCR: New FileDialog getFilterExtension API (1G29IB0)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I would like to see new API on FileDialog to ask what filter the user had 
chosen when he clicked OK.

	For example, if I setFilterExtensions to "*.bmp" and "*.gif",
		and the user selects "*.gif",
		and then types a filename,
		and then clicks OK,
	there is currently no way for me to find out that "*.gif" was selected.

	So, in my application, I have to do things like parse the 
filename to see
	what type of image the user wanted me to save.


	The way I handled this in my app is to fail the save.
	I have to bring up this dialog that says "I can't save a .bar 
file".

	We should provide API to handle this.
	The API should probably be called something like 
FileDialog.getFilterExtension
	(notice that it is singular).

NOTES:

VI (10/5/2000 3:12:16 PM)
	In OPENFILENAME there is a field called nFilterIndex which specifies 
the index of the currently selected filter in the 
	File Types control. The buffer pointed to by lpstrFilter contains pairs 
of strings that define the filters. The first
	pair of strings has an index value of 1, the second pair 2, and so on. 
An index of zero indicates the custom filter 
	specified by lpstrCustomFilter. You can specify an index on input to 
indicate the initial filter description and filter 
	pattern for the dialog box. When the user selects a file, nFilterIndex 
returns the index of the currently displayed filter. 
	If nFilterIndex is zero and lpstrCustomFilter is NULL, the system uses 
the first filter in the lpstrFilter buffer. If all
	 three members are zero or NULL, the system does not use any filters 
and does not show any files in the file list 
	control of the dialog box. 

SN (2/5/01 1:58:20 PM)
	SN to implement.

CM (3/8/01 4:43:27 PM)
	Please tell me when this is done, because I should change my image 
example to use it.

CM (4/17/2001 3:55:35 PM)
	It has been suggested that if we add getFilterExtension API,
	then we could/should also add setFilterExtension API.
	This would set the _initial_ filter extension shown.
	(currently, the initial filter extension is always the first one in the 
list).
Chrix, didn't we make some change recently that made this unnecessary?  If so, 
please close this PR.


*** This bug has been marked as a duplicate of 24877 ***</WithStack>
    <WithOutStack>I would like to see new API on FileDialog to ask what filter the user had 
chosen when he clicked OK.

	For example, if I setFilterExtensions to "*.bmp" and "*.gif",
		and the user selects "*.gif",
		and then types a filename,
		and then clicks OK,
	there is currently no way for me to find out that "*.gif" was selected.

	So, in my application, I have to do things like parse the 
filename to see
	what type of image the user wanted me to save.


	The way I handled this in my app is to fail the save.
	I have to bring up this dialog that says "I can't save a .bar 
file".

	We should provide API to handle this.
	The API should probably be called something like 
FileDialog.getFilterExtension
	(notice that it is singular).

NOTES:

VI (10/5/2000 3:12:16 PM)
	In OPENFILENAME there is a field called nFilterIndex which specifies 
the index of the currently selected filter in the 
	File Types control. The buffer pointed to by lpstrFilter contains pairs 
of strings that define the filters. The first
	pair of strings has an index value of 1, the second pair 2, and so on. 
An index of zero indicates the custom filter 
	specified by lpstrCustomFilter. You can specify an index on input to 
indicate the initial filter description and filter 
	pattern for the dialog box. When the user selects a file, nFilterIndex 
returns the index of the currently displayed filter. 
	If nFilterIndex is zero and lpstrCustomFilter is NULL, the system uses 
the first filter in the lpstrFilter buffer. If all
	 three members are zero or NULL, the system does not use any filters 
and does not show any files in the file list 
	control of the dialog box. 

SN (2/5/01 1:58:20 PM)
	SN to implement.

CM (3/8/01 4:43:27 PM)
	Please tell me when this is done, because I should change my image 
example to use it.

CM (4/17/2001 3:55:35 PM)
	It has been suggested that if we add getFilterExtension API,
	then we could/should also add setFilterExtension API.
	This would set the _initial_ filter extension shown.
	(currently, the initial filter extension is always the first one in the 
list).
Chrix, didn't we make some change recently that made this unnecessary?  If so, 
please close this PR.


*** This bug has been marked as a duplicate of 24877 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4561" />
    <CreationDate amount="2001-10-11 14:18:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR: Add FileDialog 'extension switching' behavior (1G29IR2)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>- open MS Word</Line>
          <Line>- File -&gt; Save As...</Line>
          <Line>- notice the name of the default file:  "Doc1.doc"</Line>
          <Line>- now, change the 'Save as type' combo to: "Text Only (*.txt)"</Line>
          <Line>- notice that the filename changes to "Doc1.txt"</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>There is some free behavior that other file dialogs. I was surprised that we 
don't have it.
I can show it to you, or just follow these steps:

- open MS Word
- File -&gt; Save As...
- notice the name of the default file:  "Doc1.doc"
- now, change the 'Save as type' combo to: "Text Only (*.txt)"
- notice that the filename changes to "Doc1.txt"

This is very nice behavior, and totally expected by all users these days.
How much work is it?

NOTES:

VI (10/5/2000 2:56:58 PM)
	In OPENFILENAME there is a field called lpstrDefExt which is a pointer 
to a buffer that contains the default extension. 
	GetOpenFileName and GetSaveFileName append this extension to the file 
name if the user fails to type an extension. 
	This string can be any length, but only the first three characters are 
appended. The string should not contain a period (.). 
	If this member is NULL and the user fails to type an extension, no 
extension is appended.  Currently we are passing in null.

SN (2/5/01 1:59:21 PM)
	SN to implement.  Can be a hint on X.
Sory, DIDNTFIX.</WithStack>
    <WithOutStack>There is some free behavior that other file dialogs. I was surprised that we 
don't have it.
I can show it to you, or just follow these steps:

- open MS Word
- File -&gt; Save As...
- notice the name of the default file:  "Doc1.doc"
- now, change the 'Save as type' combo to: "Text Only (*.txt)"
- notice that the filename changes to "Doc1.txt"

This is very nice behavior, and totally expected by all users these days.
How much work is it?

NOTES:

VI (10/5/2000 2:56:58 PM)
	In OPENFILENAME there is a field called lpstrDefExt which is a pointer 
to a buffer that contains the default extension. 
	GetOpenFileName and GetSaveFileName append this extension to the file 
name if the user fails to type an extension. 
	This string can be any length, but only the first three characters are 
appended. The string should not contain a period (.). 
	If this member is NULL and the user fails to type an extension, no 
extension is appended.  Currently we are passing in null.

SN (2/5/01 1:59:21 PM)
	SN to implement.  Can be a hint on X.
Sory, DIDNTFIX.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4562" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>GC.drawText needs substring support (1G4S5KT)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>GC.drawString/Text always draws the entire String.  This means that callers who want to paint
	a substring must first create the substring.  Creating a new Object in general is extremely expensive
	and can add up fast.

	In addition, GC.drawString/Text iterates through the char array twice, I think, when massaging the array
	of characters.  Could this alternatively be done A) in one pass B) in C code rather than Java code?

NOTES:

	McQ (23/11/2000 12:49:42 PM) -
		I've looked at the code. Adding "start/end" versions of drawString and drawText are possible.
		Examples of real world performance problems caused by not having these should be provided.
		We will discuss adding them at that time.

TRH (1/19/2001 10:30:40 AM)
	We are doing Paragraph flowing, or word wrapping.  See Notepad.exe Format menu.
	Right now, Converter.wcsToMbcs(int, String) is taking 10 times longer than the call to substring.
	Please see 1G7P8V4.  Once the Converter becomes faster, or perhaps Native, then calling Substring
	or not will actually have more of an impact.

SN (2/5/01 2:59:36 PM)
	Defer optimization until we have a real world example.

AW (07.03.01 13:02:53)
	The time to create a substring may not be a performance problem but the time spent in GC to clean up the mess later
	definitively is.
PRODUCT VERSION:
	
	SWT 047


We won't be doing this.</WithStack>
    <WithOutStack>GC.drawString/Text always draws the entire String.  This means that callers who want to paint
	a substring must first create the substring.  Creating a new Object in general is extremely expensive
	and can add up fast.

	In addition, GC.drawString/Text iterates through the char array twice, I think, when massaging the array
	of characters.  Could this alternatively be done A) in one pass B) in C code rather than Java code?

NOTES:

	McQ (23/11/2000 12:49:42 PM) -
		I've looked at the code. Adding "start/end" versions of drawString and drawText are possible.
		Examples of real world performance problems caused by not having these should be provided.
		We will discuss adding them at that time.

TRH (1/19/2001 10:30:40 AM)
	We are doing Paragraph flowing, or word wrapping.  See Notepad.exe Format menu.
	Right now, Converter.wcsToMbcs(int, String) is taking 10 times longer than the call to substring.
	Please see 1G7P8V4.  Once the Converter becomes faster, or perhaps Native, then calling Substring
	or not will actually have more of an impact.

SN (2/5/01 2:59:36 PM)
	Defer optimization until we have a real world example.

AW (07.03.01 13:02:53)
	The time to create a substring may not be a performance problem but the time spent in GC to clean up the mess later
	definitively is.
PRODUCT VERSION:
	
	SWT 047


We won't be doing this.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4563" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux" />
    <priority amount="P5" />
    <bug_severity amount="minor" />
    <Summery>Need support for *.xpm and *.png image file formats (1G3HWSA)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The program support classes are required to look up icons for given extensions or application
names. Gnome answers these queries with *.png files, KDE with *.xpm. It would be very nice
if SWT Images could read these files. 

NOTES:

JH (12/7/00 11:29:59 AM) -
	Reading PNG supported as of SWT 0.52.  XPM hack supported on X, nothing else needed.

SN (2/5/01 2:54:02 PM)
	Still need to write out PNG files.
If we are not going to do anything more about this, please close the PR.

Marking this PR fixed.
The remaining PNG issue is covered in this other PR:
http://dev.eclipse.org/bugs/show_bug.cgi?id=17488</WithStack>
    <WithOutStack>The program support classes are required to look up icons for given extensions or application
names. Gnome answers these queries with *.png files, KDE with *.xpm. It would be very nice
if SWT Images could read these files. 

NOTES:

JH (12/7/00 11:29:59 AM) -
	Reading PNG supported as of SWT 0.52.  XPM hack supported on X, nothing else needed.

SN (2/5/01 2:54:02 PM)
	Still need to write out PNG files.
If we are not going to do anything more about this, please close the PR.

Marking this PR fixed.
The remaining PNG issue is covered in this other PR:
http://dev.eclipse.org/bugs/show_bug.cgi?id=17488</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4564" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Font metrics wrong for some italics fonts (1G2QFBA)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="import">
        <location start="600" end="622" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="623" end="653" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="654" end="683" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="685" end="2099" />
        <code>public class PR_1G2QFBA {

public static void main(String[] args) {
	final Shell shell = new Shell();
	final Canvas canvas = new Canvas(shell, 0);//SWT.NO_MERGE_PAINTS);

// try Arial, Courier, MS Sans Serif (only Arial works)
	canvas.setFont(new Font(shell.getDisplay(), "Courier", 12, SWT.ITALIC));
	shell.addListener(SWT.Resize, new Listener() {
		public void handleEvent(Event e) {
			canvas.setSize(shell.getSize());
		}
	});
	canvas.addListener(SWT.Paint, new Listener() {
		public void handleEvent(Event e) {
			Point size = canvas.getSize();
			FontMetrics fontMetrics = e.gc.getFontMetrics();
			GC gc = e.gc;
			int charWidth = gc.getCharWidth('T');	
			
			gc.drawText("Text", 0, 0);
			gc.drawLine(0, fontMetrics.getHeight(), charWidth, fontMetrics.getHeight());
			gc.drawLine(charWidth, fontMetrics.getHeight() + 2, charWidth + gc.getCharWidth('e'), fontMetrics.getHeight() + 2);
			
			charWidth = gc.getAdvanceWidth('T');
			gc.drawLine(0, fontMetrics.getHeight() * 2, charWidth, fontMetrics.getHeight() * 2);
			gc.drawLine(charWidth, fontMetrics.getHeight() * 2 + 2, charWidth + gc.getAdvanceWidth('e'), fontMetrics.getHeight() * 2 + 2);

			gc.drawLine(0, fontMetrics.getHeight() * 3, gc.textExtent("Te").x, fontMetrics.getHeight() * 3);
		}
	});
	shell.open();
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}	

}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="NOT_ECLIPSE" />
    <WithStack>Run the test below. It draws horizontal lines underneath a test string.
The first two lines measure the 'T' and 'e' using GC.getCharWidth. This returns too small a
constant for some italics fonts.
The third and fourth line measure using getAdvanceWidth. This returns too big a
constant for some italics fonts.
The last line measure "Te" using GC.textExtent. This comes closest to what I would consider
the actual text width but is still too much.
The test only shows correct results when Arial is used (because it is not an italics but a slanted font?).
Q: How do I accurately measure italics fonts?

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1G2QFBA {

public static void main(String[] args) {
	final Shell shell = new Shell();
	final Canvas canvas = new Canvas(shell, 0);//SWT.NO_MERGE_PAINTS);

// try Arial, Courier, MS Sans Serif (only Arial works)
	canvas.setFont(new Font(shell.getDisplay(), "Courier", 12, SWT.ITALIC));
	shell.addListener(SWT.Resize, new Listener() {
		public void handleEvent(Event e) {
			canvas.setSize(shell.getSize());
		}
	});
	canvas.addListener(SWT.Paint, new Listener() {
		public void handleEvent(Event e) {
			Point size = canvas.getSize();
			FontMetrics fontMetrics = e.gc.getFontMetrics();
			GC gc = e.gc;
			int charWidth = gc.getCharWidth('T');	
			
			gc.drawText("Text", 0, 0);
			gc.drawLine(0, fontMetrics.getHeight(), charWidth, fontMetrics.getHeight());
			gc.drawLine(charWidth, fontMetrics.getHeight() + 2, charWidth + gc.getCharWidth('e'), fontMetrics.getHeight() + 2);
			
			charWidth = gc.getAdvanceWidth('T');
			gc.drawLine(0, fontMetrics.getHeight() * 2, charWidth, fontMetrics.getHeight() * 2);
			gc.drawLine(charWidth, fontMetrics.getHeight() * 2 + 2, charWidth + gc.getAdvanceWidth('e'), fontMetrics.getHeight() * 2 + 2);

			gc.drawLine(0, fontMetrics.getHeight() * 3, gc.textExtent("Te").x, fontMetrics.getHeight() * 3);
		}
	});
	shell.open();
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}	

}
}



NOTES:
	CM (2/6/01 1:41:19 PM)
		CM to investigate.

	CM (5/30/2001 11:59:56 AM)
		I have seen this many times before - particularly on Unix/Linux systems.	
		It seems that the italic fonts just don't have the fontmetrics correct.
		Usually, truetype italic fonts are ok.
PRODUCT VERSION:
SWT 0.47a


Closing for lack of activity. This is almost certainly caused by problems with the actual fonts</WithStack>
    <WithOutStack>Run the test below. It draws horizontal lines underneath a test string.
The first two lines measure the 'T' and 'e' using GC.getCharWidth. This returns too small a
constant for some italics fonts.
The third and fourth line measure using getAdvanceWidth. This returns too big a
constant for some italics fonts.
The last line measure "Te" using GC.textExtent. This comes closest to what I would consider
the actual text width but is still too much.
The test only shows correct results when Arial is used (because it is not an italics but a slanted font?).
Q: How do I accurately measure italics fonts?

import com.ibm.swt.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;

public class PR_1G2QFBA {

public static void main(String[] args) {
	final Shell shell = new Shell();
	final Canvas canvas = new Canvas(shell, 0);//SWT.NO_MERGE_PAINTS);

// try Arial, Courier, MS Sans Serif (only Arial works)
	canvas.setFont(new Font(shell.getDisplay(), "Courier", 12, SWT.ITALIC));
	shell.addListener(SWT.Resize, new Listener() {
		public void handleEvent(Event e) {
			canvas.setSize(shell.getSize());
		}
	});
	canvas.addListener(SWT.Paint, new Listener() {
		public void handleEvent(Event e) {
			Point size = canvas.getSize();
			FontMetrics fontMetrics = e.gc.getFontMetrics();
			GC gc = e.gc;
			int charWidth = gc.getCharWidth('T');	
			
			gc.drawText("Text", 0, 0);
			gc.drawLine(0, fontMetrics.getHeight(), charWidth, fontMetrics.getHeight());
			gc.drawLine(charWidth, fontMetrics.getHeight() + 2, charWidth + gc.getCharWidth('e'), fontMetrics.getHeight() + 2);
			
			charWidth = gc.getAdvanceWidth('T');
			gc.drawLine(0, fontMetrics.getHeight() * 2, charWidth, fontMetrics.getHeight() * 2);
			gc.drawLine(charWidth, fontMetrics.getHeight() * 2 + 2, charWidth + gc.getAdvanceWidth('e'), fontMetrics.getHeight() * 2 + 2);

			gc.drawLine(0, fontMetrics.getHeight() * 3, gc.textExtent("Te").x, fontMetrics.getHeight() * 3);
		}
	});
	shell.open();
	Display display = shell.getDisplay ();
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}	

}
}



NOTES:
	CM (2/6/01 1:41:19 PM)
		CM to investigate.

	CM (5/30/2001 11:59:56 AM)
		I have seen this many times before - particularly on Unix/Linux systems.	
		It seems that the italic fonts just don't have the fontmetrics correct.
		Usually, truetype italic fonts are ok.
PRODUCT VERSION:
SWT 0.47a


Closing for lack of activity. This is almost certainly caused by problems with the actual fonts</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4565" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Composite child window from only parent Composite's window handle? (1G2W2UI)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="3">
        <Lines>
          <Line>1)	Want to know how to create a composite inside a composite - which</Line>
          <Line>should be possible</Line>
          <Line>2) Or they are cheating and want to use the actual OS handles?</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="19">
        <Lines>
          <Line>- this may not be available on all platforms. For</Line>
          <Line>example,</Line>
          <Line>on linux/motif the AWT implementation uses the Motif</Line>
          <Line>libraries in a</Line>
          <Line>way which is incompatible with SWT. It's not clear if</Line>
          <Line>we will be able</Line>
          <Line>to work around this yet.</Line>
          <Line>- the mechanism is intended to provide interoperability</Line>
          <Line>between AWT/Swing</Line>
          <Line>and SWT *only*. That is, it will likely not work</Line>
          <Line>given a handle created by</Line>
          <Line>an arbitrary wad of C code.</Line>
          <Line>- the application code which uses the embedded SWT</Line>
          <Line>widget(s) needs to</Line>
          <Line>respect the SWT event/threading model, so for</Line>
          <Line>example, messages sent</Line>
          <Line>from threads other than the one which created the SWT</Line>
          <Line>widgets need to</Line>
          <Line>be wrapped with Display.syncExec(...).</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>============================== Question ============================== 

from Cheng-Yee Lin 09/08/00

DESCRIPTION:
Is there a way to create a Composite child window if we have just the
parent Composite's window handle?  This would provide another level of
flexibility in window handling.

&lt;KH&gt;
What are you really trying to do in this case. There is no portable API for
doing this.

There may be a platform specific answer for this but I would like to
try the exact case here before proposing a solution to the customer.
&lt;/KH&gt;

&lt;CL&gt;  [Cheng-Yee Lin]
The window creation process involves multiple components, say 3 of them.
The first component creates a Composite window that serves as a "frame" and
passes the window to the second component.  Then, the second component
may "fill in the content" by creating a "true" child window, or it may
create another "frame" by creating a Composite window as the child window
and
pass the actual "content filling" to the third component.
&lt;/CL&gt;

&lt;GDA&gt;
I'm not 100% clear here because it sounds like either they
1)	Want to know how to create a composite inside a composite - which 
should be possible
2) Or they are cheating and want to use the actual OS handles?

SWT any idea here?
&lt;/GDA&gt;


NOTES:

	McQ (16/10/2000 10:27:06 AM) -
		As KH indicated, there is currently no API for creating child 
windows given
		only the handle for the parent. Indeed, it's not clear why you 
would want this
		given the example provided above, since the obvious 
implementation would
		be to simply pass around the composites, rather than their 
handles. [NOTE:
		It's entirely possible that I just didn't understand the 
example provided. If so
		please advise.]

		The only situation where you would actually *need* to be 
creating children
		given only the handle is when that handle was created by some 
external
		application (i.e. not SWT code).

		We have been asked to support this for the specific case of 
widgets
		created with AWT/Swing, and we have fully functional example 
code which
		does this in our development stream. When this is made 
available, it will
		include the ability to create a child widget given only a 
handle, but the *type*
		of this child widget may be constrained (i.e. you may need a 
particular widget,
		say "EmbeddedComposite" between your SWT layout and the 
containing
		AWT widget).

		There are several additional caveats:
			- this may not be available on all platforms. For 
example,
			  on linux/motif the AWT implementation uses the Motif 
libraries in a
			  way which is incompatible with SWT. It's not clear if 
we will be able
			  to work around this yet.
			- the mechanism is intended to provide interoperability 
between AWT/Swing
			  and SWT *only*. That is, it will likely not work 
given a handle created by
			  an arbitrary wad of C code.
			- the application code which uses the embedded SWT 
widget(s) needs to
			  respect the SWT event/threading model, so for 
example, messages sent
			  from threads other than the one which created the SWT 
widgets need to
			  be wrapped with Display.syncExec(...).

GDA (10/16/00 10:32:08 PM)
	I sent only the first part to Cheng-Yee
	"		As KH indicated, there is currently no API for creating 
child windows given
		only the handle for the parent. Indeed, it's not clear why you 
would want this
		given the example provided above, since the obvious 
implementation would
		be to simply pass around the composites, rather than their 
handles. [NOTE:
		It's entirely possible that I just didn't understand the 
example provided. If so
		please advise.]

		The only situation where you would actually *need* to be 
creating children
		given only the handle is when that handle was created by some 
external
		application (i.e. not SWT code)."

SN (2/6/01 3:16:33 PM)
	Moving to inactive.
PRODUCT VERSION:
Tech preview


No further action for R2.0.

Moving from Later.
Just found this.  It's really old and we have not plan to add API to try and 
recreate a widget from its operating system handle.</WithStack>
    <WithOutStack>============================== Question ============================== 

from Cheng-Yee Lin 09/08/00

DESCRIPTION:
Is there a way to create a Composite child window if we have just the
parent Composite's window handle?  This would provide another level of
flexibility in window handling.

&lt;KH&gt;
What are you really trying to do in this case. There is no portable API for
doing this.

There may be a platform specific answer for this but I would like to
try the exact case here before proposing a solution to the customer.
&lt;/KH&gt;

&lt;CL&gt;  [Cheng-Yee Lin]
The window creation process involves multiple components, say 3 of them.
The first component creates a Composite window that serves as a "frame" and
passes the window to the second component.  Then, the second component
may "fill in the content" by creating a "true" child window, or it may
create another "frame" by creating a Composite window as the child window
and
pass the actual "content filling" to the third component.
&lt;/CL&gt;

&lt;GDA&gt;
I'm not 100% clear here because it sounds like either they
1)	Want to know how to create a composite inside a composite - which 
should be possible
2) Or they are cheating and want to use the actual OS handles?

SWT any idea here?
&lt;/GDA&gt;


NOTES:

	McQ (16/10/2000 10:27:06 AM) -
		As KH indicated, there is currently no API for creating child 
windows given
		only the handle for the parent. Indeed, it's not clear why you 
would want this
		given the example provided above, since the obvious 
implementation would
		be to simply pass around the composites, rather than their 
handles. [NOTE:
		It's entirely possible that I just didn't understand the 
example provided. If so
		please advise.]

		The only situation where you would actually *need* to be 
creating children
		given only the handle is when that handle was created by some 
external
		application (i.e. not SWT code).

		We have been asked to support this for the specific case of 
widgets
		created with AWT/Swing, and we have fully functional example 
code which
		does this in our development stream. When this is made 
available, it will
		include the ability to create a child widget given only a 
handle, but the *type*
		of this child widget may be constrained (i.e. you may need a 
particular widget,
		say "EmbeddedComposite" between your SWT layout and the 
containing
		AWT widget).

		There are several additional caveats:
			- this may not be available on all platforms. For 
example,
			  on linux/motif the AWT implementation uses the Motif 
libraries in a
			  way which is incompatible with SWT. It's not clear if 
we will be able
			  to work around this yet.
			- the mechanism is intended to provide interoperability 
between AWT/Swing
			  and SWT *only*. That is, it will likely not work 
given a handle created by
			  an arbitrary wad of C code.
			- the application code which uses the embedded SWT 
widget(s) needs to
			  respect the SWT event/threading model, so for 
example, messages sent
			  from threads other than the one which created the SWT 
widgets need to
			  be wrapped with Display.syncExec(...).

GDA (10/16/00 10:32:08 PM)
	I sent only the first part to Cheng-Yee
	"		As KH indicated, there is currently no API for creating 
child windows given
		only the handle for the parent. Indeed, it's not clear why you 
would want this
		given the example provided above, since the obvious 
implementation would
		be to simply pass around the composites, rather than their 
handles. [NOTE:
		It's entirely possible that I just didn't understand the 
example provided. If so
		please advise.]

		The only situation where you would actually *need* to be 
creating children
		given only the handle is when that handle was created by some 
external
		application (i.e. not SWT code)."

SN (2/6/01 3:16:33 PM)
	Moving to inactive.
PRODUCT VERSION:
Tech preview


No further action for R2.0.

Moving from Later.
Just found this.  It's really old and we have not plan to add API to try and 
recreate a widget from its operating system handle.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4566" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>table cell owner draw (1G2W3ET)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>============================== Question ============================== 

from Cheng-Yee Lin 09/08/00


com.ibm.swt.widgets.Table and associated documentation needs to be
more complete. 

It should describe how to create a table with multiple
columns and how to use cell renderers, etc. 

An up to date Table example with multiple columns would be most helpful.


NOTES:

&lt;KH&gt;
The SWT control example has a multi column table. There is no owner
draw support in the current version of the SWT table.
&lt;/KH&gt;

&lt;GDA&gt; (10/15/00 9:18:03 PM)
Q.		Is there anything in plan to add support?

*	I have also asked client what exactly they intend to use it for.

McQ (16/10/2000 11:54:23 AM) -
		We have done some investigation of the platforms' limited "owner draw"
		support, and found it to be problematic. There are many higher priority
		issues than this, and so we are unlikely to make much headway on it this
		cycle. (In plan, the item is labeled as "[No commitment.]").

		I will however, make sure that there is a good example of multi-column
		table creation provided with the next drop.


GDA (10/16/00 10:27:32 PM)
	Email from mcq also indicated the related plan item is
	"Owner Draw - SWT already provides the ability to create 
	application-drawn, emulated widgets. We will be extending and refining 
	that ability this development cycle. What this line item is asking for is 
	somewhat different: The ability for application code to participate in 
	the painting of the existing platform widgets by being called at 
	appropriate times during the widget's repaint operation. Platform limitations 
	make this difficult to implement consistently everywhere. We will 
	investigate this, but are unlikely to make much progress on it. [No commitment.]"

SN (2/5/01 2:48:40 PM)
	Could be addressed by a custom widget.
PRODUCT VERSION:
Tech preview


In R2.0, we added the ability to individually set the foreground and 
background colors on a per row basis. This is all that is planned for R2.0, 
but we are still considering a full owner-drawn emulated widget for a 
future release.

Moving from Later.
Because the platforms are so wildly different, I can't see us ever 
implementing owner draw for table cells.  I'm going have to close this bug 
report.
Perhaps the code from KTable could be incorporated?

http://sourceforge.net/projects/ktable
Reinvestigating.
Fixed &gt; 20060420</WithStack>
    <WithOutStack>============================== Question ============================== 

from Cheng-Yee Lin 09/08/00


com.ibm.swt.widgets.Table and associated documentation needs to be
more complete. 

It should describe how to create a table with multiple
columns and how to use cell renderers, etc. 

An up to date Table example with multiple columns would be most helpful.


NOTES:

&lt;KH&gt;
The SWT control example has a multi column table. There is no owner
draw support in the current version of the SWT table.
&lt;/KH&gt;

&lt;GDA&gt; (10/15/00 9:18:03 PM)
Q.		Is there anything in plan to add support?

*	I have also asked client what exactly they intend to use it for.

McQ (16/10/2000 11:54:23 AM) -
		We have done some investigation of the platforms' limited "owner draw"
		support, and found it to be problematic. There are many higher priority
		issues than this, and so we are unlikely to make much headway on it this
		cycle. (In plan, the item is labeled as "[No commitment.]").

		I will however, make sure that there is a good example of multi-column
		table creation provided with the next drop.


GDA (10/16/00 10:27:32 PM)
	Email from mcq also indicated the related plan item is
	"Owner Draw - SWT already provides the ability to create 
	application-drawn, emulated widgets. We will be extending and refining 
	that ability this development cycle. What this line item is asking for is 
	somewhat different: The ability for application code to participate in 
	the painting of the existing platform widgets by being called at 
	appropriate times during the widget's repaint operation. Platform limitations 
	make this difficult to implement consistently everywhere. We will 
	investigate this, but are unlikely to make much progress on it. [No commitment.]"

SN (2/5/01 2:48:40 PM)
	Could be addressed by a custom widget.
PRODUCT VERSION:
Tech preview


In R2.0, we added the ability to individually set the foreground and 
background colors on a per row basis. This is all that is planned for R2.0, 
but we are still considering a full owner-drawn emulated widget for a 
future release.

Moving from Later.
Because the platforms are so wildly different, I can't see us ever 
implementing owner draw for table cells.  I'm going have to close this bug 
report.
Perhaps the code from KTable could be incorporated?

http://sourceforge.net/projects/ktable
Reinvestigating.
Fixed &gt; 20060420</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4567" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Image.setBackground should work for null (1G30ZM6)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>- say your image has color xxx and yyy in it</Line>
          <Line>- say the transparent color is xxx</Line>
          <Line>- if you setBackground to yyy then all xxx are changed to yyy</Line>
          <Line>- if we allow setBackground to null, then ALL yyy - including the pixels that</Line>
          <Line>were yyy in the original image - are set to xxx.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Should be able to set the "background" of an Image
	back to null to reset back to using the transparent
	color for transparency instead of the background color.

	Currently, once you set the background of an Image,
	there is no going back to a transparent pixel.
	Workaround is to dispose the image and create a new one.

NOTES:

SN (2/5/01 2:56:11 PM)
	Moving to inactive.
PRODUCT VERSION:
	SWT 0.047


SSQ, are we going to fix this?  If never, then close?
Just close this bug. It doesn't make sense to go back, nobody is asking for 
it, and there is suitable work-around (just re-create the original image).

The reason it doesn't make sense to go backwards is this:
- say your image has color xxx and yyy in it
- say the transparent color is xxx
- if you setBackground to yyy then all xxx are changed to yyy
- if we allow setBackground to null, then ALL yyy - including the pixels that 
were yyy in the original image - are set to xxx.

So just leave it that setBackground destructively modifies the image in a way 
that cannot be reverted (unless we save a copy of the image, but that's silly).
.</WithStack>
    <WithOutStack>Should be able to set the "background" of an Image
	back to null to reset back to using the transparent
	color for transparency instead of the background color.

	Currently, once you set the background of an Image,
	there is no going back to a transparent pixel.
	Workaround is to dispose the image and create a new one.

NOTES:

SN (2/5/01 2:56:11 PM)
	Moving to inactive.
PRODUCT VERSION:
	SWT 0.047


SSQ, are we going to fix this?  If never, then close?
Just close this bug. It doesn't make sense to go back, nobody is asking for 
it, and there is suitable work-around (just re-create the original image).

The reason it doesn't make sense to go backwards is this:
- say your image has color xxx and yyy in it
- say the transparent color is xxx
- if you setBackground to yyy then all xxx are changed to yyy
- if we allow setBackground to null, then ALL yyy - including the pixels that 
were yyy in the original image - are set to xxx.

So just leave it that setBackground destructively modifies the image in a way 
that cannot be reverted (unless we save a copy of the image, but that's silly).
.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4568" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>SWT thread issue (1G57DOP)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="singlecomment">
        <location start="526" end="582" />
        <code>// we saved 'display' during init on the ui thread</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="582" end="681" />
        <code>if(display.getThread().equals(Thread.currentThread()))
    {
        // access SWT widget
    }</code>
      </source_code>
      <source_code type="elsestatement">
        <location start="682" end="861" />
        <code>else
    {
        display.asyncExec(new Runnable()
        {
            public void run()
            {
                //  access SWT widget
            }
        });
    }</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="2557" end="2611" />
        <code>// we saved 'display' during init on the ui thread</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2611" end="2705" />
        <code>display.syncExec( new Runnable() {
			public void run() {
				//  access SWT widget
			}
		}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>From Cheng-Yee

We are working on a script debugger. A script is evaluated on a new thread
(not the ui thread). This is to allow  the use of the debug ui to cancel or
pause a script, while the script is running.

In general, scripts will have access to java objects the are based on SWT
widgets.

We have run into an issue that an SWT widget cannot be accessed on a thread
other than the thread it was created on.

To solve this problem, we are faced with wrapping many of our SWT accesses
with code similar to the following:

    // we saved 'display' during init on the ui thread
    if(display.getThread().equals(Thread.currentThread()))
    {
        // access SWT widget
    }
    else
    {
        display.asyncExec(new Runnable()
        {
            public void run()
            {
                //  access SWT widget
            }
        });
    }


We are wondering why can't SWT do this internally? Do you have any
suggestions for us?

NOTES:

	McQ (30/11/2000 8:53:44 AM) -
		The underlying philosophy of SWT is to make available the 
capabilities provided
		by the operating systems it is hosted on, without attempting 
to "sugar coat" 
		those facilities in ways which cause performance or consistancy 
problems. 

		&lt;em&gt;
		No operating system that we support allows applications to make 
widget calls
		between real o/s threads, and we do not either.
		&lt;/em&gt;

		Leaks and redraw problems are 
		the *most* often sited reasons why developers claim that real-
world applications can
		not be built with AWT/Swing. 

		SWT applications are fast, leak free (if the application code 
is), and consistantly
		redraw properly because of our decision to model the thread 
interaction explicitely.
		This has been proven both by internal testing and by external 
customers.

	McQ (30/11/2000 9:08:01 AM) -
		W.r.t. the code you provided, I wanted to point out that you 
are going to be getting
		different behavior in the "same thread" versus "different 
thread" cases with the code
		as it stands. For the same thread case, you would be doing 
the "access SWT widget"
		stuff immediately, but for the different thread case, the code 
will run some time
		later if you use asyncExec rather than syncExec.

		Also, I'm not sure if you have checked the performance 
characteristics or not, but I
		should point out that it is always safe (and relatively fast 
(modulo the Runnable 
		creation)) to call a syncExec call from the u/i thread, since 
it simply runs the code
		without thread switching. Perhaps your code could be written 
simply as...

		// we saved 'display' during init on the ui thread
		display.syncExec( new Runnable() {
			public void run() {
				//  access SWT widget
			}
		});

		Of course, if performance is critical, then you *would* 
probably want to have code
		which looked like your code above. Note that in this case, you 
would probably also
		want to cache the result of "display.getThread()", since this 
is guaranteed not to
		change for the lifetime of the display.


GDA (12/7/00 9:04:47 AM)
	[from cheng-yee]

Ryan from my team tried the "Runnable" solution and it worked.
However, we do have LOTS of SWT references in our code, so it would
be a significant effort for us to make changes in all the places.
See the attached email.

VI (08/12/2000 12:19:42 PM)
I just want to add a clarification.  Swing also requires you to run in the UI 
Thread:
	
See http://java.sun.com/docs/books/tutorial/uiswing/overview/threads.html :

	"The Single-Thread Rule 
		Swing components can be accessed by only one thread at a time, 
generally, 
		the event-dispatching thread. 
	 Exceptions to the Rule 
		A few operations are guaranteed to be thread safe. 
	 How to Execute Code in the Event-Dispatching Thread 
		If you need access to the UI from outside event-handling or 
painting code, you 
		can use the SwingUtilities invokeLater or invokeAndWait 
method. "

GDA (1/13/01 9:40:22 PM)
	I asked Cheng-Yee if they still need a call to discuss threading with 
swt

SN (2/5/01 3:41:50 PM)
	Moving to inactive.  We are considering SWT and threads.
This is an ongoing discussion, but no further work is planned for R2.0. 
Moving from Later.
SWT is apartment threaded and will remain that way until Windows provides 
another mechanism.</WithStack>
    <WithOutStack>From Cheng-Yee

We are working on a script debugger. A script is evaluated on a new thread
(not the ui thread). This is to allow  the use of the debug ui to cancel or
pause a script, while the script is running.

In general, scripts will have access to java objects the are based on SWT
widgets.

We have run into an issue that an SWT widget cannot be accessed on a thread
other than the thread it was created on.

To solve this problem, we are faced with wrapping many of our SWT accesses
with code similar to the following:

    // we saved 'display' during init on the ui thread
    if(display.getThread().equals(Thread.currentThread()))
    {
        // access SWT widget
    }
    else
    {
        display.asyncExec(new Runnable()
        {
            public void run()
            {
                //  access SWT widget
            }
        });
    }


We are wondering why can't SWT do this internally? Do you have any
suggestions for us?

NOTES:

	McQ (30/11/2000 8:53:44 AM) -
		The underlying philosophy of SWT is to make available the 
capabilities provided
		by the operating systems it is hosted on, without attempting 
to "sugar coat" 
		those facilities in ways which cause performance or consistancy 
problems. 

		&lt;em&gt;
		No operating system that we support allows applications to make 
widget calls
		between real o/s threads, and we do not either.
		&lt;/em&gt;

		Leaks and redraw problems are 
		the *most* often sited reasons why developers claim that real-
world applications can
		not be built with AWT/Swing. 

		SWT applications are fast, leak free (if the application code 
is), and consistantly
		redraw properly because of our decision to model the thread 
interaction explicitely.
		This has been proven both by internal testing and by external 
customers.

	McQ (30/11/2000 9:08:01 AM) -
		W.r.t. the code you provided, I wanted to point out that you 
are going to be getting
		different behavior in the "same thread" versus "different 
thread" cases with the code
		as it stands. For the same thread case, you would be doing 
the "access SWT widget"
		stuff immediately, but for the different thread case, the code 
will run some time
		later if you use asyncExec rather than syncExec.

		Also, I'm not sure if you have checked the performance 
characteristics or not, but I
		should point out that it is always safe (and relatively fast 
(modulo the Runnable 
		creation)) to call a syncExec call from the u/i thread, since 
it simply runs the code
		without thread switching. Perhaps your code could be written 
simply as...

		// we saved 'display' during init on the ui thread
		display.syncExec( new Runnable() {
			public void run() {
				//  access SWT widget
			}
		});

		Of course, if performance is critical, then you *would* 
probably want to have code
		which looked like your code above. Note that in this case, you 
would probably also
		want to cache the result of "display.getThread()", since this 
is guaranteed not to
		change for the lifetime of the display.


GDA (12/7/00 9:04:47 AM)
	[from cheng-yee]

Ryan from my team tried the "Runnable" solution and it worked.
However, we do have LOTS of SWT references in our code, so it would
be a significant effort for us to make changes in all the places.
See the attached email.

VI (08/12/2000 12:19:42 PM)
I just want to add a clarification.  Swing also requires you to run in the UI 
Thread:
	
See http://java.sun.com/docs/books/tutorial/uiswing/overview/threads.html :

	"The Single-Thread Rule 
		Swing components can be accessed by only one thread at a time, 
generally, 
		the event-dispatching thread. 
	 Exceptions to the Rule 
		A few operations are guaranteed to be thread safe. 
	 How to Execute Code in the Event-Dispatching Thread 
		If you need access to the UI from outside event-handling or 
painting code, you 
		can use the SwingUtilities invokeLater or invokeAndWait 
method. "

GDA (1/13/01 9:40:22 PM)
	I asked Cheng-Yee if they still need a call to discuss threading with 
swt

SN (2/5/01 3:41:50 PM)
	Moving to inactive.  We are considering SWT and threads.
This is an ongoing discussion, but no further work is planned for R2.0. 
Moving from Later.
SWT is apartment threaded and will remain that way until Windows provides 
another mechanism.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4569" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR - Display accelerators in popup menu (1G3DMAW)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="12">
      <source_code type="assignment">
        <location start="419" end="445" />
        <code>Shell shell = new Shell();</code>
      </source_code>
      <source_code type="assignment">
        <location start="446" end="485" />
        <code>Text text = new Text(shell, SWT.MULTI);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="486" end="514" />
        <code>text.setBounds(0,0,300,300);</code>
      </source_code>
      <source_code type="assignment">
        <location start="515" end="542" />
        <code>Menu menu = new Menu(text);</code>
      </source_code>
      <source_code type="assignment">
        <location start="543" end="588" />
        <code>MenuItem item = new MenuItem(menu, SWT.NONE);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="589" end="626" />
        <code>item.setAccelerator(SWT.SHIFT + 'H');</code>
      </source_code>
      <source_code type="functioncall">
        <location start="627" end="646" />
        <code>item.setText("HI");</code>
      </source_code>
      <source_code type="functioncall">
        <location start="647" end="666" />
        <code>text.setMenu(menu);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="668" end="681" />
        <code>shell.open();</code>
      </source_code>
      <source_code type="assignment">
        <location start="682" end="719" />
        <code>Display display = shell.getDisplay();</code>
      </source_code>
      <source_code type="functiondef">
        <location start="721" end="781" />
        <code>while (! shell.isDisposed()) {
	display.readAndDispatch();
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="783" end="801" />
        <code>display.dispose();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>CQ:  afeb00001009

It's always advantageous to display the accelerator keys (if any) 
for the menu items displayed on the popup - they also serve as a
 "help" for users to learn key shortcuts for the frequent actions.

It seems everything is already pretty much in place to implement 
this in VA Base, and I think it worthwhile.

NOTES:

KH (12/18/00 1:44:54 PM)

	Moving to SWT for comment. See included sample code:

Shell shell = new Shell();
Text text = new Text(shell, SWT.MULTI);
text.setBounds(0,0,300,300);
Menu menu = new Menu(text);
MenuItem item = new MenuItem(menu, SWT.NONE);
item.setAccelerator(SWT.SHIFT + 'H');
item.setText("HI");
text.setMenu(menu);

shell.open();
Display display = shell.getDisplay();

while (! shell.isDisposed()) {
	display.readAndDispatch();
};
display.dispose();

SN (12/20/00 1:23:16 PM)
	Use item.setText ("HI\tShift+H") to show accelerator text.  Not quite 
sure
	how to do this automatically when an accelerator is set.  We would have
	to compute and remember the accelText (ie. the "\tShift+H") and detect
	that the programmer did not override this by providing his own "\t..."
	accelText.  Also, getText () would need to answer the text he set into 
the
	menu item and not include the free accelText that we computed for him.

SN (1/25/01 2:09:48 PM)
	Can we move this to inactive?

MCQ (2/5/01 2:51:54 PM)
	Yes.
PRODUCT VERSION:
techpreview


Is it the case that, if application code sets the accelerator text on popups, 
we will display them? If so, mark this PR as WORKSFORME, if not mark it 
as LATER with a comment describing what would be required to 
implement that.

It's not a bug.  Should we mark this WONTFIX?</WithStack>
    <WithOutStack>CQ:  afeb00001009

It's always advantageous to display the accelerator keys (if any) 
for the menu items displayed on the popup - they also serve as a
 "help" for users to learn key shortcuts for the frequent actions.

It seems everything is already pretty much in place to implement 
this in VA Base, and I think it worthwhile.

NOTES:

KH (12/18/00 1:44:54 PM)

	Moving to SWT for comment. See included sample code:

Shell shell = new Shell();
Text text = new Text(shell, SWT.MULTI);
text.setBounds(0,0,300,300);
Menu menu = new Menu(text);
MenuItem item = new MenuItem(menu, SWT.NONE);
item.setAccelerator(SWT.SHIFT + 'H');
item.setText("HI");
text.setMenu(menu);

shell.open();
Display display = shell.getDisplay();

while (! shell.isDisposed()) {
	display.readAndDispatch();
};
display.dispose();

SN (12/20/00 1:23:16 PM)
	Use item.setText ("HI\tShift+H") to show accelerator text.  Not quite 
sure
	how to do this automatically when an accelerator is set.  We would have
	to compute and remember the accelText (ie. the "\tShift+H") and detect
	that the programmer did not override this by providing his own "\t..."
	accelText.  Also, getText () would need to answer the text he set into 
the
	menu item and not include the free accelText that we computed for him.

SN (1/25/01 2:09:48 PM)
	Can we move this to inactive?

MCQ (2/5/01 2:51:54 PM)
	Yes.
PRODUCT VERSION:
techpreview


Is it the case that, if application code sets the accelerator text on popups, 
we will display them? If so, mark this PR as WORKSFORME, if not mark it 
as LATER with a comment describing what would be required to 
implement that.

It's not a bug.  Should we mark this WONTFIX?</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4570" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="6172" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Unable to save ImageData to byte stream (1G3HYYA)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341031491">
        <Exception>com.ibm.swt.SWTError</Exception>
        <Reason>Invalid image</Reason>
        <Frames>
          <Frame depth="0">com.ibm.swt.image.FileFormat.error(FileFormat.java:25)</Frame>
          <Frame depth="1">com.ibm.swt.image.WinBMPFileFormat.unloadIntoByteStream(WinBMPFileFormat.java:573)</Frame>
          <Frame depth="2">com.ibm.swt.image.FileFormat.unloadIntoStream(FileFormat.java:101)</Frame>
          <Frame depth="3">com.ibm.swt.image.ImageData.save(ImageData.java:739)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="6">
      <source_code type="import">
        <location start="172" end="194" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="195" end="222" />
        <code>import com.ibm.swt.image.*;</code>
      </source_code>
      <source_code type="import">
        <location start="223" end="253" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="254" end="283" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="284" end="301" />
        <code>import java.io.*;</code>
      </source_code>
      <source_code type="class">
        <location start="303" end="1248" />
        <code>public class PR_1G3HYYA {

public static void main(String[] args) {
	Shell shell = new Shell();
	
	Image image = new Image(shell.getDisplay(), 100, 100);
	GC gc = new GC(image);
	Color oldCol = gc.getForeground();
	
	for (int x = 0; x &lt; 100; x+=5) {
		for (int y = 0; y &lt; 100; y+=5) {
			Color color = new Color(shell.getDisplay(), Math.round(x * 2.5f), Math.round(y * 2.5f), 128);
			gc.setForeground(color);
			
			gc.drawLine(x, y, x + 5, y);
			gc.drawLine(x, y+1, x + 5, y+1);
			gc.drawLine(x, y+2, x + 5, y+2);
			gc.drawLine(x, y+3, x + 5, y+3);
			gc.drawLine(x, y+4, x + 5, y+4);
			
			gc.setForeground(oldCol);
			color.dispose();
		}
	}

	gc.drawString("CANVAS", 0, 0, true);
	
	gc.dispose();
	
	ImageData imdata = image.getImageData();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	DataOutputStream writeOut = new DataOutputStream(out);
	imdata.save(writeOut, SWT.IMAGE_BMP);
	
	image.dispose();
	shell.dispose();
}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>When I run the following code, I get the error:

com.ibm.swt.SWTError: Invalid image

	at com.ibm.swt.image.FileFormat.error(FileFormat.java:25)
	at com.ibm.swt.image.WinBMPFileFormat.unloadIntoByteStream(WinBMPFileFormat.java:573)
	at com.ibm.swt.image.FileFormat.unloadIntoStream(FileFormat.java:101)
	at com.ibm.swt.image.ImageData.save(ImageData.java:739)
	at default.PR_1G3HYYA.main(img.java, Compiled Code)

Exception in thread "main" 

This used to work.  It works in Linux.

import com.ibm.swt.*;
import com.ibm.swt.image.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;
import java.io.*;

public class PR_1G3HYYA {

public static void main(String[] args) {
	Shell shell = new Shell();
	
	Image image = new Image(shell.getDisplay(), 100, 100);
	GC gc = new GC(image);
	Color oldCol = gc.getForeground();
	
	for (int x = 0; x &lt; 100; x+=5) {
		for (int y = 0; y &lt; 100; y+=5) {
			Color color = new Color(shell.getDisplay(), Math.round(x * 2.5f), Math.round(y * 2.5f), 128);
			gc.setForeground(color);
			
			gc.drawLine(x, y, x + 5, y);
			gc.drawLine(x, y+1, x + 5, y+1);
			gc.drawLine(x, y+2, x + 5, y+2);
			gc.drawLine(x, y+3, x + 5, y+3);
			gc.drawLine(x, y+4, x + 5, y+4);
			
			gc.setForeground(oldCol);
			color.dispose();
		}
	}

	gc.drawString("CANVAS", 0, 0, true);
	
	gc.dispose();
	
	ImageData imdata = image.getImageData();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	DataOutputStream writeOut = new DataOutputStream(out);
	imdata.save(writeOut, SWT.IMAGE_BMP);
	
	image.dispose();
	shell.dispose();
}

}

NOTES:
	CM (12/13/00 3:46:28 PM)
		Hmmm... looks like the imageData has an unsupported depth of 32 for BMP files.
		The interesting question is how did this work before? We have never supported
		32 bit depth BMPs. Somehow, the imageData was created with depth 32.
		Was the code run on a different display?

SN (2/5/01 2:53:40 PM)
	CAR to investigate.
PRODUCT VERSION:

swt 0.048
Windows 98


This is a duplicate of bug#6172. The code probably worked before, because the 
screen depth was not 32.

*** This bug has been marked as a duplicate of 6172 ***</WithStack>
    <WithOutStack>When I run the following code, I get the error:


	at default.PR_1G3HYYA.main(img.java, Compiled Code)

Exception in thread "main" 

This used to work.  It works in Linux.

import com.ibm.swt.*;
import com.ibm.swt.image.*;
import com.ibm.swt.graphics.*;
import com.ibm.swt.widgets.*;
import java.io.*;

public class PR_1G3HYYA {

public static void main(String[] args) {
	Shell shell = new Shell();
	
	Image image = new Image(shell.getDisplay(), 100, 100);
	GC gc = new GC(image);
	Color oldCol = gc.getForeground();
	
	for (int x = 0; x &lt; 100; x+=5) {
		for (int y = 0; y &lt; 100; y+=5) {
			Color color = new Color(shell.getDisplay(), Math.round(x * 2.5f), Math.round(y * 2.5f), 128);
			gc.setForeground(color);
			
			gc.drawLine(x, y, x + 5, y);
			gc.drawLine(x, y+1, x + 5, y+1);
			gc.drawLine(x, y+2, x + 5, y+2);
			gc.drawLine(x, y+3, x + 5, y+3);
			gc.drawLine(x, y+4, x + 5, y+4);
			
			gc.setForeground(oldCol);
			color.dispose();
		}
	}

	gc.drawString("CANVAS", 0, 0, true);
	
	gc.dispose();
	
	ImageData imdata = image.getImageData();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	DataOutputStream writeOut = new DataOutputStream(out);
	imdata.save(writeOut, SWT.IMAGE_BMP);
	
	image.dispose();
	shell.dispose();
}

}

NOTES:
	CM (12/13/00 3:46:28 PM)
		Hmmm... looks like the imageData has an unsupported depth of 32 for BMP files.
		The interesting question is how did this work before? We have never supported
		32 bit depth BMPs. Somehow, the imageData was created with depth 32.
		Was the code run on a different display?

SN (2/5/01 2:53:40 PM)
	CAR to investigate.
PRODUCT VERSION:

swt 0.048
Windows 98


This is a duplicate of bug#6172. The code probably worked before, because the 
screen depth was not 32.

*** This bug has been marked as a duplicate of 6172 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4571" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="4812" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>JxeLink - Possible prsnlwin.jxeLinkOptions Problem with Menus (1G41T5Y)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="20">
      <source_code type="import">
        <location start="1436" end="1457" />
        <code>import java.awt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1458" end="1483" />
        <code>import java.awt.event.*;</code>
      </source_code>
      <source_code type="assignment">
        <location start="1592" end="1653" />
        <code>final Frame frame = new Frame ("Menu Test");</code>
      </source_code>
      <source_code type="assignment">
        <location start="1672" end="1722" />
        <code>MenuBar menuBar = new MenuBar ();</code>
      </source_code>
      <source_code type="assignment">
        <location start="1723" end="1771" />
        <code>Menu menu = new Menu ("Frame");</code>
      </source_code>
      <source_code type="assignment">
        <location start="1772" end="1832" />
        <code>MenuItem menuItem = new MenuItem ("Close");</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2035" end="2085" />
        <code>frame.dispose ();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2086" end="2135" />
        <code>System.exit (0);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2201" end="2256" />
        <code>menuItem.addActionListener (listener);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2257" end="2294" />
        <code>menu.add (menuItem);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2295" end="2331" />
        <code>menuBar.add (menu);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2350" end="2394" />
        <code>frame.setMenuBar (menuBar);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2413" end="2463" />
        <code>frame.setBounds (0, 0, 200, 200);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2464" end="2495" />
        <code>frame.show ();</code>
      </source_code>
      <source_code type="import">
        <location start="2616" end="2636" />
        <code>import java.awt.*;</code>
      </source_code>
      <source_code type="assignment">
        <location start="2745" end="2800" />
        <code>Frame frame = new Frame ("Menu Test");</code>
      </source_code>
      <source_code type="assignment">
        <location start="2801" end="2851" />
        <code>MenuBar menuBar = new MenuBar ();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2852" end="2900" />
        <code>Menu menu = new Menu ("Frame");</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2947" end="2991" />
        <code>frame.setMenuBar (menuBar);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2992" end="3023" />
        <code>frame.show ();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Product: VAME 1.2 + JCL Personal Configuration

Description:

I've tried building a very simple AWT application using VAME 1.2.  I used the ..\jclMax\prsnlwin.jxeLinkOptions file in my OPT file,
but the JXE crashes and burns when run.  This PR is very similar to 1G40EBN, but involves using Menus.

	Unhandled exception
	Type=GPF vmState=0x00000003
	ExceptionCode=0xc0000005 ExceptionAddress=0x1001f24e ContextFlags=0x0001001f
	Handler1=0x11001566 Handler2=0x1003a760
	Module=C:\VAME1.2\IVE\BIN\J9VM12.DLL
	Module_base_address=0x10000000
	Offset_in_DLL=0x0001f24e
	EDI=0x0257f92c ESI=0x01646828 EAX=0x00000000
	EBX=0x01648ec8 ECX=0x014cca44 EDX=0x00000000
	EBP=0x01646828 ESP=0x0257f8a8 EIP=0x1001f24e
	
	Thread: Display (priority 5)
	0000 com/ibm/swt/win32/OS.InsertMenuItem(IIZLcom/ibm/swt/win32/MENUITEMINFO;)Z
	0073 com/ibm/swt/widgets/Menu.createChild(Lcom/ibm/swt/widgets/MenuItem;I)V
	000d com/ibm/swt/widgets/MenuItem.&lt;init&gt;(Lcom/ibm/swt/widgets/Menu;II)V
	000b com/ibm/swt/widgets/MenuItem.&lt;init&gt;(Lcom/ibm/swt/widgets/Menu;I)V
	002d java/awt/Menu._addNotify()V
	003e java/awt/MenuBar._addNotify()V
	003a java/awt/Frame._addNotify()V
	0008 java/awt/Widget$AddNotifyRunnable.run()V
	000f com/ibm/swt/widgets/RunnableLock.run()V
	001d com/ibm/swt/widgets/Display.runAsyncMessages()Z
	0044 com/ibm/swt/widgets/Display.readAndDispatch()Z
	000a java/awt/BBToolkit.start()V
	0030 java/awt/BBToolkit$1.run()V
	
	
Here's the test case:
	
	import java.awt.*;
	import java.awt.event.*;
	
	public class MenuFrameTest extends Object
	{
	        public static void main (String[] args)
	        {
	                final Frame frame = new Frame ("Menu Test");
	                
	                MenuBar menuBar = new MenuBar ();
	                Menu menu = new Menu ("Frame");
	                MenuItem menuItem = new MenuItem ("Close");
	                
	                ActionListener listener = new ActionListener ()
	                {
	                        public void actionPerformed (ActionEvent event)
	                        {
	                                frame.dispose ();
	                                System.exit (0);
	                        }
	                };
	                
	                menuItem.addActionListener (listener);
	                menu.add (menuItem);
	                menuBar.add (menu);
	                
	                frame.setMenuBar (menuBar);
	                
	                frame.setBounds (0, 0, 200, 200);
	                frame.show ();
	        }
	}

This problem can also be reproduced without adding a MenuItem to the Menu or setting the Frame's bounds:

	import java.awt.*;
	
	public class MenuFrameTest extends Object
	{
	        public static void main (String[] args)
	        {
	                Frame frame = new Frame ("Menu Test");
	                MenuBar menuBar = new MenuBar ();
	                Menu menu = new Menu ("Frame");
	                menuBar.add (menu);         
	                frame.setMenuBar (menuBar);
	                frame.show ();
	        }
	}

Here's the OPT file...

	#-----------------------------------------------
	# jxeLink options for MenuFrameTest
	# generated by IBM Embedded IDE on Tue Nov 07 09:28:56 EST 2000
	#-----------------------------------------------
	
	
	#-----------------------------------------------
	# Boot classPath
	#-----------------------------------------------
	
	"@{{IVEHOME}}{{/}}lib{{/}}jclMax.jxeLinkOptions"
	"@{{IVEHOME}}{{/}}lib{{/}}jclMax{{/}}prsnlwin.jxeLinkOptions"
	-includeMainMethod awtbugs.MenuFrameTest
	-o "C:{{/}}vame1.2{{/}}simon{{/}}workspaces{{/}}simon{{/}}Smartlinker{{/}}MenuFrameTest{{/}}MenuFrameTest"
	-nologo
	
	#-----------------------------------------------
	# Workspace classPath
	#-----------------------------------------------
	
	-cp "{{IDETARGET}}{{/}}Bugs"
	
	#-----------------------------------------------
	# additional options
	#-----------------------------------------------
	
	-le
	-nog
	-noProfile
	-noRefTree
	-noStats
	-noMap
	-removeUnused
	-terseLog

PJM (11/8/00 3:04:13 PM)
	Moving to SWT ... also changing OS to ALL

	The SWT team is going to have to own a file called &lt;some SWT package&gt;/jxeLink.rules (case sensitive).  This file
	contains jxeLink reduction rules.  There should be one of these files in a win32 specific package, in a Photon
	package, etc. etc.  It may be that there could be a common one if any reduction rules are needed for the 
	platform independent code (seems unlikely to me).  mcq is basically familiar with this concept, as it was done
	for the jcl as well, but as a separate file instead of as a resource in the jar.  It &gt;really&lt; needs to be in a resource
	in a jar, or it's going to be impossible for users.

	I'm more than willing to help advise on this.  Please call.

SN (2/5/01 6:34:25 PM)
	MCQ to resolve with PJM.
No further JXELink work planned for R2.0
Marking as later to indicate that we should look at this again after R2.0 
ships.

It is now aFter R2.0 - reinvestigate.
Marked as duplicate of 4812 which contains more updated notes about 
jxeLink.rules and SWT

*** This bug has been marked as a duplicate of 4812 ***</WithStack>
    <WithOutStack>Product: VAME 1.2 + JCL Personal Configuration

Description:

I've tried building a very simple AWT application using VAME 1.2.  I used the ..\jclMax\prsnlwin.jxeLinkOptions file in my OPT file,
but the JXE crashes and burns when run.  This PR is very similar to 1G40EBN, but involves using Menus.

	Unhandled exception
	Type=GPF vmState=0x00000003
	ExceptionCode=0xc0000005 ExceptionAddress=0x1001f24e ContextFlags=0x0001001f
	Handler1=0x11001566 Handler2=0x1003a760
	Module=C:\VAME1.2\IVE\BIN\J9VM12.DLL
	Module_base_address=0x10000000
	Offset_in_DLL=0x0001f24e
	EDI=0x0257f92c ESI=0x01646828 EAX=0x00000000
	EBX=0x01648ec8 ECX=0x014cca44 EDX=0x00000000
	EBP=0x01646828 ESP=0x0257f8a8 EIP=0x1001f24e
	
	Thread: Display (priority 5)
	0000 com/ibm/swt/win32/OS.InsertMenuItem(IIZLcom/ibm/swt/win32/MENUITEMINFO;)Z
	0073 com/ibm/swt/widgets/Menu.createChild(Lcom/ibm/swt/widgets/MenuItem;I)V
	000d com/ibm/swt/widgets/MenuItem.&lt;init&gt;(Lcom/ibm/swt/widgets/Menu;II)V
	000b com/ibm/swt/widgets/MenuItem.&lt;init&gt;(Lcom/ibm/swt/widgets/Menu;I)V
	002d java/awt/Menu._addNotify()V
	003e java/awt/MenuBar._addNotify()V
	003a java/awt/Frame._addNotify()V
	0008 java/awt/Widget$AddNotifyRunnable.run()V
	000f com/ibm/swt/widgets/RunnableLock.run()V
	001d com/ibm/swt/widgets/Display.runAsyncMessages()Z
	0044 com/ibm/swt/widgets/Display.readAndDispatch()Z
	000a java/awt/BBToolkit.start()V
	0030 java/awt/BBToolkit$1.run()V
	
	
Here's the test case:
	
	import java.awt.*;
	import java.awt.event.*;
	
	public class MenuFrameTest extends Object
	{
	        public static void main (String[] args)
	        {
	                final Frame frame = new Frame ("Menu Test");
	                
	                MenuBar menuBar = new MenuBar ();
	                Menu menu = new Menu ("Frame");
	                MenuItem menuItem = new MenuItem ("Close");
	                
	                ActionListener listener = new ActionListener ()
	                {
	                        public void actionPerformed (ActionEvent event)
	                        {
	                                frame.dispose ();
	                                System.exit (0);
	                        }
	                };
	                
	                menuItem.addActionListener (listener);
	                menu.add (menuItem);
	                menuBar.add (menu);
	                
	                frame.setMenuBar (menuBar);
	                
	                frame.setBounds (0, 0, 200, 200);
	                frame.show ();
	        }
	}

This problem can also be reproduced without adding a MenuItem to the Menu or setting the Frame's bounds:

	import java.awt.*;
	
	public class MenuFrameTest extends Object
	{
	        public static void main (String[] args)
	        {
	                Frame frame = new Frame ("Menu Test");
	                MenuBar menuBar = new MenuBar ();
	                Menu menu = new Menu ("Frame");
	                menuBar.add (menu);         
	                frame.setMenuBar (menuBar);
	                frame.show ();
	        }
	}

Here's the OPT file...

	#-----------------------------------------------
	# jxeLink options for MenuFrameTest
	# generated by IBM Embedded IDE on Tue Nov 07 09:28:56 EST 2000
	#-----------------------------------------------
	
	
	#-----------------------------------------------
	# Boot classPath
	#-----------------------------------------------
	
	"@{{IVEHOME}}{{/}}lib{{/}}jclMax.jxeLinkOptions"
	"@{{IVEHOME}}{{/}}lib{{/}}jclMax{{/}}prsnlwin.jxeLinkOptions"
	-includeMainMethod awtbugs.MenuFrameTest
	-o "C:{{/}}vame1.2{{/}}simon{{/}}workspaces{{/}}simon{{/}}Smartlinker{{/}}MenuFrameTest{{/}}MenuFrameTest"
	-nologo
	
	#-----------------------------------------------
	# Workspace classPath
	#-----------------------------------------------
	
	-cp "{{IDETARGET}}{{/}}Bugs"
	
	#-----------------------------------------------
	# additional options
	#-----------------------------------------------
	
	-le
	-nog
	-noProfile
	-noRefTree
	-noStats
	-noMap
	-removeUnused
	-terseLog

PJM (11/8/00 3:04:13 PM)
	Moving to SWT ... also changing OS to ALL

	The SWT team is going to have to own a file called &lt;some SWT package&gt;/jxeLink.rules (case sensitive).  This file
	contains jxeLink reduction rules.  There should be one of these files in a win32 specific package, in a Photon
	package, etc. etc.  It may be that there could be a common one if any reduction rules are needed for the 
	platform independent code (seems unlikely to me).  mcq is basically familiar with this concept, as it was done
	for the jcl as well, but as a separate file instead of as a resource in the jar.  It &gt;really&lt; needs to be in a resource
	in a jar, or it's going to be impossible for users.

	I'm more than willing to help advise on this.  Please call.

SN (2/5/01 6:34:25 PM)
	MCQ to resolve with PJM.
No further JXELink work planned for R2.0
Marking as later to indicate that we should look at this again after R2.0 
ships.

It is now aFter R2.0 - reinvestigate.
Marked as duplicate of 4812 which contains more updated notes about 
jxeLink.rules and SWT

*** This bug has been marked as a duplicate of 4812 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4572" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Need support for tool tips in table columns (1GBZLD1)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Table column headings should support tool tips.

Trigger PR: 1G45QKT: ITPJUI:WINNT - Tasklist columns - no tooltip and bogus names


NOTES:

NE (05/01/01 3:31:42 PM)
	Please advise when status of this PR changes.

	McQ (09/05/2001 4:06:29 PM) -
		We will not have time to get to this.
PRODUCT VERSION:
0.046


Nick, was assigning this to SWT intended to indicate that you still want this 
feature, or are you just clearing your PR backlog?
Not sure what to do about this...
I think this is quite useful.

Take a look at the Tasks view.

What do the first 3 colums mean?

It would be good if we had a header tooltips like "Type of Task", "Priority",
and "Completed?"
*** Bug 50026 has been marked as a duplicate of this bug. ***
Fixed &gt; 20050831

See TableColumn.setToolTipText() and TreeColumn.setToolTipText().
Cool.  I've filed bug 108493 for the corresponding marker view work.</WithStack>
    <WithOutStack>Table column headings should support tool tips.

Trigger PR: 1G45QKT: ITPJUI:WINNT - Tasklist columns - no tooltip and bogus names


NOTES:

NE (05/01/01 3:31:42 PM)
	Please advise when status of this PR changes.

	McQ (09/05/2001 4:06:29 PM) -
		We will not have time to get to this.
PRODUCT VERSION:
0.046


Nick, was assigning this to SWT intended to indicate that you still want this 
feature, or are you just clearing your PR backlog?
Not sure what to do about this...
I think this is quite useful.

Take a look at the Tasks view.

What do the first 3 colums mean?

It would be good if we had a header tooltips like "Type of Task", "Priority",
and "Completed?"
*** Bug 50026 has been marked as a duplicate of this bug. ***
Fixed &gt; 20050831

See TableColumn.setToolTipText() and TreeColumn.setToolTipText().
Cool.  I've filed bug 108493 for the corresponding marker view work.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4573" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>TabFolder computeSize does not give a good answer in layouts (1GELI36)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The TabFolder does not layout its children in a way consistant with other 
composites.

While the TabFolder allows a layout to be set, on Windows it does not use that 
layout to position the controls set on the tab items.
On Motif, it does use the layout but merely because of an accident of ordering.

Something needs to be done to make the TabFolder consistant across platforms 
and useable within an application
structured using Layouts.

NOTES:

	McQ (26/06/2001 2:24:23 PM) -
		The layout should be used on all platforms.
		We should use StackLayout by default (move to swt.layout)

SN (9/7/01 11:55:58 AM)
	It's not correct for a widget to come with a "free" layout.  We should 
move StackLayout from the
	custom widgets to the swt layouts package.
PRODUCT VERSION:

115


Need to make them work consistantly. Discuss moving StackLayout with SN, McQ. 
Suggest creating a new name for class in the moved copy (so existing code 
isn't broken).
Later
Post 2.0. Re-opening bug reports for review.
Too late now.</WithStack>
    <WithOutStack>The TabFolder does not layout its children in a way consistant with other 
composites.

While the TabFolder allows a layout to be set, on Windows it does not use that 
layout to position the controls set on the tab items.
On Motif, it does use the layout but merely because of an accident of ordering.

Something needs to be done to make the TabFolder consistant across platforms 
and useable within an application
structured using Layouts.

NOTES:

	McQ (26/06/2001 2:24:23 PM) -
		The layout should be used on all platforms.
		We should use StackLayout by default (move to swt.layout)

SN (9/7/01 11:55:58 AM)
	It's not correct for a widget to come with a "free" layout.  We should 
move StackLayout from the
	custom widgets to the swt layouts package.
PRODUCT VERSION:

115


Need to make them work consistantly. Discuss moving StackLayout with SN, McQ. 
Suggest creating a new name for class in the moved copy (so existing code 
isn't broken).
Later
Post 2.0. Re-opening bug reports for review.
Too late now.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4574" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="6592" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Accessibility: TreeItems cut off when using extra large fonts (1GJL4E7)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="assignment">
        <location start="294" end="315" />
        <code>style |= SWT.CHECK;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>1) Set the Scheme in the Appearance part of the display to Windows Standard Large</Line>
          <Line>2) Add the following line to TreeTab.java in the SWT control example</Line>
          <Line />
          <Line />
          <Line />
          <Line>3) Look at the Table tab - the checkboxes are cut off</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>When you have your system display settings set to Windows Standard Large the bottom of 
checkboxes in a Tree Viewer will be cut off.

STEPS
	1) Set the Scheme in the Appearance part of the display to Windows Standard Large
	2) Add the following line to TreeTab.java in the SWT control example

		style |= SWT.CHECK;

	3) Look at the Table tab - the checkboxes are cut off


NOTES:
PRODUCT VERSION: Build 134





*** This bug has been marked as a duplicate of 6592 ***</WithStack>
    <WithOutStack>When you have your system display settings set to Windows Standard Large the bottom of 
checkboxes in a Tree Viewer will be cut off.

STEPS
	1) Set the Scheme in the Appearance part of the display to Windows Standard Large
	2) Add the following line to TreeTab.java in the SWT control example

		style |= SWT.CHECK;

	3) Look at the Table tab - the checkboxes are cut off


NOTES:
PRODUCT VERSION: Build 134





*** This bug has been marked as a duplicate of 6592 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4575" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Neutrino" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>desire exception checks for inputProc/windowCallback (1G55O7P)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="10">
      <source_code type="functiondef">
        <location start="785" end="1069" />
        <code>int windowProc (int handle, int data, int info) throws Throwable {
	try {
		Widget widget = WidgetTable.get (handle);
		if (widget == null) return OS.Pt_CONTINUE;
		return widget.processEvent (data, info);
	}
	catch (Throwable e) {
		if (embedded) e.printStackTrace();
		throw e;
	}
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1279" end="1679" />
        <code>boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
			try {							
			// ---- added this line
				lock.run ();
			}							
				// ---- added this line
			finally {						
		// ---- added this line
				lock.notifyAll ();
			}							
				// ---- added this line
		};
	} while (true);
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2182" end="2417" />
        <code>int inputProc (int data, int rcvid, int message, int size) {
	if (!embedded) return OS.Pt_CONTINUE;

	try {	
		runDeferredEvents ();
		runAsyncMessages ();
	}
	catch (Throwable e) {
		e.printStackTrace();
	}
	
	return OS.Pt_CONTINUE;
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2419" end="2683" />
        <code>boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
			try {
				lock.run ();
			}
			finally {
				lock.notifyAll ();
			}
		};
	} while (true);
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="2685" end="3013" />
        <code>int windowProc (int handle, int data, int info) {
	Widget widget = WidgetTable.get (handle);
	if (widget == null) return OS.Pt_CONTINUE;
	
	if (!embedded) return widget.processEvent (data, info);
	
	try {
		return widget.processEvent (data, info);
	}
	catch (Throwable e) {
		e.printStackTrace();
		return OS.Pt_CONTINUE;
	}
	
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="3287" end="3952" />
        <code>public void syncExec (Runnable runnable) {
	if (isValidThread ()) {
		if (runnable != null) runnable.run ();
		return;
	}
	if (runnable == null) {
		wake ();
		return;
	}
	RunnableLock lock = new RunnableLock (runnable);
	synchronized (lock) {
		addLast (lock);
		wake ();
		boolean interrupted = false;
		while (!lock.done ()) {
			try {
				lock.wait ();
			} catch (InterruptedException e) {
				interrupted = true;
			}
		}
		if (interrupted) {
			Thread.currentThread ().interrupt ();
		}
************ ADDED  ************
		if (lock.throwable != null) {
			SWTError.error(SWT.ERROR_UNSPECIFIED, lock.throwable);
		}
***************************************
	}
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="3954" end="4406" />
        <code>boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
*************** ADDED ***************
			try {
***************************************
				lock.run ();
*************** ADDED ***************
			} catch (Throwable t) {
				lock.throwable = t;
			}
***************************************
			lock.notifyAll ();
		};
	} while (true);
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="5536" end="5550" />
        <code>lock.run();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="5567" end="5587" />
        <code>lock.notifyAll();</code>
      </source_code>
      <source_code type="functiondef">
        <location start="6755" end="6802" />
        <code>lock.notifyAll() code to inside the finally {}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="2">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Add this field to com.ibm.swt.widgets.RunnableLock</Line>
          <Line />
          <Line>Throwable throwable;</Line>
          <Line />
          <Line>2) Change these methods in com.ibm.swt.widgets.Display</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="5">
        <Lines>
          <Line>- put a "debug flag" into SWT to optionally allow stack traces</Line>
          <Line>to be printed.</Line>
          <Line>- cause some kind of SWTError to occur on the thread which</Line>
          <Line>called the syncExec,</Line>
          <Line>rather than leave it hanging forever.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>PJM (11/28/00 10:31:57 PM)
	When in applet mode, both the window callbacks and input proc callbacks 
are being called into from
	(potentially), the PtMainLoop() that the plugin is running.  ie, there 
is no Java code calling these
	methods, or any C code that we control at all.  This causes a problem 
when an exception is
	thrown, as it goes right by all the methods in the frame, expecting 
someone down low to
	handle it.  Noone there to do it.  

	I would like to see the following sort of code added for both the 
inputProc and windowCallback,
	so that I can at least diagnose exceptions.  Currently, I have to sort 
of guess that  	an exception occurred and that's why my syncExec() never 
returns".  I can stick a breakpoint in
	Throwable's constructor and catch it that way


int windowProc (int handle, int data, int info) throws Throwable {
	try {
		Widget widget = WidgetTable.get (handle);
		if (widget == null) return OS.Pt_CONTINUE;
		return widget.processEvent (data, info);
	}
	catch (Throwable e) {
		if (embedded) e.printStackTrace();
		throw e;
	}
}

	Also, I had patched runAsyncMessages() before, as when the lock threw 
an exception,
	it never bothered to wake up the sender.  I think it is perfectly valid 
to do this.  ie, 
	change the code as follows:

boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
			try {							
			// ---- added this line
				lock.run ();
			}							
				// ---- added this line
			finally {						
		// ---- added this line
				lock.notifyAll ();
			}							
				// ---- added this line
		};
	} while (true);
}

	I don't know, maybe not.  I guess at this point the readAndDispatch() 
thread would be
	dead.  However, in the applet case, I think everything would be fairly 
clean.  Might get
	some mouse problems if exceptions did get thrown, but it would be worth 
it.

NOTES:

PJM (12/7/00 12:28:23 AM)
	I'd really like to get the try{} finally{} in runAsyncMessages, as I 
just noticed a thread
	blocked on a Runnable that was long gone, and it was tying up my AWT 
Event Queue.
	Here are my current versions:

int inputProc (int data, int rcvid, int message, int size) {
	if (!embedded) return OS.Pt_CONTINUE;

	try {	
		runDeferredEvents ();
		runAsyncMessages ();
	}
	catch (Throwable e) {
		e.printStackTrace();
	}
	
	return OS.Pt_CONTINUE;
}

boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
			try {
				lock.run ();
			}
			finally {
				lock.notifyAll ();
			}
		};
	} while (true);
}

int windowProc (int handle, int data, int info) {
	Widget widget = WidgetTable.get (handle);
	if (widget == null) return OS.Pt_CONTINUE;
	
	if (!embedded) return widget.processEvent (data, info);
	
	try {
		return widget.processEvent (data, info);
	}
	catch (Throwable e) {
		e.printStackTrace();
		return OS.Pt_CONTINUE;
	}
	
}

SSQ/SN (12/7/00 4:30:00 PM) -
	We don't think adding debug statement in the code is right. We plan to 
do
	something like the following:

1) Add this field to com.ibm.swt.widgets.RunnableLock

	Throwable throwable;

2) Change these methods in com.ibm.swt.widgets.Display

public void syncExec (Runnable runnable) {
	if (isValidThread ()) {
		if (runnable != null) runnable.run ();
		return;
	}
	if (runnable == null) {
		wake ();
		return;
	}
	RunnableLock lock = new RunnableLock (runnable);
	synchronized (lock) {
		addLast (lock);
		wake ();
		boolean interrupted = false;
		while (!lock.done ()) {
			try {
				lock.wait ();
			} catch (InterruptedException e) {
				interrupted = true;
			}
		}
		if (interrupted) {
			Thread.currentThread ().interrupt ();
		}
************ ADDED  ************
		if (lock.throwable != null) {
			SWTError.error(SWT.ERROR_UNSPECIFIED, lock.throwable);
		}
***************************************
	}
}

boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
*************** ADDED ***************
			try {
***************************************
				lock.run ();
*************** ADDED ***************
			} catch (Throwable t) {
				lock.throwable = t;
			}
***************************************
			lock.notifyAll ();
		};
	} while (true);
}

	So that the caller of Display.syncExec() will be notified that an 
exception ocurred while
	running the syncExec runnable.

PJM (12/11/00 4:57:50 PM)
	This is going to have a new side effect of having exceptions 
transported from the UI thread as
	a rando exception, into the thread doing the syncExec() as an SWTError.

	I guess this basically solves my issue of ensuring the lock.notifyAll() 
is always run, which it
	seems like it would in this case.  It doesn't help at all with my 
desire to have debugging code
	in windowProc or inputProc though, unless I missed something.

	Given that, I don't think having a possible SWTError out of syncExec 
really helps &gt;me&lt;.  I
	use it all over the place, and clearly can't add execption handlers to 
it.  I can't imagine
	too many people doing this.  Besides, you will get different behaviour 
if an exception
	is thrown in your syncExec() depending if you are on the UI thread or 
not (wrapped in an
	SWTError if you aren't on UI thread, not wrapped in an SWTError if you 
are on a UI 
	thread).

	Given all this, it seems safest to just change the lock.run(); call into
		try {
			lock.run();
		}
		finally {
			lock.notifyAll();
		}

	The debugging statements in windowProc and inputProc, per my 
suggestion, only
	get used for the embedded=true case.  I don't see much harm in using 
them as is.

SSQ (3/16/01 3:55:26 PM) -
	We don't believe that just notifing the caller thread is the right 
thing to do,
	since this hides the fact that the runnable failed to run completly and 
can lead to
	things being null and other unexpected conditions in the caller code.

PJM (8/31/2001 12:02:21 PM)
	Have some code that runs in a syncExec() 
	under Voyager, and if it throws an exception, we lock up the entire 
applet
	system.

	Again, reason for this is basically that the lock is not sent notifyAll
(), so the
	thread that did the syncExec() will never wake up again.  Locked 
forever.

	Plus, because we have no Java code or C code we control that is 
basically
	calling the callin points of inputProc() et al, we actually have no 
idea that
	an exception has actually occurred.

	So, I've gone back and had to patch in this same friggin code again to
	get the customer limping.  Code added is the code to catch throwable 
and 
	print the stack trace if (embedded == true), and the movement of the
	lock.notifyAll() code to inside the finally {} block instead of outside 
of it.
	

SSQ (9/6/01 2:39:22 PM) -
	The consensus is that we will do 2 things:
		- put a "debug flag" into SWT to optionally allow stack traces 
to be printed.
		- cause some kind of SWTError to occur on the thread which 
called the syncExec, 
		rather than leave it hanging forever.

	Need to decide whatr is going to happen with the UI thread. Should we 
hide the exception
	from the UI thread, or not?
PRODUCT VERSION:

	SWT for Photon 0.004


Working on this is fixed. I throw SWT.ERROR_FAILED_EXEC and the debug flag is added.</WithStack>
    <WithOutStack>PJM (11/28/00 10:31:57 PM)
	When in applet mode, both the window callbacks and input proc callbacks 
are being called into from
	(potentially), the PtMainLoop() that the plugin is running.  ie, there 
is no Java code calling these
	methods, or any C code that we control at all.  This causes a problem 
when an exception is
	thrown, as it goes right by all the methods in the frame, expecting 
someone down low to
	handle it.  Noone there to do it.  

	I would like to see the following sort of code added for both the 
inputProc and windowCallback,
	so that I can at least diagnose exceptions.  Currently, I have to sort 
of guess that  	an exception occurred and that's why my syncExec() never 
returns".  I can stick a breakpoint in
	Throwable's constructor and catch it that way


int windowProc (int handle, int data, int info) throws Throwable {
	try {
		Widget widget = WidgetTable.get (handle);
		if (widget == null) return OS.Pt_CONTINUE;
		return widget.processEvent (data, info);
	}
	catch (Throwable e) {
		if (embedded) e.printStackTrace();
		throw e;
	}
}

	Also, I had patched runAsyncMessages() before, as when the lock threw 
an exception,
	it never bothered to wake up the sender.  I think it is perfectly valid 
to do this.  ie, 
	change the code as follows:

boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
			try {							
			// ---- added this line
				lock.run ();
			}							
				// ---- added this line
			finally {						
		// ---- added this line
				lock.notifyAll ();
			}							
				// ---- added this line
		};
	} while (true);
}

	I don't know, maybe not.  I guess at this point the readAndDispatch() 
thread would be
	dead.  However, in the applet case, I think everything would be fairly 
clean.  Might get
	some mouse problems if exceptions did get thrown, but it would be worth 
it.

NOTES:

PJM (12/7/00 12:28:23 AM)
	I'd really like to get the try{} finally{} in runAsyncMessages, as I 
just noticed a thread
	blocked on a Runnable that was long gone, and it was tying up my AWT 
Event Queue.
	Here are my current versions:

int inputProc (int data, int rcvid, int message, int size) {
	if (!embedded) return OS.Pt_CONTINUE;

	try {	
		runDeferredEvents ();
		runAsyncMessages ();
	}
	catch (Throwable e) {
		e.printStackTrace();
	}
	
	return OS.Pt_CONTINUE;
}

boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
			try {
				lock.run ();
			}
			finally {
				lock.notifyAll ();
			}
		};
	} while (true);
}

int windowProc (int handle, int data, int info) {
	Widget widget = WidgetTable.get (handle);
	if (widget == null) return OS.Pt_CONTINUE;
	
	if (!embedded) return widget.processEvent (data, info);
	
	try {
		return widget.processEvent (data, info);
	}
	catch (Throwable e) {
		e.printStackTrace();
		return OS.Pt_CONTINUE;
	}
	
}

SSQ/SN (12/7/00 4:30:00 PM) -
	We don't think adding debug statement in the code is right. We plan to 
do
	something like the following:

1) Add this field to com.ibm.swt.widgets.RunnableLock

	Throwable throwable;

2) Change these methods in com.ibm.swt.widgets.Display

public void syncExec (Runnable runnable) {
	if (isValidThread ()) {
		if (runnable != null) runnable.run ();
		return;
	}
	if (runnable == null) {
		wake ();
		return;
	}
	RunnableLock lock = new RunnableLock (runnable);
	synchronized (lock) {
		addLast (lock);
		wake ();
		boolean interrupted = false;
		while (!lock.done ()) {
			try {
				lock.wait ();
			} catch (InterruptedException e) {
				interrupted = true;
			}
		}
		if (interrupted) {
			Thread.currentThread ().interrupt ();
		}
************ ADDED  ************
		if (lock.throwable != null) {
			SWTError.error(SWT.ERROR_UNSPECIFIED, lock.throwable);
		}
***************************************
	}
}

boolean runAsyncMessages () {
	if (messagesSize == 0) return false;
	do {
		RunnableLock lock = removeFirst ();
		if (lock == null) return true;
		synchronized (lock) {
*************** ADDED ***************
			try {
***************************************
				lock.run ();
*************** ADDED ***************
			} catch (Throwable t) {
				lock.throwable = t;
			}
***************************************
			lock.notifyAll ();
		};
	} while (true);
}

	So that the caller of Display.syncExec() will be notified that an 
exception ocurred while
	running the syncExec runnable.

PJM (12/11/00 4:57:50 PM)
	This is going to have a new side effect of having exceptions 
transported from the UI thread as
	a rando exception, into the thread doing the syncExec() as an SWTError.

	I guess this basically solves my issue of ensuring the lock.notifyAll() 
is always run, which it
	seems like it would in this case.  It doesn't help at all with my 
desire to have debugging code
	in windowProc or inputProc though, unless I missed something.

	Given that, I don't think having a possible SWTError out of syncExec 
really helps &gt;me&lt;.  I
	use it all over the place, and clearly can't add execption handlers to 
it.  I can't imagine
	too many people doing this.  Besides, you will get different behaviour 
if an exception
	is thrown in your syncExec() depending if you are on the UI thread or 
not (wrapped in an
	SWTError if you aren't on UI thread, not wrapped in an SWTError if you 
are on a UI 
	thread).

	Given all this, it seems safest to just change the lock.run(); call into
		try {
			lock.run();
		}
		finally {
			lock.notifyAll();
		}

	The debugging statements in windowProc and inputProc, per my 
suggestion, only
	get used for the embedded=true case.  I don't see much harm in using 
them as is.

SSQ (3/16/01 3:55:26 PM) -
	We don't believe that just notifing the caller thread is the right 
thing to do,
	since this hides the fact that the runnable failed to run completly and 
can lead to
	things being null and other unexpected conditions in the caller code.

PJM (8/31/2001 12:02:21 PM)
	Have some code that runs in a syncExec() 
	under Voyager, and if it throws an exception, we lock up the entire 
applet
	system.

	Again, reason for this is basically that the lock is not sent notifyAll
(), so the
	thread that did the syncExec() will never wake up again.  Locked 
forever.

	Plus, because we have no Java code or C code we control that is 
basically
	calling the callin points of inputProc() et al, we actually have no 
idea that
	an exception has actually occurred.

	So, I've gone back and had to patch in this same friggin code again to
	get the customer limping.  Code added is the code to catch throwable 
and 
	print the stack trace if (embedded == true), and the movement of the
	lock.notifyAll() code to inside the finally {} block instead of outside 
of it.
	

SSQ (9/6/01 2:39:22 PM) -
	The consensus is that we will do 2 things:
		- put a "debug flag" into SWT to optionally allow stack traces 
to be printed.
		- cause some kind of SWTError to occur on the thread which 
called the syncExec, 
		rather than leave it hanging forever.

	Need to decide whatr is going to happen with the UI thread. Should we 
hide the exception
	from the UI thread, or not?
PRODUCT VERSION:

	SWT for Photon 0.004


Working on this is fixed. I throw SWT.ERROR_FAILED_EXEC and the debug flag is added.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4576" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Thread suspend/resume errors in classes with the "same" name</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functiondef">
        <location start="721" end="945" />
        <code>public class Hello() {

	public static void main(String[] args) {
		Hello h= new Hello();
		h.foo();
	}

	public void foo() {
		System.out.println("Foo!"); // place breakpoint here
		Hello2 h2= new Hello2();
		h2.foo();
	}
}</code>
      </source_code>
      <source_code type="class">
        <location start="947" end="1052" />
        <code>public class Hello2 {

	public void foo() {
		System.out.println("Foo2!"); // place breakpoint here
	}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="4">
      <Enumeration lines="12">
        <Lines>
          <Line>1. Create the two classes which follow and place breakpoints where indicated in</Line>
          <Line>comments.</Line>
          <Line>2. Debug Hello to the first breakpoint.</Line>
          <Line>3. Click resume.</Line>
          <Line>4. Note that the second breakpoint is not hit.</Line>
          <Line>Alternatively:</Line>
          <Line>1. Same as above.</Line>
          <Line>2. Same as above.</Line>
          <Line>3. Step over the System.out call and the instantiation of Hello2</Line>
          <Line>4. Note that after stepping over the instantiation, the thread was somehow</Line>
          <Line>resumed such that the call to Hello2#foo() is made and the breakpoint in Hello2</Line>
          <Line>is hit.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="6">
        <Lines>
          <Line>1. Same as above.</Line>
          <Line>2. Same as above.</Line>
          <Line>3. Step over the System.out call and the instantiation of Hello2</Line>
          <Line>4. Note that after stepping over the instantiation, the thread was somehow</Line>
          <Line>resumed such that the call to Hello2#foo() is made and the breakpoint in Hello2</Line>
          <Line>is hit.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="18">
        <Lines>
          <Line>1. Receive ClassLoadEventSet. Install breakpoints, resume thread.</Line>
          <Line>2. Receive BreakpointEvent. Handle as usual.</Line>
          <Line>3. Receive duplicate ClassLoadEventSet. Reinstall breakpoints, resume thread.</Line>
          <Line>No sooner has the breakpoint been hit, than we are resuming the thread.</Line>
          <Line>Investigation continues.</Line>
          <Line>It wasn't that we were receiving multiple EventSets for the class load, but that</Line>
          <Line>we were resuming the same thread for each event in the EventSet. So the</Line>
          <Line>interaction looked like:</Line>
          <Line>- VM suspends</Line>
          <Line>- VM fires ClassLoadEvent set (2 events)</Line>
          <Line>- EventDispatcher handles event set and calls EventSet.resume()</Line>
          <Line>- EventSetImpl, iterating over the events in the set, resumes the thread for the</Line>
          <Line>first class load event.</Line>
          <Line>- Thread resumes on VM and hits a breakpoint</Line>
          <Line>- VM suspends and fires breakpoint event</Line>
          <Line>- EventSetImpl, still iterating over the events in the set, resumes the thread</Line>
          <Line>(again) for the second class load event</Line>
          <Line>- VM resumes and hits the second breakpoint</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="10">
        <Lines>
          <Line>- VM suspends</Line>
          <Line>- VM fires ClassLoadEvent set (2 events)</Line>
          <Line>- EventDispatcher handles event set and calls EventSet.resume()</Line>
          <Line>- EventSetImpl, iterating over the events in the set, resumes the thread for the</Line>
          <Line>first class load event.</Line>
          <Line>- Thread resumes on VM and hits a breakpoint</Line>
          <Line>- VM suspends and fires breakpoint event</Line>
          <Line>- EventSetImpl, still iterating over the events in the set, resumes the thread</Line>
          <Line>(again) for the second class load event</Line>
          <Line>- VM resumes and hits the second breakpoint</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>This bug was exposed as a result of the fix for installing breakpoints in too
many classes (a breakpoint in class Hello would result in a breakpoint being
installed in Hello2). It appears to have been merely exposed by the fix, not
caused by it.

1. Create the two classes which follow and place breakpoints where indicated in
comments.
2. Debug Hello to the first breakpoint.
3. Click resume.
4. Note that the second breakpoint is not hit.
Alternatively:
1. Same as above.
2. Same as above.
3. Step over the System.out call and the instantiation of Hello2
4. Note that after stepping over the instantiation, the thread was somehow
resumed such that the call to Hello2#foo() is made and the breakpoint in Hello2
is hit.

public class Hello() {

	public static void main(String[] args) {
		Hello h= new Hello();
		h.foo();
	}

	public void foo() {
		System.out.println("Foo!"); // place breakpoint here
		Hello2 h2= new Hello2();
		h2.foo();
	}
}

public class Hello2 {

	public void foo() {
		System.out.println("Foo2!"); // place breakpoint here
	}

}
In the latest code stream, I have no problem. I recently changed the
implementation of stepping/dropping, etc. I do not know if I fixed
this as a side effect.


The bug still exists when I try the example on Linux. I tested this on WinNT,
however, and it worked correctly.

Seems this is a Linux-only bug?
We've managed to reproduce this bug on Windows, but only while debugging it
(with breakpoints in the host).
We suspect we've found the root of the problem: Two sets of ClassLoadEvents are
being fired when Hello2() is loaded.
Suspect the event flow is:
1. Receive ClassLoadEventSet. Install breakpoints, resume thread.
2. Receive BreakpointEvent. Handle as usual.
3. Receive duplicate ClassLoadEventSet. Reinstall breakpoints, resume thread.
No sooner has the breakpoint been hit, than we are resuming the thread.
Investigation continues.
It wasn't that we were receiving multiple EventSets for the class load, but that
we were resuming the same thread for each event in the EventSet. So the
interaction looked like:
- VM suspends
- VM fires ClassLoadEvent set (2 events)
- EventDispatcher handles event set and calls EventSet.resume()
- EventSetImpl, iterating over the events in the set, resumes the thread for the
first class load event.
- Thread resumes on VM and hits a breakpoint
- VM suspends and fires breakpoint event
- EventSetImpl, still iterating over the events in the set, resumes the thread
(again) for the second class load event
- VM resumes and hits the second breakpoint

The EventSetImpl has been fixed to fire only one resume event per thread per
call to EventSetImpl#resumeThreads()
Please verify.
Verified.
*** Bug 5083 has been marked as a duplicate of this bug. ***
*** Bug 5234 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>This bug was exposed as a result of the fix for installing breakpoints in too
many classes (a breakpoint in class Hello would result in a breakpoint being
installed in Hello2). It appears to have been merely exposed by the fix, not
caused by it.

1. Create the two classes which follow and place breakpoints where indicated in
comments.
2. Debug Hello to the first breakpoint.
3. Click resume.
4. Note that the second breakpoint is not hit.
Alternatively:
1. Same as above.
2. Same as above.
3. Step over the System.out call and the instantiation of Hello2
4. Note that after stepping over the instantiation, the thread was somehow
resumed such that the call to Hello2#foo() is made and the breakpoint in Hello2
is hit.

public class Hello() {

	public static void main(String[] args) {
		Hello h= new Hello();
		h.foo();
	}

	public void foo() {
		System.out.println("Foo!"); // place breakpoint here
		Hello2 h2= new Hello2();
		h2.foo();
	}
}

public class Hello2 {

	public void foo() {
		System.out.println("Foo2!"); // place breakpoint here
	}

}
In the latest code stream, I have no problem. I recently changed the
implementation of stepping/dropping, etc. I do not know if I fixed
this as a side effect.


The bug still exists when I try the example on Linux. I tested this on WinNT,
however, and it worked correctly.

Seems this is a Linux-only bug?
We've managed to reproduce this bug on Windows, but only while debugging it
(with breakpoints in the host).
We suspect we've found the root of the problem: Two sets of ClassLoadEvents are
being fired when Hello2() is loaded.
Suspect the event flow is:
1. Receive ClassLoadEventSet. Install breakpoints, resume thread.
2. Receive BreakpointEvent. Handle as usual.
3. Receive duplicate ClassLoadEventSet. Reinstall breakpoints, resume thread.
No sooner has the breakpoint been hit, than we are resuming the thread.
Investigation continues.
It wasn't that we were receiving multiple EventSets for the class load, but that
we were resuming the same thread for each event in the EventSet. So the
interaction looked like:
- VM suspends
- VM fires ClassLoadEvent set (2 events)
- EventDispatcher handles event set and calls EventSet.resume()
- EventSetImpl, iterating over the events in the set, resumes the thread for the
first class load event.
- Thread resumes on VM and hits a breakpoint
- VM suspends and fires breakpoint event
- EventSetImpl, still iterating over the events in the set, resumes the thread
(again) for the second class load event
- VM resumes and hits the second breakpoint

The EventSetImpl has been fixed to fire only one resume event per thread per
call to EventSetImpl#resumeThreads()
Please verify.
Verified.
*** Bug 5083 has been marked as a duplicate of this bug. ***
*** Bug 5234 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4577" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>Ctrl+Backspace &amp; Ctrl+del have the same key code and key event (1G54RAJ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="7">
      <source_code type="package">
        <location start="873" end="889" />
        <code>package afeb771;</code>
      </source_code>
      <source_code type="import">
        <location start="890" end="919" />
        <code>import com.ibm.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="920" end="949" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="950" end="978" />
        <code>import com.ibm.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="979" end="1000" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="multicomment">
        <location start="1001" end="1011" />
        <code>/**
 *
 */</code>
      </source_code>
      <source_code type="class">
        <location start="1012" end="2289" />
        <code>public class Test implements KeyListener {
/**
 * keyPressed method comment.
 */
public void keyPressed(KeyEvent e) {
	
	
	String result = "* KeyEvent: keyChar=";
	if (e.character &gt;= 32 &amp;&amp; e.character != 127)
	   result += e.character;
	else
		result += " ";

	result += " (0x" +
	Integer.toHexString(e.character).toUpperCase() + ")";
	result += ", keyCode=0x" +
	Integer.toHexString(e.keyCode).toUpperCase();
	result += ", stateMask=";

	if (e.stateMask == 0)
		   result += "&lt;none&gt;";
	else {
	   if ((e.stateMask &amp; SWT.ALT) != 0)     result += "Alt ";
	   if ((e.stateMask &amp; SWT.CONTROL) != 0) result += "Ctrl ";
	   if ((e.stateMask &amp; SWT.SHIFT) != 0)   result += "Shift";
   }

System.out.println(result);


}
/**
 * keyReleased method comment.
 */
public void keyReleased(KeyEvent e) {}
/**
 * 
 */
public static void main(String[] args) {
	Test t = new Test();
	t.start();
}
/**
 * 
 */
private void runEventLoop(Shell shell) {
	
	Display display = Display.getCurrent();
	shell.open();
	while (shell != null &amp;&amp; !shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep(); 
	} 
}
/**
 * 
 */
private void start() {
	Shell s = new Shell();
	s.setLayout(new FillLayout());
	Text t = new Text(s,SWT.NONE);
	t.addKeyListener(this);
	this.runEventLoop(s);
	
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The same KeyEvent is passed in for two different key

combinations (Windows keyboard): Ctrl+Backspace and

Ctrl+Delete (or Ctrl+Del). In both cases,

- KeyEvent.character is 0x7F,

- keyCode is 0x0,

- stateMask is SWT.CONTROL.

This is unacceptable in my application (LPEX), which

allows the user to customize their keys for various actions.

Both Windows and AWT/Swing on Windows are able to

distinguish between these keys fine.

NOTES:

Run testcase.
Type Ctrl+Backspace
Type Ctrl+Del

In the console, you will see the same KeyCode:

output:
***********************
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0x7F), keyCode=0x0, stateMask=Ctrl 
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0x7F), keyCode=0x0, stateMask=Ctrl 
**********************


testcase
***********************
package afeb771;

import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.events.*;
import com.ibm.swt.*;
/**
 *
 */
public class Test implements KeyListener {
/**
 * keyPressed method comment.
 */
public void keyPressed(KeyEvent e) {
	
	
	String result = "* KeyEvent: keyChar=";
	if (e.character &gt;= 32 &amp;&amp; e.character != 127)
	   result += e.character;
	else
		result += " ";

	result += " (0x" +
	Integer.toHexString(e.character).toUpperCase() + ")";
	result += ", keyCode=0x" +
	Integer.toHexString(e.keyCode).toUpperCase();
	result += ", stateMask=";

	if (e.stateMask == 0)
		   result += "&lt;none&gt;";
	else {
	   if ((e.stateMask &amp; SWT.ALT) != 0)     result += "Alt ";
	   if ((e.stateMask &amp; SWT.CONTROL) != 0) result += "Ctrl ";
	   if ((e.stateMask &amp; SWT.SHIFT) != 0)   result += "Shift";
   }

System.out.println(result);


}
/**
 * keyReleased method comment.
 */
public void keyReleased(KeyEvent e) {}
/**
 * 
 */
public static void main(String[] args) {
	Test t = new Test();
	t.start();
}
/**
 * 
 */
private void runEventLoop(Shell shell) {
	
	Display display = Display.getCurrent();
	shell.open();
	while (shell != null &amp;&amp; !shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep(); 
	} 
}
/**
 * 
 */
private void start() {
	Shell s = new Shell();
	s.setLayout(new FillLayout());
	Text t = new Text(s,SWT.NONE);
	t.addKeyListener(this);
	this.runEventLoop(s);
	
}
}
**********************

SN (2/5/01 3:33:48 PM)
	Ctrl+Bs generates a Del character on most PC keyboards.

SN (2/6/01 3:19:52 PM)
	No plan to fix this at this time.
PRODUCT VERSION:
platfrom 0.12b
swt  0.051
Win NT

CQ afeb771

Searched PR for Ctrl and Backspace. No PR found


SN to comment.

Not sure what the current state of this is, but no further work is planned for 
R2.0.

ZUGBILLA!!!!!!!!!!!!!!!
Fixed &gt; 20020813
Fixed &gt; 20020815
*** Bug 42517 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>The same KeyEvent is passed in for two different key

combinations (Windows keyboard): Ctrl+Backspace and

Ctrl+Delete (or Ctrl+Del). In both cases,

- KeyEvent.character is 0x7F,

- keyCode is 0x0,

- stateMask is SWT.CONTROL.

This is unacceptable in my application (LPEX), which

allows the user to customize their keys for various actions.

Both Windows and AWT/Swing on Windows are able to

distinguish between these keys fine.

NOTES:

Run testcase.
Type Ctrl+Backspace
Type Ctrl+Del

In the console, you will see the same KeyCode:

output:
***********************
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0x7F), keyCode=0x0, stateMask=Ctrl 
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0x7F), keyCode=0x0, stateMask=Ctrl 
**********************


testcase
***********************
package afeb771;

import com.ibm.swt.layout.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.events.*;
import com.ibm.swt.*;
/**
 *
 */
public class Test implements KeyListener {
/**
 * keyPressed method comment.
 */
public void keyPressed(KeyEvent e) {
	
	
	String result = "* KeyEvent: keyChar=";
	if (e.character &gt;= 32 &amp;&amp; e.character != 127)
	   result += e.character;
	else
		result += " ";

	result += " (0x" +
	Integer.toHexString(e.character).toUpperCase() + ")";
	result += ", keyCode=0x" +
	Integer.toHexString(e.keyCode).toUpperCase();
	result += ", stateMask=";

	if (e.stateMask == 0)
		   result += "&lt;none&gt;";
	else {
	   if ((e.stateMask &amp; SWT.ALT) != 0)     result += "Alt ";
	   if ((e.stateMask &amp; SWT.CONTROL) != 0) result += "Ctrl ";
	   if ((e.stateMask &amp; SWT.SHIFT) != 0)   result += "Shift";
   }

System.out.println(result);


}
/**
 * keyReleased method comment.
 */
public void keyReleased(KeyEvent e) {}
/**
 * 
 */
public static void main(String[] args) {
	Test t = new Test();
	t.start();
}
/**
 * 
 */
private void runEventLoop(Shell shell) {
	
	Display display = Display.getCurrent();
	shell.open();
	while (shell != null &amp;&amp; !shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep(); 
	} 
}
/**
 * 
 */
private void start() {
	Shell s = new Shell();
	s.setLayout(new FillLayout());
	Text t = new Text(s,SWT.NONE);
	t.addKeyListener(this);
	this.runEventLoop(s);
	
}
}
**********************

SN (2/5/01 3:33:48 PM)
	Ctrl+Bs generates a Del character on most PC keyboards.

SN (2/6/01 3:19:52 PM)
	No plan to fix this at this time.
PRODUCT VERSION:
platfrom 0.12b
swt  0.051
Win NT

CQ afeb771

Searched PR for Ctrl and Backspace. No PR found


SN to comment.

Not sure what the current state of this is, but no further work is planned for 
R2.0.

ZUGBILLA!!!!!!!!!!!!!!!
Fixed &gt; 20020813
Fixed &gt; 20020815
*** Bug 42517 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4578" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="major" />
    <Summery>Ctrl+J &amp; Ctrl+Enter have the same key code (1G54RJJ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>See : 1G54RAJ: SWT:ALL - Ctrl+Backspace &amp; Ctrl+del have the same key code and key event
and try with Ctrl+J &amp; Ctrl +Enter

NOTES:

output
**********************
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0xA), keyCode=0x0, stateMask=Ctrl 
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0xA), keyCode=0x0, stateMask=Ctrl 
**********************

CM (2/5/01 9:59:19 PM)
	Control-J is equal to LF (ASCII 0x0A)

SN (2/6/01 3:19:52 PM)
	No plan to fix this at this time.
PRODUCT VERSION:
Platfomr 0.12b
swt 0.051
Win Nt

CQ : Afeb772


SN to comment.

The current thinking is that we will set both the character and keyCode fields 
to distinguish between these cases.
Fixed for Windows and Motif.  There are now keyCodes for BS, CR, DEL, ESC, LF 
and TAB that are the same as the character value (ie. when the user presses CR, 
keyCode=SWT.CR and character=SWT.CR, when the user presses ^M, keyCode=0 and 
character=SWT.CR).

SSQ to fix for GTK and Photon and then close this PR.
Fixed on Photon and GTK (&gt; 20020726).</WithStack>
    <WithOutStack>See : 1G54RAJ: SWT:ALL - Ctrl+Backspace &amp; Ctrl+del have the same key code and key event
and try with Ctrl+J &amp; Ctrl +Enter

NOTES:

output
**********************
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0xA), keyCode=0x0, stateMask=Ctrl 
* KeyEvent: keyChar=  (0x0), keyCode=0x40000, stateMask=&lt;none&gt;
* KeyEvent: keyChar=  (0xA), keyCode=0x0, stateMask=Ctrl 
**********************

CM (2/5/01 9:59:19 PM)
	Control-J is equal to LF (ASCII 0x0A)

SN (2/6/01 3:19:52 PM)
	No plan to fix this at this time.
PRODUCT VERSION:
Platfomr 0.12b
swt 0.051
Win Nt

CQ : Afeb772


SN to comment.

The current thinking is that we will set both the character and keyCode fields 
to distinguish between these cases.
Fixed for Windows and Motif.  There are now keyCodes for BS, CR, DEL, ESC, LF 
and TAB that are the same as the character value (ie. when the user presses CR, 
keyCode=SWT.CR and character=SWT.CR, when the user presses ^M, keyCode=0 and 
character=SWT.CR).

SSQ to fix for GTK and Photon and then close this PR.
Fixed on Photon and GTK (&gt; 20020726).</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4579" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>GridLayout not renegotiating space when child label changes (1G5G6FQ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="import">
        <location start="1862" end="1888" />
        <code>import org.eclipse.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1889" end="1922" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1923" end="1955" />
        <code>import org.eclipse.swt.layout.*;</code>
      </source_code>
      <source_code type="class">
        <location start="1957" end="2819" />
        <code>public class PR_4579 {
public static void main(String[] args) {
	Display display = Display.getDefault();
	final Shell shell = new Shell(display);
	GridLayout layout = new GridLayout ();
	shell.setLayout(layout);
	Button button = new Button (shell, SWT.PUSH);
	button.setText ("Grow label");
	button.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, false));
	final Label label = new Label (shell, SWT.BORDER);
	label.setLayoutData (new GridData (SWT.FILL, SWT.TOP, true, false));
	label.setText ("This is a label.");
	button.addListener (SWT.Selection, new Listener () {
		public void handleEvent (Event event) {
			label.setText (label.getText() + "\nThis is a label.");
			shell.layout (true);
		}
	});
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	shell.dispose ();
}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>See attached email below.  It appears that the grid bag is not renegotiating 
its vertical space
when the child label's height changes.

NOTES:

------------- email from Tim deBoer --------------

Here's the problem I mentioned earlier...

I have a multiline Label in a GridLayout with another component above it.
I've set the GridData for both the composite and the Label to include
VERTICAL_ALIGN_FILL and set grabExcessVerticalSpace = true. However, no
matter what I do, the Label will only show the number of lines of text that
it has initially. For instance, if I set the text to "line 1" initially,
then it will never show two lines. If I set it to "line 1\nline 2", then it
will show two. What I'd like to be able to do is give it all of the
remaining space in the composite so that I don't need to worry if the text
may expand in the future. The current workaround is to set the initial text
to many lines (e.g. "test\n\n\n\n\n\n").

KH (1/5/2001 5:43:30 PM)

	Moving to SWT for comment.

SN (2/5/01 6:27:59 PM)
	KM, can you provide code or show me the case?  I suspect that you should
	be able to force the grid to flush it's caches using layout (true) but 
can't confirm.
	Comments?

KM (2/6/01 12:07:02 PM)
	Requesting from Tim deBeor that its still a problem in 022, and if it 
is that they forward code for us to reproduce.

CM (2/6/01 6:04:07 PM)
	Moving to active while we wait for a response.
PRODUCT VERSION:

Tech Preview++ (Oct 1 drop)


The changes are too dangerous at this late date.
Deferring to 3.0.
This bug has frustrated me forever. We need to ensure that it gets fixed *
early* in the R3.0 cycle. Moving to VI so we don't forget it.

After R2.0.
Post 2.0. Re-opening bug reports for review.
This code WORKSFORME.  Please reopen if you know the case that doesn't.  If 
this bug is the same as bug 9866, then don't reopen (it's a dup).

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;

public class PR_4579 {
public static void main(String[] args) {
	Display display = Display.getDefault();
	final Shell shell = new Shell(display);
	GridLayout layout = new GridLayout ();
	shell.setLayout(layout);
	Button button = new Button (shell, SWT.PUSH);
	button.setText ("Grow label");
	button.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, false));
	final Label label = new Label (shell, SWT.BORDER);
	label.setLayoutData (new GridData (SWT.FILL, SWT.TOP, true, false));
	label.setText ("This is a label.");
	button.addListener (SWT.Selection, new Listener () {
		public void handleEvent (Event event) {
			label.setText (label.getText() + "\nThis is a label.");
			shell.layout (true);
		}
	});
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	shell.dispose ();
}

}</WithStack>
    <WithOutStack>See attached email below.  It appears that the grid bag is not renegotiating 
its vertical space
when the child label's height changes.

NOTES:

------------- email from Tim deBoer --------------

Here's the problem I mentioned earlier...

I have a multiline Label in a GridLayout with another component above it.
I've set the GridData for both the composite and the Label to include
VERTICAL_ALIGN_FILL and set grabExcessVerticalSpace = true. However, no
matter what I do, the Label will only show the number of lines of text that
it has initially. For instance, if I set the text to "line 1" initially,
then it will never show two lines. If I set it to "line 1\nline 2", then it
will show two. What I'd like to be able to do is give it all of the
remaining space in the composite so that I don't need to worry if the text
may expand in the future. The current workaround is to set the initial text
to many lines (e.g. "test\n\n\n\n\n\n").

KH (1/5/2001 5:43:30 PM)

	Moving to SWT for comment.

SN (2/5/01 6:27:59 PM)
	KM, can you provide code or show me the case?  I suspect that you should
	be able to force the grid to flush it's caches using layout (true) but 
can't confirm.
	Comments?

KM (2/6/01 12:07:02 PM)
	Requesting from Tim deBeor that its still a problem in 022, and if it 
is that they forward code for us to reproduce.

CM (2/6/01 6:04:07 PM)
	Moving to active while we wait for a response.
PRODUCT VERSION:

Tech Preview++ (Oct 1 drop)


The changes are too dangerous at this late date.
Deferring to 3.0.
This bug has frustrated me forever. We need to ensure that it gets fixed *
early* in the R3.0 cycle. Moving to VI so we don't forget it.

After R2.0.
Post 2.0. Re-opening bug reports for review.
This code WORKSFORME.  Please reopen if you know the case that doesn't.  If 
this bug is the same as bug 9866, then don't reopen (it's a dup).

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;

public class PR_4579 {
public static void main(String[] args) {
	Display display = Display.getDefault();
	final Shell shell = new Shell(display);
	GridLayout layout = new GridLayout ();
	shell.setLayout(layout);
	Button button = new Button (shell, SWT.PUSH);
	button.setText ("Grow label");
	button.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, false));
	final Label label = new Label (shell, SWT.BORDER);
	label.setLayoutData (new GridData (SWT.FILL, SWT.TOP, true, false));
	label.setText ("This is a label.");
	button.addListener (SWT.Selection, new Listener () {
		public void handleEvent (Event event) {
			label.setText (label.getText() + "\nThis is a label.");
			shell.layout (true);
		}
	});
	shell.setSize(200, 200);
	shell.open();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep();
	}
	shell.dispose ();
}

}</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4580" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Accelerator keys send wrong key Events (1G58RK9)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="multicomment">
        <location start="506" end="521" />
        <code>/* Imports */</code>
      </source_code>
      <source_code type="import">
        <location start="522" end="550" />
        <code>import com.ibm.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="551" end="572" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="573" end="602" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="605" end="1240" />
        <code>public class PR_1G58RK9 {
public static void main(String[] args) {
	Shell shell = new Shell();

	Menu menuBar = new Menu(shell, SWT.BAR);
	MenuItem item = new MenuItem(menuBar, SWT.CASCADE);
	
	/**
	 * This accelerator can be set to any character that I've
	 * tried.
	 */
	item.setText("Press \'a\'");
	item.setAccelerator('a');	

	shell.setMenuBar(menuBar);

	shell.addKeyListener(new KeyAdapter() {
		public void keyReleased(KeyEvent e) {
			System.out.println((int)e.character);
		}
	});
		
	shell.open();	

	Display display = shell.getDisplay();
	while(!shell.isDisposed())
		if(!display.readAndDispatch())
			display.sleep();
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="2">
      <Enumeration lines="4">
        <Lines>
          <Line>1- This is a windows bug, (ie. doesn't happen under Linux.)  When an acclerator is pressed, the keypressed Event</Line>
          <Line>that is heard is different from what is expected, it is actually a keyEvent from the last key that has been pressed.</Line>
          <Line>2- I also found another bug (possibly a connected to the one above).  I noticed that if you hold down multiple keys, say 10,</Line>
          <Line>and then slowly release them one at a time, the keyEvents that are heard all have the same character.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="2">
        <Lines>
          <Line>- if there is no key down (ie. it was eaten by an accelerator), then there is no key up</Line>
          <Line>- if multiple keys are held down and released, the wrong key is reported in some key ups</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>1- This is a windows bug, (ie. doesn't happen under Linux.)  When an acclerator is pressed, the keypressed Event
that is heard is different from what is expected, it is actually a keyEvent from the last key that has been pressed.
2- I also found another bug (possibly a connected to the one above).  I noticed that if you hold down multiple keys, say 10,
and then slowly release them one at a time, the keyEvents that are heard all have the same character.

NOTES:

Here's the code to reproduce the error:


/* Imports */
import com.ibm.swt.events.*;
import com.ibm.swt.*;
import com.ibm.swt.widgets.*;


public class PR_1G58RK9 {
public static void main(String[] args) {
	Shell shell = new Shell();

	Menu menuBar = new Menu(shell, SWT.BAR);
	MenuItem item = new MenuItem(menuBar, SWT.CASCADE);
	
	/**
	 * This accelerator can be set to any character that I've
	 * tried.
	 */
	item.setText("Press \'a\'");
	item.setAccelerator('a');	

	shell.setMenuBar(menuBar);

	shell.addKeyListener(new KeyAdapter() {
		public void keyReleased(KeyEvent e) {
			System.out.println((int)e.character);
		}
	});
		
	shell.open();	

	Display display = shell.getDisplay();
	while(!shell.isDisposed())
		if(!display.readAndDispatch())
			display.sleep();
}
}


VI (21/12/2000 8:32:27 AM)

	Hold down the alt 'a' keys and then release 'a' key and then alt key:
		On Windows:
			Get two callbacks.  The first callback has e.character = 97, e.keyCode = 0.
			The second callback has e.character = 97, e.keyCode = 65536.
		On Linux:
			Get multiple (continuous) callbacks as keys are held down with e.character = 97, e.keyCode = 0.
			Continuous callbacks stop when 'a' key is released. After alt key is released, get a callback
			with e.character = 0, e.keyCode = 65536.

SN (2/6/01 3:51:27 PM)
	This is a very old problem.  It goes as follows.  Windows (and Motif in some cirumstances,
	on J and G platforms) does not give enough information in the "key up" event to find out
	the key that was pressed in "key down".  So, SWT saves the key that was pressed in "key
	down" and delivers that key in key up.

	This strategy has at least 2 problems:
		- if there is no key down (ie. it was eaten by an accelerator), then there is no key up
		- if multiple keys are held down and released, the wrong key is reported in some key ups

	No plan to fix this at this time.
PRODUCT VERSION:
swt [0.49]
Win NT


"No plan to fix this" == WONTFIX</WithStack>
    <WithOutStack>1- This is a windows bug, (ie. doesn't happen under Linux.)  When an acclerator is pressed, the keypressed Event
that is heard is different from what is expected, it is actually a keyEvent from the last key that has been pressed.
2- I also found another bug (possibly a connected to the one above).  I noticed that if you hold down multiple keys, say 10,
and then slowly release them one at a time, the keyEvents that are heard all have the same character.

NOTES:

Here's the code to reproduce the error:


/* Imports */
import com.ibm.swt.events.*;
import com.ibm.swt.*;
import com.ibm.swt.widgets.*;


public class PR_1G58RK9 {
public static void main(String[] args) {
	Shell shell = new Shell();

	Menu menuBar = new Menu(shell, SWT.BAR);
	MenuItem item = new MenuItem(menuBar, SWT.CASCADE);
	
	/**
	 * This accelerator can be set to any character that I've
	 * tried.
	 */
	item.setText("Press \'a\'");
	item.setAccelerator('a');	

	shell.setMenuBar(menuBar);

	shell.addKeyListener(new KeyAdapter() {
		public void keyReleased(KeyEvent e) {
			System.out.println((int)e.character);
		}
	});
		
	shell.open();	

	Display display = shell.getDisplay();
	while(!shell.isDisposed())
		if(!display.readAndDispatch())
			display.sleep();
}
}


VI (21/12/2000 8:32:27 AM)

	Hold down the alt 'a' keys and then release 'a' key and then alt key:
		On Windows:
			Get two callbacks.  The first callback has e.character = 97, e.keyCode = 0.
			The second callback has e.character = 97, e.keyCode = 65536.
		On Linux:
			Get multiple (continuous) callbacks as keys are held down with e.character = 97, e.keyCode = 0.
			Continuous callbacks stop when 'a' key is released. After alt key is released, get a callback
			with e.character = 0, e.keyCode = 65536.

SN (2/6/01 3:51:27 PM)
	This is a very old problem.  It goes as follows.  Windows (and Motif in some cirumstances,
	on J and G platforms) does not give enough information in the "key up" event to find out
	the key that was pressed in "key down".  So, SWT saves the key that was pressed in "key
	down" and delivers that key in key up.

	This strategy has at least 2 problems:
		- if there is no key down (ie. it was eaten by an accelerator), then there is no key up
		- if multiple keys are held down and released, the wrong key is reported in some key ups

	No plan to fix this at this time.
PRODUCT VERSION:
swt [0.49]
Win NT


"No plan to fix this" == WONTFIX</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4581" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Neutrino" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Clipped Multi-Line text results in cheese upon scrolling (1G81IR9)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="7">
      <source_code type="import">
        <location start="364" end="385" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="386" end="415" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="416" end="446" />
        <code>import com.ibm.swt.graphics.*;</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="447" end="518" />
        <code>//-------------------------------------------------------------------</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="518" end="521" />
        <code>//</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="521" end="591" />
        <code>//-------------------------------------------------------------------</code>
      </source_code>
      <source_code type="class">
        <location start="591" end="1705" />
        <code>public class PR_1G81IR9 {

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
static public void main(String[] args) {
	new PR_1G81IR9().runMain(args);
}

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
public void runMain(String[] args) {
	Display display;
	Shell   shell;
	Text    text;
	String  string;
	String  nl = System.getProperty("line.separator");

	display = new Display();
	
	string = "";
	for (int i=0; i&lt;10; i++) {
		string += 
			"1234567890 abcdefghijklmnopqrstuvwxyz " +
			"1234567890 abcdefghijklmnopqrstuvwxyz " +
			"1234567890 abcdefghijklmnopqrstuvwxyz " + nl;
	}
	
	shell = new Shell(display);
	shell.setText(getClass().getName());
	shell.setBounds(0,0,200,200);

	text = new Text(shell,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
	text.setBounds(-30,0,260,150);
	text.setText(string);
	
	shell.open();
	
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch()) {
			display.sleep();
		}
	}
	
}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>PJM (1/24/01 12:23:18 AM)
	Originally from:
		1G81H19: J9AWT:Neutrino - problem with wide text areas 

	If you have a multi-line text widget that extends outside the shell, 
scrolling the horizontal
	scrollbar results in cheese-o-rama.  Example below.   I suspect this is 
a bug in Photon ...

=========================== cut here ================================
import com.ibm.swt.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.graphics.*;

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
public class PR_1G81IR9 {

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
static public void main(String[] args) {
	new PR_1G81IR9().runMain(args);
}

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
public void runMain(String[] args) {
	Display display;
	Shell   shell;
	Text    text;
	String  string;
	String  nl = System.getProperty("line.separator");

	display = new Display();
	
	string = "";
	for (int i=0; i&lt;10; i++) {
		string += 
			"1234567890 abcdefghijklmnopqrstuvwxyz " +
			"1234567890 abcdefghijklmnopqrstuvwxyz " +
			"1234567890 abcdefghijklmnopqrstuvwxyz " + nl;
	}
	
	shell = new Shell(display);
	shell.setText(getClass().getName());
	shell.setBounds(0,0,200,200);

	text = new Text(shell,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
	text.setBounds(-30,0,260,150);
	text.setText(string);
	
	shell.open();
	
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch()) {
			display.sleep();
		}
	}
	
}

}
=========================== cut here ================================

NOTES:

SSQ (1/31/01 11:45:13 AM) -
	This is a Photon problem and there is not much we can do to fix it.
PRODUCT VERSION:

	SWT 0.057


This is a third part problem and it is not likely to be fixed.
Please ensure that QSSL is aware of the problem, and the fact that we do 
not plan to work around it.</WithStack>
    <WithOutStack>PJM (1/24/01 12:23:18 AM)
	Originally from:
		1G81H19: J9AWT:Neutrino - problem with wide text areas 

	If you have a multi-line text widget that extends outside the shell, 
scrolling the horizontal
	scrollbar results in cheese-o-rama.  Example below.   I suspect this is 
a bug in Photon ...

=========================== cut here ================================
import com.ibm.swt.*;
import com.ibm.swt.widgets.*;
import com.ibm.swt.graphics.*;

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
public class PR_1G81IR9 {

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
static public void main(String[] args) {
	new PR_1G81IR9().runMain(args);
}

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
public void runMain(String[] args) {
	Display display;
	Shell   shell;
	Text    text;
	String  string;
	String  nl = System.getProperty("line.separator");

	display = new Display();
	
	string = "";
	for (int i=0; i&lt;10; i++) {
		string += 
			"1234567890 abcdefghijklmnopqrstuvwxyz " +
			"1234567890 abcdefghijklmnopqrstuvwxyz " +
			"1234567890 abcdefghijklmnopqrstuvwxyz " + nl;
	}
	
	shell = new Shell(display);
	shell.setText(getClass().getName());
	shell.setBounds(0,0,200,200);

	text = new Text(shell,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
	text.setBounds(-30,0,260,150);
	text.setText(string);
	
	shell.open();
	
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch()) {
			display.sleep();
		}
	}
	
}

}
=========================== cut here ================================

NOTES:

SSQ (1/31/01 11:45:13 AM) -
	This is a Photon problem and there is not much we can do to fix it.
PRODUCT VERSION:

	SWT 0.057


This is a third part problem and it is not likely to be fixed.
Please ensure that QSSL is aware of the problem, and the fact that we do 
not plan to work around it.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4582" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>GridLayout - does not recalculate column widths when preferred size changes (1G6632Z)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="635" end="1377" />
        <code>public static void main(String[] args) {

	Shell shell = new Shell();
	shell.setLayout(new GridLayout());

	final Button b1 = new Button(shell, SWT.PUSH);
	b1.setText("asdasdas");
	b1.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER | GridData.HORIZONTAL_ALIGN_CENTER));
	//b1.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_END | GridData.HORIZONTAL_ALIGN_END));
	
	Button b2 = new Button(shell, SWT.PUSH);
	b2.setText("grow");
	b2.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			b1.setText(b1.getText() +" dasdadada");
		}
	});
	shell.open();
	
	Display display = shell.getDisplay();
	while (shell != null &amp;&amp; !shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep(); 
	} 
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Run the following example.
Notice that the button labelled "dasdadada" is not in the center of the screen.
Click on the "grow" button then resize the shell to cause a "layout" to happen.
Notice that the button is too far to the left and the left side of the button is clipped.

The problem is that the column width for the Grid Layout is only calculated the first time the
shell is laid out and does not change when the preferred size of the widgets in the column changes.
You can make the example appear to work by setting the button b2 to have gridData.grabExcessHorizontalAlignment = true.
This last step should not be neccessary.

public static void main(String[] args) {

	Shell shell = new Shell();
	shell.setLayout(new GridLayout());

	final Button b1 = new Button(shell, SWT.PUSH);
	b1.setText("asdasdas");
	b1.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER | GridData.HORIZONTAL_ALIGN_CENTER));
	//b1.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_END | GridData.HORIZONTAL_ALIGN_END));
	
	Button b2 = new Button(shell, SWT.PUSH);
	b2.setText("grow");
	b2.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			b1.setText(b1.getText() +" dasdadada");
		}
	});
	shell.open();
	
	Display display = shell.getDisplay();
	while (shell != null &amp;&amp; !shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep(); 
	} 
}


NOTES:

	CM (2/5/01 9:18:45 PM)
		CM to investigate.

	McQ (26/06/2001 10:47:56 AM) -
		This should work. LK to investigate.
PRODUCT VERSION:

SWT 0.055


Defer
Post 2.0. Re-opening bug reports for review.
This is not a bug.  When you change the contents of a control, you need to 
explicity layout.  The code is fixed using shell.layout(true).</WithStack>
    <WithOutStack>Run the following example.
Notice that the button labelled "dasdadada" is not in the center of the screen.
Click on the "grow" button then resize the shell to cause a "layout" to happen.
Notice that the button is too far to the left and the left side of the button is clipped.

The problem is that the column width for the Grid Layout is only calculated the first time the
shell is laid out and does not change when the preferred size of the widgets in the column changes.
You can make the example appear to work by setting the button b2 to have gridData.grabExcessHorizontalAlignment = true.
This last step should not be neccessary.

public static void main(String[] args) {

	Shell shell = new Shell();
	shell.setLayout(new GridLayout());

	final Button b1 = new Button(shell, SWT.PUSH);
	b1.setText("asdasdas");
	b1.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER | GridData.HORIZONTAL_ALIGN_CENTER));
	//b1.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_END | GridData.HORIZONTAL_ALIGN_END));
	
	Button b2 = new Button(shell, SWT.PUSH);
	b2.setText("grow");
	b2.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			b1.setText(b1.getText() +" dasdadada");
		}
	});
	shell.open();
	
	Display display = shell.getDisplay();
	while (shell != null &amp;&amp; !shell.isDisposed()) {
		if (!display.readAndDispatch())
			display.sleep(); 
	} 
}


NOTES:

	CM (2/5/01 9:18:45 PM)
		CM to investigate.

	McQ (26/06/2001 10:47:56 AM) -
		This should work. LK to investigate.
PRODUCT VERSION:

SWT 0.055


Defer
Post 2.0. Re-opening bug reports for review.
This is not a bug.  When you change the contents of a control, you need to 
explicity layout.  The code is fixed using shell.layout(true).</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4583" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>StyledText - investigate addStyles API (1G5G09A)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>addStyles(StyleRange[] styles) ==&gt;

	assume styles are in order and contiguous and that they will replace the entire range of styles, 
	therefore only need to merge first and last style

NOTES:

LK (12/6/00 6:50:16 PM)
	Probably should name this something like addStyleGroup to minimize confusion about how it
	works.  Still not sure this is really necessary.  It would help in the contiguous case, but how often
	is this going to be done?

LK (1/2/01 6:12:11 PM)
	Make this Inactive.
replaceStyleRanges API has been added, handles this case</WithStack>
    <WithOutStack>addStyles(StyleRange[] styles) ==&gt;

	assume styles are in order and contiguous and that they will replace the entire range of styles, 
	therefore only need to merge first and last style

NOTES:

LK (12/6/00 6:50:16 PM)
	Probably should name this something like addStyleGroup to minimize confusion about how it
	works.  Still not sure this is really necessary.  It would help in the contiguous case, but how often
	is this going to be done?

LK (1/2/01 6:12:11 PM)
	Make this Inactive.
replaceStyleRanges API has been added, handles this case</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4584" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 98" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>[PropertiesView] property sheet label provider has limited ability (1G5JKHG)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="functioncall">
        <location start="467" end="503" />
        <code>getLabelImage(IVisualPart, Object);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="504" end="539" />
        <code>getLabelText(IVisualPart, Object);</code>
      </source_code>
      <source_code type="multicomment">
        <location start="888" end="920" />
        <code>/*PropertySheetViewer  method*/</code>
      </source_code>
      <source_code type="functiondef">
        <location start="921" end="1128" />
        <code>private void updateValue(TableTreeItem item)
{
   ...
   provider = getLabelProvider();

   String label = provider.getLabelText(this, entry);
   IImage image = provider.getLabelImage(this, entry);
   ....
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="2">
        <Lines>
          <Line>- tech preview</Line>
          <Line>- current code base</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Seems like the PropertySheet's Lable Providers
have very limited functionality. For example -
we are not able to change the color or font of a property value.
We need to have visual distinction between read-only
properties and the writeable ones. For example we woud like
the read-only properties to be grayed(like disabled).
In order to do that I have implemented our own
LabelProvider, which derives from SimpleLabelProvider.
This class has the following methods:

 getLabelImage(IVisualPart, Object);
 getLabelText(IVisualPart, Object);

So, I was hoping that the VisualPart argument is actually
the table item/widget itself and I'll be able to change
it's appearance(for example it's color or font).

Unfortunately the PropertySheetViewer when updates the table
items, passes as first argument reference to itself instead to the TreeItem:
Follows excerpt from the PropertySheet code:

/*PropertySheetViewer  method*/
private void updateValue(TableTreeItem item)
{
   ...
   provider = getLabelProvider();

   String label = provider.getLabelText(this, entry);
   IImage image = provider.getLabelImage(this, entry);
   ....
}

But even if the PropertySheetViewer was passing the
TableTreeItem as first argument, that still wouldn't work,
because TableTreeItem doesn't have the needed functionality.

So, is there anything else we could do to change the color
or the font of a PropertySheet item's text?


NOTES:

GDA (12/6/00 10:37:42 AM)
	Please be clear in answering this to differentiate between
		- tech preview
		- current code base

RG (12/7/00 5:19:29 PM)
	As stated above there is no way to do this since it is not supported by 
SWT.
	If this were considered important and SWT implemented the functionality 
	then we could find a way to provide this in the property sheet.


VI (1/13/01 9:59:57 PM)
From what I can tell, they would like to be able to set the Color and/or Font 
of a single item in a TableTree.  
Correct me if I am wrong.
This is not available in the TableTree because it is not available in the Table 
(TableTree is just cake for a Table).  
This functionality is not available on the Table because Windows does not 
provide the API to do this. (I am 90% 
sure that this last statement is true and I will verify with Steve when he gets 
in).
I think this would require something like Owner Draw or implementing our own 
widget - both answers are a lot of work.

KH (1/15/2001 8:56:51 PM)

	Moving to SWT for consideration.

GDA (1/29/01 9:21:23 PM)
The information is:
	This is definitely an important functionality for us in the properties 
view.  
	Without this, the user cannot tell which properties are writeable, and 
which are read-only.
 
	If we cannot make this happen we need to let them know.

VI (31/01/2001 2:20:03 PM)
	What is required to fix this PR is to write our own TableTree widget 
(not use the native Table widget).

	This can be considered under the Custom Widget work but it clearly is 
going to require a bit of time 
	and needs to be prioritized relative to the other CustomWidgets.

SN (2/5/01 3:48:58 PM)
	Can be addressed by a Custom Widget.
There should be a guideline for the PropertySheet.  In the past, gray text on 
the **Value** indicated that multiple objects were selected, all for which that 
property existed, but that their values were different.  You could still edit 
the value.

To indicate that you cannot edit the property, I would suggest gray text for 
the property label, not the value.  What if I had a read-only 
property "background color", for which the current value was black.  I wrote a 
custom renderer that paints a black rectangle.  The value column needs to be 
reserved for rendering the value, not indicating CellEditor enabled state.
Since all this PR was asking for was a way to set  "the color or the font" on 
a per row basis, and since we have provided the ability to set both the 
foreground and background color or R2.0, I am marking this PR as fixed.

Has Color getLabelForeground(Object) been added to LabelProvider?
What about getLabelForeground(Object[]) since the property sheet is really 
displaying the value of multiple objects.

I recommend that a gray *background* be used to represent read-only properties, 
since this best matches a disabled Text control.  GA was suggesting a gray 
foreground.

Gray foreground should be used to indicate multiple selection where the values 
are not all the same.  The API must be changed so that the fact that the values 
are different can be detected.

Please move to UI component.
Agree that this needs to be surfaced above the SWT level. Moving to UI.


Cleaning up defect lists by setting ones without recent traffic to 'REMIND'.

As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>Seems like the PropertySheet's Lable Providers
have very limited functionality. For example -
we are not able to change the color or font of a property value.
We need to have visual distinction between read-only
properties and the writeable ones. For example we woud like
the read-only properties to be grayed(like disabled).
In order to do that I have implemented our own
LabelProvider, which derives from SimpleLabelProvider.
This class has the following methods:

 getLabelImage(IVisualPart, Object);
 getLabelText(IVisualPart, Object);

So, I was hoping that the VisualPart argument is actually
the table item/widget itself and I'll be able to change
it's appearance(for example it's color or font).

Unfortunately the PropertySheetViewer when updates the table
items, passes as first argument reference to itself instead to the TreeItem:
Follows excerpt from the PropertySheet code:

/*PropertySheetViewer  method*/
private void updateValue(TableTreeItem item)
{
   ...
   provider = getLabelProvider();

   String label = provider.getLabelText(this, entry);
   IImage image = provider.getLabelImage(this, entry);
   ....
}

But even if the PropertySheetViewer was passing the
TableTreeItem as first argument, that still wouldn't work,
because TableTreeItem doesn't have the needed functionality.

So, is there anything else we could do to change the color
or the font of a PropertySheet item's text?


NOTES:

GDA (12/6/00 10:37:42 AM)
	Please be clear in answering this to differentiate between
		- tech preview
		- current code base

RG (12/7/00 5:19:29 PM)
	As stated above there is no way to do this since it is not supported by 
SWT.
	If this were considered important and SWT implemented the functionality 
	then we could find a way to provide this in the property sheet.


VI (1/13/01 9:59:57 PM)
From what I can tell, they would like to be able to set the Color and/or Font 
of a single item in a TableTree.  
Correct me if I am wrong.
This is not available in the TableTree because it is not available in the Table 
(TableTree is just cake for a Table).  
This functionality is not available on the Table because Windows does not 
provide the API to do this. (I am 90% 
sure that this last statement is true and I will verify with Steve when he gets 
in).
I think this would require something like Owner Draw or implementing our own 
widget - both answers are a lot of work.

KH (1/15/2001 8:56:51 PM)

	Moving to SWT for consideration.

GDA (1/29/01 9:21:23 PM)
The information is:
	This is definitely an important functionality for us in the properties 
view.  
	Without this, the user cannot tell which properties are writeable, and 
which are read-only.
 
	If we cannot make this happen we need to let them know.

VI (31/01/2001 2:20:03 PM)
	What is required to fix this PR is to write our own TableTree widget 
(not use the native Table widget).

	This can be considered under the Custom Widget work but it clearly is 
going to require a bit of time 
	and needs to be prioritized relative to the other CustomWidgets.

SN (2/5/01 3:48:58 PM)
	Can be addressed by a Custom Widget.
There should be a guideline for the PropertySheet.  In the past, gray text on 
the **Value** indicated that multiple objects were selected, all for which that 
property existed, but that their values were different.  You could still edit 
the value.

To indicate that you cannot edit the property, I would suggest gray text for 
the property label, not the value.  What if I had a read-only 
property "background color", for which the current value was black.  I wrote a 
custom renderer that paints a black rectangle.  The value column needs to be 
reserved for rendering the value, not indicating CellEditor enabled state.
Since all this PR was asking for was a way to set  "the color or the font" on 
a per row basis, and since we have provided the ability to set both the 
foreground and background color or R2.0, I am marking this PR as fixed.

Has Color getLabelForeground(Object) been added to LabelProvider?
What about getLabelForeground(Object[]) since the property sheet is really 
displaying the value of multiple objects.

I recommend that a gray *background* be used to represent read-only properties, 
since this best matches a disabled Text control.  GA was suggesting a gray 
foreground.

Gray foreground should be used to indicate multiple selection where the values 
are not all the same.  The API must be changed so that the fact that the values 
are different can be detected.

Please move to UI component.
Agree that this needs to be surfaced above the SWT level. Moving to UI.


Cleaning up defect lists by setting ones without recent traffic to 'REMIND'.

As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4585" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="51693" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>GC Text/String related API slow (1G7P8V4)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>We are doing Text word-wrapping as part of an HTML WYSIWYG display.
In order to do word wrapping, you must calculate the amound of text from 
the current paragraph that will fit on the current line.  We currently use an 
efficient algorithm that requires about 2.1 measurements per line.

During a resize of the window, the paragraphs must be re-flowed and of course painted.  
The current speed of the re-flowing of text is at least 20 times slower than Native applications 
like Word or Internet Explorer.  80% of our execution time (Split between laying out the paragraph 
and then painting it) is spent in the com.ibm.swt.win32.Converter class.  We are calling 
GC.textExtend(String) for laying out, and GC.drawString(String) for painting.

NOTES:

SN (2/5/01 4:57:38 PM)
	Not looking at performance right now.

CM (3/20/01 6:02:46 AM)
	P2/F1 (May 1st, 2001)

	McQ (23/03/2001 9:36:40 AM) -
		For a description of what was done about this, see the comments in PR:
			1GAVO65: SWT:ALL - Optimize draw/measure text APIs in GC
PRODUCT VERSION:
Eclipse 12-15-00 Drop (the one without the package renames, etc.)


No further action on this will be taken at this time. It could be revisited as 
part of a possible re-work of the SWT graphics support.

Moving from Later.


*** This bug has been marked as a duplicate of 51693 ***</WithStack>
    <WithOutStack>We are doing Text word-wrapping as part of an HTML WYSIWYG display.
In order to do word wrapping, you must calculate the amound of text from 
the current paragraph that will fit on the current line.  We currently use an 
efficient algorithm that requires about 2.1 measurements per line.

During a resize of the window, the paragraphs must be re-flowed and of course painted.  
The current speed of the re-flowing of text is at least 20 times slower than Native applications 
like Word or Internet Explorer.  80% of our execution time (Split between laying out the paragraph 
and then painting it) is spent in the com.ibm.swt.win32.Converter class.  We are calling 
GC.textExtend(String) for laying out, and GC.drawString(String) for painting.

NOTES:

SN (2/5/01 4:57:38 PM)
	Not looking at performance right now.

CM (3/20/01 6:02:46 AM)
	P2/F1 (May 1st, 2001)

	McQ (23/03/2001 9:36:40 AM) -
		For a description of what was done about this, see the comments in PR:
			1GAVO65: SWT:ALL - Optimize draw/measure text APIs in GC
PRODUCT VERSION:
Eclipse 12-15-00 Drop (the one without the package renames, etc.)


No further action on this will be taken at this time. It could be revisited as 
part of a possible re-work of the SWT graphics support.

Moving from Later.


*** This bug has been marked as a duplicate of 51693 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4586" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Use checkWidget() more often (1G80URQ)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="functioncall">
        <location start="75" end="140" />
        <code>if (!isValidThread ()) error (SWT.ERROR_THREAD_INVALID_ACCESS);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="141" end="200" />
        <code>if (!isValidWidget ()) error (SWT.ERROR_WIDGET_DISPOSED);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="234" end="251" />
        <code>checkWidget ();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>In subclasses of Widget, there are 577 occurrences of the 2 lines of code:
		if (!isValidThread ()) error (SWT.ERROR_THREAD_INVALID_ACCESS);
		if (!isValidWidget ()) error (SWT.ERROR_WIDGET_DISPOSED);

	Consider replacing these with:
		checkWidget ();

NOTES:

SN (2/5/01 5:06:31 PM)
	You are right but it's too much work to change now, especially if we are
	going to revisit these methods to support threads better in SWT.
PRODUCT VERSION:
	SWT 0.057


Marking fixed - this has mostly been done.</WithStack>
    <WithOutStack>In subclasses of Widget, there are 577 occurrences of the 2 lines of code:
		if (!isValidThread ()) error (SWT.ERROR_THREAD_INVALID_ACCESS);
		if (!isValidWidget ()) error (SWT.ERROR_WIDGET_DISPOSED);

	Consider replacing these with:
		checkWidget ();

NOTES:

SN (2/5/01 5:06:31 PM)
	You are right but it's too much work to change now, especially if we are
	going to revisit these methods to support threads better in SWT.
PRODUCT VERSION:
	SWT 0.057


Marking fixed - this has mostly been done.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4587" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>StyledText - support italic fonts and italic font style (1G60C4X)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Until PR 1G2QFBA: SWT:WINNT - Font metrics wrong for some italics fonts
is fixed, we can't support italics properly.

NOTES:

LK (1/18/01 3:30:40 PM)
	Low priority until someone asks for this.

LK (1/30/01 11:58:30 AM)
	Supporting this is now further complicated by the fact that we are using bit bltting when typing.
	Italic fonts won't hold up to the bltting.	We did this to improve performance on Linux.

LK (2/7/01 12:04:18 PM)
	Opened 1G8SBZX: SWT:WIN - StyledText - Italic fonts and bltting overhangs on our end.
	This will deal with the bltting problem when the font for the entire widget is italic.  Still not going
	to do individual italic styles until someone asks.

LK (2/7/01 12:11:18 PM)
	We don't support italic fonts for the entire widget.  Cheese will occur during text changes (due to our
	bltting) and when changing from italic bold to italic regular (and vice versa).  In these instances,
	more of the changed text area has to be drawn in order to deal with overhangs.  See PR
	1G8SBZX: SWT:WIN - StyledText - Italic fonts and bltting overhangs.  Moving to Inactive.
	
LK (2/8/01 12:06:13 PM)
	Also see PR 1G8SBXB: SWT:WIN - StyledText - Italic font and bold styles not working together.
	Mentions that for a lot of italic fonts the baseline seems to different from the bold version.
PRODUCT VERSION:
0.056


Created attachment 204
example display of italic
If italic character measurements from the platform were correct, we could handle 
this with minimal code changes.  However, because the mesaurements from the 
platform are off, there will be instances when italic letters are "chopped off".  
See the attachment.  This behavior will occur when background colors are used or 
when selection occurs.

Part of the cheesey selection behavior can be rectified by drawing the entire 
line when a selection occurs (i.e., since we are using double buffering already 
this shouldn't be too bad).

Deciding against doing this.  Thought that if Linux supported the italics fine 
it might be worth doing it, but I can't verify that now since there appears to 
be a bug with the FontDialog on Linux.
Notes on changes to support italics:

- add var for italic font, modify getFontStyleRanges to account for italic type, 
change StyledTextBidi constructor to take italic font as a parameter, change 
handleDispose to dispose of italic font, change setFont to dispose of/reset 
italic font, change initializeFonts to set italic font, change setLineFont 
method to check for italic font

- change rendering during selection to draw entire line
Consider later.
Post 2.0. Re-opening bug reports for review.
*** Bug 10148 has been marked as a duplicate of this bug. ***
*** Bug 4603 has been marked as a duplicate of this bug. ***
*** Bug 30381 has been marked as a duplicate of this bug. ***
*** Bug 38636 has been marked as a duplicate of this bug. ***
*** Bug 38634 has been marked as a duplicate of this bug. ***
Reassigning to SWT Inbox since OTT taking over StyledText.
*** Bug 51459 has been marked as a duplicate of this bug. ***
I am upping this to P1.  Eclipse would like to use italic fonts.  With the new 
TextLayout class, the cheese problems *should* be gone.  FH to investigate 
AFTER M8.
You guys also expect to have angled caret implemented by Eclipse 3.0 ?
angled caret == place the caret over italic text in MS Write or MS Word.

As far as Java editor goes I don't think it would use angled caret.
There is no expectation to get an angled bracket. 
oops, I meant angled _caret_
Fixed &gt; 20040503 in HEAD.
StyleRange can be created with fontStyle == SWT.ITALIC</WithStack>
    <WithOutStack>Until PR 1G2QFBA: SWT:WINNT - Font metrics wrong for some italics fonts
is fixed, we can't support italics properly.

NOTES:

LK (1/18/01 3:30:40 PM)
	Low priority until someone asks for this.

LK (1/30/01 11:58:30 AM)
	Supporting this is now further complicated by the fact that we are using bit bltting when typing.
	Italic fonts won't hold up to the bltting.	We did this to improve performance on Linux.

LK (2/7/01 12:04:18 PM)
	Opened 1G8SBZX: SWT:WIN - StyledText - Italic fonts and bltting overhangs on our end.
	This will deal with the bltting problem when the font for the entire widget is italic.  Still not going
	to do individual italic styles until someone asks.

LK (2/7/01 12:11:18 PM)
	We don't support italic fonts for the entire widget.  Cheese will occur during text changes (due to our
	bltting) and when changing from italic bold to italic regular (and vice versa).  In these instances,
	more of the changed text area has to be drawn in order to deal with overhangs.  See PR
	1G8SBZX: SWT:WIN - StyledText - Italic fonts and bltting overhangs.  Moving to Inactive.
	
LK (2/8/01 12:06:13 PM)
	Also see PR 1G8SBXB: SWT:WIN - StyledText - Italic font and bold styles not working together.
	Mentions that for a lot of italic fonts the baseline seems to different from the bold version.
PRODUCT VERSION:
0.056


Created attachment 204
example display of italic
If italic character measurements from the platform were correct, we could handle 
this with minimal code changes.  However, because the mesaurements from the 
platform are off, there will be instances when italic letters are "chopped off".  
See the attachment.  This behavior will occur when background colors are used or 
when selection occurs.

Part of the cheesey selection behavior can be rectified by drawing the entire 
line when a selection occurs (i.e., since we are using double buffering already 
this shouldn't be too bad).

Deciding against doing this.  Thought that if Linux supported the italics fine 
it might be worth doing it, but I can't verify that now since there appears to 
be a bug with the FontDialog on Linux.
Notes on changes to support italics:

- add var for italic font, modify getFontStyleRanges to account for italic type, 
change StyledTextBidi constructor to take italic font as a parameter, change 
handleDispose to dispose of italic font, change setFont to dispose of/reset 
italic font, change initializeFonts to set italic font, change setLineFont 
method to check for italic font

- change rendering during selection to draw entire line
Consider later.
Post 2.0. Re-opening bug reports for review.
*** Bug 10148 has been marked as a duplicate of this bug. ***
*** Bug 4603 has been marked as a duplicate of this bug. ***
*** Bug 30381 has been marked as a duplicate of this bug. ***
*** Bug 38636 has been marked as a duplicate of this bug. ***
*** Bug 38634 has been marked as a duplicate of this bug. ***
Reassigning to SWT Inbox since OTT taking over StyledText.
*** Bug 51459 has been marked as a duplicate of this bug. ***
I am upping this to P1.  Eclipse would like to use italic fonts.  With the new 
TextLayout class, the cheese problems *should* be gone.  FH to investigate 
AFTER M8.
You guys also expect to have angled caret implemented by Eclipse 3.0 ?
angled caret == place the caret over italic text in MS Write or MS Word.

As far as Java editor goes I don't think it would use angled caret.
There is no expectation to get an angled bracket. 
oops, I meant angled _caret_
Fixed &gt; 20040503 in HEAD.
StyleRange can be created with fontStyle == SWT.ITALIC</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4588" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Lost function: visibility tracking to optimize viewer refresh (1G6BFM5)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="import">
        <location start="4740" end="4762" />
        <code>import com.ibm.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="4763" end="4792" />
        <code>import com.ibm.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="4794" end="6421" />
        <code>public class LazyPaint {

static boolean dirty = true;
static void doWork (List list) {
	if (!list.isVisible ()) {
		dirty = true;
		return;
	}
	if (!dirty) return;
	dirty = false;
	System.out.print ("** Working ...");
	list.removeAll ();
	list.update ();
	for (int i=0; i&lt;8; i++) {
		list.add ("Item " + i);
		list.update ();
		try {Thread.sleep (500);} catch (Throwable t) {};
	}
	System.out.println ("done.");
}

public static void main (String [] args) {
	Display display = new Display ();
	final Shell shell = new Shell (display);
	final List list = new List (shell, SWT.BORDER | SWT.V_SCROLL);
	list.setBounds (0, 60, 100, 200);
	list.addListener(SWT.Paint, new Listener() {
		public void handleEvent(Event e) {
			System.out.println ("Painting.");
			doWork (list);
		}
	});
	final Button b1 = new Button (shell, 0);
	b1.setBounds(0, 0, 100, 30);
	b1.setText ("Show List");
	b1.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			list.setVisible (true);
		}
	});
	final Button b2 = new Button (shell, 0);
	b2.setBounds(0, 30, 100, 30);
	b2.setText ("Hide List");
	b2.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			list.setVisible (false);
		}
	});
	final Button b3 = new Button (shell, 0);
	b3.setBounds(0, 260, 100, 30);
	b3.setText ("Request Work");
	b3.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			System.out.println ("Request work.");
			dirty = true;
			doWork (list);
		}
	});
	shell.pack ();
	shell.open ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>TM (21.12.2000 17:44:30)
	055a

	We have a viewer that is quite expensive to update. Therefore we don't update the viewer when
	the model has changed, but the viewer is not visible. But then, we have to update the viewer
	when it becomes visible. I have found no API in SWT to do this.

TM (21.12.2000 17:46:07)
	It seems DB hacked this into an earlier SWT version in ZRH.

DB (21.12.2000 17:56:58)
	We haven't  found any API in the Desktop / JFace either. Is there a way to track visibility of
	a viewer using JFace or Desktop mechanisms. Or at least to track the visibility of view part.

	Moved PR to Desktop since it is not clear whether this is a SWT or Desktop / JFace problem.

EG (1/9/01 11:59:32 AM)
	Lost functionality in the New Platform.
	We can tolerate a slow Type Hierarchy View to start self hosting. However, we need this
	function back in the final product.

EG (3/5/01 6:49:26 PM)
	Here is some more background.
	In the old JFace we could ask a Viewer whether it is visible or not. In addition, Viewer
	had a life cycle method becomesVisible that is called when a viewer becomes visible.
	We have leveraged this in the Java tooling to only update the type hierarchy when
	it is visible. That is, when it is invisible and we get a change notification we only
	remember that the viewer is dirty. When a viewer becomes visible and is dirty
	then we refresh it.

	This PR can be addressed either at the JFace or SWT level.
	KH please comment and move PR if needed.

KH(4/5/2001 9:13:52 AM)
	This is similiar to the activation problem. In order to guarantee that the viewer gets notified
that the visibility changes a callback on the widget is required. 
	
	McQ (05/04/2001 9:50:37 AM) -
		I'll discuss this with the team.

	McQ (05/04/2001 4:05:08 PM) -
		There *is* a callback when the widget needs to be painted (which, of course, happens
		when it becomes visible). The only problem I can see with just using this (and a bit of
		application logic to detect that it's the first occurance) is that, it happens *after* any
		drawing that the widget does itself. It's pretty easy to get around this, though.  For
		example, by having a simple composite parent which, when *it* is first painted does
		whatever updating is required on its (still invisible) children and then makes them visible.

		Given that we now are supposed to be API frozen, I'm unlikely to want to add new API
		to fix the "lost function" (which btw, I take issue with, since you have *not* lost function
		w.r.t. SWT).

		If we were to do something, it would have to be along the lines of an "about to be painted"
		callback which happens *before* the widget does its own painting. Just to be clear: I'm
		not planning to do this currently.

	McQ (05/04/2001 4:18:56 PM) -
		There's another issue, however. You also want to know when the widget is _no_longer_
		visible, so you can *stop* updating it. The problem with this, is that it's impossible for
		me to detect this without a complex and fallible set of calculations on widget bounds,
		z-ordering, ancestor visibility, etc. 

		For particular cases, for example (in eclipse terms), when the desktop drops another
		view on the same area of the perspective, the best thing to do is just have the application
		tell the view it's being covered.

		Of course, we *could* do the simple hack of providing a callback on a widget when
		someone calls setVisible(), but obviously the argument against this is that, if the 
		application is calling setVisible(), then *it* can call whatever else it wants to 
		enable/disable updating.

SN (4/10/01 6:38:27 PM)
	Here is some code that does lots of work when the widget is painted.  It's a first attempt
	to use a paint listener to be lazy about filling the contents of a widget.  There are several
	things to note about the code.  The work portion includes "list.update ()" calls to force the
	list widget to redraw in between items.  This causes recursive paints to come in that are
	protected by the "dirty" flag.  Also, I didn't bother trying to abstract out the SWT calls the
	non-SWT calls use because I felt less code would be easier to understand.

	NOTE:  Most UI's make a point of spending as little time as possible painting the widget
	and the "lazy painting" strategy violates this general rule of thumb.  The reason for this
	rule is that the UI will appear frozen to the user while the widget paints leading him to
	believe that the application is hung or is at best, sluggish.  We've all seen UI's like this!
	However, I believe that a solution based on doing the work in a setVisible () listener
	would exhibit the same behavior.

	Please play with this example and determine this approach could be used to optimize
	your code.  Thanks.

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class LazyPaint {

static boolean dirty = true;
static void doWork (List list) {
	if (!list.isVisible ()) {
		dirty = true;
		return;
	}
	if (!dirty) return;
	dirty = false;
	System.out.print ("** Working ...");
	list.removeAll ();
	list.update ();
	for (int i=0; i&lt;8; i++) {
		list.add ("Item " + i);
		list.update ();
		try {Thread.sleep (500);} catch (Throwable t) {};
	}
	System.out.println ("done.");
}

public static void main (String [] args) {
	Display display = new Display ();
	final Shell shell = new Shell (display);
	final List list = new List (shell, SWT.BORDER | SWT.V_SCROLL);
	list.setBounds (0, 60, 100, 200);
	list.addListener(SWT.Paint, new Listener() {
		public void handleEvent(Event e) {
			System.out.println ("Painting.");
			doWork (list);
		}
	});
	final Button b1 = new Button (shell, 0);
	b1.setBounds(0, 0, 100, 30);
	b1.setText ("Show List");
	b1.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			list.setVisible (true);
		}
	});
	final Button b2 = new Button (shell, 0);
	b2.setBounds(0, 30, 100, 30);
	b2.setText ("Hide List");
	b2.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			list.setVisible (false);
		}
	});
	final Button b3 = new Button (shell, 0);
	b3.setBounds(0, 260, 100, 30);
	b3.setText ("Request Work");
	b3.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			System.out.println ("Request work.");
			dirty = true;
			doWork (list);
		}
	});
	shell.pack ();
	shell.open ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

}

	McQ (11/04/2001 8:43:56 AM) -
		One possibility, to prevent the "locked up u/i" behavior is to have
		the widget which would be updated just display "Updating..." (or whatever)
		until the contents are ready to be shown. This is relatively easy to do in
		application code.

SN (5/3/01 12:37:23 PM)
	This one has timed out.  Moving to inactive.
This needs to looked at again as part of a general SWT widget 
performance/responsiveness pass. Not for R2.0.

Moving from Later.
Eclipse has worked around this issue already using threads.  Also, the 
SWT.VIRTUAL style for tables can be used to lazily fill them.  Closing.</WithStack>
    <WithOutStack>TM (21.12.2000 17:44:30)
	055a

	We have a viewer that is quite expensive to update. Therefore we don't update the viewer when
	the model has changed, but the viewer is not visible. But then, we have to update the viewer
	when it becomes visible. I have found no API in SWT to do this.

TM (21.12.2000 17:46:07)
	It seems DB hacked this into an earlier SWT version in ZRH.

DB (21.12.2000 17:56:58)
	We haven't  found any API in the Desktop / JFace either. Is there a way to track visibility of
	a viewer using JFace or Desktop mechanisms. Or at least to track the visibility of view part.

	Moved PR to Desktop since it is not clear whether this is a SWT or Desktop / JFace problem.

EG (1/9/01 11:59:32 AM)
	Lost functionality in the New Platform.
	We can tolerate a slow Type Hierarchy View to start self hosting. However, we need this
	function back in the final product.

EG (3/5/01 6:49:26 PM)
	Here is some more background.
	In the old JFace we could ask a Viewer whether it is visible or not. In addition, Viewer
	had a life cycle method becomesVisible that is called when a viewer becomes visible.
	We have leveraged this in the Java tooling to only update the type hierarchy when
	it is visible. That is, when it is invisible and we get a change notification we only
	remember that the viewer is dirty. When a viewer becomes visible and is dirty
	then we refresh it.

	This PR can be addressed either at the JFace or SWT level.
	KH please comment and move PR if needed.

KH(4/5/2001 9:13:52 AM)
	This is similiar to the activation problem. In order to guarantee that the viewer gets notified
that the visibility changes a callback on the widget is required. 
	
	McQ (05/04/2001 9:50:37 AM) -
		I'll discuss this with the team.

	McQ (05/04/2001 4:05:08 PM) -
		There *is* a callback when the widget needs to be painted (which, of course, happens
		when it becomes visible). The only problem I can see with just using this (and a bit of
		application logic to detect that it's the first occurance) is that, it happens *after* any
		drawing that the widget does itself. It's pretty easy to get around this, though.  For
		example, by having a simple composite parent which, when *it* is first painted does
		whatever updating is required on its (still invisible) children and then makes them visible.

		Given that we now are supposed to be API frozen, I'm unlikely to want to add new API
		to fix the "lost function" (which btw, I take issue with, since you have *not* lost function
		w.r.t. SWT).

		If we were to do something, it would have to be along the lines of an "about to be painted"
		callback which happens *before* the widget does its own painting. Just to be clear: I'm
		not planning to do this currently.

	McQ (05/04/2001 4:18:56 PM) -
		There's another issue, however. You also want to know when the widget is _no_longer_
		visible, so you can *stop* updating it. The problem with this, is that it's impossible for
		me to detect this without a complex and fallible set of calculations on widget bounds,
		z-ordering, ancestor visibility, etc. 

		For particular cases, for example (in eclipse terms), when the desktop drops another
		view on the same area of the perspective, the best thing to do is just have the application
		tell the view it's being covered.

		Of course, we *could* do the simple hack of providing a callback on a widget when
		someone calls setVisible(), but obviously the argument against this is that, if the 
		application is calling setVisible(), then *it* can call whatever else it wants to 
		enable/disable updating.

SN (4/10/01 6:38:27 PM)
	Here is some code that does lots of work when the widget is painted.  It's a first attempt
	to use a paint listener to be lazy about filling the contents of a widget.  There are several
	things to note about the code.  The work portion includes "list.update ()" calls to force the
	list widget to redraw in between items.  This causes recursive paints to come in that are
	protected by the "dirty" flag.  Also, I didn't bother trying to abstract out the SWT calls the
	non-SWT calls use because I felt less code would be easier to understand.

	NOTE:  Most UI's make a point of spending as little time as possible painting the widget
	and the "lazy painting" strategy violates this general rule of thumb.  The reason for this
	rule is that the UI will appear frozen to the user while the widget paints leading him to
	believe that the application is hung or is at best, sluggish.  We've all seen UI's like this!
	However, I believe that a solution based on doing the work in a setVisible () listener
	would exhibit the same behavior.

	Please play with this example and determine this approach could be used to optimize
	your code.  Thanks.

import com.ibm.swt.*;
import com.ibm.swt.widgets.*;

public class LazyPaint {

static boolean dirty = true;
static void doWork (List list) {
	if (!list.isVisible ()) {
		dirty = true;
		return;
	}
	if (!dirty) return;
	dirty = false;
	System.out.print ("** Working ...");
	list.removeAll ();
	list.update ();
	for (int i=0; i&lt;8; i++) {
		list.add ("Item " + i);
		list.update ();
		try {Thread.sleep (500);} catch (Throwable t) {};
	}
	System.out.println ("done.");
}

public static void main (String [] args) {
	Display display = new Display ();
	final Shell shell = new Shell (display);
	final List list = new List (shell, SWT.BORDER | SWT.V_SCROLL);
	list.setBounds (0, 60, 100, 200);
	list.addListener(SWT.Paint, new Listener() {
		public void handleEvent(Event e) {
			System.out.println ("Painting.");
			doWork (list);
		}
	});
	final Button b1 = new Button (shell, 0);
	b1.setBounds(0, 0, 100, 30);
	b1.setText ("Show List");
	b1.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			list.setVisible (true);
		}
	});
	final Button b2 = new Button (shell, 0);
	b2.setBounds(0, 30, 100, 30);
	b2.setText ("Hide List");
	b2.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			list.setVisible (false);
		}
	});
	final Button b3 = new Button (shell, 0);
	b3.setBounds(0, 260, 100, 30);
	b3.setText ("Request Work");
	b3.addListener (SWT.Selection, new Listener () {
		public void handleEvent(Event e) {
			System.out.println ("Request work.");
			dirty = true;
			doWork (list);
		}
	});
	shell.pack ();
	shell.open ();
	while (!shell.isDisposed()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
}

}

	McQ (11/04/2001 8:43:56 AM) -
		One possibility, to prevent the "locked up u/i" behavior is to have
		the widget which would be updated just display "Updating..." (or whatever)
		until the contents are ready to be shown. This is relatively easy to do in
		application code.

SN (5/3/01 12:37:23 PM)
	This one has timed out.  Moving to inactive.
This needs to looked at again as part of a general SWT widget 
performance/responsiveness pass. Not for R2.0.

Moving from Later.
Eclipse has worked around this issue already using threads.  Also, the 
SWT.VIRTUAL style for tables can be used to lazily fill them.  Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4589" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>StyledText - add setLineBackground API, remove LineBackgroundListener (1G7CSDV)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>- we formally identify the two different APIs, including stating that they are not interchangeable</Line>
          <Line>(note: this also says that we will maintain both)</Line>
          <Line>- we clearly indicate via comments in the "stateless" API methods that these are intended for use</Line>
          <Line>only in situations where the more standard"statefull" API is not powerful enough</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Backed out the setLineBackground(int,int,Color) API for ZRH.  Need to put this back in when ZRH's design
can handle it.

Original setLineBackground(int,int,Color) code is in:

	IBM SWT Custom Widgets--&gt;com.ibm.swt.custom--&gt;0.002 pre line bg
	IBM SWT Styled Text Examples--&gt;com.ibm.swt.examples.tests--&gt;0.002 pre line bg
	IBM SWT Styled Text JUnit Tests--&gt;com.ibm.swt.custom--&gt;0.002 pre line bg
	IBM SWT Styled Text JUnit Tests--&gt;com.ibm.swt.junit.automated--&gt;0.002 pre line bg

NOTES:

LK (1/15/01 5:25:05 PM)
	When add this need to get KR to update line style event data so that it is carried through for each
	callback.  Also need to get AW to see if he can use hook another line styler to solve his line background
	problem.

LK (1/16/01 1:03:36 PM)
	Sent AW code to see if hooking another line style listener will solve his problem.

LK (1/17/01 3:14:48 PM)
	The hooking another line styler doesn't work in Andre's case since Kai is using the default
	line styler.  The concept will work if all line stylers are user-defined.  It doesn't make 
	sense to support the concept if you are using the style API (and thus our default line styler).  
	We threw around the idea, but it is bogus.  You either use our API or you supply your own line 
	styler(s).  Supporting both would introduce all kinds of subtle interactions, so we're not 
	going to go down that route.  Sent AW email suggesting he use setLineBackground or have
	Kai supply his own line styler.

LK (1/18/01 3:56:19 PM)
	Leaving in the Listener and Event for now.  Email trails follow.

From Andre and Kai:

"
We thought quite a while about your arguments and subsequently we summarize 
what we think would solve almost all of the current issues. We know that most of 
those thoughts have already been around, so this is more or less an attempt to 
bring them into shape.

StyledText provides two different APIs each serving a different purpose. One is the
callback API consisting of StyledTextContent, LineStyleListener, and 
LineBackgroundListener. Its intent is to prevent any kind of state duplication. The 
other API is the stateful API which primarily should allow for the simple, minimal knowledge
requiring case. This API consist of the following methods:  setText(..),  append, 
getCharCount, getLineCount,  getLineDelimiter, getText(..), 
insert(String string),  replace(..),  getLineAtOffset, setStyleRange,
setStyleRanges, getStyleAtOffset(int offset), getStyles().

The two different APIs may not interchangeably be used which is not represented in
the API but an implementation constraint.  E.g, it's rather confusing to recognize that 
some of the stateful API does not longer work when having installed a LineStyleListener.

We believe that those two APIs should at least be separated, and even that the stateful
API is unnecessary. Thus, we vote for removing all the 13 methods which make up the
stateful API.  By  making the DefaultContent and DefaultLineStyler public the simple, 
minimal knowledge requiring case can still be covered.  Achieving the functionality originally
provided by the stateful API can then be achieved by using the default implementers and
talking to them directly. We believe that  SWT is already that demanding that forcing clients
to talk to those model components will not make them unhappy. The clients still have the 
opportunity to wrap them in their own classes.

Besides the API simplification and the clearer representation of the used concepts we
see additional benefits. E.g., the implementation of StyledText could become simpler
and more lightweight. All checks  "if (defaultLineStyler != null)" could be removed. 
Some defaults are no longer necessary like the allocation of a  "new StyleRange[0]"
for every drawn line.

We are also confident that those changes would be in the good tradition of SWT to be 
as simple as possible while still being powerful.
"

McQ response:

"Traditions of simplicity" aside, what you are proposing is that the StyledText widget have an API which 
has little in common with either Text, RichText, or even more generically any of the other SWT widgets 
(for example, List). Clearly, this is unreasonable.

I do agree that there are two different APIs. I would even be willing to consider splitting them into class 
and subclass if I could ensure that doing so did not decrease the performance of the "stateful" API
hide the "stateless" API so that it is accessible only from your world.

I believe the best version of the compromise is that, 

 - we formally identify the two different APIs, including stating that they are not interchangeable 
(note: this also says that we will maintain both)
- we clearly indicate via comments in the "stateless" API methods that these are intended for use 
only in situations where the more standard"statefull" API is not powerful enough

Please understand, I believe that 90% or better of the typical uses of this widget will not require the stateless 
API, and that that API would be cumbersome to deal with in those common situations.
PRODUCT VERSION:
0.056


both API and listener exist for line background coloring</WithStack>
    <WithOutStack>Backed out the setLineBackground(int,int,Color) API for ZRH.  Need to put this back in when ZRH's design
can handle it.

Original setLineBackground(int,int,Color) code is in:

	IBM SWT Custom Widgets--&gt;com.ibm.swt.custom--&gt;0.002 pre line bg
	IBM SWT Styled Text Examples--&gt;com.ibm.swt.examples.tests--&gt;0.002 pre line bg
	IBM SWT Styled Text JUnit Tests--&gt;com.ibm.swt.custom--&gt;0.002 pre line bg
	IBM SWT Styled Text JUnit Tests--&gt;com.ibm.swt.junit.automated--&gt;0.002 pre line bg

NOTES:

LK (1/15/01 5:25:05 PM)
	When add this need to get KR to update line style event data so that it is carried through for each
	callback.  Also need to get AW to see if he can use hook another line styler to solve his line background
	problem.

LK (1/16/01 1:03:36 PM)
	Sent AW code to see if hooking another line style listener will solve his problem.

LK (1/17/01 3:14:48 PM)
	The hooking another line styler doesn't work in Andre's case since Kai is using the default
	line styler.  The concept will work if all line stylers are user-defined.  It doesn't make 
	sense to support the concept if you are using the style API (and thus our default line styler).  
	We threw around the idea, but it is bogus.  You either use our API or you supply your own line 
	styler(s).  Supporting both would introduce all kinds of subtle interactions, so we're not 
	going to go down that route.  Sent AW email suggesting he use setLineBackground or have
	Kai supply his own line styler.

LK (1/18/01 3:56:19 PM)
	Leaving in the Listener and Event for now.  Email trails follow.

From Andre and Kai:

"
We thought quite a while about your arguments and subsequently we summarize 
what we think would solve almost all of the current issues. We know that most of 
those thoughts have already been around, so this is more or less an attempt to 
bring them into shape.

StyledText provides two different APIs each serving a different purpose. One is the
callback API consisting of StyledTextContent, LineStyleListener, and 
LineBackgroundListener. Its intent is to prevent any kind of state duplication. The 
other API is the stateful API which primarily should allow for the simple, minimal knowledge
requiring case. This API consist of the following methods:  setText(..),  append, 
getCharCount, getLineCount,  getLineDelimiter, getText(..), 
insert(String string),  replace(..),  getLineAtOffset, setStyleRange,
setStyleRanges, getStyleAtOffset(int offset), getStyles().

The two different APIs may not interchangeably be used which is not represented in
the API but an implementation constraint.  E.g, it's rather confusing to recognize that 
some of the stateful API does not longer work when having installed a LineStyleListener.

We believe that those two APIs should at least be separated, and even that the stateful
API is unnecessary. Thus, we vote for removing all the 13 methods which make up the
stateful API.  By  making the DefaultContent and DefaultLineStyler public the simple, 
minimal knowledge requiring case can still be covered.  Achieving the functionality originally
provided by the stateful API can then be achieved by using the default implementers and
talking to them directly. We believe that  SWT is already that demanding that forcing clients
to talk to those model components will not make them unhappy. The clients still have the 
opportunity to wrap them in their own classes.

Besides the API simplification and the clearer representation of the used concepts we
see additional benefits. E.g., the implementation of StyledText could become simpler
and more lightweight. All checks  "if (defaultLineStyler != null)" could be removed. 
Some defaults are no longer necessary like the allocation of a  "new StyleRange[0]"
for every drawn line.

We are also confident that those changes would be in the good tradition of SWT to be 
as simple as possible while still being powerful.
"

McQ response:

"Traditions of simplicity" aside, what you are proposing is that the StyledText widget have an API which 
has little in common with either Text, RichText, or even more generically any of the other SWT widgets 
(for example, List). Clearly, this is unreasonable.

I do agree that there are two different APIs. I would even be willing to consider splitting them into class 
and subclass if I could ensure that doing so did not decrease the performance of the "stateful" API
hide the "stateless" API so that it is accessible only from your world.

I believe the best version of the compromise is that, 

 - we formally identify the two different APIs, including stating that they are not interchangeable 
(note: this also says that we will maintain both)
- we clearly indicate via comments in the "stateless" API methods that these are intended for use 
only in situations where the more standard"statefull" API is not powerful enough

Please understand, I believe that 90% or better of the typical uses of this widget will not require the stateless 
API, and that that API would be cumbersome to deal with in those common situations.
PRODUCT VERSION:
0.056


both API and listener exist for line background coloring</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4590" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>VerifyEvent values ignored (1G7G5Y3)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="multicomment">
        <location start="169" end="208" />
        <code>/* Fields set by Text, RichText */</code>
      </source_code>
      <source_code type="assignment">
        <location start="209" end="252" />
        <code>VerifyEvent event= new VerifyEvent(e);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="253" end="309" />
        <code>((VerifyListener) eventListener).verifyText(event);</code>
      </source_code>
      <source_code type="assignment">
        <location start="310" end="334" />
        <code>e.text= event.text;</code>
      </source_code>
      <source_code type="assignment">
        <location start="335" end="359" />
        <code>e.doit= event.doit;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Modifications of the fields start and end of the VerifyEvent by a VerifyListener are subsequently thrown away
	by TypedListener.handleEvent:

			case SWT.Verify :
				{
					/* Fields set by Text, RichText */
					VerifyEvent event= new VerifyEvent(e);
					((VerifyListener) eventListener).verifyText(event);
					e.text= event.text;
					e.doit= event.doit;
					break;
				}

NOTES:

LK (1/12/01 11:55:52 AM)
	I was sent an email about this PR.  I assume Kai may want the ability to modify the start and end for the
	StyledText widget (I'm not sure).  But, nonetheless, this is an SWT issue.  If the platform doesn't support it,
	we're not.

SN (1/12/01 1:18:50 PM)
	The "start" and "end" fields were never intended to be modified by the application
	programmer and used by the widget.

KUM (1/15/01 11:07:04 AM)
	I can work around it. If the user is not allowed to modify those values, there should be a way to
	prevent him/her from it - otherwise it needs some time to find out what goes wrong - as it happend to me.

SN (2/5/01 3:53:13 PM)
	We need to document this.  The only fields that documented to be are read/write in SWT events are
	the doit field and the string field.  Need to check that this statement is true for OLE and D&amp;D.
PRODUCT VERSION:
	SWT 0.57


SN to provide good javadoc for all event fields during test pass 2.

Fixed &gt; 20020708</WithStack>
    <WithOutStack>Modifications of the fields start and end of the VerifyEvent by a VerifyListener are subsequently thrown away
	by TypedListener.handleEvent:

			case SWT.Verify :
				{
					/* Fields set by Text, RichText */
					VerifyEvent event= new VerifyEvent(e);
					((VerifyListener) eventListener).verifyText(event);
					e.text= event.text;
					e.doit= event.doit;
					break;
				}

NOTES:

LK (1/12/01 11:55:52 AM)
	I was sent an email about this PR.  I assume Kai may want the ability to modify the start and end for the
	StyledText widget (I'm not sure).  But, nonetheless, this is an SWT issue.  If the platform doesn't support it,
	we're not.

SN (1/12/01 1:18:50 PM)
	The "start" and "end" fields were never intended to be modified by the application
	programmer and used by the widget.

KUM (1/15/01 11:07:04 AM)
	I can work around it. If the user is not allowed to modify those values, there should be a way to
	prevent him/her from it - otherwise it needs some time to find out what goes wrong - as it happend to me.

SN (2/5/01 3:53:13 PM)
	We need to document this.  The only fields that documented to be are read/write in SWT events are
	the doit field and the string field.  Need to check that this statement is true for OLE and D&amp;D.
PRODUCT VERSION:
	SWT 0.57


SN to provide good javadoc for all event fields during test pass 2.

Fixed &gt; 20020708</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4591" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 98" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>prop sheet - the first column seems to leave too much unused space (1G7GIC3)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>3. The first column seems to leave too much unused space
    in front of the property names. This is worsening problem 1,
    when the property sheet control is too thin.

    &lt;See propview3.bmp&gt;

NOTES:

GDA (1/13/01 10:49:52 AM) 
	Routing to swt - sounds like widget behavior.

VI (15/03/2001 8:04:22 AM)
	If you have a TableTree with nothing but root items, you will have a blank space at the beginning of the
	first column because this is where the +/- sign would go if there were sub-items.  This problem might be resolved
	when we change how the +/- is implemented in order to support an image in the first column.
	
	McQ (26/06/2001 10:50:34 AM) -
		No action.
PRODUCT VERSION:
tech preview &amp; dec drop


In 3.1, please use Tree with TreeColumns.  It uses the native widget.</WithStack>
    <WithOutStack>3. The first column seems to leave too much unused space
    in front of the property names. This is worsening problem 1,
    when the property sheet control is too thin.

    &lt;See propview3.bmp&gt;

NOTES:

GDA (1/13/01 10:49:52 AM) 
	Routing to swt - sounds like widget behavior.

VI (15/03/2001 8:04:22 AM)
	If you have a TableTree with nothing but root items, you will have a blank space at the beginning of the
	first column because this is where the +/- sign would go if there were sub-items.  This problem might be resolved
	when we change how the +/- is implemented in order to support an image in the first column.
	
	McQ (26/06/2001 10:50:34 AM) -
		No action.
PRODUCT VERSION:
tech preview &amp; dec drop


In 3.1, please use Tree with TreeColumns.  It uses the native widget.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4592" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 98" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>multi select behavior for file dialog (1G7HZ2Q)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Quite a few teams needed the multi select capabilities
from the FileDialog widget for their features, so they went ahead and
added this to the SWT code (see the attached java file).
Is it possible for the SWT team to incorporate this into SWT?

NOTES:

VI (28/02/2001 1:47:09 PM)
	On Windows, add OFN_ALLOWMULTISELECT to struct before opening dialog.
	Also need to add API for getting an array of names bakc.
	Must investigate how to do this on Motif

CM (3/17/01 5:35:49 PM)
	P2/M1 (April 1st, 2001)

SN (3/23/01 5:55:59 PM)
	Implemented on Windows and stubbed elsewhere for now.  The API is
	FileDialog.getFileNames and the feature is turned on by SWT.MULTI.

	Moving to Active because it hasn't been (and possibly cannot be) 
implemented
	on the other platforms.  The stub may have to be the implementation.  
Need to
	investigate.
PRODUCT VERSION:

tech preview &amp; dec drop


This has been fixed on the other platforms for a while.</WithStack>
    <WithOutStack>Quite a few teams needed the multi select capabilities
from the FileDialog widget for their features, so they went ahead and
added this to the SWT code (see the attached java file).
Is it possible for the SWT team to incorporate this into SWT?

NOTES:

VI (28/02/2001 1:47:09 PM)
	On Windows, add OFN_ALLOWMULTISELECT to struct before opening dialog.
	Also need to add API for getting an array of names bakc.
	Must investigate how to do this on Motif

CM (3/17/01 5:35:49 PM)
	P2/M1 (April 1st, 2001)

SN (3/23/01 5:55:59 PM)
	Implemented on Windows and stubbed elsewhere for now.  The API is
	FileDialog.getFileNames and the feature is turned on by SWT.MULTI.

	Moving to Active because it hasn't been (and possibly cannot be) 
implemented
	on the other platforms.  The stub may have to be the implementation.  
Need to
	investigate.
PRODUCT VERSION:

tech preview &amp; dec drop


This has been fixed on the other platforms for a while.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4593" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Need to handle RGB transparent pixel value (1G7M833)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>PNG allows transparent pixels for RGB images. What this means is that instead of a palette index
representing the transparent color, any RGB triple can indicate the clear pixel. The current
GC implementation doesn't allow for this and so the RGB images are normally drawn incorrectly 
with black as the transparent color. 

We need to either allow the transparent pixel to be an RGB triple or modify the PNG code to 
generate alpha values instead of setting the transparent pixel.

The PNG code currently ignores this transparent pixel, see PngFileFormat.readNextChunk().

NOTES:

JH (1/18/01 11:00:31 AM) - Hacked the PNG code to fix this problem - it now generates alpha
values for RGB images that use a transparent pixel. This workaround should be removed
when the GC supports RGB transparent pixels.

CM (2/5/01 9:09:14 PM)
	The workaround in PNG is fine for now. It may even be the best solution.
	Moving to inactive for reconsideration at a later time.
To be considered again post R2.0.

Moving from Later.
This is fixed in latest.</WithStack>
    <WithOutStack>PNG allows transparent pixels for RGB images. What this means is that instead of a palette index
representing the transparent color, any RGB triple can indicate the clear pixel. The current
GC implementation doesn't allow for this and so the RGB images are normally drawn incorrectly 
with black as the transparent color. 

We need to either allow the transparent pixel to be an RGB triple or modify the PNG code to 
generate alpha values instead of setting the transparent pixel.

The PNG code currently ignores this transparent pixel, see PngFileFormat.readNextChunk().

NOTES:

JH (1/18/01 11:00:31 AM) - Hacked the PNG code to fix this problem - it now generates alpha
values for RGB images that use a transparent pixel. This workaround should be removed
when the GC supports RGB transparent pixels.

CM (2/5/01 9:09:14 PM)
	The workaround in PNG is fine for now. It may even be the best solution.
	Moving to inactive for reconsideration at a later time.
To be considered again post R2.0.

Moving from Later.
This is fixed in latest.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4594" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>multi select combo box (1G7MIB2)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Customer would like support for multi select combo

NOTES:

	McQ (1/15/01 9:49:43 PM) -
		The "multi select combo box" is not going to happen as a 
		new feature on the existing combo class. The Eclipse team would
		need to argue that this feature would be sufficiently desirable that
		it was worth doing a custom widget to support it. Further evidence
		for this might be that, we would likely need to do a custom combo
		anyway to support exact sizing when layed on top of table trees.

SN (2/5/01 4:25:38 PM)
	Custom widget.
PRODUCT VERSION:

	tech preview


Not in plan. Re-open PR if this becomes a requirement.</WithStack>
    <WithOutStack>Customer would like support for multi select combo

NOTES:

	McQ (1/15/01 9:49:43 PM) -
		The "multi select combo box" is not going to happen as a 
		new feature on the existing combo class. The Eclipse team would
		need to argue that this feature would be sufficiently desirable that
		it was worth doing a custom widget to support it. Further evidence
		for this might be that, we would likely need to do a custom combo
		anyway to support exact sizing when layed on top of table trees.

SN (2/5/01 4:25:38 PM)
	Custom widget.
PRODUCT VERSION:

	tech preview


Not in plan. Re-open PR if this becomes a requirement.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4595" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 2000" />
    <priority amount="P5" />
    <bug_severity amount="enhancement" />
    <Summery>Drag-Drop with right mouse botton (1G83VIO)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>MA (25.01.2001 13:02:52)
	On Windows, you can drag and drop with the right mouse button pressed.
	This feature is very important as you can the select if you want to move or copy (or create a shortcut)

NOTES:

DB (25.01.2001 19:18:33)
	Currently there isn't any support in SWT to do this.
	Movin to SWT.

CM (2/5/01 8:58:31 PM)
	VI to investigate.
PRODUCT VERSION:
	Test Pass 072


People expect to be able to write things which are equivalent to the 
windows "pop up a menu to ask what to do when it's dropped" thing. Giving them 
the ability to d&amp;d with the right mouse button (and telling them which button 
is pressed) would let them do this. 

However, it's a much more complex problem to actually integrate with the built 
in windows support. As long as this is not required, it should be relatively 
simple.
*** Bug 4756 has been marked as a duplicate of this bug. ***
Currently no plans to support this.
Is this feature have been implemented or not? Thanks.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.
Bug is still valid (tested with 3.5.1). For exmaple Windows supports drag and drop with right mouse button. Tested with explorer. I suggest to reopen the bug.</WithStack>
    <WithOutStack>MA (25.01.2001 13:02:52)
	On Windows, you can drag and drop with the right mouse button pressed.
	This feature is very important as you can the select if you want to move or copy (or create a shortcut)

NOTES:

DB (25.01.2001 19:18:33)
	Currently there isn't any support in SWT to do this.
	Movin to SWT.

CM (2/5/01 8:58:31 PM)
	VI to investigate.
PRODUCT VERSION:
	Test Pass 072


People expect to be able to write things which are equivalent to the 
windows "pop up a menu to ask what to do when it's dropped" thing. Giving them 
the ability to d&amp;d with the right mouse button (and telling them which button 
is pressed) would let them do this. 

However, it's a much more complex problem to actually integrate with the built 
in windows support. As long as this is not required, it should be relatively 
simple.
*** Bug 4756 has been marked as a duplicate of this bug. ***
Currently no plans to support this.
Is this feature have been implemented or not? Thanks.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.
Bug is still valid (tested with 3.5.1). For exmaple Windows supports drag and drop with right mouse button. Tested with explorer. I suggest to reopen the bug.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4596" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>DCR: Get more visual profile information from Device (1GHEHUV)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>- is the display palette indexed or direct color</Line>
          <Line>note: isDirect != getDepth() &gt; 8 in some cases (e.g. Xvnc)</Line>
          <Line>- how many red, green, and blue bits of resolution are supported</Line>
          <Line>(not necessarily the actual masks, and also applies to indexed modes)</Line>
          <Line>note: required when improving image quality via dithering</Line>
          <Line>instead of quantizing (usually the platform's behavior)</Line>
          <Line>- which pens does the application have access to</Line>
          <Line>- is the display local (fast) or remote (slow)</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="NEW" />
    <resolution amount="" />
    <WithStack>I think it would be useful if the application could retrieve more visual profile information
	from a Device / Display.  At present we supply a getDepth() method,
	but there is no way to ask the following questions:
		- is the display palette indexed or direct color
			note: isDirect != getDepth() &gt; 8 in some cases (e.g. Xvnc)
		- how many red, green, and blue bits of resolution are supported
			(not necessarily the actual masks, and also applies to indexed modes)
			note: required when improving image quality via dithering
				instead of quantizing (usually the platform's behavior)
		- which pens does the application have access to
		- is the display local (fast) or remote (slow)

	Much of this information could be packaged up in a PaletteData perhaps.

	Moreover internally SWT makes the assumption that bit depths &lt;= 8
	imply paletted modes.  This is particularly problematic on older
	Unix platforms such as are often found in academic environments --
	a target focus for Eclipse.  It is also a problem for Xvnc, a popular
	remove desktop application which uses a 3/3/2 TrueColor visual to
	improve network throughput.

NOTES:
PRODUCT VERSION:
	Build 125


Valid issues. To be considered post R2.0.

Moving from Later.
SSQ does graphics these days.</WithStack>
    <WithOutStack>I think it would be useful if the application could retrieve more visual profile information
	from a Device / Display.  At present we supply a getDepth() method,
	but there is no way to ask the following questions:
		- is the display palette indexed or direct color
			note: isDirect != getDepth() &gt; 8 in some cases (e.g. Xvnc)
		- how many red, green, and blue bits of resolution are supported
			(not necessarily the actual masks, and also applies to indexed modes)
			note: required when improving image quality via dithering
				instead of quantizing (usually the platform's behavior)
		- which pens does the application have access to
		- is the display local (fast) or remote (slow)

	Much of this information could be packaged up in a PaletteData perhaps.

	Moreover internally SWT makes the assumption that bit depths &lt;= 8
	imply paletted modes.  This is particularly problematic on older
	Unix platforms such as are often found in academic environments --
	a target focus for Eclipse.  It is also a problem for Xvnc, a popular
	remove desktop application which uses a 3/3/2 TrueColor visual to
	improve network throughput.

NOTES:
PRODUCT VERSION:
	Build 125


Valid issues. To be considered post R2.0.

Moving from Later.
SSQ does graphics these days.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4597" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>SWT.BORDER | SWT.FLAT should yield flat borders (1G8A5IR)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="5">
      <source_code type="assignment">
        <location start="5574" end="5602" />
        <code>borderStyle = SWT.BORDER;</code>
      </source_code>
      <source_code type="functiondef">
        <location start="5990" end="6614" />
        <code>private void initializeBorderStyle() {
		String osname = System.getProperty("os.name");
		if (osname.equals("Windows XP")) {
			String javaHome = System.getProperty("java.home");
			File homeDir = new File(javaHome);
			File binDir = new File(homeDir, "bin");
			File manifest = new File(binDir, "javaw.exe.manifest");
			if (manifest.exists()) {
				// Skinned widgets used - check for Windows 
Classic
				// If not used, set the style to BORDER
				RGB rgb = colors.getSystemColor
(SWT.COLOR_WIDGET_BACKGROUND);
				if (rgb.red != 212 &amp;&amp; rgb.green != 208 &amp;&amp; 
rgb.blue != 200)
					borderStyle = SWT.BORDER;
			}
		}		
	}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="7182" end="7204" />
        <code>(parent.getDisplay());</code>
      </source_code>
      <source_code type="assignment">
        <location start="7205" end="7243" />
        <code>form = toolkit.createForm(parent);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="7290" end="7337" />
        <code>form.getBody().setLayout(new GridLayout());</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1. Checkboxes &amp; radio buttons have thick black border around them.</Line>
          <Line>2. The scrollbar part of the CCombo is not flat at all.</Line>
          <Line>3. The border around CCombo's dropdown button is doubled.</Line>
          <Line>Please attach a screen shot.</Line>
          <Line>Specifying SWT.BORDER means "draw using the standard border for the operating system".  SWT.FLAT means "draw a flatter version of the control".</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Controls that do not require borders like buttons honour SWT.FLAT style 
correctly. However,
controls that normally do need a border (text, tree, table etc.) create a 
beveled (edged) border
when SWT.BORDER style is used.
This border does not fit well if one wants to maintain the 'flat' look. 
However, without
using the BORDER style, the widget bounds are hard to spot, particularly if 
they are
on the background of the same color (i.e. white).

I have seen applications that use 'flat' controls throughout. I need the 'flat' 
look so that I can set widget backgrounds
to the canvas-like background (i.e. white) and create more of a 'Web' form
appearance (as opposed of a classic dialog appearance). We want to
use widgets configured this way in the editor area, and don't want
to simply 'fold the dialog' by using regular gray controls with beveled borders.

Is it possible to use one-pixel 'foreground' border for these control when both
SWT.BORDER and SWT.FLAT are set? I tried to add paint listener to a Text
control and paint one pixel rectangle at the bounds, but nothing happened
(it was probably clipped).

NOTES:

VI (29/01/2001 9:43:22 AM)
	The SWT.FLAT style is currently only supported for Buttons and Toolbars.

SN (2/6/01 6:19:44 PM)
	Not quite sure what the flat look that DG wants should look like for 
every
	possible widget.  Is it the old Windows 3.11 look where the background
	color is white and the borders black and are a single pixel wide?

	Also, not sure what to do on the other platforms.  For example, how do
	I decide what a flat look is on Motif?  There was never a version of 
Motif
	that was "flat" so I hate to arbitrarily decide what this means.

DG (2/15/2001 1:33:28 PM)
	For most of the widgets, FLAT means to refrain from painting beveled
	borders to achive '3D' effect, as already works for buttons. For
	Text controls, it would mean drawing a 1-pixel rectangle using
	the widget's foreground color. For Item-based widgets 
	(Tree, Table, List etc.), FLAT would mean drawing a 1-pixel
	rectangle using the color that is also used to draw 
	grid lines (in table). I am sure that all Windows widgets
	can be configured to draw simple (1-pixel) border instead
	of 3D border. 

	With Motif, the effect described above should also be
	easy to set. I am not exactly sure about the details,
	but I beleive that something can be done with
	XmNborderWidth and XmNborderPixmap resources.
	As for widgets drawn by EWT (missing in the Motif
	toolkit) it is even easier, since we are drawing them
	anyway.

	Mind you, I am not asking for a completely new widget set
	or a different 'look and feel' as in JFC, just different 
	visual style i.e. lack of 3D border.
	The goal is to make widgets fit better in the form-like environment.
	The lack of 3D effect makes them look 'flush' with the document
	and the overall user experience is that both text and
	widgets are part of the document. 

SN (3/12/01 8:07:26 PM)
	We should do something for this.

CM (3/17/01 5:16:53 PM)
	P2/F1 (May 1st, 2001)

	McQ (09/05/2001 2:31:23 PM) -
		We did not get to this.
PRODUCT VERSION:
WIN


This entry suffers 'bug rot' a bit - introduction of skins in XP makes this 
harder. For example, skinned widgets on XP are already flat - as I am typing 
this on XP Internet Explorer, the text area widget has a 1-pixel blue 
background, and so do text fields.

Therefore, it is hard to implement this flat correctly on all the platforms.
Dejan, do you want us to close it?
Yes. The need will not go away, but in the presence of skins on XP and GTK, 
the request needs to be reformulated.
Chris, do you agree that SWT.FLAT will help "Eclipse Forms" but should not be 
used by Eclipse?  Instead we should concentrate on allowing Eclipse to get the 
new Windows XP look by default (bug 53859).
platform-ui cares only that on windows xp, eclipse's controls look as close to the latest style recommended by microsoft. (pde form work excluded)

it is difficult even among microsoft products to find a reference example of this mythical 'latest style'. when i need to choose i usually look at the os dialogs (like in control panel) rather than apps (like microsoft office). perhaps there is an official reference i do not have.

i'm not sure if this 'flat' look represents this 'latest style', or is just a variation. if its not the recommended style, we are not interested. 

i only thought 'flat' look might be related because on some xp control panel dialogs, it looks like the combo boxes etc, are drawn without borders*. is that the 'flat look' they are using? 

(* i'm not sure about this right now, because i only have a mac in front of me right now)

Good.  We will reserve the SWT.FLAT bit for a possible use by "Eclipse Forms".
We do use it in Eclipse Forms for all the widgets where it makes sense (mostly 
various styles of buttons and CCombo). However, new window systems with skins 
are more flat to begin with (for example we use Windows XP widgets as-is). We 
still need the flag for other platforms where it works (Win2k, for example).
I wondered why in org.eclipse.ui.forms.widgets.FormToolkit.initialize(), for
Windows XP the borderStyle is set to SWT.BORDER. In Eclipse Forms Programming
Guide I read the following: "In Eclipse 3.0, border rendering is not done on
Windows XP. Since Eclipse on Windows XP can use skinned widgets, controls like
text, table, tree etc. are already flat and further 'fixing' is not needed."   

But actually, in my XP Look and feel, the borders are not flat and I had to
comment the code 
		if (osname.equals("Windows XP"))
			borderStyle = SWT.BORDER;
to achieve flat borders even with Windows XP.

Additionally, I wonder if the problems with grayed controls (like grayed
checkboxes in order to visualize the read-only state)in Windows XP look and feel
 are already bug-reported. In Windows XP, these grayed controls are white and
the users cannot see if it's disabled or not. 
The code you are referring to is a bit more complex, as in:

	private void initializeBorderStyle() {
		String osname = System.getProperty("os.name");
		if (osname.equals("Windows XP")) {
			String javaHome = System.getProperty("java.home");
			File homeDir = new File(javaHome);
			File binDir = new File(homeDir, "bin");
			File manifest = new File(binDir, "javaw.exe.manifest");
			if (manifest.exists()) {
				// Skinned widgets used - check for Windows 
Classic
				// If not used, set the style to BORDER
				RGB rgb = colors.getSystemColor
(SWT.COLOR_WIDGET_BACKGROUND);
				if (rgb.red != 212 &amp;&amp; rgb.green != 208 &amp;&amp; 
rgb.blue != 200)
					borderStyle = SWT.BORDER;
			}
		}		
	}

The reason is as follows:

Windows XP, when in 'skinned' mode i.e. when XP skinned widgets are used by 
SWT, renders flat borders. Widgets with these borders look very good in the 
context of forms. Therefore, there is no reason to do anything on our part. We 
check if the skinned widgets are used (see above), and pass SWT.BORDER style 
if they are. Otherwise, we must render the flat borders ourselves.
I am using IES-20040514 and do not get the flat UI border on text widgets 
under windows XP with the following code:

			 FormToolkit toolkit = new FormToolkit
(parent.getDisplay());
			 form = toolkit.createForm(parent);
			 form.setText("Sample form");//$NON-NLS-1$
			 form.getBody().setLayout(new GridLayout());
			 toolkit.createText(form.getBody(), "This is text", 
SWT.BORDER | SWT.FLAT); //$NON-NLS-1$

I get the shaded border.

If I do 

			 toolkit.createText(form.getBody(), "This is text"); //
$NON-NLS-1$

I get no border at all.

Is this the same defect discussed here?
If the answer is yes, then can you tell me the correct code to get the flatUI 
on text widgets?
If the priority
When on XP, we check the presence of javaw.exe.manifest in JAVA_HOME. If the 
file is present, we use SWT.BORDER because SWT with the manifest uses skinned 
widgets that are flat in appearence. Otherwise, we don't use 'shaded' border 
but paint our own. In that case, however, you need to 
call 'toolkit.paintBordersFor(parentContainer)'. You should always make this 
call after you create your children in the parent composite so that you work 
well across platforms. The call do the right thing all the time.

Note that you are not supposed to pass the border styles yourself in 
FormToolkit factory methods (createXXX). Let the toolkit use the appropriate 
style in the context.
I use WinXP, but when I change the theme to Windows Classic, I notice that some widgets do not look in sync with others, for instance : 

1. Checkboxes &amp; radio buttons have thick black border around them. 
2. The scrollbar part of the CCombo is not flat at all.
3. The border around CCombo's dropdown button is doubled.
Please attach a screen shot.
Specifying SWT.BORDER means "draw using the standard border for the operating system".  SWT.FLAT means "draw a flatter version of the control".

If you want to enforce a common flat looking border on every operating system, then you will need to draw it yourself.</WithStack>
    <WithOutStack>Controls that do not require borders like buttons honour SWT.FLAT style 
correctly. However,
controls that normally do need a border (text, tree, table etc.) create a 
beveled (edged) border
when SWT.BORDER style is used.
This border does not fit well if one wants to maintain the 'flat' look. 
However, without
using the BORDER style, the widget bounds are hard to spot, particularly if 
they are
on the background of the same color (i.e. white).

I have seen applications that use 'flat' controls throughout. I need the 'flat' 
look so that I can set widget backgrounds
to the canvas-like background (i.e. white) and create more of a 'Web' form
appearance (as opposed of a classic dialog appearance). We want to
use widgets configured this way in the editor area, and don't want
to simply 'fold the dialog' by using regular gray controls with beveled borders.

Is it possible to use one-pixel 'foreground' border for these control when both
SWT.BORDER and SWT.FLAT are set? I tried to add paint listener to a Text
control and paint one pixel rectangle at the bounds, but nothing happened
(it was probably clipped).

NOTES:

VI (29/01/2001 9:43:22 AM)
	The SWT.FLAT style is currently only supported for Buttons and Toolbars.

SN (2/6/01 6:19:44 PM)
	Not quite sure what the flat look that DG wants should look like for 
every
	possible widget.  Is it the old Windows 3.11 look where the background
	color is white and the borders black and are a single pixel wide?

	Also, not sure what to do on the other platforms.  For example, how do
	I decide what a flat look is on Motif?  There was never a version of 
Motif
	that was "flat" so I hate to arbitrarily decide what this means.

DG (2/15/2001 1:33:28 PM)
	For most of the widgets, FLAT means to refrain from painting beveled
	borders to achive '3D' effect, as already works for buttons. For
	Text controls, it would mean drawing a 1-pixel rectangle using
	the widget's foreground color. For Item-based widgets 
	(Tree, Table, List etc.), FLAT would mean drawing a 1-pixel
	rectangle using the color that is also used to draw 
	grid lines (in table). I am sure that all Windows widgets
	can be configured to draw simple (1-pixel) border instead
	of 3D border. 

	With Motif, the effect described above should also be
	easy to set. I am not exactly sure about the details,
	but I beleive that something can be done with
	XmNborderWidth and XmNborderPixmap resources.
	As for widgets drawn by EWT (missing in the Motif
	toolkit) it is even easier, since we are drawing them
	anyway.

	Mind you, I am not asking for a completely new widget set
	or a different 'look and feel' as in JFC, just different 
	visual style i.e. lack of 3D border.
	The goal is to make widgets fit better in the form-like environment.
	The lack of 3D effect makes them look 'flush' with the document
	and the overall user experience is that both text and
	widgets are part of the document. 

SN (3/12/01 8:07:26 PM)
	We should do something for this.

CM (3/17/01 5:16:53 PM)
	P2/F1 (May 1st, 2001)

	McQ (09/05/2001 2:31:23 PM) -
		We did not get to this.
PRODUCT VERSION:
WIN


This entry suffers 'bug rot' a bit - introduction of skins in XP makes this 
harder. For example, skinned widgets on XP are already flat - as I am typing 
this on XP Internet Explorer, the text area widget has a 1-pixel blue 
background, and so do text fields.

Therefore, it is hard to implement this flat correctly on all the platforms.
Dejan, do you want us to close it?
Yes. The need will not go away, but in the presence of skins on XP and GTK, 
the request needs to be reformulated.
Chris, do you agree that SWT.FLAT will help "Eclipse Forms" but should not be 
used by Eclipse?  Instead we should concentrate on allowing Eclipse to get the 
new Windows XP look by default (bug 53859).
platform-ui cares only that on windows xp, eclipse's controls look as close to the latest style recommended by microsoft. (pde form work excluded)

it is difficult even among microsoft products to find a reference example of this mythical 'latest style'. when i need to choose i usually look at the os dialogs (like in control panel) rather than apps (like microsoft office). perhaps there is an official reference i do not have.

i'm not sure if this 'flat' look represents this 'latest style', or is just a variation. if its not the recommended style, we are not interested. 

i only thought 'flat' look might be related because on some xp control panel dialogs, it looks like the combo boxes etc, are drawn without borders*. is that the 'flat look' they are using? 

(* i'm not sure about this right now, because i only have a mac in front of me right now)

Good.  We will reserve the SWT.FLAT bit for a possible use by "Eclipse Forms".
We do use it in Eclipse Forms for all the widgets where it makes sense (mostly 
various styles of buttons and CCombo). However, new window systems with skins 
are more flat to begin with (for example we use Windows XP widgets as-is). We 
still need the flag for other platforms where it works (Win2k, for example).
I wondered why in org.eclipse.ui.forms.widgets.FormToolkit.initialize(), for
Windows XP the borderStyle is set to SWT.BORDER. In Eclipse Forms Programming
Guide I read the following: "In Eclipse 3.0, border rendering is not done on
Windows XP. Since Eclipse on Windows XP can use skinned widgets, controls like
text, table, tree etc. are already flat and further 'fixing' is not needed."   

But actually, in my XP Look and feel, the borders are not flat and I had to
comment the code 
		if (osname.equals("Windows XP"))
			borderStyle = SWT.BORDER;
to achieve flat borders even with Windows XP.

Additionally, I wonder if the problems with grayed controls (like grayed
checkboxes in order to visualize the read-only state)in Windows XP look and feel
 are already bug-reported. In Windows XP, these grayed controls are white and
the users cannot see if it's disabled or not. 
The code you are referring to is a bit more complex, as in:

	private void initializeBorderStyle() {
		String osname = System.getProperty("os.name");
		if (osname.equals("Windows XP")) {
			String javaHome = System.getProperty("java.home");
			File homeDir = new File(javaHome);
			File binDir = new File(homeDir, "bin");
			File manifest = new File(binDir, "javaw.exe.manifest");
			if (manifest.exists()) {
				// Skinned widgets used - check for Windows 
Classic
				// If not used, set the style to BORDER
				RGB rgb = colors.getSystemColor
(SWT.COLOR_WIDGET_BACKGROUND);
				if (rgb.red != 212 &amp;&amp; rgb.green != 208 &amp;&amp; 
rgb.blue != 200)
					borderStyle = SWT.BORDER;
			}
		}		
	}

The reason is as follows:

Windows XP, when in 'skinned' mode i.e. when XP skinned widgets are used by 
SWT, renders flat borders. Widgets with these borders look very good in the 
context of forms. Therefore, there is no reason to do anything on our part. We 
check if the skinned widgets are used (see above), and pass SWT.BORDER style 
if they are. Otherwise, we must render the flat borders ourselves.
I am using IES-20040514 and do not get the flat UI border on text widgets 
under windows XP with the following code:

			 FormToolkit toolkit = new FormToolkit
(parent.getDisplay());
			 form = toolkit.createForm(parent);
			 form.setText("Sample form");//$NON-NLS-1$
			 form.getBody().setLayout(new GridLayout());
			 toolkit.createText(form.getBody(), "This is text", 
SWT.BORDER | SWT.FLAT); //$NON-NLS-1$

I get the shaded border.

If I do 

			 toolkit.createText(form.getBody(), "This is text"); //
$NON-NLS-1$

I get no border at all.

Is this the same defect discussed here?
If the answer is yes, then can you tell me the correct code to get the flatUI 
on text widgets?
If the priority
When on XP, we check the presence of javaw.exe.manifest in JAVA_HOME. If the 
file is present, we use SWT.BORDER because SWT with the manifest uses skinned 
widgets that are flat in appearence. Otherwise, we don't use 'shaded' border 
but paint our own. In that case, however, you need to 
call 'toolkit.paintBordersFor(parentContainer)'. You should always make this 
call after you create your children in the parent composite so that you work 
well across platforms. The call do the right thing all the time.

Note that you are not supposed to pass the border styles yourself in 
FormToolkit factory methods (createXXX). Let the toolkit use the appropriate 
style in the context.
I use WinXP, but when I change the theme to Windows Classic, I notice that some widgets do not look in sync with others, for instance : 

1. Checkboxes &amp; radio buttons have thick black border around them. 
2. The scrollbar part of the CCombo is not flat at all.
3. The border around CCombo's dropdown button is doubled.
Please attach a screen shot.
Specifying SWT.BORDER means "draw using the standard border for the operating system".  SWT.FLAT means "draw a flatter version of the control".

If you want to enforce a common flat looking border on every operating system, then you will need to draw it yourself.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4598" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Help Events should include the item for widgets with items (1G8DSF9)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Kevin Haaland needs to provide Help support for Toolbars and Menus.  The Help Listener is
	hooked on the ToolBar or the Menu and the event does not contain any information about the
	item over which the event took place. The event also does not include the cursor coordinates
	so he can not look up the item.   He would prefer to get the item itself rather than looking it up
	from the coordinates.   He also anticipates wanting the same functionality for  anything with
	items such as Tables and Trees.

NOTES:

SN (1/30/01 4:01:50 PM)
	There is support for hooking the help listener on a MenuItem.  We could consider removing
	this and setting the item in the callback for the control (and menu) or adding the callbacks to
	the items.  Another possibility is that he can query the location of the cursor and look up the
	item (for table and tree) but shouldn't the item always be the current selection?

	For each widget in question, we need to decide what the "help item" would be before we
	write any code.

SN (1/30/01 4:07:27 PM)
	Because toolbars do not take focus, how can they get the help callback? (ie. F1 pressed).

CM (2/5/01 9:00:32 PM)
	SN to follow up with KH.

KH (3/9/01 9:42:43 AM)
	All SWT events where the x,y values are filled should also fill in
	the item that corresponds to the x,y value.
PRODUCT VERSION:

	SWT 0.058
	All platforms


Help does not fill in the x and y values.  Closing this.</WithStack>
    <WithOutStack>Kevin Haaland needs to provide Help support for Toolbars and Menus.  The Help Listener is
	hooked on the ToolBar or the Menu and the event does not contain any information about the
	item over which the event took place. The event also does not include the cursor coordinates
	so he can not look up the item.   He would prefer to get the item itself rather than looking it up
	from the coordinates.   He also anticipates wanting the same functionality for  anything with
	items such as Tables and Trees.

NOTES:

SN (1/30/01 4:01:50 PM)
	There is support for hooking the help listener on a MenuItem.  We could consider removing
	this and setting the item in the callback for the control (and menu) or adding the callbacks to
	the items.  Another possibility is that he can query the location of the cursor and look up the
	item (for table and tree) but shouldn't the item always be the current selection?

	For each widget in question, we need to decide what the "help item" would be before we
	write any code.

SN (1/30/01 4:07:27 PM)
	Because toolbars do not take focus, how can they get the help callback? (ie. F1 pressed).

CM (2/5/01 9:00:32 PM)
	SN to follow up with KH.

KH (3/9/01 9:42:43 AM)
	All SWT events where the x,y values are filled should also fill in
	the item that corresponds to the x,y value.
PRODUCT VERSION:

	SWT 0.058
	All platforms


Help does not fill in the x and y values.  Closing this.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4599" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Linux-Motif" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>use of new motif 2.1 widgets (1G8H23J)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>- There are some issues with the choices of widgets for the motif 2.1</Line>
          <Line>implementation of SWT</Line>
          <Line>- XmContainer widget to do tree displays</Line>
          <Line>- Container Widget/Icon Gadget -  display tabular and tree-structured</Line>
          <Line>information.</Line>
          <Line>- Notebook Widget</Line>
          <Line>- Spinbox Widget</Line>
          <Line>- Combo Box/Drop Down List Widget (appear to be used already)</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>preamble from greg:
	At the moment this is not a request but more of a question/observation 
I wanted to log a pr to at leats capture the discussion.


    - There are some issues with the choices of widgets for the motif 2.1 
implementation of SWT 
        - XmContainer widget to do tree displays 
        - Container Widget/Icon Gadget -  display tabular and tree-structured 
information. 
        - Notebook Widget 
        - Spinbox Widget 
        - Combo Box/Drop Down List Widget (appear to be used already) 

&lt;GDA&gt; 
Can you elaborate on the above &amp; what you mean by "issues with the choices of 
widgets" 
&lt;/GDA&gt; 

&lt;DN&gt;
Motif 2.1 has new widgets. Are you making use of the new widgets? We noticed 
that
the combo box widget has been changed in SWT to use the newer motif widget. Our
resident motif guy wants OTI to be aware of the new widgets. That's all.
&lt;/DN&gt;
 
&lt;GDA-2&gt;
Ah, now I understand the nature of the question.
Yes we are aware of the new widgets. 
We believe we're actually using the Spinbox for the Motif example of "how to 
build new widgets using natives" in 
the custom widget doc we are writing.  We are looking at the other widgets, but 
haven't made 
decisions about whether or not to use them. At the moment this is not a 
priority 1.
&lt;/GDA-2&gt;



NOTES:

SN (2/5/01 5:22:03 PM)
	JH looked at the Motif widgets and found them to be lacking.  In 
particular, the tree
	widget did not have enough API to be useful.  We need to revisit this 
decision for
	each native widget.  Not a priority right now.
We can look at this again post R2.0. Also anyone in the community who is keen to use the new widgets should feel free to investigate implementing the current functionality with them.
Moving from Later.
Motif is dead.  We WONTFIX this.</WithStack>
    <WithOutStack>preamble from greg:
	At the moment this is not a request but more of a question/observation 
I wanted to log a pr to at leats capture the discussion.


    - There are some issues with the choices of widgets for the motif 2.1 
implementation of SWT 
        - XmContainer widget to do tree displays 
        - Container Widget/Icon Gadget -  display tabular and tree-structured 
information. 
        - Notebook Widget 
        - Spinbox Widget 
        - Combo Box/Drop Down List Widget (appear to be used already) 

&lt;GDA&gt; 
Can you elaborate on the above &amp; what you mean by "issues with the choices of 
widgets" 
&lt;/GDA&gt; 

&lt;DN&gt;
Motif 2.1 has new widgets. Are you making use of the new widgets? We noticed 
that
the combo box widget has been changed in SWT to use the newer motif widget. Our
resident motif guy wants OTI to be aware of the new widgets. That's all.
&lt;/DN&gt;
 
&lt;GDA-2&gt;
Ah, now I understand the nature of the question.
Yes we are aware of the new widgets. 
We believe we're actually using the Spinbox for the Motif example of "how to 
build new widgets using natives" in 
the custom widget doc we are writing.  We are looking at the other widgets, but 
haven't made 
decisions about whether or not to use them. At the moment this is not a 
priority 1.
&lt;/GDA-2&gt;



NOTES:

SN (2/5/01 5:22:03 PM)
	JH looked at the Motif widgets and found them to be lacking.  In 
particular, the tree
	widget did not have enough API to be useful.  We need to revisit this 
decision for
	each native widget.  Not a priority right now.
We can look at this again post R2.0. Also anyone in the community who is keen to use the new widgets should feel free to investigate implementing the current functionality with them.
Moving from Later.
Motif is dead.  We WONTFIX this.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="4600" />
    <CreationDate amount="2001-10-11 14:19:00 -0400" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>DCR - Need an iterator for widget trees (1G8HL9R)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="703" end="1077" />
        <code>static void traverse (Control control, int level) {
	//DO WORK HERE
	for (int i=0; i&lt;level; i++) System.out.print ("\t");
	System.out.println (control);
	if (control instanceof Composite) {
		Composite composite = (Composite) control;
		Control [] children = composite.getChildren ();
		for (int i=0; i&lt;children.length; i++) {
			traverse (children [i], level + 1);
		}
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>We should provide an iterator that walks all children of a given
	widget.

NOTES:
	CM (2/5/01 8:50:55 PM)
		An iterator! What's wrong with getChildren() ?
		This is awfully 'frameworky' don't you think?   :)

	CM (2/5/01 9:01:20 PM)
		SN to justify.

	McQ (14/02/2001 9:20:13 AM) -
		It's not as obvious as you might think. Consider getChildren versus _getChildren
		versus the widgets used to implement the widgets in the custom package.

	CM (3/8/01 3:57:32 PM)
		Which one do you want? And why? Isn't getItems() good enough for Trees?
Won't do this now.  It's easy enough to write your own recursive or non-
recursive widget tree traversal.  Here is some example code that prints
out the hierarchy.

static void traverse (Control control, int level) {
	//DO WORK HERE
	for (int i=0; i&lt;level; i++) System.out.print ("\t");
	System.out.println (control);
	if (control instanceof Composite) {
		Composite composite = (Composite) control;
		Control [] children = composite.getChildren ();
		for (int i=0; i&lt;children.length; i++) {
			traverse (children [i], level + 1);
		}
	}
}</WithStack>
    <WithOutStack>We should provide an iterator that walks all children of a given
	widget.

NOTES:
	CM (2/5/01 8:50:55 PM)
		An iterator! What's wrong with getChildren() ?
		This is awfully 'frameworky' don't you think?   :)

	CM (2/5/01 9:01:20 PM)
		SN to justify.

	McQ (14/02/2001 9:20:13 AM) -
		It's not as obvious as you might think. Consider getChildren versus _getChildren
		versus the widgets used to implement the widgets in the custom package.

	CM (3/8/01 3:57:32 PM)
		Which one do you want? And why? Isn't getItems() good enough for Trees?
Won't do this now.  It's easy enough to write your own recursive or non-
recursive widget tree traversal.  Here is some example code that prints
out the hierarchy.

static void traverse (Control control, int level) {
	//DO WORK HERE
	for (int i=0; i&lt;level; i++) System.out.print ("\t");
	System.out.println (control);
	if (control instanceof Composite) {
		Composite composite = (Composite) control;
		Control [] children = composite.getChildren ();
		for (int i=0; i&lt;children.length; i++) {
			traverse (children [i], level + 1);
		}
	}
}</WithOutStack>
  </Bug>
</infozilla-output>

