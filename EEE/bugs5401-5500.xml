<?xml version="1.0" encoding="UTF-8"?>
<infozilla-output>
  <Bug>
    <BugId amount="5401" />
    <CreationDate amount="2001-11-01 05:04:00 -0500" />
    <DupId amount="5129" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Would like to copy contents of debug console</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Build 20011025

When in the debug perspective, I'd like to be able to "Copy Ctrl-C" the 
contents of the console to the clipboard.


*** This bug has been marked as a duplicate of 5129 ***</WithStack>
    <WithOutStack>Build 20011025

When in the debug perspective, I'd like to be able to "Copy Ctrl-C" the 
contents of the console to the clipboard.


*** This bug has been marked as a duplicate of 5129 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5402" />
    <CreationDate amount="2001-11-01 05:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Smarter code assist for catch blocks</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functioncall">
        <location start="309" end="335" />
        <code>myinfputStream.read();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Sure would be good if the code assist was smart about the exceptions that could 
be thrown from a try block, and only offer those in a code assist in the 
corresponding catch statement.  The compiler sure warns that an exception is 
not caught, or cannot be caught from a particular try block.

e.g.,
  try {
    myinfputStream.read();
  } catch (

bringing up assist after the "catch (" should offer a list headed by checked 
exceptions from the try block.
This would require a change in the completion engine. Currently it does not even 
resolve the statements inside the catch block (they got optimized out).

Will keep in mind, but not for now.
Reopening
Clearing resolution
Either this approach or the relevance one would be ok.
Defer
Reopen
This feature exists in 3.3. Fixed in a previous build.</WithStack>
    <WithOutStack>Sure would be good if the code assist was smart about the exceptions that could 
be thrown from a try block, and only offer those in a code assist in the 
corresponding catch statement.  The compiler sure warns that an exception is 
not caught, or cannot be caught from a particular try block.

e.g.,
  try {
    myinfputStream.read();
  } catch (

bringing up assist after the "catch (" should offer a list headed by checked 
exceptions from the try block.
This would require a change in the completion engine. Currently it does not even 
resolve the statements inside the catch block (they got optimized out).

Will keep in mind, but not for now.
Reopening
Clearing resolution
Either this approach or the relevance one would be ok.
Defer
Reopen
This feature exists in 3.3. Fixed in a previous build.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5403" />
    <CreationDate amount="2001-11-01 05:12:00 -0500" />
    <DupId amount="5369" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>NPE on closing embedded netscape</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341096061">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.ui.internal.EditorWorkbook.setVisibleEditor(EditorWorkbook.java:613)</Frame>
          <Frame depth="1">org.eclipse.ui.internal.EditorPresentation.setVisibleEditor(EditorPresentation.java:328)</Frame>
          <Frame depth="2">org.eclipse.ui.internal.EditorManager.setVisibleEditor(EditorManager.java:845)</Frame>
          <Frame depth="3">org.eclipse.ui.internal.WorkbenchPage.setActivePart(WorkbenchPage.java:1304)</Frame>
          <Frame depth="4">org.eclipse.ui.internal.WorkbenchPage.closeEditor(WorkbenchPage.java:429)</Frame>
          <Frame depth="5">org.eclipse.ui.internal.EditorPane.doHide(EditorPane.java:75)</Frame>
          <Frame depth="6">org.eclipse.ui.internal.EditorWorkbook$1.itemClosed(EditorWorkbook.java:110)</Frame>
          <Frame depth="7">org.eclipse.swt.custom.CTabFolder.closeNotify(CTabFolder.java:285)</Frame>
          <Frame depth="8">org.eclipse.swt.custom.CTabFolder.onSelection(CTabFolder.java:993)</Frame>
          <Frame depth="9">org.eclipse.swt.custom.CTabFolder.access$8(CTabFolder.java:985)</Frame>
          <Frame depth="10">org.eclipse.swt.custom.CTabFolder$1.handleEvent(CTabFolder.java:204)</Frame>
          <Frame depth="11">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="12">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="13">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))</Frame>
          <Frame depth="14">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))</Frame>
          <Frame depth="15">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="16">org.eclipse.ui.internal.Workbench.run(Workbench.java:695)</Frame>
          <Frame depth="17">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:820)</Frame>
          <Frame depth="18">org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)</Frame>
          <Frame depth="19">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="20">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="21">org.eclipse.core.launcher.Main.run(Main.java:433)</Frame>
          <Frame depth="22">org.eclipse.core.launcher.Main.main(Main.java:306)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>20011025
i opened an html file inside the workbnech
on closin it i got:

java.lang.NullPointerException
	at org.eclipse.ui.internal.EditorWorkbook.setVisibleEditor
(EditorWorkbook.java:613)
	at org.eclipse.ui.internal.EditorPresentation.setVisibleEditor
(EditorPresentation.java:328)
	at org.eclipse.ui.internal.EditorManager.setVisibleEditor
(EditorManager.java:845)
	at org.eclipse.ui.internal.WorkbenchPage.setActivePart
(WorkbenchPage.java:1304)
	at org.eclipse.ui.internal.WorkbenchPage.closeEditor
(WorkbenchPage.java:429)
	at org.eclipse.ui.internal.EditorPane.doHide(EditorPane.java:75)
	at org.eclipse.ui.internal.EditorWorkbook$1.itemClosed
(EditorWorkbook.java:110)
	at org.eclipse.swt.custom.CTabFolder.closeNotify(CTabFolder.java:285)
	at org.eclipse.swt.custom.CTabFolder.onSelection(CTabFolder.java:993)
	at org.eclipse.swt.custom.CTabFolder.access$8(CTabFolder.java:985)
	at org.eclipse.swt.custom.CTabFolder$1.handleEvent(CTabFolder.java:204)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java
(Compiled Code))
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:695)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:820)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:433)
	at org.eclipse.core.launcher.Main.main(Main.java:306)


*** This bug has been marked as a duplicate of 5369 ***</WithStack>
    <WithOutStack>20011025
i opened an html file inside the workbnech
on closin it i got:




*** This bug has been marked as a duplicate of 5369 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5404" />
    <CreationDate amount="2001-11-01 05:13:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Extract method with 'continue' statement not possible</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="78" end="133" />
        <code>for (int k= 0; k &lt; contents.getLength(); k++) {...}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>1. Open WorkingSetReader (1.1)</Line>
          <Line>2. Select the full for-statement in readXML():</Line>
          <Line />
          <Line>3. Extract method</Line>
          <Line>==&gt; dialog says, it's not possible to do so because of the 'continue' statement</Line>
          <Line>Problem is a wrong position correction in statement analyzer.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1. Open WorkingSetReader (1.1)
2. Select the full for-statement in readXML():
    for (int k= 0; k &lt; contents.getLength(); k++) {...}
3. Extract method
==&gt; dialog says, it's not possible to do so because of the 'continue' statement
Problem is a wrong position correction in statement analyzer.

Fixed in build &gt; 20011107</WithStack>
    <WithOutStack>1. Open WorkingSetReader (1.1)
2. Select the full for-statement in readXML():
    for (int k= 0; k &lt; contents.getLength(); k++) {...}
3. Extract method
==&gt; dialog says, it's not possible to do so because of the 'continue' statement
Problem is a wrong position correction in statement analyzer.

Fixed in build &gt; 20011107</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5405" />
    <CreationDate amount="2001-11-01 05:37:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>self encapsulate field: little ui glitches</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="9">
        <Lines>
          <Line>1. no magic ... in the menu entry</Line>
          <Line>2. 'getting method name' should be just 'getter name' (that's what we use</Line>
          <Line>elsewhere in the ui)</Line>
          <Line>3. same for setter</Line>
          <Line>4. if the field is already private -</Line>
          <Line>it should not try to change its visiblity again</Line>
          <Line>5. should give an option to encapsulate even accesses in the same class</Line>
          <Line>Fixed 1, 2, 3 for build &gt; 20020205</Line>
          <Line>Fixed 4 and 5 for build &gt; 20020215</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1. no magic ... in the menu entry
2. 'getting method name' should be just 'getter name' (that's what we use 
elsewhere in the ui)
3. same for setter
4. if the field is already private - 
it should not try to change its visiblity again
5. should give an option to encapsulate even accesses in the same class
Fixed 1, 2, 3 for build &gt; 20020205
Fixed 4 and 5 for build &gt; 20020215</WithStack>
    <WithOutStack>1. no magic ... in the menu entry
2. 'getting method name' should be just 'getter name' (that's what we use 
elsewhere in the ui)
3. same for setter
4. if the field is already private - 
it should not try to change its visiblity again
5. should give an option to encapsulate even accesses in the same class
Fixed 1, 2, 3 for build &gt; 20020205
Fixed 4 and 5 for build &gt; 20020215</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5406" />
    <CreationDate amount="2001-11-01 05:38:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="WebDAV" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Contexts do not support multiple header lines with same key</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Build 20011025

HTTP/1.1 allows multiple header lines with the same 'key', e.g.,

Allow: GET
Allow: PUT

In teh current implementation the last header line overwrites all others, so 
the net result is:

Allow: PUT

instead of the correct interpretation:

Allow: GET, PUT
Deferring until post 2.0.
[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.</WithStack>
    <WithOutStack>Build 20011025

HTTP/1.1 allows multiple header lines with the same 'key', e.g.,

Allow: GET
Allow: PUT

In teh current implementation the last header line overwrites all others, so 
the net result is:

Allow: PUT

instead of the correct interpretation:

Allow: GET, PUT
Deferring until post 2.0.
[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5407" />
    <CreationDate amount="2001-11-01 05:40:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>self encapsulate field: incorrect write access</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="class">
        <location start="0" end="37" />
        <code>public class RE {
	static Object e;
}</code>
      </source_code>
      <source_code type="class">
        <location start="38" end="85" />
        <code>class REE{
	public void g(){
		RE.e= null;
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>public class RE {
	static Object e;
}
class REE{
	public void g(){
		RE.e= null;
	}
}

perform the SEF on Re.e -&gt; copiler errors
Fixed in build &gt; 20020205
verified in 20020212-I</WithStack>
    <WithOutStack>public class RE {
	static Object e;
}
class REE{
	public void g(){
		RE.e= null;
	}
}

perform the SEF on Re.e -&gt; copiler errors
Fixed in build &gt; 20020205
verified in 20020212-I</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5408" />
    <CreationDate amount="2001-11-01 05:41:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>self encapsulate field: fooled by a field name</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="class">
        <location start="0" end="38" />
        <code>public class RE {
	static Object RE;
}</code>
      </source_code>
      <source_code type="class">
        <location start="149" end="191" />
        <code>public class RE {
 private static RE RE;
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1. do the SEF</Line>
          <Line>2. compiler errors</Line>
          <Line>in a corner case - this leads to a semantic change with no compiler errors:</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>public class RE {
	static Object RE;
}

1. do the SEF
2. compiler errors
in a corner case - this leads to a semantic change with no compiler errors:
public class RE {
 private static RE RE;
}
Fixed in build &gt; 20020105
verified in 20020212-I</WithStack>
    <WithOutStack>public class RE {
	static Object RE;
}

1. do the SEF
2. compiler errors
in a corner case - this leads to a semantic change with no compiler errors:
public class RE {
 private static RE RE;
}
Fixed in build &gt; 20020105
verified in 20020212-I</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5409" />
    <CreationDate amount="2001-11-01 05:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="WebDAV" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>HttpClient fails to look up authorization authority correctly</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20011025

If the authentication challenge comes in as BASIC the authenticator tries to 
find BASICAuthority, whereas the class is known as BasicAuthority.

Have to check the legal representations of authority name, but we should grok 
mixed case.
Code now normalizes to initial caps reaminder lowercase (i.e., Digest and Basic)</WithStack>
    <WithOutStack>Build 20011025

If the authentication challenge comes in as BASIC the authenticator tries to 
find BASICAuthority, whereas the class is known as BasicAuthority.

Have to check the legal representations of authority name, but we should grok 
mixed case.
Code now normalizes to initial caps reaminder lowercase (i.e., Digest and Basic)</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5410" />
    <CreationDate amount="2001-11-01 05:45:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="WebDAV" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="major" />
    <Summery>DAVClient doesn't close down the http client</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20011025

The DAVClient doesn't close down the http client, which means that the http 
client connections recycler thread is never interrupted, and the program never 
ends.
API change.

API clients are now expected to close() instances of DAVClient.  For remote 
clients, this will have the effect of closing the http client instance and 
interrupting the connection recycler.</WithStack>
    <WithOutStack>Build 20011025

The DAVClient doesn't close down the http client, which means that the http 
client connections recycler thread is never interrupted, and the program never 
ends.
API change.

API clients are now expected to close() instances of DAVClient.  For remote 
clients, this will have the effect of closing the http client instance and 
interrupting the connection recycler.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5411" />
    <CreationDate amount="2001-11-01 05:50:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>bracket matching: incorrect rectangle drawn</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="class">
        <location start="16" end="35" />
        <code>public class RE {
}</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="93" end="102" />
        <code>voif (){}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1. create this:</Line>
          <Line />
          <Line />
          <Line>2. type the following (syntactically incorrect) method:</Line>
          <Line />
          <Line />
          <Line>3. the pink (why pink btw?) rectangle is very incorrect</Line>
          <Line>Not reproducable</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>1. create this:
public class RE {
}

2. type the following (syntactically incorrect) method:
voif (){}

3. the pink (why pink btw?) rectangle is very incorrect
Not reproducable</WithStack>
    <WithOutStack>1. create this:
public class RE {
}

2. type the following (syntactically incorrect) method:
voif (){}

3. the pink (why pink btw?) rectangle is very incorrect
Not reproducable</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5412" />
    <CreationDate amount="2001-11-01 06:02:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>bracket matching: should have a way to disable it</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>bracket matching should be a settable preference
eventually, it can be a preference, but to improve it we will force it on 
users.
Build 20011113.</WithStack>
    <WithOutStack>bracket matching should be a settable preference
eventually, it can be a preference, but to improve it we will force it on 
users.
Build 20011113.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5413" />
    <CreationDate amount="2001-11-01 08:11:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>incorrect class source range</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="13">
      <source_code type="package">
        <location start="0" end="24" />
        <code>package junit.framework;</code>
      </source_code>
      <source_code type="class">
        <location start="25" end="55" />
        <code>public class A {
	void t(){}
}</code>
      </source_code>
      <source_code type="class">
        <location start="56" end="165" />
        <code>class B extends A{
	public void f(){
	}
	public void second(int y){}
	public void s(){}
	public void sd(){}
}</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="166" end="187" />
        <code>//class C extends A{</code>
      </source_code>
      <source_code type="class">
        <location start="166" end="204" />
        <code>//class C extends A{
//	void f(){}
//}</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="201" end="205" />
        <code>//}</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="205" end="226" />
        <code>//class E extends A{</code>
      </source_code>
      <source_code type="class">
        <location start="205" end="277" />
        <code>//class E extends A{
//	private void f(){}
//	public void second(){}
//}</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="274" end="278" />
        <code>//}</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="278" end="299" />
        <code>//class F extends A{</code>
      </source_code>
      <source_code type="class">
        <location start="278" end="330" />
        <code>//class F extends A{
//	protected void f(){
//	}
//}</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="327" end="331" />
        <code>//}</code>
      </source_code>
      <source_code type="class">
        <location start="331" end="379" />
        <code>class G extends A{
	public int sd(){return 0;}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>package junit.framework;
public class A {
	void t(){}
}
class B extends A{
	public void f(){
	}
	public void second(int y){}
	public void s(){}
	public void sd(){}
}
//class C extends A{
//	void f(){}
//}
//class E extends A{
//	private void f(){}
//	public void second(){}
//}
//class F extends A{
//	protected void f(){
//	}
//}
class G extends A{
	public int sd(){return 0;}
}

source range for G includes 1 line of comment from another class
The fix is located in the checkAnnotion() method of the Parser. But fixing this 
problem breaks a lot of in the JDOM code and the JDOM tests. JDOM includes the 
comment preceeding a member even if this comment is not a javadoc comment.
So we cannot break this code right now and we have to defer this PR till the 
actual JDOM implementation is replaced with the new DOM nodes.
Fix released in HEAD. Change in the Parse::checkAnnotation()</WithStack>
    <WithOutStack>package junit.framework;
public class A {
	void t(){}
}
class B extends A{
	public void f(){
	}
	public void second(int y){}
	public void s(){}
	public void sd(){}
}
//class C extends A{
//	void f(){}
//}
//class E extends A{
//	private void f(){}
//	public void second(){}
//}
//class F extends A{
//	protected void f(){
//	}
//}
class G extends A{
	public int sd(){return 0;}
}

source range for G includes 1 line of comment from another class
The fix is located in the checkAnnotion() method of the Parser. But fixing this 
problem breaks a lot of in the JDOM code and the JDOM tests. JDOM includes the 
comment preceeding a member even if this comment is not a javadoc comment.
So we cannot break this code right now and we have to defer this PR till the 
actual JDOM implementation is replaced with the new DOM nodes.
Fix released in HEAD. Change in the Parse::checkAnnotation()</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5414" />
    <CreationDate amount="2001-11-01 10:48:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>ArrayIndexOutOfBoundsException in Signature</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341096068">
        <Exception>org.eclipse.swt.SWTException</Exception>
        <Reason>java.lang.ArrayIndexOutOfBoundsException: 4</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.jdt.core.Signature.createTypeSignature(Signature.java(Compiled Code))</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.core.SourceFieldElementInfo.getTypeSignature(SourceFieldElementInfo.java:53)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.core.SourceField.getTypeSignature(SourceField.java:48)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getFieldLabel(JavaElementLabels.java:379)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="184" end="297" />
        <code>public class X {

	void foo(){
		
		System.out.println(
			new Runnable(){
				&lt;CODE ASSIST HERE&gt;
			}
		);
	}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Had the following Exception:

org.eclipse.swt.SWTException: java.lang.ArrayIndexOutOfBoundsException: 4
	at org.eclipse.jdt.core.Signature.createTypeSignature(Signature.java
(Compiled Code))
	at org.eclipse.jdt.internal.core.SourceFieldElementInfo.getTypeSignature
(SourceFieldElementInfo.java:53)
	at org.eclipse.jdt.internal.core.SourceField.getTypeSignature
(SourceField.java:48)
	at 
org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getFieldLabel
(JavaElementLabels.java:379)

I guess the problem is that createTypeSignature switch clause misses 'break' 
statements for some choices.
Was able to reproduce on a simpler example:

public class X {

	void foo(){
		
		System.out.println(
			new Runnable(){
				&lt;CODE ASSIST HERE&gt;
			}
		);
	}

}

Then select method 'run()' and insert it, the walkback occurs right after it in 
the UI (suspecting it triggers automatically another code assist at this point, 
which is the one crashing us).
Ignore my previous comment it was related to 5618.
Fixed</WithStack>
    <WithOutStack>Had the following Exception:



I guess the problem is that createTypeSignature switch clause misses 'break' 
statements for some choices.
Was able to reproduce on a simpler example:

public class X {

	void foo(){
		
		System.out.println(
			new Runnable(){
				&lt;CODE ASSIST HERE&gt;
			}
		);
	}

}

Then select method 'run()' and insert it, the walkback occurs right after it in 
the UI (suspecting it triggers automatically another code assist at this point, 
which is the one crashing us).
Ignore my previous comment it was related to 5618.
Fixed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5415" />
    <CreationDate amount="2001-11-01 10:51:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Plugin Name in Plugin Registery is wrong</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>In build 20011025, the Plugin Name for the org.eclipse.jdt.debug_0.9.0 and 
org.eclipse.debug.core_0.9.0 does not appear properly in the plugin registry 
(Perspective/Show View/Other... + PDE Runtime/Plugin Registry). This is due to 
the fact that the plugin.properties files are not included with the plugins.
Could be a "build.properties" problem.
Updated build.properties files to inlcude "plugin.properties"

Please verify (Joe).
Re-openning to...
Re-assign
Please verify
Verified.</WithStack>
    <WithOutStack>In build 20011025, the Plugin Name for the org.eclipse.jdt.debug_0.9.0 and 
org.eclipse.debug.core_0.9.0 does not appear properly in the plugin registry 
(Perspective/Show View/Other... + PDE Runtime/Plugin Registry). This is due to 
the fact that the plugin.properties files are not included with the plugins.
Could be a "build.properties" problem.
Updated build.properties files to inlcude "plugin.properties"

Please verify (Joe).
Re-openning to...
Re-assign
Please verify
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5416" />
    <CreationDate amount="2001-11-01 11:24:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Bracket highlighting doesn't disappear</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>- open a Java CU</Line>
          <Line>- position the cursor so that brackets are highlighted</Line>
          <Line>- now go to the ouliner and select a different method</Line>
          <Line>- delete that method using the context menu</Line>
          <Line>observe: highlighting is still active but highlights wrong positions</Line>
          <Line>Fixed build &gt; 20011101.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Version:
  Smoke 207

Steps to reproduce
- open a Java CU
- position the cursor so that brackets are highlighted
- now go to the ouliner and select a different method
- delete that method using the context menu
observe: highlighting is still active but highlights wrong positions
Fixed build &gt; 20011101.</WithStack>
    <WithOutStack>Version:
  Smoke 207

Steps to reproduce
- open a Java CU
- position the cursor so that brackets are highlighted
- now go to the ouliner and select a different method
- delete that method using the context menu
observe: highlighting is still active but highlights wrong positions
Fixed build &gt; 20011101.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5417" />
    <CreationDate amount="2001-11-01 11:32:00 -0500" />
    <DupId amount="5901" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>test fails - MethodEntryBreakpointTests#testDeferredHitCount()</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>This test always fails for me when I run it. There appears to be a subtle 
timing issue, as if I debug, and step through it, the test passes. For some 
reason, the variables of the top stack frame are not being refreshed properly, 
and the test cannot find the local variable named "product".


*** This bug has been marked as a duplicate of 5901 ***</WithStack>
    <WithOutStack>This test always fails for me when I run it. There appears to be a subtle 
timing issue, as if I debug, and step through it, the test passes. For some 
reason, the variables of the top stack frame are not being refreshed properly, 
and the test cannot find the local variable named "product".


*** This bug has been marked as a duplicate of 5901 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5418" />
    <CreationDate amount="2001-11-01 11:55:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>bracket marker stays in editor</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functiondef">
        <location start="0" end="51" />
        <code>private void showDebugSourcePage(String typeName) {</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="52" end="92" />
        <code>if (dialog.open() == dialog.OK) {
	
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. set the cursor after the opening bracket (after dialog.OK)</Line>
          <Line>2. press enter</Line>
          <Line>3. The bracket box includes all characters insterted by the auto indenter</Line>
          <Line>Fixed build &gt; 20011101</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>private void showDebugSourcePage(String typeName) {
		if (dialog.open() == dialog.OK) {
	
	}
1. set the cursor after the opening bracket (after dialog.OK)
2. press enter
3. The bracket box includes all characters insterted by the auto indenter
Fixed build &gt; 20011101</WithStack>
    <WithOutStack>private void showDebugSourcePage(String typeName) {
		if (dialog.open() == dialog.OK) {
	
	}
1. set the cursor after the opening bracket (after dialog.OK)
2. press enter
3. The bracket box includes all characters insterted by the auto indenter
Fixed build &gt; 20011101</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5419" />
    <CreationDate amount="2001-11-01 12:01:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>menu icon inconsistency</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>the way we use icons in menus it very messy - sometimes you get the, sometimes 
you don't.
seach has them, editor does, outliner does not.
why don't we use them everywhere?
The rule seems to be that View menus have no icon so it looks consistent.
Moving to UI for comment.
'build' has it - 'rebuild all' does not
some editor menu entries have them, some don't
first level menus in package view do - second level do not (same for outliner)
some entries in the global 'edit' menu have icons - not all
same for the global 'file' menu

looks random

It is used when there is a toolbar item that matches the menu item as a breadcrumb</WithStack>
    <WithOutStack>the way we use icons in menus it very messy - sometimes you get the, sometimes 
you don't.
seach has them, editor does, outliner does not.
why don't we use them everywhere?
The rule seems to be that View menus have no icon so it looks consistent.
Moving to UI for comment.
'build' has it - 'rebuild all' does not
some editor menu entries have them, some don't
first level menus in package view do - second level do not (same for outliner)
some entries in the global 'edit' menu have icons - not all
same for the global 'file' menu

looks random

It is used when there is a toolbar item that matches the menu item as a breadcrumb</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5420" />
    <CreationDate amount="2001-11-01 12:06:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P1" />
    <bug_severity amount="major" />
    <Summery>Eclipse crash after after NPE during code assist (template)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341096073">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason>java.lang.NullPointerException</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.ui.text.link.LinkedPositionUI.paintControl(LinkedPositionUI.java:275)</Frame>
          <Frame depth="1">org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java(Compiled Code))</Frame>
          <Frame depth="2">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java(Compiled Code))</Frame>
          <Frame depth="3">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java(Compiled Code))</Frame>
          <Frame depth="4">org.eclipse.swt.widgets.Composite.WM_PAINT(Composite.java(Compiled Code))</Frame>
          <Frame depth="5">org.eclipse.swt.widgets.Control.windowProc(Control.java(Compiled Code))</Frame>
          <Frame depth="6">org.eclipse.swt.widgets.Display.windowProc(Display.java(Compiled Code))</Frame>
          <Frame depth="7">org.eclipse.swt.internal.win32.OS.RedrawWindow(Native Method)</Frame>
          <Frame depth="8">org.eclipse.swt.widgets.Control.update(Control.java(Compiled Code))</Frame>
          <Frame depth="9">org.eclipse.swt.widgets.Display.update(Display.java:1694)</Frame>
          <Frame depth="10">org.eclipse.jface.window.Window.runEventLoop(Window.java(Compiled Code))</Frame>
          <Frame depth="11">org.eclipse.jface.window.Window.open(Window.java:523)</Frame>
          <Frame depth="12">org.eclipse.jface.dialogs.MessageDialog.openError(MessageDialog.java:318)</Frame>
          <Frame depth="13">org.eclipse.ui.internal.Workbench.handleExceptionInEventLoop(Workbench.java:363)</Frame>
          <Frame depth="14">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="15">org.eclipse.ui.internal.Workbench.run(Workbench.java:695)</Frame>
          <Frame depth="16">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:820)</Frame>
          <Frame depth="17">org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)</Frame>
          <Frame depth="18">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="19">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="20">org.eclipse.core.launcher.Main.run(Main.java:433)</Frame>
          <Frame depth="21">org.eclipse.core.launcher.UIMain.main(UIMain.java:43)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>I selected toArray template and quickly press DEL because I accidentally 
selected the template.
==&gt; Dialog: internal error
!!! Eclipse crashed after pressing OK

Unhandled exception caught in event loop.
Reason:
java.lang.NullPointerException
java.lang.NullPointerException
        at 
org.eclipse.jdt.internal.ui.text.link.LinkedPositionUI.paintControl(LinkedPositi
onUI.java:275)
        at 
org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java(Compiled 
Code))
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java(Compiled Code))
        at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java(Compiled Code))
        at org.eclipse.swt.widgets.Composite.WM_PAINT(Composite.java(Compiled 
Code))
        at org.eclipse.swt.widgets.Control.windowProc(Control.java(Compiled 
Code))
        at org.eclipse.swt.widgets.Display.windowProc(Display.java(Compiled 
Code))
        at org.eclipse.swt.internal.win32.OS.RedrawWindow(Native Method)
        at org.eclipse.swt.widgets.Control.update(Control.java(Compiled Code))
        at org.eclipse.swt.widgets.Display.update(Display.java:1694)
        at org.eclipse.jface.window.Window.runEventLoop(Window.java(Compiled 
Code))
        at org.eclipse.jface.window.Window.open(Window.java:523)
        at 
org.eclipse.jface.dialogs.MessageDialog.openError(MessageDialog.java:318)
        at 
org.eclipse.ui.internal.Workbench.handleExceptionInEventLoop(Workbench.java:363)
        at 
org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))
        at org.eclipse.ui.internal.Workbench.run(Workbench.java:695)
        at 
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:82
0)
        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)
        at java.lang.reflect.Method.invoke(Native Method)
        at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
        at org.eclipse.core.launcher.Main.run(Main.java:433)
        at org.eclipse.core.launcher.UIMain.main(UIMain.java:43)
I assume you were using 206. There's no statement at line 275 in 207.
I had fixed an NPE in that method for 207.</WithStack>
    <WithOutStack>I selected toArray template and quickly press DEL because I accidentally 
selected the template.
==&gt; Dialog: internal error
!!! Eclipse crashed after pressing OK

Unhandled exception caught in event loop.
Reason:

I assume you were using 206. There's no statement at line 275 in 207.
I had fixed an NPE in that method for 207.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5421" />
    <CreationDate amount="2001-11-01 12:13:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Detail area does not update while stepping</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>If I have the variable detail area showing, and I have selected a vector, 
the "toString()" of the vector does not update as I add elements to the vector 
(stepping over code). The variables view does update.
Fixed.
please verify
Verified.</WithStack>
    <WithOutStack>If I have the variable detail area showing, and I have selected a vector, 
the "toString()" of the vector does not update as I add elements to the vector 
(stepping over code). The variables view does update.
Fixed.
please verify
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5422" />
    <CreationDate amount="2001-11-01 12:15:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Allow detail area to split vertical or horizontal</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The detail area in the variables view should be configurable as vertical or 
horizaontally split. See the class hierachy view as an example (triangle menu 
allows configuration)
As detailed in the spec for this feature, this is controlled via a preference 
in the debug preference page.
OK. This feels sufficient - we will leave as a preference for now, and see if 
any users require the functionality in the actual viewer.
Verified.</WithStack>
    <WithOutStack>The detail area in the variables view should be configurable as vertical or 
horizaontally split. See the class hierachy view as an example (triangle menu 
allows configuration)
As detailed in the spec for this feature, this is controlled via a preference 
in the debug preference page.
OK. This feels sufficient - we will leave as a preference for now, and see if 
any users require the functionality in the actual viewer.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5423" />
    <CreationDate amount="2001-11-01 12:56:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Releng" />
    <Version amount="1.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>License Redistribution missing platform.properties copy note</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The instructions in the license redistribution attachment instruct ISVs that 
will repackage the platform to copy the platform.ini file for use in their 
plugin dir pointed to by the install.properties file.  

These instructions should also state that the platform.properties file should 
also be copied to the new plugin dir that supports their configuration.
Instructions will be corrected for 2.0.

As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>The instructions in the license redistribution attachment instruct ISVs that 
will repackage the platform to copy the platform.ini file for use in their 
plugin dir pointed to by the install.properties file.  

These instructions should also state that the platform.properties file should 
also be copied to the new plugin dir that supports their configuration.
Instructions will be corrected for 2.0.

As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5424" />
    <CreationDate amount="2001-11-01 12:58:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>bracket matching: rectangle is too intrusive</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>i like the previous 'bolding' solution much better - 
the little pink rectangle interferes way too much with my typing, 
which makes me want to turn this (useful in general) feature off right 
immediately.
this is not really an issuse anymore - the rectangle is shown only on the 
_other_ bracket (no the one i'm at).

ok (with me) to close
notice that bolding isn't an option since it results in flicker when using a 
proportional font.

closing</WithStack>
    <WithOutStack>i like the previous 'bolding' solution much better - 
the little pink rectangle interferes way too much with my typing, 
which makes me want to turn this (useful in general) feature off right 
immediately.
this is not really an issuse anymore - the rectangle is shown only on the 
_other_ bracket (no the one i'm at).

ok (with me) to close
notice that bolding isn't an option since it results in flicker when using a 
proportional font.

closing</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5425" />
    <CreationDate amount="2001-11-01 13:11:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Exception on CodeAssist</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="import">
        <location start="108" end="130" />
        <code>import java.util.List;</code>
      </source_code>
      <source_code type="class">
        <location start="132" end="306" />
        <code>public class A {
	static	abstract class AList implements List{
	};
		
	public void foo() {

		new AList() {
			public void add(int location, Object object) {
			}


		};
	}
}</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2480" end="2541" />
        <code>()[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1. Create the following class</Line>
          <Line>2. Code assist after 'add('</Line>
          <Line>3. Walkback appended</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1. Create the following class
2. Code assist after 'add('
3. Walkback appended

---------------------------
import java.util.List;

public class A {
	static	abstract class AList implements List{
	};
		
	public void foo() {

		new AList() {
			public void add(int location, Object object) {
			}


		};
	}
}

}
---------------------------
   java/lang/Throwable.&lt;init&gt;()V
   java/lang/Throwable.&lt;init&gt;(Ljava/lang/String;)V
   java/lang/NullPointerException.&lt;init&gt;(Ljava/lang/String;)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.findMethodParameterNames
(Lorg/eclipse/jdt/internal/compiler/lookup/MethodBinding;[[C)[[C
   
org/eclipse/jdt/internal/codeassist/CompletionEngine.findLocalMethodDeclarations
([C
[Lorg/eclipse/jdt/internal/compiler/lookup/MethodBinding;Lorg/eclipse/jdt/intern
al/compiler/lookup/Scope;Lorg/eclipse/jdt/internal/compiler/util/ObjectVector;ZZ
Lorg/eclipse/jdt/internal/compiler/lookup/ReferenceBinding;)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.findMethods([C
[Lorg/eclipse/jdt/internal/compiler/lookup/TypeBinding;Lorg/eclipse/jdt/internal
/compiler/lookup/ReferenceBinding;Lorg/eclipse/jdt/internal/compiler/lookup/Scop
e;Lorg/eclipse/jdt/internal/compiler/util/ObjectVector;ZZZLorg/eclipse/jdt/inter
nal/compiler/lookup/InvocationSite;Lorg/eclipse/jdt/internal/compiler/lookup/Sco
pe;Z)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.complete
(Lorg/eclipse/jdt/internal/compiler/ast/AstNode;Lorg/eclipse/jdt/internal/compil
er/lookup/Binding;Lorg/eclipse/jdt/internal/compiler/lookup/Scope;)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.complete
(Lorg/eclipse/jdt/internal/compiler/env/ICompilationUnit;I)V
   org/eclipse/jdt/internal/core/Openable.codeComplete
(Lorg/eclipse/jdt/internal/compiler/env/ICompilationUnit;Lorg/eclipse/jdt/intern
al/compiler/env/ICompilationUnit;ILorg/eclipse/jdt/core/ICodeCompletionRequestor
;)V
   org/eclipse/jdt/internal/core/CompilationUnit.codeComplete
(ILorg/eclipse/jdt/core/ICodeCompletionRequestor;)V
   
org/eclipse/jdt/internal/ui/text/java/JavaCompletionProcessor.computeCompletionP
roposals(Lorg/eclipse/jface/text/ITextViewer;I)
[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
   
org/eclipse/jface/text/contentassist/ContentAssistant.computeCompletionProposals
(Lorg/eclipse/jface/text/ITextViewer;I)
[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
   org/eclipse/jface/text/contentassist/CompletionProposalPopup.computeProposals
()[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
   org/eclipse/jface/text/contentassist/CompletionProposalPopup.access$0
(Lorg/eclipse/jface/text/contentassist/CompletionProposalPopup;)
[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
version is 11025
Please investigate.
Fixed</WithStack>
    <WithOutStack>1. Create the following class
2. Code assist after 'add('
3. Walkback appended

---------------------------
import java.util.List;

public class A {
	static	abstract class AList implements List{
	};
		
	public void foo() {

		new AList() {
			public void add(int location, Object object) {
			}


		};
	}
}

}
---------------------------
   java/lang/Throwable.&lt;init&gt;()V
   java/lang/Throwable.&lt;init&gt;(Ljava/lang/String;)V
   java/lang/NullPointerException.&lt;init&gt;(Ljava/lang/String;)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.findMethodParameterNames
(Lorg/eclipse/jdt/internal/compiler/lookup/MethodBinding;[[C)[[C
   
org/eclipse/jdt/internal/codeassist/CompletionEngine.findLocalMethodDeclarations
([C
[Lorg/eclipse/jdt/internal/compiler/lookup/MethodBinding;Lorg/eclipse/jdt/intern
al/compiler/lookup/Scope;Lorg/eclipse/jdt/internal/compiler/util/ObjectVector;ZZ
Lorg/eclipse/jdt/internal/compiler/lookup/ReferenceBinding;)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.findMethods([C
[Lorg/eclipse/jdt/internal/compiler/lookup/TypeBinding;Lorg/eclipse/jdt/internal
/compiler/lookup/ReferenceBinding;Lorg/eclipse/jdt/internal/compiler/lookup/Scop
e;Lorg/eclipse/jdt/internal/compiler/util/ObjectVector;ZZZLorg/eclipse/jdt/inter
nal/compiler/lookup/InvocationSite;Lorg/eclipse/jdt/internal/compiler/lookup/Sco
pe;Z)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.complete
(Lorg/eclipse/jdt/internal/compiler/ast/AstNode;Lorg/eclipse/jdt/internal/compil
er/lookup/Binding;Lorg/eclipse/jdt/internal/compiler/lookup/Scope;)V
   org/eclipse/jdt/internal/codeassist/CompletionEngine.complete
(Lorg/eclipse/jdt/internal/compiler/env/ICompilationUnit;I)V
   org/eclipse/jdt/internal/core/Openable.codeComplete
(Lorg/eclipse/jdt/internal/compiler/env/ICompilationUnit;Lorg/eclipse/jdt/intern
al/compiler/env/ICompilationUnit;ILorg/eclipse/jdt/core/ICodeCompletionRequestor
;)V
   org/eclipse/jdt/internal/core/CompilationUnit.codeComplete
(ILorg/eclipse/jdt/core/ICodeCompletionRequestor;)V
   
org/eclipse/jdt/internal/ui/text/java/JavaCompletionProcessor.computeCompletionP
roposals(Lorg/eclipse/jface/text/ITextViewer;I)
[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
   
org/eclipse/jface/text/contentassist/ContentAssistant.computeCompletionProposals
(Lorg/eclipse/jface/text/ITextViewer;I)
[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
   org/eclipse/jface/text/contentassist/CompletionProposalPopup.computeProposals
()[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
   org/eclipse/jface/text/contentassist/CompletionProposalPopup.access$0
(Lorg/eclipse/jface/text/contentassist/CompletionProposalPopup;)
[Lorg/eclipse/jface/text/contentassist/ICompletionProposal;
version is 11025
Please investigate.
Fixed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5426" />
    <CreationDate amount="2001-11-01 13:19:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>CodeAssist returns empty completion</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="155" end="237" />
        <code>public class A {
	public void goo(int i) {
	}
		
	public void foo() {
		goo(
	}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1. In the given class do a code assist after 'goo('.</Line>
          <Line>2. You get one completion proposal, but completion name is empty (should be</Line>
          <Line>closing bracket?)</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>11025
1. In the given class do a code assist after 'goo('.
2. You get one completion proposal, but completion name is empty (should be 
closing bracket?)

public class A {
	public void goo(int i) {
	}
		
	public void foo() {
		goo(
	}

}
No, it simply recalls what method you chose previously, the intent is not that 
it inserts anything more than what you already have.

The closing parenthesis would have been provided when you inserted the method on 
a completion selector (before the opening parenthesis).</WithStack>
    <WithOutStack>11025
1. In the given class do a code assist after 'goo('.
2. You get one completion proposal, but completion name is empty (should be 
closing bracket?)

public class A {
	public void goo(int i) {
	}
		
	public void foo() {
		goo(
	}

}
No, it simply recalls what method you chose previously, the intent is not that 
it inserts anything more than what you already have.

The closing parenthesis would have been provided when you inserted the method on 
a completion selector (before the opening parenthesis).</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5427" />
    <CreationDate amount="2001-11-01 13:20:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Doc" />
    <Version amount="1.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Workbench Help: eclipse splash appears in error</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. inappropriate place for product branding</Line>
          <Line>2. visual noise in the interface</Line>
          <Line>3. leads to wrong expectations around providing "product identiy" to</Line>
          <Line>sub-solution components when they appear as information sets.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The eclipse splash should not show up in the Help, as it does in
EclipseSplashHelp.gif. Is it possible to correct this in time for WSAD GA?


We deliberately decided not to use splash screens to identify Help
information sets in Workbench 1.0,  and I have just received agreement from
Jeannette Deupree to comply with this for WSAD help. I wanted splash
screens removed from the help content area, because:

1. inappropriate place for product branding
2. visual noise in the interface
3. leads to wrong expectations around providing "product identiy" to
sub-solution components when they appear as information sets.

Even though it does not act as a header for the Platform Plug-in Developer
Guide, the eclipse spash shown in the sub-section Programmers Guide/Welcome
to Eclipse should not be used, as it also misuses and creates confusion
around branding, is visually noisy.

There are problems with the alternative I provided for Workbench -  the
header graphic background consisting of blue wash and underline; these
appear on blank pages when they should head up content, but that is an
issue to be resolved separately from spash screen usage.
The infosets that do not require a splash screen should not provide an "href" 
attribute. By default, the splash for such infosets is a small banner labelled 
with the "label" attribute of the infoset. 
So, define the infosets as
&lt;infoset label="My Title"&gt;
   &lt;infoview .....&gt;
   etc.

You can find examples in the actual eclipse documentation plugins.


For the html content containing "splash" images, such as the one described, the 
help system cannot do anything.
I will forward this to the documentation component.
This bug refers to html content, and it is not related to the actual help 
infrastructure. The page is org.eclipse.platform.doc.isv/guide/int.htm

removed splash from int.htm
Note:  this file has little content.  It says "Welcome to Eclipse" and as such 
wouldn't be of use to WSAD anyway, but I removed the splash nonetheless.</WithStack>
    <WithOutStack>The eclipse splash should not show up in the Help, as it does in
EclipseSplashHelp.gif. Is it possible to correct this in time for WSAD GA?


We deliberately decided not to use splash screens to identify Help
information sets in Workbench 1.0,  and I have just received agreement from
Jeannette Deupree to comply with this for WSAD help. I wanted splash
screens removed from the help content area, because:

1. inappropriate place for product branding
2. visual noise in the interface
3. leads to wrong expectations around providing "product identiy" to
sub-solution components when they appear as information sets.

Even though it does not act as a header for the Platform Plug-in Developer
Guide, the eclipse spash shown in the sub-section Programmers Guide/Welcome
to Eclipse should not be used, as it also misuses and creates confusion
around branding, is visually noisy.

There are problems with the alternative I provided for Workbench -  the
header graphic background consisting of blue wash and underline; these
appear on blank pages when they should head up content, but that is an
issue to be resolved separately from spash screen usage.
The infosets that do not require a splash screen should not provide an "href" 
attribute. By default, the splash for such infosets is a small banner labelled 
with the "label" attribute of the infoset. 
So, define the infosets as
&lt;infoset label="My Title"&gt;
   &lt;infoview .....&gt;
   etc.

You can find examples in the actual eclipse documentation plugins.


For the html content containing "splash" images, such as the one described, the 
help system cannot do anything.
I will forward this to the documentation component.
This bug refers to html content, and it is not related to the actual help 
infrastructure. The page is org.eclipse.platform.doc.isv/guide/int.htm

removed splash from int.htm
Note:  this file has little content.  It says "Welcome to Eclipse" and as such 
wouldn't be of use to WSAD anyway, but I removed the splash nonetheless.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5428" />
    <CreationDate amount="2001-11-01 13:21:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Bogus secondary font in jfacefonts.properties</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>In the jfacefonts.properties we have the following definition

org.eclipse.jface.textfont.0=courier-regular-8
org.eclipse.jface.textfont.1=misc-fixed-regular-12

The second font is not valid in windows. We should check to see if this is
valid in Unix - it is not in the same format a the others.
Still in the current properties file in build 20020115
Pls verify that the code that interprets these files will attempt to load 
the .1, .2 fonts if it fails to load the first one. 
Verified that the secondary font works and changed the secondary text font to 
be more consistent with the other secondary fonts in jface_fonts.properties.</WithStack>
    <WithOutStack>In the jfacefonts.properties we have the following definition

org.eclipse.jface.textfont.0=courier-regular-8
org.eclipse.jface.textfont.1=misc-fixed-regular-12

The second font is not valid in windows. We should check to see if this is
valid in Unix - it is not in the same format a the others.
Still in the current properties file in build 20020115
Pls verify that the code that interprets these files will attempt to load 
the .1, .2 fonts if it fails to load the first one. 
Verified that the secondary font works and changed the secondary text font to 
be more consistent with the other secondary fonts in jface_fonts.properties.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5429" />
    <CreationDate amount="2001-11-01 13:27:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Releng" />
    <Version amount="1.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>The two runtime distributions include license.html.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The two runtime distributions include license.html.  While we're OK from a 
license and attachment standpoint, I think we should remove license.html to make 
these pure redistributable runtime distributions.

Another option would be to say delete the file as part of the instructions in 
the Redist attachement....
These have been removed.</WithStack>
    <WithOutStack>The two runtime distributions include license.html.  While we're OK from a 
license and attachment standpoint, I think we should remove license.html to make 
these pure redistributable runtime distributions.

Another option would be to say delete the file as part of the instructions in 
the Redist attachement....
These have been removed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5430" />
    <CreationDate amount="2001-11-01 14:09:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Must resurrect 0.9 deprecated APIs</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Some deprecated 0.9 APIs got removed, they should be added back, and moved at 
the bottom of CUs.
Done.</WithStack>
    <WithOutStack>Some deprecated 0.9 APIs got removed, they should be added back, and moved at 
the bottom of CUs.
Done.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5431" />
    <CreationDate amount="2001-11-01 14:17:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[CVS Sync View] Sychronize View - tree has strange expansion behaviour</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="8">
        <Lines>
          <Line>1) Synchronize with a project thta has incoming changes.</Line>
          <Line>Notice that in the tree with the modified resources some items are expanded and</Line>
          <Line>some are not and one of the items is selected.</Line>
          <Line>2) Select the repository in the Sychronize view and from the context menu</Line>
          <Line>select "Expand All".</Line>
          <Line>The tree is now fully expanded.</Line>
          <Line>3) Select one of the resources and from the context menu select Catchup.</Line>
          <Line>Some of the tree items that were expanded in step 2 are now collapsed.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- performing operations on nodes in the sync view</Line>
          <Line>- switching layouts (compressed, flat)</Line>
          <Line>- switching modes</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Eclipse 20011025
Windows 2000

1) Synchronize with a project thta has incoming changes.
Notice that in the tree with the modified resources some items are expanded and 
some are not and one of the items is selected.
2) Select the repository in the Sychronize view and from the context menu 
select "Expand All".
The tree is now fully expanded.
3) Select one of the resources and from the context menu select Catchup.
Some of the tree items that were expanded in step 2 are now collapsed.

This is an issue for me because what I generally do when catching up with the 
changes made by others on my team is to catch up with the changes that I agree 
with and understand first and then review in more detail the changes that are 
not immediately clear to me.  This means I repeatedly catch up on a number of 
small items.  Currently I need to go back to the top and select "Expand all 
items" from the context menu each time I catch up.

One thing to note is that if an item is programmatically selected in a tree, 
SWT ensures that item is visible which includes expanding any parent items and 
scrolling the item into view if required.
Switching modes should preserve selection.
post 2.0
Reopening
I seem to recall that James mentioned this was due to how the UI component 
tried to maintain the expansionsm after an item was added or removed from the 
list. We've seen simialr behavior in the repo view after adding or removeing a 
liocation.
Will ensure that expansion is preserved in the new sync view. It probably isn't
great yet, but that is because it wasn't looked at yet :)
No time in M3.
Verified that expansion is preserve when:
- performing operations on nodes in the sync view
- switching layouts (compressed, flat)
- switching modes</WithStack>
    <WithOutStack>Eclipse 20011025
Windows 2000

1) Synchronize with a project thta has incoming changes.
Notice that in the tree with the modified resources some items are expanded and 
some are not and one of the items is selected.
2) Select the repository in the Sychronize view and from the context menu 
select "Expand All".
The tree is now fully expanded.
3) Select one of the resources and from the context menu select Catchup.
Some of the tree items that were expanded in step 2 are now collapsed.

This is an issue for me because what I generally do when catching up with the 
changes made by others on my team is to catch up with the changes that I agree 
with and understand first and then review in more detail the changes that are 
not immediately clear to me.  This means I repeatedly catch up on a number of 
small items.  Currently I need to go back to the top and select "Expand all 
items" from the context menu each time I catch up.

One thing to note is that if an item is programmatically selected in a tree, 
SWT ensures that item is visible which includes expanding any parent items and 
scrolling the item into view if required.
Switching modes should preserve selection.
post 2.0
Reopening
I seem to recall that James mentioned this was due to how the UI component 
tried to maintain the expansionsm after an item was added or removed from the 
list. We've seen simialr behavior in the repo view after adding or removeing a 
liocation.
Will ensure that expansion is preserved in the new sync view. It probably isn't
great yet, but that is because it wasn't looked at yet :)
No time in M3.
Verified that expansion is preserve when:
- performing operations on nodes in the sync view
- switching layouts (compressed, flat)
- switching modes</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5432" />
    <CreationDate amount="2001-11-01 15:13:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P4" />
    <bug_severity amount="minor" />
    <Summery>compiler syntax error is incorrect</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>I typed

static final String[] mylist {};

This is missing an "=".  The error I received said that the compiler
was expecting a "{", ";", or ",".
The problem is related to the fact that the rule VariableDeclarator is already 
reduced when the syntax error is found. So the two possibles completions are 
what you can have when a variable is completed. Which means it can be followed 
by another variable (',') or it terminates the variable declarations (';').
I don't see how it is possible to change the parser in order not to reduce the 
actions when the syntax error is found. The syntax error is reported when all 
possible reductions have been done. In the grammar, one possible reduction 
occurs when the variable has no initialization.
We know that the parser doesn't always return accurate error messages in case of 
syntax errors. I think we will have to live with it.
This problem is related to the parser technology we use. We won't change this 
now. So we should probably put somewhere in the release notes that the error 
messages on syntax errors are not always accurate.</WithStack>
    <WithOutStack>I typed

static final String[] mylist {};

This is missing an "=".  The error I received said that the compiler
was expecting a "{", ";", or ",".
The problem is related to the fact that the rule VariableDeclarator is already 
reduced when the syntax error is found. So the two possibles completions are 
what you can have when a variable is completed. Which means it can be followed 
by another variable (',') or it terminates the variable declarations (';').
I don't see how it is possible to change the parser in order not to reduce the 
actions when the syntax error is found. The syntax error is reported when all 
possible reductions have been done. In the grammar, one possible reduction 
occurs when the variable has no initialization.
We know that the parser doesn't always return accurate error messages in case of 
syntax errors. I think we will have to live with it.
This problem is related to the parser technology we use. We won't change this 
now. So we should probably put somewhere in the release notes that the error 
messages on syntax errors are not always accurate.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5433" />
    <CreationDate amount="2001-11-01 16:04:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>TVT1: Hardcoded String - Export Error Message</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="9">
        <Lines>
          <Line>1) A hard coded string in WizardExportResourcePage.</Line>
          <Line />
          <Line>The string already existed in the messages.properties file so there is no</Line>
          <Line>new translation required.</Line>
          <Line />
          <Line>2) The ZIP message in the body of the dialog is actually a hard coded string</Line>
          <Line>in java.util.zip.ZipOutputStream</Line>
          <Line>Closing</Line>
          <Line>Verified as fixed in build 425 of R2</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Error message in english when exporting to a zip file.

Test Case: 
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795485
3
Created attachment 38
Scree Shot Export Wizard Error Message
There are two problems here:

1) A hard coded string in WizardExportResourcePage. 

    The string already existed in the messages.properties file so there is no 
new translation required. 

2) The ZIP message in the body of the dialog is actually a hard coded string
   in java.util.zip.ZipOutputStream
Closing
Verified as fixed in build 425 of R2</WithStack>
    <WithOutStack>Error message in english when exporting to a zip file.

Test Case: 
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795485
3
Created attachment 38
Scree Shot Export Wizard Error Message
There are two problems here:

1) A hard coded string in WizardExportResourcePage. 

    The string already existed in the messages.properties file so there is no 
new translation required. 

2) The ZIP message in the body of the dialog is actually a hard coded string
   in java.util.zip.ZipOutputStream
Closing
Verified as fixed in build 425 of R2</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5434" />
    <CreationDate amount="2001-11-01 16:15:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>TVT1: Hardcoded string NewWizardsRegistryReader.java</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If you create some new elements in the resource tree, it is indicated 
as "Other" in English.

See:  NewWizardsRegistryReader.java  UNCATEGORIZED_WIZARD_CATEGORY_LABEL 
="Other"
Created attachment 39
NewWizardsRegistryReader.java "Other" string
Added new string the messages.properties file

NewWizardsRegistryReader.otherCategory = Other</WithStack>
    <WithOutStack>If you create some new elements in the resource tree, it is indicated 
as "Other" in English.

See:  NewWizardsRegistryReader.java  UNCATEGORIZED_WIZARD_CATEGORY_LABEL 
="Other"
Created attachment 39
NewWizardsRegistryReader.java "Other" string
Added new string the messages.properties file

NewWizardsRegistryReader.otherCategory = Other</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5435" />
    <CreationDate amount="2001-11-01 16:23:00 -0500" />
    <DupId amount="5296" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>TVT Harcoded string "System Editor"</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>The option System Editor is not translated in the menu but it has been 
translated in the translation files.
Steps to recreate:
In the Packages view, select a java file.
Right click
Select Open With
"System Editor" is in english
Created attachment 40
See System Editor in context menu


*** This bug has been marked as a duplicate of 5296 ***</WithStack>
    <WithOutStack>The option System Editor is not translated in the menu but it has been 
translated in the translation files.
Steps to recreate:
In the Packages view, select a java file.
Right click
Select Open With
"System Editor" is in english
Created attachment 40
See System Editor in context menu


*** This bug has been marked as a duplicate of 5296 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5436" />
    <CreationDate amount="2001-11-01 16:47:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Scripting" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>TVT Hardcoded strings ScriptDevelopmentWizard.java</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Hard coded string in the New Script panel.
See ScriptDevelopmentWizard.java
Created attachment 41
Hard coded string in the New Script dialog
Created attachment 42
See ScriptDevelopmentWizardPageFilename.java
Created attachment 43
See Select File in ScriptDevelopmentWizardPageFilename.java
Created attachment 44
See Select File Name on DIalog
Created attachment 45
See Action Type
Created attachment 46
See Script Icon Name dialog
Created attachment 47
See Scriupt Resource Type dialog
Created attachment 93
Same problem for Brazilian/Portuguese with Select Container
Scripting support removed from 2.0 builds</WithStack>
    <WithOutStack>Hard coded string in the New Script panel.
See ScriptDevelopmentWizard.java
Created attachment 41
Hard coded string in the New Script dialog
Created attachment 42
See ScriptDevelopmentWizardPageFilename.java
Created attachment 43
See Select File in ScriptDevelopmentWizardPageFilename.java
Created attachment 44
See Select File Name on DIalog
Created attachment 45
See Action Type
Created attachment 46
See Script Icon Name dialog
Created attachment 47
See Scriupt Resource Type dialog
Created attachment 93
Same problem for Brazilian/Portuguese with Select Container
Scripting support removed from 2.0 builds</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5437" />
    <CreationDate amount="2001-11-01 17:18:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Variable not showing in Variables view even when assigned a value</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="156" end="426" />
        <code>public class _Scrapbook {

public static void main(String[] args) {
	_Scrapbook app = new _Scrapbook();
	app.doit();
}
void doit() {
	Object object = this; // put breakpoint here !!!
	do {
		System.out.println("asdads"+object);
		object.toString();
	} while (false);
}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1) Create the class included below.</Line>
          <Line>2) Place a breakpoint as described in the comments of the code.</Line>
          <Line>3) Run in the debugger.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Eclipse 20011025
Windows 2000

1) Create the class included below.
2) Place a breakpoint as described in the comments of the code.
3) Run in the debugger.

public class _Scrapbook {

public static void main(String[] args) {
	_Scrapbook app = new _Scrapbook();
	app.doit();
}
void doit() {
	Object object = this; // put breakpoint here !!!
	do {
		System.out.println("asdads"+object);
		object.toString();
	} while (false);
}
}

The line "Object object = this;" assigns to the variable 'object' but then when 
you step into the do loop, the variable does not appear in the Variables view.  
When you step over the println statement, then 'object' appears in the 
Variables view.

I asked Olivier to investigate and he said the ranges returned are valid.
I tried this on JDK1.2, JDK1.3, the standard JRE, and J9 using the latest code 
base. In all cases, this worked for me - the variable appears after I step over 
the declaration, and remains until the method is exited.

I did verifty that when using build 20011025, I get the described problem.

Please re-try in build 20011101 when available.
Still a problem in 20011101.
Woops - I was fooled by having the wrong view in the foreground (breakpoints 
view instead of variables view). This does work for me in 20011101.</WithStack>
    <WithOutStack>Eclipse 20011025
Windows 2000

1) Create the class included below.
2) Place a breakpoint as described in the comments of the code.
3) Run in the debugger.

public class _Scrapbook {

public static void main(String[] args) {
	_Scrapbook app = new _Scrapbook();
	app.doit();
}
void doit() {
	Object object = this; // put breakpoint here !!!
	do {
		System.out.println("asdads"+object);
		object.toString();
	} while (false);
}
}

The line "Object object = this;" assigns to the variable 'object' but then when 
you step into the do loop, the variable does not appear in the Variables view.  
When you step over the println statement, then 'object' appears in the 
Variables view.

I asked Olivier to investigate and he said the ranges returned are valid.
I tried this on JDK1.2, JDK1.3, the standard JRE, and J9 using the latest code 
base. In all cases, this worked for me - the variable appears after I step over 
the declaration, and remains until the method is exited.

I did verifty that when using build 20011025, I get the described problem.

Please re-try in build 20011101 when available.
Still a problem in 20011101.
Woops - I was fooled by having the wrong view in the foreground (breakpoints 
view instead of variables view). This does work for me in 20011101.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5438" />
    <CreationDate amount="2001-11-01 17:28:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>TVT1: Hardcoded strings Script Preference page</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Some strings in "Preference"--&gt;"Script" are in English.
Created attachment 48
Script Preference Page See "Core Runtime"&amp; Xerces
Created attachment 126
translated labels in script preferences
The script preference page does not actually hardcode the plugin labels. The 
labels are simply obtained from the plugin descriptors in the registry. See the 
attachment showing fake translation for the runtime plugin.

All appears to work fine if the translated plugin.properties are placed directly 
into the plugin directory (using the Java plugin[_locale].properties 
convention). The problem seems to come up when the translations are contributed 
via a fragment. Core boot contains special logic for handling the platform 
loader and xerces, and this logic seems to ignore any fragments contributed for 
org.eclipse.core.runtime and org.apache.xerces. This would seem to imply that 
none of the runtime translations (mostly exception/ error messages) are in fact 
being used.

Reassigning to Core
The problem is that Runtime and Xerces use specially constructed class loaders 
which are created before the registry is loaded, so we don't know about 
fragments yet. (which may contain contributed translations, etc)

In InternalPlatform.activateDefaultPlugins the already created class loaders 
are put into the PluginDescriptors for the Runtime and Xerces plugins. The code 
has been changed to also add any extra class path entries to the class path of 
the class loader.

Code was released into R1_0 and HEAD streams.

PR closed.</WithStack>
    <WithOutStack>Some strings in "Preference"--&gt;"Script" are in English.
Created attachment 48
Script Preference Page See "Core Runtime"&amp; Xerces
Created attachment 126
translated labels in script preferences
The script preference page does not actually hardcode the plugin labels. The 
labels are simply obtained from the plugin descriptors in the registry. See the 
attachment showing fake translation for the runtime plugin.

All appears to work fine if the translated plugin.properties are placed directly 
into the plugin directory (using the Java plugin[_locale].properties 
convention). The problem seems to come up when the translations are contributed 
via a fragment. Core boot contains special logic for handling the platform 
loader and xerces, and this logic seems to ignore any fragments contributed for 
org.eclipse.core.runtime and org.apache.xerces. This would seem to imply that 
none of the runtime translations (mostly exception/ error messages) are in fact 
being used.

Reassigning to Core
The problem is that Runtime and Xerces use specially constructed class loaders 
which are created before the registry is loaded, so we don't know about 
fragments yet. (which may contain contributed translations, etc)

In InternalPlatform.activateDefaultPlugins the already created class loaders 
are put into the PluginDescriptors for the Runtime and Xerces plugins. The code 
has been changed to also add any extra class path entries to the class path of 
the class loader.

Code was released into R1_0 and HEAD streams.

PR closed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5439" />
    <CreationDate amount="2001-11-01 17:39:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Update  (deprecated - use RT&gt;Equinox&gt;p2)" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>TVT Hardcoded string UMWizardPavgeLaunchHistory.java</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Some column headers keep on showing in English even if fixed in files. Same 
header shows fine in other pages of the same Wizard.
e.g. "Version" header in the Install Wizard in the Restore page

Hardcode string See UMWizardPavgeLaunchHistory.java
Created attachment 49
Hard Code in Column Version
No longer applicable. The R1.0 update support is withdrawn in 2.0.</WithStack>
    <WithOutStack>Some column headers keep on showing in English even if fixed in files. Same 
header shows fine in other pages of the same Wizard.
e.g. "Version" header in the Install Wizard in the Restore page

Hardcode string See UMWizardPavgeLaunchHistory.java
Created attachment 49
Hard Code in Column Version
No longer applicable. The R1.0 update support is withdrawn in 2.0.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5440" />
    <CreationDate amount="2001-11-01 17:51:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>TVT Hardcoded string in Plug-in list</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Found translated NL strings in plugin_xx.properties in the fragment.  PDE 
should pull list of tranlated names that are in the the fragments.
Created attachment 50
Listing plug-in in PDE properties page
Steps:  select Window &gt;preferences&gt;plug-in development
Fixed in 2.0 by supporting the NL fragments.</WithStack>
    <WithOutStack>Found translated NL strings in plugin_xx.properties in the fragment.  PDE 
should pull list of tranlated names that are in the the fragments.
Created attachment 50
Listing plug-in in PDE properties page
Steps:  select Window &gt;preferences&gt;plug-in development
Fixed in 2.0 by supporting the NL fragments.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5441" />
    <CreationDate amount="2001-11-01 17:59:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>TVT Hardcoded strings in Plug-in Advanced Tracing</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Hardcoded strings in Plug-in Advanced Tracing.  Plug-in names are translated 
and in the NL fragments. 

Ref TVT Case:
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795491
0
Created attachment 51
Advance  Tracing Prefernce Page
Fixed in 2.0
Verified as fixed in build 425 of R2 with NL fragments</WithStack>
    <WithOutStack>Hardcoded strings in Plug-in Advanced Tracing.  Plug-in names are translated 
and in the NL fragments. 

Ref TVT Case:
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795491
0
Created attachment 51
Advance  Tracing Prefernce Page
Fixed in 2.0
Verified as fixed in build 425 of R2 with NL fragments</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5442" />
    <CreationDate amount="2001-11-01 18:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="enhancement" />
    <Summery>[Welcome] TVT - Welcome text does not wrap</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="13">
        <Lines>
          <Line>1. An optional "format" attribute for the &lt;welcomePage&gt; tag was added.  format</Line>
          <Line>can have a value of "wrap" or "nowrap".  If the format attribute is "wrap", the</Line>
          <Line>text within the Welcome Editor will be wrapped to fit the size of its window.</Line>
          <Line>If the format attribute is "nowrap", the Welcome Editor will work as it</Line>
          <Line>currently does (i.e., no wrapping).  If the format attribute is not specified,</Line>
          <Line>the default value "nowrap" will be used.  (This maintains backward</Line>
          <Line>compatibility).</Line>
          <Line />
          <Line>2. A paragraph tag &lt;p&gt; can be used inside of &lt;intro&gt; and &lt;item&gt; tags.  Text</Line>
          <Line>between &lt;p&gt; tags will be treated as one continuous line (i.e., line breaks</Line>
          <Line>within the &lt;p&gt; text will be "soft") for wrapping purposes.  The &lt;p&gt; tag only</Line>
          <Line>applies when format = "wrap".  If format = "nowrap", the &lt;p&gt; tag will be</Line>
          <Line>ignored.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Welcome text does not wrap.  Translation center must make best guess on where 
to enter hard line breaks.
Created attachment 52
Welcome page does not wrap text
This is not just a translation issue. It is hard to do in English also. Would 
be very helpful if the text could wrap and size. That way if you resize your 
workbench window the text in the welcome editor is still presented well.
Spent some time trying to get this to work.  Not as simple as just turning on 
SWT.WRAP for the styled text widgets that are used in the dialog.  
ScrolledComposite does not respond well to this nor does it appear to respond 
well to the no hscroll bar case.  In the wrap case, we also need to do 
additional layout calls (e.g., during initial resize) since width affects 
height.  Defer - more pressing things at this point...
Created attachment 834
changes to welcome editor
Reopening for investigation as part of improvements to welcome page.

Andrew, I'm working on related StyledText wrapping/ScrolledComposite PRs, so 
I'm going to take this one back.
Fixed in build &gt; 20020927.

1. An optional "format" attribute for the &lt;welcomePage&gt; tag was added.  format 
can have a value of "wrap" or "nowrap".  If the format attribute is "wrap", the 
text within the Welcome Editor will be wrapped to fit the size of its window.  
If the format attribute is "nowrap", the Welcome Editor will work as it 
currently does (i.e., no wrapping).  If the format attribute is not specified, 
the default value "nowrap" will be used.  (This maintains backward 
compatibility).

2. A paragraph tag &lt;p&gt; can be used inside of &lt;intro&gt; and &lt;item&gt; tags.  Text 
between &lt;p&gt; tags will be treated as one continuous line (i.e., line breaks 
within the &lt;p&gt; text will be "soft") for wrapping purposes.  The &lt;p&gt; tag only 
applies when format = "wrap".  If format = "nowrap", the &lt;p&gt; tag will be 
ignored.

Here is an example:

&lt;?xml version="1.0" encoding="UTF-8" ?&gt; 
&lt;welcomePage 
    title="Eclipse Platform"
    format="wrap"&gt;
&lt;intro&gt;&lt;p&gt;This page will help familiarize you with the Eclipse Workbench.
To get started, read the sections below and click on the related 
links.&lt;/p&gt;&lt;/intro&gt;
&lt;item&gt;&lt;b&gt;Perspectives, views and editors &lt;/b&gt;
&lt;p&gt;A window contains one or more perspectives. A perspective consists of views 
(e.g. Navigator)
and editors for working with your resources.&lt;/p&gt;
&lt;/welcomePage&gt;

Fix released.</WithStack>
    <WithOutStack>Welcome text does not wrap.  Translation center must make best guess on where 
to enter hard line breaks.
Created attachment 52
Welcome page does not wrap text
This is not just a translation issue. It is hard to do in English also. Would 
be very helpful if the text could wrap and size. That way if you resize your 
workbench window the text in the welcome editor is still presented well.
Spent some time trying to get this to work.  Not as simple as just turning on 
SWT.WRAP for the styled text widgets that are used in the dialog.  
ScrolledComposite does not respond well to this nor does it appear to respond 
well to the no hscroll bar case.  In the wrap case, we also need to do 
additional layout calls (e.g., during initial resize) since width affects 
height.  Defer - more pressing things at this point...
Created attachment 834
changes to welcome editor
Reopening for investigation as part of improvements to welcome page.

Andrew, I'm working on related StyledText wrapping/ScrolledComposite PRs, so 
I'm going to take this one back.
Fixed in build &gt; 20020927.

1. An optional "format" attribute for the &lt;welcomePage&gt; tag was added.  format 
can have a value of "wrap" or "nowrap".  If the format attribute is "wrap", the 
text within the Welcome Editor will be wrapped to fit the size of its window.  
If the format attribute is "nowrap", the Welcome Editor will work as it 
currently does (i.e., no wrapping).  If the format attribute is not specified, 
the default value "nowrap" will be used.  (This maintains backward 
compatibility).

2. A paragraph tag &lt;p&gt; can be used inside of &lt;intro&gt; and &lt;item&gt; tags.  Text 
between &lt;p&gt; tags will be treated as one continuous line (i.e., line breaks 
within the &lt;p&gt; text will be "soft") for wrapping purposes.  The &lt;p&gt; tag only 
applies when format = "wrap".  If format = "nowrap", the &lt;p&gt; tag will be 
ignored.

Here is an example:

&lt;?xml version="1.0" encoding="UTF-8" ?&gt; 
&lt;welcomePage 
    title="Eclipse Platform"
    format="wrap"&gt;
&lt;intro&gt;&lt;p&gt;This page will help familiarize you with the Eclipse Workbench.
To get started, read the sections below and click on the related 
links.&lt;/p&gt;&lt;/intro&gt;
&lt;item&gt;&lt;b&gt;Perspectives, views and editors &lt;/b&gt;
&lt;p&gt;A window contains one or more perspectives. A perspective consists of views 
(e.g. Navigator)
and editors for working with your resources.&lt;/p&gt;
&lt;/welcomePage&gt;

Fix released.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5443" />
    <CreationDate amount="2001-11-01 18:20:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="trivial" />
    <Summery>How do I enable tracing/debugging on Eclipse?</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="4">
        <Lines>
          <Line>1) Place the .options file as a sibling of the "plugins" directory.  For example</Line>
          <Line>if you have c:\eclipse\plugins\, it should be c:\eclipse\.options.</Line>
          <Line />
          <Line>2) Run eclipse.exe with the command line parameter "-debug"</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- Other Reference Information</Line>
          <Line>- Running the Platform</Line>
          <Line>- Advanced topics</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>I'd like to enable tracing/debugging (sort of like the -lcon -v options of 
VAJava). Is such a facility available in Eclipse? How do I turn it on?
The same facility does not exist in Eclipse. I believe the JDI debug protocol 
does support some type of "verbose" mode, but it is not currently surfaced in 
the debugger.
Maybe you misunderstood my question. I was talking about verbose debugging 
of Eclipse itself, not something that's being run under Eclipse. Does this mean 
there's no way for support to debug a shipped version of Eclipse? If so, what 
does it mean when you type:
  eclipse -debug
and why does it print "Debug-Options: 
file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/.options"?

I can't find any doc for this at all.

the "-debug" option is something that the core supports. It's not actually part 
of the debugger plug-in. Changing the component of this PR to CORE - they will 
be able to explain the details of this option.

This is documented in:

Platform Plugin Developer Guide
 - Other Reference Information
   - Running the Platform
      - Advanced topics

Various plugins provide sample ".options" files that demonstrate the debug flags 
available for that plugin.  For example, see the ".options" files in 
org.eclipse.core.resources, and org.eclipse.core.runtime.
Created attachment 66
Options file
I used the attached .options file in my Eclipse directory. I was kind of 
expecting to see things in the console like when a plugin was loaded, but I 
didn't. How do I turn on that reporting?
There are only two steps involved:

1) Place the .options file as a sibling of the "plugins" directory.  For example 
if you have c:\eclipse\plugins\, it should be c:\eclipse\.options.

2) Run eclipse.exe with the command line parameter "-debug"

With the .options file you have attached, this should cause a large amount of 
debugging information to appear on the console.
I think I've done that:

 Directory of N:\SUPPORT\TEAM\ANDREW\ECLIPSE\1.0\ECLIPSE

...
01-11-01  16:11                    807 .options
...
01-11-02  09:01         &lt;DIR&gt;          plugins
...

However, my console shows only:

Boot URL:
    jar:file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/plugins/org.eclipse.core
.boot/boot.jar!/
Install URL: file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/
Debug-Options: file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/.options

Have I found a real defect?

Ah, I just took another look at the attached .options file.  It is missing the 
main debug flag for runtime debugging.  Add the following:

org.eclipse.core.runtime/debug=true

Otherwise, all the debug flags starting with 
"org.eclipse.core.runtime" will be ignored.

It is up to each plugin to decide how they respond to the debug flags for that 
plugin, so I don't know what you should expect to see for the 
"org.eclipse.jdt..." and "org.eclipse.debug..." flags you have set.

I'm also suspicious of the "com.ibm.eclipse...." flags you have in your .options 
file.  These must be from an old beta before the plugins were renamed.  They 
will have no effect in the newer builds.

Closing.  I assume this has been resolved.  Reopen if this is not the case.</WithStack>
    <WithOutStack>I'd like to enable tracing/debugging (sort of like the -lcon -v options of 
VAJava). Is such a facility available in Eclipse? How do I turn it on?
The same facility does not exist in Eclipse. I believe the JDI debug protocol 
does support some type of "verbose" mode, but it is not currently surfaced in 
the debugger.
Maybe you misunderstood my question. I was talking about verbose debugging 
of Eclipse itself, not something that's being run under Eclipse. Does this mean 
there's no way for support to debug a shipped version of Eclipse? If so, what 
does it mean when you type:
  eclipse -debug
and why does it print "Debug-Options: 
file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/.options"?

I can't find any doc for this at all.

the "-debug" option is something that the core supports. It's not actually part 
of the debugger plug-in. Changing the component of this PR to CORE - they will 
be able to explain the details of this option.

This is documented in:

Platform Plugin Developer Guide
 - Other Reference Information
   - Running the Platform
      - Advanced topics

Various plugins provide sample ".options" files that demonstrate the debug flags 
available for that plugin.  For example, see the ".options" files in 
org.eclipse.core.resources, and org.eclipse.core.runtime.
Created attachment 66
Options file
I used the attached .options file in my Eclipse directory. I was kind of 
expecting to see things in the console like when a plugin was loaded, but I 
didn't. How do I turn on that reporting?
There are only two steps involved:

1) Place the .options file as a sibling of the "plugins" directory.  For example 
if you have c:\eclipse\plugins\, it should be c:\eclipse\.options.

2) Run eclipse.exe with the command line parameter "-debug"

With the .options file you have attached, this should cause a large amount of 
debugging information to appear on the console.
I think I've done that:

 Directory of N:\SUPPORT\TEAM\ANDREW\ECLIPSE\1.0\ECLIPSE

...
01-11-01  16:11                    807 .options
...
01-11-02  09:01         &lt;DIR&gt;          plugins
...

However, my console shows only:

Boot URL:
    jar:file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/plugins/org.eclipse.core
.boot/boot.jar!/
Install URL: file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/
Debug-Options: file:N:/support/TEAM/ANDREW/eclipse/1.0/eclipse/.options

Have I found a real defect?

Ah, I just took another look at the attached .options file.  It is missing the 
main debug flag for runtime debugging.  Add the following:

org.eclipse.core.runtime/debug=true

Otherwise, all the debug flags starting with 
"org.eclipse.core.runtime" will be ignored.

It is up to each plugin to decide how they respond to the debug flags for that 
plugin, so I don't know what you should expect to see for the 
"org.eclipse.jdt..." and "org.eclipse.debug..." flags you have set.

I'm also suspicious of the "com.ibm.eclipse...." flags you have in your .options 
file.  These must be from an old beta before the plugins were renamed.  They 
will have no effect in the newer builds.

Closing.  I assume this has been resolved.  Reopen if this is not the case.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5444" />
    <CreationDate amount="2001-11-01 18:27:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P1" />
    <bug_severity amount="minor" />
    <Summery>TVT Incorrect Label</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Wrong label displayed on Package Selection dialog. Prompt is choose folder, 
think it should be choose package.

Reference TVT case17.19 :
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795490
5
Created attachment 53
Package Selection dialog
fixed
Verified as fixed in build 425 of R2 with NL fragments</WithStack>
    <WithOutStack>Wrong label displayed on Package Selection dialog. Prompt is choose folder, 
think it should be choose package.

Reference TVT case17.19 :
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795490
5
Created attachment 53
Package Selection dialog
fixed
Verified as fixed in build 425 of R2 with NL fragments</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5445" />
    <CreationDate amount="2001-11-01 18:35:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="trivial" />
    <Summery>TVT PDE Prefenence number selected incorrect</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>On the preferences page select: Plug-in Development

Chang the number of selected plugins

Press the Restore Defaults button

The Selected plugins count displaying under the scroll panel is "0 selected", 
instead of "38 selected".

Ref: TVT Case 18.1
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795490
9
Created attachment 54
Counter at 0 while all selected.
Fixed in 2.0
Verified as fixed in build 425 of R2 with NL fragments</WithStack>
    <WithOutStack>On the preferences page select: Plug-in Development

Chang the number of selected plugins

Press the Restore Defaults button

The Selected plugins count displaying under the scroll panel is "0 selected", 
instead of "38 selected".

Ref: TVT Case 18.1
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795490
9
Created attachment 54
Counter at 0 while all selected.
Fixed in 2.0
Verified as fixed in build 425 of R2 with NL fragments</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5446" />
    <CreationDate amount="2001-11-01 18:44:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="minor" />
    <Summery>TVT Hover helps don't match check box selections</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The Hover Helps don't seem to match the Java Code Formatter anymore.

Hover help for option Clear all blank lines in Preferences-&gt;Java-&gt;Code 
Formatter page seems to be obsolete as it refers to an option "Preserve one" 
that is not in the panel. 

The same occurs for the Style tab: the opposite of Compact assignment should be 
Normal assignment
according to the hover help
Created attachment 55
Code Formatter option page 1
Created attachment 56
Java Code Format Option Page 2
We should remove the tooltips alltogether.
Tooltips should only show up for items in toolbars.
tooltips are already removed since the rework.
verified in 11107</WithStack>
    <WithOutStack>The Hover Helps don't seem to match the Java Code Formatter anymore.

Hover help for option Clear all blank lines in Preferences-&gt;Java-&gt;Code 
Formatter page seems to be obsolete as it refers to an option "Preserve one" 
that is not in the panel. 

The same occurs for the Style tab: the opposite of Compact assignment should be 
Normal assignment
according to the hover help
Created attachment 55
Code Formatter option page 1
Created attachment 56
Java Code Format Option Page 2
We should remove the tooltips alltogether.
Tooltips should only show up for items in toolbars.
tooltips are already removed since the rework.
verified in 11107</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5447" />
    <CreationDate amount="2001-11-01 18:50:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="enhancement" />
    <Summery>TVT Suggestion add local history error message</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="FIXED" />
    <WithStack>In the Preferences -&gt; Local History panel, if you set a value that exceeds the 
maximum allowed one, you don't have an error message and that's a problem 
because eventually the history will not work but the user will only find it out 
when he/she will try to open the history and will not find what he/she is 
looking for. Adding some error messages here would be very useful.
the preference is contributed by platform UI
Should fix.
Fixed boir build &gt;20020517
Marking closed</WithStack>
    <WithOutStack>In the Preferences -&gt; Local History panel, if you set a value that exceeds the 
maximum allowed one, you don't have an error message and that's a problem 
because eventually the history will not work but the user will only find it out 
when he/she will try to open the history and will not find what he/she is 
looking for. Adding some error messages here would be very useful.
the preference is contributed by platform UI
Should fix.
Fixed boir build &gt;20020517
Marking closed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5448" />
    <CreationDate amount="2001-11-01 18:59:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Doc" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>TVT  Helps are at R 0.9 does not match R 1.0 UI</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>There were a number of late breaking changes in the UI from R 0.9 to R 1.0 and 
a number of those changes are not reflected in the Help Doc.  I captured all 
the changes I saw and documented them in UIChanges.do.  I noted the place where 
I spotted downlevel helps.
Created attachment 57
UIChanges.doc
This bug will be routed to a documentation component soon, as right now I am 
not aware of such a component.
This component, "help" is meant for help system infrastructure, not for help 
content.
Routing to Doc component
Verified that problems are obsolete or fixed in 2.0</WithStack>
    <WithOutStack>There were a number of late breaking changes in the UI from R 0.9 to R 1.0 and 
a number of those changes are not reflected in the Help Doc.  I captured all 
the changes I saw and documented them in UIChanges.do.  I noted the place where 
I spotted downlevel helps.
Created attachment 57
UIChanges.doc
This bug will be routed to a documentation component soon, as right now I am 
not aware of such a component.
This component, "help" is meant for help system infrastructure, not for help 
content.
Routing to Doc component
Verified that problems are obsolete or fixed in 2.0</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5449" />
    <CreationDate amount="2001-11-01 19:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>TVT Text Expansion/Truncations in new java class dialog</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Screen slightly truncated on the right edge and the shortcut keys on the 
buttons are duplicated.

Ref TVT case 17.17 
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795490
3
Created attachment 58
New Class Dialog
Created attachment 59
New interface dailog truncation problem
Created attachment 60
Japanes truncates
The space allocated for the static text (default) on the row Packages: does not 
allow for proper language expansion.  For example (default) translates to 
(impostazione predefinita) in Italian.  The space is insufficient for Japanese 
translation too.

Reference: NewWizardMessages.properties   
TypePage.default=(impostazione predefinita)   


fixed &gt; 11120</WithStack>
    <WithOutStack>Screen slightly truncated on the right edge and the shortcut keys on the 
buttons are duplicated.

Ref TVT case 17.17 
http://jumpstart.raleigh.ibm.com/jumpstart/TVTDOCS/eclipsewbtvt.htm#_Toc52795490
3
Created attachment 58
New Class Dialog
Created attachment 59
New interface dailog truncation problem
Created attachment 60
Japanes truncates
The space allocated for the static text (default) on the row Packages: does not 
allow for proper language expansion.  For example (default) translates to 
(impostazione predefinita) in Italian.  The space is insufficient for Japanese 
translation too.

Reference: NewWizardMessages.properties   
TypePage.default=(impostazione predefinita)   


fixed &gt; 11120</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5450" />
    <CreationDate amount="2001-11-01 19:20:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>TVT1:  Manifest Editor does not undo  changes on extension page</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Using the Manifest editor go to the extension page add some extensions, say 
action set.  Add some menus and actions then delete and try undo.  The undo 
menu appear live (not greyed out) however the undo does nothing whrn you click 
it.
Undo support is now in 2.0</WithStack>
    <WithOutStack>Using the Manifest editor go to the extension page add some extensions, say 
action set.  Add some menus and actions then delete and try undo.  The undo 
menu appear live (not greyed out) however the undo does nothing whrn you click 
it.
Undo support is now in 2.0</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5451" />
    <CreationDate amount="2001-11-02 04:38:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>package view working set: can't turn off</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1. set a working set filter on the packages view</Line>
          <Line>2. press the toolbar button again</Line>
          <Line>3. choose: filter working set</Line>
          <Line>4. press cancel in the dialog</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1. set a working set filter on the packages view
2. press the toolbar button again
3. choose: filter working set
4. press cancel in the dialog

note: the menu checkmark is gone but the filter is still there
oops, just noticed the 'remove filter menu entry'
i assume that it is just a workaourd for sth - not the final solution.

because it is highly counter-intuitive that i have to select another menu entry 
in order to uncheck the one i want to 
yes, the current UI can't be final answer.

The working set selection dialog should provide an option to "unapply" a 
working set. This is different from remove. Currently unselecting a working 
set disables the OK button. Apply/unapply could be done via a checkbox list.

Dani pls comment


The currently selected working set is now visible.
Discussed with EG not to chnage the dialog into a checkbox list - Packages view 
will provide its own filter dialog.

Suggest to close.

closed</WithStack>
    <WithOutStack>1. set a working set filter on the packages view
2. press the toolbar button again
3. choose: filter working set
4. press cancel in the dialog

note: the menu checkmark is gone but the filter is still there
oops, just noticed the 'remove filter menu entry'
i assume that it is just a workaourd for sth - not the final solution.

because it is highly counter-intuitive that i have to select another menu entry 
in order to uncheck the one i want to 
yes, the current UI can't be final answer.

The working set selection dialog should provide an option to "unapply" a 
working set. This is different from remove. Currently unselecting a working 
set disables the OK button. Apply/unapply could be done via a checkbox list.

Dani pls comment


The currently selected working set is now visible.
Discussed with EG not to chnage the dialog into a checkbox list - Packages view 
will provide its own filter dialog.

Suggest to close.

closed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5452" />
    <CreationDate amount="2001-11-02 04:48:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Typehierarchy: can't see full label in method list</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The label is shown with "..." even though the view has a horizontal scrollbar.
This is critical since when showin inherited members the lable can be long.
fixed in 11101</WithStack>
    <WithOutStack>The label is shown with "..." even though the view has a horizontal scrollbar.
This is critical since when showin inherited members the lable can be long.
fixed in 11101</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5453" />
    <CreationDate amount="2001-11-02 04:52:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>DCR: Code Assist for anonymous types</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="370" end="397" />
        <code>completion. (new Test() { }</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>- introduce a new callback for constructors.</Line>
          <Line>- add interface constructors to method proposals, but add a type body to the</Line>
          <Line>)</Line>
          <Line>Can be closed once bug 6342 is resolved.</Line>
          <Line>bug http://dev.eclipse.org/bugs/show_bug.cgi?id=6342 is fixed</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>11101
To have code assist proposals for anonymous types, I implemented a special 
proposal on constructor completion. This works for abstract methods, but not 
for interfaces, as interfaces don't have a constructor.

To have this anyway, we could
- introduce a new callback for constructors.
- add interface constructors to method proposals, but add a type body to the 
completion. (new Test() { })
Can be closed once bug 6342 is resolved.
bug http://dev.eclipse.org/bugs/show_bug.cgi?id=6342 is fixed</WithStack>
    <WithOutStack>11101
To have code assist proposals for anonymous types, I implemented a special 
proposal on constructor completion. This works for abstract methods, but not 
for interfaces, as interfaces don't have a constructor.

To have this anyway, we could
- introduce a new callback for constructors.
- add interface constructors to method proposals, but add a type body to the 
completion. (new Test() { })
Can be closed once bug 6342 is resolved.
bug http://dev.eclipse.org/bugs/show_bug.cgi?id=6342 is fixed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5454" />
    <CreationDate amount="2001-11-02 05:04:00 -0500" />
    <DupId amount="5884" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Code Assist adds qualified code inside inner classes</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functiondef">
        <location start="159" end="338" />
        <code>fTree.addCheckStateListener(new ICheckStateListener() {
    public void checkStateChanged(CheckStateChangedEvent event) {
      handleCheckStateChange(event);
      fW
    }
  }</code>
      </source_code>
      <source_code type="functiondef">
        <location start="359" end="569" />
        <code>fTree.addCheckStateListener(new ICheckStateListener() {
    public void checkStateChanged(CheckStateChangedEvent event) {
      handleCheckStateChange(event);
      WorkingSetDialog.this.fWorkingSet
    }
  }</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>I'm not sure if this is a new feature or a bug.

I have the following code snippet (from WorkingSetDialog) and call code assist 
on fw and select fWorkingSet:
  fTree.addCheckStateListener(new ICheckStateListener() {
    public void checkStateChanged(CheckStateChangedEvent event) {
      handleCheckStateChange(event);
      fW
    }
  });

This results in:
  fTree.addCheckStateListener(new ICheckStateListener() {
    public void checkStateChanged(CheckStateChangedEvent event) {
      handleCheckStateChange(event);
      WorkingSetDialog.this.fWorkingSet
    }
  });

In previous version of Eclipse "fWorkingSet" was added instead of 
"WorkingSetDialog.this.fWorkingSet"
Build Id: 20011101
This is intentional. The old codeassist did not qualify such scenarii, and it 
could lead to unresolved ambiguities. We decided that when targeting something 
declared in an enclosing type, it would always qualify it, and not only if 
conflicting with something closer.

Do you really dislike this behavior ? We could make it only qualify if 
necessary, but from a style stand point, I think the resulting code is more
readable. Along the same line, it could also qualify implict field accesses 
(even if no ambiguities with other variables) but we thought this one could
be left to some user decision.

Maybe we should introduce an option to make this behavior configurable.
I would opt for an option. We will have to provide a preference page for code 
assist anyways.
I prefer to have an option. Normally I don't write ".This." if it is not needed.



*** This bug has been marked as a duplicate of 5884 ***</WithStack>
    <WithOutStack>I'm not sure if this is a new feature or a bug.

I have the following code snippet (from WorkingSetDialog) and call code assist 
on fw and select fWorkingSet:
  fTree.addCheckStateListener(new ICheckStateListener() {
    public void checkStateChanged(CheckStateChangedEvent event) {
      handleCheckStateChange(event);
      fW
    }
  });

This results in:
  fTree.addCheckStateListener(new ICheckStateListener() {
    public void checkStateChanged(CheckStateChangedEvent event) {
      handleCheckStateChange(event);
      WorkingSetDialog.this.fWorkingSet
    }
  });

In previous version of Eclipse "fWorkingSet" was added instead of 
"WorkingSetDialog.this.fWorkingSet"
Build Id: 20011101
This is intentional. The old codeassist did not qualify such scenarii, and it 
could lead to unresolved ambiguities. We decided that when targeting something 
declared in an enclosing type, it would always qualify it, and not only if 
conflicting with something closer.

Do you really dislike this behavior ? We could make it only qualify if 
necessary, but from a style stand point, I think the resulting code is more
readable. Along the same line, it could also qualify implict field accesses 
(even if no ambiguities with other variables) but we thought this one could
be left to some user decision.

Maybe we should introduce an option to make this behavior configurable.
I would opt for an option. We will have to provide a preference page for code 
assist anyways.
I prefer to have an option. Normally I don't write ".This." if it is not needed.



*** This bug has been marked as a duplicate of 5884 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5455" />
    <CreationDate amount="2001-11-02 05:05:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>generate getter/setter: easily fooled by field names (leads to syntax errors)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="229" end="517" />
        <code>class G {
 int aBoolean;
	
 /**
  * Gets the boolean.
  * @return Returns a int
  */
 public int getBoolean() {
 	return aBoolean;
 }

 /**
  * Sets the boolean.
  * @param boolean The boolean to set
  */
 public void setBoolean(int boolean) { //&lt;&lt; syntax error
 	aBoolean = boolean;
 }
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>the field name guessing  heuristic in generate getter/setter can be easily 
fooled by names like fInt, aBoolean (common name used by ex-smalltalkers)
what you get is shown below (generate getter/setter lead to *syntax* errors):

class G {
 int aBoolean;
	
 /**
  * Gets the boolean.
  * @return Returns a int
  */
 public int getBoolean() {
 	return aBoolean;
 }

 /**
  * Sets the boolean.
  * @param boolean The boolean to set
  */
 public void setBoolean(int boolean) { //&lt;&lt; syntax error
 	aBoolean = boolean;
 }
}
We need a preference option for setting the prefix to be used for variables. 
Some people use _ at the end for example.

The prefix information can be used for instance variable name suggestions in 
code assist
Along a similar vein, code conventions where instance variables are prefixed 
with a non alphanumeric character cause the getter/setter generation to produce 
odd code.

e.g:
mTest  ==&gt; getTest()   // correct.
_test  ==&gt; get_test()  // wrong.
_Test  ==&gt; get_Test()  // wrong.
m_test ==&gt; getM_test() // wrong.

The preferences should allow for a prefix (and possibly a suffix), and the 
first letter after the prefix should become capitalised. Having the explicit 
prefix is probably a better choice than the "let's guess what it is" mode. 
A "Hungarian" option could be added to allow the "let's guess" mode to be 
retained.

Added preference page &gt; 11122
improved name guessing heuristic to not take keywords</WithStack>
    <WithOutStack>the field name guessing  heuristic in generate getter/setter can be easily 
fooled by names like fInt, aBoolean (common name used by ex-smalltalkers)
what you get is shown below (generate getter/setter lead to *syntax* errors):

class G {
 int aBoolean;
	
 /**
  * Gets the boolean.
  * @return Returns a int
  */
 public int getBoolean() {
 	return aBoolean;
 }

 /**
  * Sets the boolean.
  * @param boolean The boolean to set
  */
 public void setBoolean(int boolean) { //&lt;&lt; syntax error
 	aBoolean = boolean;
 }
}
We need a preference option for setting the prefix to be used for variables. 
Some people use _ at the end for example.

The prefix information can be used for instance variable name suggestions in 
code assist
Along a similar vein, code conventions where instance variables are prefixed 
with a non alphanumeric character cause the getter/setter generation to produce 
odd code.

e.g:
mTest  ==&gt; getTest()   // correct.
_test  ==&gt; get_test()  // wrong.
_Test  ==&gt; get_Test()  // wrong.
m_test ==&gt; getM_test() // wrong.

The preferences should allow for a prefix (and possibly a suffix), and the 
first letter after the prefix should become capitalised. Having the explicit 
prefix is probably a better choice than the "let's guess what it is" mode. 
A "Hungarian" option could be added to allow the "let's guess" mode to be 
retained.

Added preference page &gt; 11122
improved name guessing heuristic to not take keywords</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5456" />
    <CreationDate amount="2001-11-02 05:08:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="critical" />
    <Summery>Esc doesn't cancel code assist anymore</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>- open code assist in Java file</Line>
          <Line>- press ESC</Line>
          <Line>observe: nothing happens</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Steps to reproduce
- open code assist in Java file
- press ESC 
observe: nothing happens

I suspect that this has something to do with the new ESC behaviour introduced 
by the workbench.
The problem is caused by the "Activate Editor" action which uses ESC as 
shortcut. Thus the content assist as well as the parameter info popup, the 
general info popup, etc. never see this key event.

ESC should be reserved for closing windows.
This also affects rename in the Navigator.  It activates the editor.
I will remove the ESC support for activating the editor.

As a workaround, in org.eclipse.ui/messages.properties, remove the @Esc from 
ActivateEditorAction.text.


Fixed.</WithStack>
    <WithOutStack>Steps to reproduce
- open code assist in Java file
- press ESC 
observe: nothing happens

I suspect that this has something to do with the new ESC behaviour introduced 
by the workbench.
The problem is caused by the "Activate Editor" action which uses ESC as 
shortcut. Thus the content assist as well as the parameter info popup, the 
general info popup, etc. never see this key event.

ESC should be reserved for closing windows.
This also affects rename in the Navigator.  It activates the editor.
I will remove the ESC support for activating the editor.

As a workaround, in org.eclipse.ui/messages.properties, remove the @Esc from 
ActivateEditorAction.text.


Fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5457" />
    <CreationDate amount="2001-11-02 05:31:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>[Viewers] Wrong expanded state when ITreeViewerListener.treeExpanded is called</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="228" end="467" />
        <code>fTree.addTreeListener(new ITreeViewerListener() {
  public void treeCollapsed(TreeExpansionEvent event) {
  }
  public void treeExpanded(TreeExpansionEvent event) {
    // Returns false
    fTree.getExpandedState(event.getElement());
  }
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Build Id: 20011101

The API of ITreeViewerListener specifies that treeExpanded is called as 
notification that the tree HAS expanded but asking the corresponding for its 
expanded state returns false:

CheckboxTreeViewer fTree;
fTree.addTreeListener(new ITreeViewerListener() {
  public void treeCollapsed(TreeExpansionEvent event) {
  }
  public void treeExpanded(TreeExpansionEvent event) {
    // Returns false
    fTree.getExpandedState(event.getElement());
  }
});
*** Bug 25454 has been marked as a duplicate of this bug. ***
The ITreeViewerListener is notified in response to the SWT TreeListener events, 
which are sent -during- the expand/collapse to allow lazy population (see SN's 
note in bug 25454).

Changing this now would be a breaking change.  

A workaround is to run a Display.asyncExec and check the expanded state of the 
element then.  Or, in the case of bug 25454, update the element in the 
asyncExec.</WithStack>
    <WithOutStack>Build Id: 20011101

The API of ITreeViewerListener specifies that treeExpanded is called as 
notification that the tree HAS expanded but asking the corresponding for its 
expanded state returns false:

CheckboxTreeViewer fTree;
fTree.addTreeListener(new ITreeViewerListener() {
  public void treeCollapsed(TreeExpansionEvent event) {
  }
  public void treeExpanded(TreeExpansionEvent event) {
    // Returns false
    fTree.getExpandedState(event.getElement());
  }
});
*** Bug 25454 has been marked as a duplicate of this bug. ***
The ITreeViewerListener is notified in response to the SWT TreeListener events, 
which are sent -during- the expand/collapse to allow lazy population (see SN's 
note in bug 25454).

Changing this now would be a breaking change.  

A workaround is to run a Display.asyncExec and check the expanded state of the 
element then.  Or, in the case of bug 25454, update the element in the 
asyncExec.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5458" />
    <CreationDate amount="2001-11-02 07:19:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Add unimplemented deprecated methods</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20011025 (aka 206)

When generating stubs for unimplemented methods, the @deprecated tag should be 
inserted in case the method to implement was itself deprecated.
implemented &gt; 11211</WithStack>
    <WithOutStack>Build 20011025 (aka 206)

When generating stubs for unimplemented methods, the @deprecated tag should be 
inserted in case the method to implement was itself deprecated.
implemented &gt; 11211</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5459" />
    <CreationDate amount="2001-11-02 07:26:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="WebDAV" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>HttpClient should ignore leading CRLFs when receving responses</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>Build 20011025

The HTTP/1.1 spec (RFC2616) states that clients should ignore initial blank 
lines when retrieving a response from a request -- such blanks are commonly 
caused by HTTP/1.0 servers / proxies.
Deferring until post 2.0
[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.</WithStack>
    <WithOutStack>Build 20011025

The HTTP/1.1 spec (RFC2616) states that clients should ignore initial blank 
lines when retrieving a response from a request -- such blanks are commonly 
caused by HTTP/1.0 servers / proxies.
Deferring until post 2.0
[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.

[LATER-&gt;WONTFIX] The "LATER" bugzilla resolution is being removed so reopening
to mark as WONTFIX.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5460" />
    <CreationDate amount="2001-11-02 07:29:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>Internal error when VM argument -mx: is too low</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341096107">
        <Exception>java.lang.ArrayIndexOutOfBoundsException</Exception>
        <Reason>0</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.debug.internal.core.ListenerList.add(ListenerList.java:67)</Frame>
          <Frame depth="1">org.eclipse.debug.internal.core.InputStreamMonitor.addListener(InputStreamMonitor.java:62)</Frame>
          <Frame depth="2">org.eclipse.debug.internal.ui.ConsoleDocument.startReading(ConsoleDocument.java:156)</Frame>
          <Frame depth="3">org.eclipse.debug.internal.ui.DebugUIPlugin$5.run(DebugUIPlugin.java:1146)</Frame>
          <Frame depth="4">org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:121)</Frame>
          <Frame depth="5">org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:18)</Frame>
          <Frame depth="6">org.eclipse.swt.widgets.Display.syncExec(Display.java:1593)</Frame>
          <Frame depth="7">org.eclipse.debug.internal.ui.DebugUIPlugin.launchRegistered(DebugUIPlugin.java:1140)</Frame>
          <Frame depth="8">org.eclipse.debug.internal.core.LaunchManager.fireUpdate(LaunchManager.java:115)</Frame>
          <Frame depth="9">org.eclipse.debug.internal.core.LaunchManager.registerLaunch(LaunchManager.java:215)</Frame>
          <Frame depth="10">org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate$2.run(JavaApplicationLauncherDelegate.java:203)</Frame>
          <Frame depth="11">org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:121)</Frame>
          <Frame depth="12">org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:18)</Frame>
          <Frame depth="13">org.eclipse.swt.widgets.Display.syncExec(Display.java:1593)</Frame>
          <Frame depth="14">org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.registerLaunch(JavaApplicationLauncherDelegate.java:201)</Frame>
          <Frame depth="15">org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.doLaunch(JavaApplicationLauncherDelegate.java:191)</Frame>
          <Frame depth="16">org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.launchElement(JavaApplicationLauncherDelegate.java:81)</Frame>
          <Frame depth="17">org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.launch(JavaApplicationLauncherDelegate.java:93)</Frame>
          <Frame depth="18">org.eclipse.debug.internal.core.Launcher.launch(Launcher.java:104)</Frame>
          <Frame depth="19">org.eclipse.debug.internal.ui.ExecutionAction$1.run(ExecutionAction.java:72)</Frame>
          <Frame depth="20">org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)</Frame>
          <Frame depth="21">org.eclipse.debug.internal.ui.ExecutionAction.run(ExecutionAction.java:66)</Frame>
          <Frame depth="22">org.eclipse.debug.internal.ui.LaunchDropDownAction.run(LaunchDropDownAction.java:71)</Frame>
          <Frame depth="23">org.eclipse.ui.internal.PluginAction.run(PluginAction.java:125)</Frame>
          <Frame depth="24">org.eclipse.jface.action.Action.runWithEvent(Action.java:451)</Frame>
          <Frame depth="25">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="26">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)</Frame>
          <Frame depth="27">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)</Frame>
          <Frame depth="28">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)</Frame>
          <Frame depth="29">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled Code))</Frame>
          <Frame depth="30">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:635)</Frame>
          <Frame depth="31">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1365)</Frame>
          <Frame depth="32">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1167)</Frame>
          <Frame depth="33">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:712)</Frame>
          <Frame depth="34">org.eclipse.ui.internal.Workbench.run(Workbench.java:695)</Frame>
          <Frame depth="35">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:820)</Frame>
          <Frame depth="36">org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)</Frame>
          <Frame depth="37">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="38">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="39">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="40">org.eclipse.core.launcher.UIMain.main(UIMain.java:52)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>1. Set the max memory VM argument on UIMain to a very small number: -mx:30</Line>
          <Line>2. Launch UIMain</Line>
          <Line>==&gt; Dialog pops up:</Line>
          <Line>Title:   Internal Error</Line>
          <Line>Message: An internal error has occurred. 0. See error log for more details.</Line>
          <Line>The following is in the log:</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Build: 20011101
JRE:   J9

1. Set the max memory VM argument on UIMain to a very small number: -mx:30
2. Launch UIMain
==&gt; Dialog pops up:
    Title:   Internal Error
    Message: An internal error has occurred. 0. See error log for more details.
The following is in the log:

Log: Fri Nov 02 13:28:43 GMT+01:00 2001
4 org.eclipse.ui 0 0
java.lang.ArrayIndexOutOfBoundsException: 0
	at 
org.eclipse.debug.internal.core.ListenerList.add(ListenerList.java:67)
	at 
org.eclipse.debug.internal.core.InputStreamMonitor.addListener(InputStreamMonito
r.java:62)
	at 
org.eclipse.debug.internal.ui.ConsoleDocument.startReading(ConsoleDocument.java:
156)
	at 
org.eclipse.debug.internal.ui.DebugUIPlugin$5.run(DebugUIPlugin.java:1146)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:121)
	at 
org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:18)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:1593)
	at 
org.eclipse.debug.internal.ui.DebugUIPlugin.launchRegistered(DebugUIPlugin.java:
1140)
	at 
org.eclipse.debug.internal.core.LaunchManager.fireUpdate(LaunchManager.java:115)
	at 
org.eclipse.debug.internal.core.LaunchManager.registerLaunch(LaunchManager.java:
215)
	at 
org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate$2.run(JavaA
pplicationLauncherDelegate.java:203)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:121)
	at 
org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:18)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:1593)
	at 
org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.registerLau
nch(JavaApplicationLauncherDelegate.java:201)
	at 
org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.doLaunch(Ja
vaApplicationLauncherDelegate.java:191)
	at 
org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.launchEleme
nt(JavaApplicationLauncherDelegate.java:81)
	at 
org.eclipse.jdt.internal.ui.launcher.JavaApplicationLauncherDelegate.launch(Java
ApplicationLauncherDelegate.java:93)
	at org.eclipse.debug.internal.core.Launcher.launch(Launcher.java:104)
	at 
org.eclipse.debug.internal.ui.ExecutionAction$1.run(ExecutionAction.java:72)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)
	at 
org.eclipse.debug.internal.ui.ExecutionAction.run(ExecutionAction.java:66)
	at 
org.eclipse.debug.internal.ui.LaunchDropDownAction.run(LaunchDropDownAction.java
:71)
	at org.eclipse.ui.internal.PluginAction.run(PluginAction.java:125)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:451)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionCont
ributionItem.java:407)
	at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContribu
tionItem.java:361)
	at 
org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.
java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(Actio
nContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:635)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1365)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1167)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:712)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:695)
	at 
org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:82
0)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.UIMain.main(UIMain.java:52)
I don't think this has anything to do with the -mx argument.  I introduced a 
bug into our listener list after the code review fixes.  The bug has been fixed 
in the current head stream (did not correctly grow the list if the size was 
zero).

Please verify
Verified.</WithStack>
    <WithOutStack>Build: 20011101
JRE:   J9

1. Set the max memory VM argument on UIMain to a very small number: -mx:30
2. Launch UIMain
==&gt; Dialog pops up:
    Title:   Internal Error
    Message: An internal error has occurred. 0. See error log for more details.
The following is in the log:

Log: Fri Nov 02 13:28:43 GMT+01:00 2001
4 org.eclipse.ui 0 0

I don't think this has anything to do with the -mx argument.  I introduced a 
bug into our listener list after the code review fixes.  The bug has been fixed 
in the current head stream (did not correctly grow the list if the size was 
zero).

Please verify
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5461" />
    <CreationDate amount="2001-11-02 08:26:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Need help with table column size</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>A common kind of table is a table with only one table column.
In such a table you expect the column always to have the full width. You also 
expect to have horizontal scrollbars, and no names shortened with '...'.

As far as I found out, there is no other way to install a control listener and 
call tableColumn.pack on table resizes. Same if new items are added.

Is there no simpler way?
If not on the SWT side, maybe JFace?
Does the SWT widget support the requested behavior?
If you create a Table and do not not create any TableColumn items, the table 
will by default have the expected behaviour.

If you do create a TableColumn, you must call column.pack() whenever you add, 
remove or modify the TableItems.  There is no callback for add, remove or 
modifying TableItems because that can only be done programmatically.

(By calling column.pack() you will get the horizontal scrollbar and no names 
shortened names.)

Can this bug report be closed?
ok to close for me.
No code changes were required.</WithStack>
    <WithOutStack>A common kind of table is a table with only one table column.
In such a table you expect the column always to have the full width. You also 
expect to have horizontal scrollbars, and no names shortened with '...'.

As far as I found out, there is no other way to install a control listener and 
call tableColumn.pack on table resizes. Same if new items are added.

Is there no simpler way?
If not on the SWT side, maybe JFace?
Does the SWT widget support the requested behavior?
If you create a Table and do not not create any TableColumn items, the table 
will by default have the expected behaviour.

If you do create a TableColumn, you must call column.pack() whenever you add, 
remove or modify the TableItems.  There is no callback for add, remove or 
modifying TableItems because that can only be done programmatically.

(By calling column.pack() you will get the horizontal scrollbar and no names 
shortened names.)

Can this bug report be closed?
ok to close for me.
No code changes were required.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5462" />
    <CreationDate amount="2001-11-02 08:27:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Can't cancel code assist anymore</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Up to the build from 1101 you could cancel a code assist with the ESC key.
You can no longer do so since the ESC key is now a global short cut Activate 
Editor.

ESC should not be a global short cut. Activate Editor only makes sense when a 
View is active. Therefore a View should register as a key listener for ESC and 
handle the Activate Editor behaviour.
Fixed in next build.</WithStack>
    <WithOutStack>Up to the build from 1101 you could cancel a code assist with the ESC key.
You can no longer do so since the ESC key is now a global short cut Activate 
Editor.

ESC should not be a global short cut. Activate Editor only makes sense when a 
View is active. Therefore a View should register as a key listener for ESC and 
handle the Activate Editor behaviour.
Fixed in next build.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5463" />
    <CreationDate amount="2001-11-02 09:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>org.eclipse.jdt.ui.vcm plugin.properties file missing</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The plugin.properties file of the org.eclipse.jdt.ui.vcm package is missing 
from the 20011101 build.
build.properties type. fixed.</WithStack>
    <WithOutStack>The plugin.properties file of the org.eclipse.jdt.ui.vcm package is missing 
from the 20011101 build.
build.properties type. fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5464" />
    <CreationDate amount="2001-11-02 09:25:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="User Assistance" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>EC: Help Contents action does not use perspective preference setting</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>From: Miriam Ford &lt;miriamf@us.ibm.com&gt;
Newsgroups: eclipse.tools
Subject: Help... Help Contents does not use workbench preferences
Date: Thu, 01 Nov 2001 11:20:24 -0500

Hello,

This seems to be a bug...

When you open the Help perspective from the MENU bar (Help... Help
contents) it does not use the preferences set up for the Workbench (Open
a new perspective).

The Workbench preferences allows me to say that all new perspectives
should be opened in a new window. This is
used so that I can view multiple things at ths same time.  However,
since the help Menu item doesn't use this I can't have help up and also
see what I'm working on at the same time.

There is a workaround and that is to open the Help perspective in a
different way. That is to click on the
Open Perspective icon or do:    Perspective.... Open... Other.... Help.

Anytime a perspective is opened it should use the preferences.

Please let me know if this is a bug and if it will be fixed.

Thanks for your help.
--
Miriam Ford
IBM, Voice Systems Development
8051 Congress Avenue
Boca Raton, Florida  33487
(561)862-3304, T/L 975-3304
email:  miriamf@us.ibm.com


NOTES:

SA&gt; The eclipse ui team is looking at changing the api so that developers call 
a method to open a perspective and the workbench will decide to open it based 
on the preference settings.
fixed by the new help redesign.</WithStack>
    <WithOutStack>From: Miriam Ford &lt;miriamf@us.ibm.com&gt;
Newsgroups: eclipse.tools
Subject: Help... Help Contents does not use workbench preferences
Date: Thu, 01 Nov 2001 11:20:24 -0500

Hello,

This seems to be a bug...

When you open the Help perspective from the MENU bar (Help... Help
contents) it does not use the preferences set up for the Workbench (Open
a new perspective).

The Workbench preferences allows me to say that all new perspectives
should be opened in a new window. This is
used so that I can view multiple things at ths same time.  However,
since the help Menu item doesn't use this I can't have help up and also
see what I'm working on at the same time.

There is a workaround and that is to open the Help perspective in a
different way. That is to click on the
Open Perspective icon or do:    Perspective.... Open... Other.... Help.

Anytime a perspective is opened it should use the preferences.

Please let me know if this is a bug and if it will be fixed.

Thanks for your help.
--
Miriam Ford
IBM, Voice Systems Development
8051 Congress Avenue
Boca Raton, Florida  33487
(561)862-3304, T/L 975-3304
email:  miriamf@us.ibm.com


NOTES:

SA&gt; The eclipse ui team is looking at changing the api so that developers call 
a method to open a perspective and the workbench will decide to open it based 
on the preference settings.
fixed by the new help redesign.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5465" />
    <CreationDate amount="2001-11-02 09:35:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Option for double click to open instead of expand</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>We need an option (this should probably be a workbench option) to have double 
click open (a type) rather than expand in tree views like the packages view.
not crystal clear yet, please clarify.

In the packages view you have an optioin for double click "goes into" instead 
of expanding. Are you referring to this.
Randy, can you please clarify. In build 20011219 double clicking a CU or type 
opens the element in the editor. I could expand the tree by double clicking. Do 
you want to have the old expand tree behaviour back ?
I like the way it is working now (I have drop 20011218)
Double clicking on a type opens the type (or activates the editor if the type 
is already opening). I think when the type outline was first added to the 
navigator, double clicking on an already open type would expand the the type to 
show its contents rather than activating the editor, but perhaps I am confused.

At any rate you can close this PR.
Closing</WithStack>
    <WithOutStack>We need an option (this should probably be a workbench option) to have double 
click open (a type) rather than expand in tree views like the packages view.
not crystal clear yet, please clarify.

In the packages view you have an optioin for double click "goes into" instead 
of expanding. Are you referring to this.
Randy, can you please clarify. In build 20011219 double clicking a CU or type 
opens the element in the editor. I could expand the tree by double clicking. Do 
you want to have the old expand tree behaviour back ?
I like the way it is working now (I have drop 20011218)
Double clicking on a type opens the type (or activates the editor if the type 
is already opening). I think when the type outline was first added to the 
navigator, double clicking on an already open type would expand the the type to 
show its contents rather than activating the editor, but perhaps I am confused.

At any rate you can close this PR.
Closing</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5466" />
    <CreationDate amount="2001-11-02 09:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="other" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Hierarchy view should try to preserve method selection</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="10">
        <Lines>
          <Line>1) Open a hierachy view on a type hiearchy that has a method which is overrided</Line>
          <Line>at several levels.</Line>
          <Line>2) Select the method.</Line>
          <Line>3) Select other types.</Line>
          <Line>4) Note that the method selection is lost.</Line>
          <Line>We should try to preserve the selection (show the same method for the selected</Line>
          <Line>type whenever possible). This is a little trickier when the method list is</Line>
          <Line>showing all inherited methods but its still possible.</Line>
          <Line>a good suggestion that we should implement</Line>
          <Line>implemented &gt; 11211</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1) Open a hierachy view on a type hiearchy that has a method which is overrided 
at several levels. 
2) Select the method.
3) Select other types.
4) Note that the method selection is lost.
We should try to preserve the selection (show the same method for the selected 
type whenever possible). This is a little trickier when the method list is 
showing all inherited methods but its still possible.
a good suggestion that we should implement
implemented &gt; 11211</WithStack>
    <WithOutStack>1) Open a hierachy view on a type hiearchy that has a method which is overrided 
at several levels. 
2) Select the method.
3) Select other types.
4) Note that the method selection is lost.
We should try to preserve the selection (show the same method for the selected 
type whenever possible). This is a little trickier when the method list is 
showing all inherited methods but its still possible.
a good suggestion that we should implement
implemented &gt; 11211</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5467" />
    <CreationDate amount="2001-11-02 10:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Bad import in LocalEvaluationEngine</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>org.eclipse.jdt.internal.debug.eval.LocalEvaluationEngine imports import 
java.awt.event.FocusAdapter.

This import is unused and it causes an error tick to appear when using jclMax
Fixed.
Verified.</WithStack>
    <WithOutStack>org.eclipse.jdt.internal.debug.eval.LocalEvaluationEngine imports import 
java.awt.event.FocusAdapter.

This import is unused and it causes an error tick to appear when using jclMax
Fixed.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5468" />
    <CreationDate amount="2001-11-02 10:30:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Window-&gt;Open Workbench hangs workbench</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>When I select the Window-&gt;Open Workbench menu item the workbench hangs while 
using 99% CPU time. It's been hanging for 10 minutes now so I assume it's 
terminal.
What is that menu item supposed to do anyway? (I was trying to find out).
Pls retry in latest. If it still crashes break the VM to generate a stack dump 
that we can use to determine what is happening.
Works in build 20011116
Closing based on comments above.</WithStack>
    <WithOutStack>When I select the Window-&gt;Open Workbench menu item the workbench hangs while 
using 99% CPU time. It's been hanging for 10 minutes now so I assume it's 
terminal.
What is that menu item supposed to do anyway? (I was trying to find out).
Pls retry in latest. If it still crashes break the VM to generate a stack dump 
that we can use to determine what is happening.
Works in build 20011116
Closing based on comments above.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5469" />
    <CreationDate amount="2001-11-02 10:36:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Pink squares around brackets are less than optimal</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>What happened to the bold character? IMHO it was much better than these pink 
squares. I usually do not need that information (where an expression starts or 
finishes) and when I do need, the bold character was nicer to my eyes.

These pink squares seem to be saying "Hey, I'm here! Look at me!!! Loook!!!".

I understand that for some people the bold character would probably be no 
different than the normal character and that this new one calls the attention 
much better (yes, it does).

If we are staying with the pink squares, can we make than optional? Or, is 
there a way to active them dynamically? For example, if I'm lost in my java 
file, and would like to know where an expression finishes or starts I would 
press ALT+"magic key" and get the pink squares.
The bolding had problems with proportional fonts and resulted in flicker.

you can't make it right for everyone, so this smells like a preference.
You have always been able to double click inside a bracket and text up to the 
matching bracket will be selected. I use this "on-demand" bracket matching 
fairly often, maybe once a week. Would be really nice if automatic bracket 
matching was optional. Would also be nice if *all* automatic stuff in the 
editor was optional. You can leave it on as the default if you like (other 
companies do this to make sure people know about the automatic features of the 
editor). But make sure that there is a very easy place to turn all automatic 
features off (one at a time, of course, but all of them). Automatic features 
are not always welcome in an editor - in fact sometimes, they are distinctly 
unwelcome. They slow people down, they slow the editor down, they are 
distracting, and they get in the way. If they are buggy (or hot pink &lt;g&gt;) then 
it is even worse.
Pref page reworked. Build 2001113.</WithStack>
    <WithOutStack>What happened to the bold character? IMHO it was much better than these pink 
squares. I usually do not need that information (where an expression starts or 
finishes) and when I do need, the bold character was nicer to my eyes.

These pink squares seem to be saying "Hey, I'm here! Look at me!!! Loook!!!".

I understand that for some people the bold character would probably be no 
different than the normal character and that this new one calls the attention 
much better (yes, it does).

If we are staying with the pink squares, can we make than optional? Or, is 
there a way to active them dynamically? For example, if I'm lost in my java 
file, and would like to know where an expression finishes or starts I would 
press ALT+"magic key" and get the pink squares.
The bolding had problems with proportional fonts and resulted in flicker.

you can't make it right for everyone, so this smells like a preference.
You have always been able to double click inside a bracket and text up to the 
matching bracket will be selected. I use this "on-demand" bracket matching 
fairly often, maybe once a week. Would be really nice if automatic bracket 
matching was optional. Would also be nice if *all* automatic stuff in the 
editor was optional. You can leave it on as the default if you like (other 
companies do this to make sure people know about the automatic features of the 
editor). But make sure that there is a very easy place to turn all automatic 
features off (one at a time, of course, but all of them). Automatic features 
are not always welcome in an editor - in fact sometimes, they are distinctly 
unwelcome. They slow people down, they slow the editor down, they are 
distracting, and they get in the way. If they are buggy (or hot pink &lt;g&gt;) then 
it is even worse.
Pref page reworked. Build 2001113.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5470" />
    <CreationDate amount="2001-11-02 10:48:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="critical" />
    <Summery>User is lost when trying to move views around</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>build 20011101 - Windows XP

We used to have arrows to indicate, when moving a view, where this view would 
be placed. We don't have it in this build and it is almost impossible to 
rearrange a perspective.
*** Bug 5488 has been marked as a duplicate of this bug. ***
Defect is in SWT component
SWT.Move events were not sent by Tracker because of
changes made to support resizing. This has been
fixed.</WithStack>
    <WithOutStack>build 20011101 - Windows XP

We used to have arrows to indicate, when moving a view, where this view would 
be placed. We don't have it in this build and it is almost impossible to 
rearrange a perspective.
*** Bug 5488 has been marked as a duplicate of this bug. ***
Defect is in SWT component
SWT.Move events were not sent by Tracker because of
changes made to support resizing. This has been
fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5471" />
    <CreationDate amount="2001-11-02 11:09:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>CodeFormatter mapped positions broken for multi-line comments</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="11">
      <source_code type="import">
        <location start="481" end="538" />
        <code>import org.eclipse.jdt.internal.formatter.CodeFormatter;</code>
      </source_code>
      <source_code type="class">
        <location start="540" end="1527" />
        <code>public class CodeFormatterBug {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"/**\n" +
			" * foo\n" +
			" */\n" +
			"Foo Bar\n" +
			"blah blah\n";
		
		int[] positions= {
			0,
			string.indexOf("foo"),	
			string.indexOf("Foo"),	
			string.indexOf("Bar"),
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);		
	}
}</code>
      </source_code>
      <source_code type="multicomment">
        <location start="2061" end="2072" />
        <code>/**
 *
 */</code>
      </source_code>
      <source_code type="package">
        <location start="3611" end="3623" />
        <code>package foo;</code>
      </source_code>
      <source_code type="import">
        <location start="3624" end="3681" />
        <code>import org.eclipse.jdt.internal.formatter.CodeFormatter;</code>
      </source_code>
      <source_code type="class">
        <location start="3683" end="4648" />
        <code>public class CodeFormatterBug2 {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"foo\n" +
			"/*${cursor}*/\n" +
			"Foo\n"; // bug doesn't occur if you remove this line
		
		int[] positions= {
			0,
			string.indexOf("/"),	
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);
		
		while(true);
	}
}</code>
      </source_code>
      <source_code type="package">
        <location start="6595" end="6607" />
        <code>package foo;</code>
      </source_code>
      <source_code type="import">
        <location start="6608" end="6665" />
        <code>import org.eclipse.jdt.internal.formatter.CodeFormatter;</code>
      </source_code>
      <source_code type="class">
        <location start="6667" end="7599" />
        <code>public class CodeFormatterBug3 {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"foo\r\n" +
			"/**X\r\n" +
			" * foo\r\n" +
			" */\r\n" +
			"bar";
		
		int[] positions= {
			0,
			string.indexOf("X") + 1,	
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);
	}
}</code>
      </source_code>
      <source_code type="multicomment">
        <location start="7641" end="7657" />
        <code>/**X#
 * foo
 */</code>
      </source_code>
      <source_code type="multicomment">
        <location start="7682" end="7699" />
        <code>/**X
#
 * foo
 */</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1) position at end of source gets mapped to 0</Line>
          <Line>2) positions are not mapped correctly if the source contains</Line>
          <Line>multi-line comments.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The following code demonstrates two problems with mapped positions:

  1) position at end of source gets mapped to 0
  2) positions are not mapped correctly if the source contains
     multi-line comments.

For 2), it seems that the wrong offset of a position is equal to the number of 
line delimiters in the multi-line comment. I will workaround this by escaping 
multi-line comments with single-line comments, but it would be nice to have 
this fixed.

---8&lt;--- source ---8&lt;---

import org.eclipse.jdt.internal.formatter.CodeFormatter;

public class CodeFormatterBug {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"/**\n" +
			" * foo\n" +
			" */\n" +
			"Foo Bar\n" +
			"blah blah\n";
		
		int[] positions= {
			0,
			string.indexOf("foo"),	
			string.indexOf("Foo"),	
			string.indexOf("Bar"),
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);		
	}
}

---8&lt;--- output ---8&lt;---

before:
0 7 15 19 33 
#/**
 * #foo
 */
#Foo #Bar
blah blah
after:
0 12 20 24 0 
#/**
 * foo
#
 */
Fo#o Ba#java.lang.StringIndexOutOfBoundsException: String index out of range: -
24
	at java.lang.String.substring(String.java:1504)
	at CodeFormatterBug.print(CodeFormatterBug.java:12)
	at CodeFormatterBug.main(CodeFormatterBug.java:42)
Exception in thread "main"
Additional information:

I need this feature to support multi-line comments in templates. I'd like
to create templates for e.g. public methods:

/**
 *
 */
public ${return_type} ${name}(${arguments}) {
    ${cursor}
}

Right now, I have no good way to catch this situation.
Fix done in the CodeFormatter class. Several problems were found with the 
multiple lines comments.
All code formatter tests passed.
I was wrong with my verification. The bug is not fixed. I run the program above 
again and got the same result.
The fix is done only in HEAD. It hasn't been integrated in any build yet. If you 
want me to set it up on your machine let me know. You simply need to replace the 
CodeFormatter file.
Oh, I see. Can you send me the file, or would it be already in the build
20011114?
Unfortunately it seems that this fix is not included in the 20011115 build 
according to the release note. I will send you the file. It is only one class to 
change. You need to patch  your jdtcore.jar file in your install.
I have problems testing because of another bug. It seems the fixed 
CodeFormatter is still not in the repository. When is it going to be released?

Ok, I can verify that the CodeFormatter is fixed for the test case. Still 
waiting for it to be checked into the repository... :)
According to the build notes provided for the next integration build (20011120), 
it should be included in this build. It should be available this afternoon 
(Ottawa's time).

Unfortunately, I found another test case, where positions are not mapped 
correctly. The position in front of comment gets mapped into the comment.
Note that if you remove the last line, the mapped position is correct.

---8&lt;---

package foo;

import org.eclipse.jdt.internal.formatter.CodeFormatter;

public class CodeFormatterBug2 {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"foo\n" +
			"/*${cursor}*/\n" +
			"Foo\n"; // bug doesn't occur if you remove this line
		
		int[] positions= {
			0,
			string.indexOf("/"),	
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);
		
		while(true);
	}
}

---8&lt;--- output ---
before:
0 4 22 
#foo
#/*${cursor}*/
Foo
after:
0 6 23 
#foo
/#*${cursor}*/
Foo
This is a issue with the line separator. When the line separator (\n) is 
consumed after the foo token it is replaced by \r\n which contains an extra 
character. The offset is actually one and not two. Right now I take two instead 
of one and this explain the offset of one.
I am looking at a way to set properly the offset between formatted source and 
original source. If you change your test case to set the line separator of the 
code formatter to be \n, then the positions are right even if you keep the last 
line.

This problem did not occure befor the other bug fix. Was it some coincidence 
that it happened to work?

I'll use the workaround of specifying the same line delimiter used in the 
string for now.
Yes, this was a side-effect. But before the formatter could never map properly 
if the line delimiter has 2 characters and the string you want to format 
contained only one character line delimiter and the string contained a multiple 
line comment and it was a coincidence that this code was formatted properly. 
That change had to be done.
I found the problem. I simply forgot to map the positions inside the comment in 
case there is not line delimiters in the comment. I fixed it, but I have trouble 
to run the tests inside my 20011116 workspace. As soon as I can do it and I 
don't find any regression, I release it.

The fix is released in HEAD. I don't know when it will be integrated in a build.

It's me again :-)

I have a case where the position before a multi-byte line-break ends up
being inside a multi-byte line-break. This has severe consequences when
used as a selection in a StyledText. Although I think StyledText should
not choke on selection inside multi-byte line-breaks, the CodeFormatter
should not produce these off-by-one positions... So far, this only
happened within a multi-line comment.

---8&gt;---

package foo;

import org.eclipse.jdt.internal.formatter.CodeFormatter;

public class CodeFormatterBug3 {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"foo\r\n" +
			"/**X\r\n" +
			" * foo\r\n" +
			" */\r\n" +
			"bar";
		
		int[] positions= {
			0,
			string.indexOf("X") + 1,	
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);
	}
}

---8&lt;---output---

before:
0 9 27 
#foo
/**X#
 * foo
 */
barafter:
0 10 27 
#foo
/**X
#
 * foo
 */
bar
Why is it possible to select a position inside a line break?
Of course there is no protection against this. The line breaks are written in an 
atomic manner. This explains the offset by one after it.
I will try to find a solution for that, but I think such a position doesn't make 
sense to me.
Did you find another bug except this position inside a line break?

I have a fix for it and I added tests in the formatter tests suite. I simply 
didn't handle this case, because I thought it was not possible to put a marker 
inside a line break. Now it is handled and let me know if you have other 
problems with the mapping positions.
Release in HEAD.
My position is before mapping is the *beginning* of the line-break, while
after the format, the mapped position happens to be *inside* the line-break. 
The correct behaviour would be for the position to stay at the beginning of
the line-break. My positionsToMap are valid, but not the mappedPositions.
ignore my last comment, I didn't see your second comment. I'll check the jar 
and tell you if it works.
According to your test case, it should work. I map to a position that makes 
sense. The '#' is at the same place using your test class. Let me know if it 
doesn't work for you.

I verified that this bug is fixed. Go ahead and release it.
However, I have seen other positions which didn't map correctly either... I 
think I'm going to write a small position map test for the code formatter...
Sure, I'd like to know when the positions are not mapped properly.</WithStack>
    <WithOutStack>The following code demonstrates two problems with mapped positions:

  1) position at end of source gets mapped to 0
  2) positions are not mapped correctly if the source contains
     multi-line comments.

For 2), it seems that the wrong offset of a position is equal to the number of 
line delimiters in the multi-line comment. I will workaround this by escaping 
multi-line comments with single-line comments, but it would be nice to have 
this fixed.

---8&lt;--- source ---8&lt;---

import org.eclipse.jdt.internal.formatter.CodeFormatter;

public class CodeFormatterBug {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"/**\n" +
			" * foo\n" +
			" */\n" +
			"Foo Bar\n" +
			"blah blah\n";
		
		int[] positions= {
			0,
			string.indexOf("foo"),	
			string.indexOf("Foo"),	
			string.indexOf("Bar"),
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);		
	}
}

---8&lt;--- output ---8&lt;---

before:
0 7 15 19 33 
#/**
 * #foo
 */
#Foo #Bar
blah blah
after:
0 12 20 24 0 
#/**
 * foo
#
 */
Fo#o Ba#java.lang.StringIndexOutOfBoundsException: String index out of range: -
24
	at java.lang.String.substring(String.java:1504)
	at CodeFormatterBug.print(CodeFormatterBug.java:12)
	at CodeFormatterBug.main(CodeFormatterBug.java:42)
Exception in thread "main"
Additional information:

I need this feature to support multi-line comments in templates. I'd like
to create templates for e.g. public methods:

/**
 *
 */
public ${return_type} ${name}(${arguments}) {
    ${cursor}
}

Right now, I have no good way to catch this situation.
Fix done in the CodeFormatter class. Several problems were found with the 
multiple lines comments.
All code formatter tests passed.
I was wrong with my verification. The bug is not fixed. I run the program above 
again and got the same result.
The fix is done only in HEAD. It hasn't been integrated in any build yet. If you 
want me to set it up on your machine let me know. You simply need to replace the 
CodeFormatter file.
Oh, I see. Can you send me the file, or would it be already in the build
20011114?
Unfortunately it seems that this fix is not included in the 20011115 build 
according to the release note. I will send you the file. It is only one class to 
change. You need to patch  your jdtcore.jar file in your install.
I have problems testing because of another bug. It seems the fixed 
CodeFormatter is still not in the repository. When is it going to be released?

Ok, I can verify that the CodeFormatter is fixed for the test case. Still 
waiting for it to be checked into the repository... :)
According to the build notes provided for the next integration build (20011120), 
it should be included in this build. It should be available this afternoon 
(Ottawa's time).

Unfortunately, I found another test case, where positions are not mapped 
correctly. The position in front of comment gets mapped into the comment.
Note that if you remove the last line, the mapped position is correct.

---8&lt;---

package foo;

import org.eclipse.jdt.internal.formatter.CodeFormatter;

public class CodeFormatterBug2 {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"foo\n" +
			"/*${cursor}*/\n" +
			"Foo\n"; // bug doesn't occur if you remove this line
		
		int[] positions= {
			0,
			string.indexOf("/"),	
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);
		
		while(true);
	}
}

---8&lt;--- output ---
before:
0 4 22 
#foo
#/*${cursor}*/
Foo
after:
0 6 23 
#foo
/#*${cursor}*/
Foo
This is a issue with the line separator. When the line separator (\n) is 
consumed after the foo token it is replaced by \r\n which contains an extra 
character. The offset is actually one and not two. Right now I take two instead 
of one and this explain the offset of one.
I am looking at a way to set properly the offset between formatted source and 
original source. If you change your test case to set the line separator of the 
code formatter to be \n, then the positions are right even if you keep the last 
line.

This problem did not occure befor the other bug fix. Was it some coincidence 
that it happened to work?

I'll use the workaround of specifying the same line delimiter used in the 
string for now.
Yes, this was a side-effect. But before the formatter could never map properly 
if the line delimiter has 2 characters and the string you want to format 
contained only one character line delimiter and the string contained a multiple 
line comment and it was a coincidence that this code was formatted properly. 
That change had to be done.
I found the problem. I simply forgot to map the positions inside the comment in 
case there is not line delimiters in the comment. I fixed it, but I have trouble 
to run the tests inside my 20011116 workspace. As soon as I can do it and I 
don't find any regression, I release it.

The fix is released in HEAD. I don't know when it will be integrated in a build.

It's me again :-)

I have a case where the position before a multi-byte line-break ends up
being inside a multi-byte line-break. This has severe consequences when
used as a selection in a StyledText. Although I think StyledText should
not choke on selection inside multi-byte line-breaks, the CodeFormatter
should not produce these off-by-one positions... So far, this only
happened within a multi-line comment.

---8&gt;---

package foo;

import org.eclipse.jdt.internal.formatter.CodeFormatter;

public class CodeFormatterBug3 {

	private static void print(String string, int[] positions) {
		for (int i= 0; i &lt; positions.length; i++)
			System.out.print(positions[i] + " ");			
		System.out.println("");

		for (int i= 0; i &lt; positions.length - 1; i++) {
			System.out.print("#"); // mark position			
			
			System.out.print(string.substring(positions[i], 
positions[i + 1]));
		}
	}

	public static void main(String arguments[]) {
		String string=
			"foo\r\n" +
			"/**X\r\n" +
			" * foo\r\n" +
			" */\r\n" +
			"bar";
		
		int[] positions= {
			0,
			string.indexOf("X") + 1,	
			string.length()
		};
	
		CodeFormatter formatter= new CodeFormatter();
		
		System.out.println("before:");
		print(string, positions);
				
		formatter.setPositionsToMap(positions);
		string= formatter.formatSourceString(string);		
		positions= formatter.getMappedPositions();

		System.out.println("after:");
		print(string, positions);
	}
}

---8&lt;---output---

before:
0 9 27 
#foo
/**X#
 * foo
 */
barafter:
0 10 27 
#foo
/**X
#
 * foo
 */
bar
Why is it possible to select a position inside a line break?
Of course there is no protection against this. The line breaks are written in an 
atomic manner. This explains the offset by one after it.
I will try to find a solution for that, but I think such a position doesn't make 
sense to me.
Did you find another bug except this position inside a line break?

I have a fix for it and I added tests in the formatter tests suite. I simply 
didn't handle this case, because I thought it was not possible to put a marker 
inside a line break. Now it is handled and let me know if you have other 
problems with the mapping positions.
Release in HEAD.
My position is before mapping is the *beginning* of the line-break, while
after the format, the mapped position happens to be *inside* the line-break. 
The correct behaviour would be for the position to stay at the beginning of
the line-break. My positionsToMap are valid, but not the mappedPositions.
ignore my last comment, I didn't see your second comment. I'll check the jar 
and tell you if it works.
According to your test case, it should work. I map to a position that makes 
sense. The '#' is at the same place using your test class. Let me know if it 
doesn't work for you.

I verified that this bug is fixed. Go ahead and release it.
However, I have seen other positions which didn't map correctly either... I 
think I'm going to write a small position map test for the code formatter...
Sure, I'd like to know when the positions are not mapped properly.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5472" />
    <CreationDate amount="2001-11-02 11:22:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Trailing space in ClassPath Dialog</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>From Julian:
I think the "Classpath Variable Selection" dialog is an OTI one (see screen cap 
below).  If so, would it be possible for you to forward on to the owner of this 
dialog the suggestion that some additional code gets included to strip off any 
trailing space characters that might be included in the "Path Extension" field. 
I'm getting repeatedly caught by this problem (as I cut and paste strings from 
the readmes that come with the various WSAD example projects).
Added the path validation routines from core.
This does not allow spaces at the end of a path.

Sorry that this is more restrictive than before, but I am not sure if trim a 
path is a valid -no change- operation. 

in 11101</WithStack>
    <WithOutStack>From Julian:
I think the "Classpath Variable Selection" dialog is an OTI one (see screen cap 
below).  If so, would it be possible for you to forward on to the owner of this 
dialog the suggestion that some additional code gets included to strip off any 
trailing space characters that might be included in the "Path Extension" field. 
I'm getting repeatedly caught by this problem (as I cut and paste strings from 
the readmes that come with the various WSAD example projects).
Added the path validation routines from core.
This does not allow spaces at the end of a path.

Sorry that this is more restrictive than before, but I am not sure if trim a 
path is a valid -no change- operation. 

in 11101</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5473" />
    <CreationDate amount="2001-11-02 11:32:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Shift-Left behavior with intermixed tabs and spaces</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="9">
        <Lines>
          <Line>1. In a default text editor type in the following:</Line>
          <Line />
          <Line>&lt;space&gt;&lt;tab&gt;some text</Line>
          <Line>&lt;tab&gt;some text</Line>
          <Line />
          <Line>2. Now highlight the two lines above and execute Shift-Left.  Notice that</Line>
          <Line>nothing moves.</Line>
          <Line>3. Replace the tab character in the first line with spaces so that the two</Line>
          <Line>lines are indented the same visually.  Execute Shift-Left.  The text now moves.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20011025

1. In a default text editor type in the following:

&lt;space&gt;&lt;tab&gt;some text
&lt;tab&gt;some text

2. Now highlight the two lines above and execute Shift-Left.  Notice that 
nothing moves.  
3. Replace the tab character in the first line with spaces so that the two 
lines are indented the same visually.  Execute Shift-Left.  The text now moves.

I'm not sure how this is spec'd, but in the first scenario it seems like the 
second line should be shifted left and the first line should be shifted left at 
least to the space character (i.e., get rid of the tab).  At any rate, it's 
definitely confusing if there is a stray space.  You don't know why the text 
won't shift.
fixed &gt; 20020108</WithStack>
    <WithOutStack>Build 20011025

1. In a default text editor type in the following:

&lt;space&gt;&lt;tab&gt;some text
&lt;tab&gt;some text

2. Now highlight the two lines above and execute Shift-Left.  Notice that 
nothing moves.  
3. Replace the tab character in the first line with spaces so that the two 
lines are indented the same visually.  Execute Shift-Left.  The text now moves.

I'm not sure how this is spec'd, but in the first scenario it seems like the 
second line should be shifted left and the first line should be shifted left at 
least to the space character (i.e., get rid of the tab).  At any rate, it's 
definitely confusing if there is a stray space.  You don't know why the text 
won't shift.
fixed &gt; 20020108</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5474" />
    <CreationDate amount="2001-11-02 11:35:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>should not use tool tips for labels</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>To be consistent with other preference pages, the debug preference labels for 
step filtering (filter sythetic methods, etc), should not specify tool tips. 
Instead, the relevant information should just be in the label.
Fixed.  Removed tooltips.
please verify
Verified.</WithStack>
    <WithOutStack>To be consistent with other preference pages, the debug preference labels for 
step filtering (filter sythetic methods, etc), should not specify tool tips. 
Instead, the relevant information should just be in the label.
Fixed.  Removed tooltips.
please verify
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5475" />
    <CreationDate amount="2001-11-02 11:38:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>F4 causes loss of context when called from a method view</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1) Open a class with many methods</Line>
          <Line>2) Make sure "show of source element only" is selected</Line>
          <Line>3) Choose a method</Line>
          <Line>4) Press F4 with no selection</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1) Open a class with many methods
2) Make sure "show of source element only" is selected
3) Choose a method
4) Press F4 with no selection

The class is open on the hierarchy view and the full source is shown in the 
editor. The method focus was lost. You have to find and select the method 
again.
fixed &gt; 11120</WithStack>
    <WithOutStack>1) Open a class with many methods
2) Make sure "show of source element only" is selected
3) Choose a method
4) Press F4 with no selection

The class is open on the hierarchy view and the full source is shown in the 
editor. The method focus was lost. You have to find and select the method 
again.
fixed &gt; 11120</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5476" />
    <CreationDate amount="2001-11-02 11:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P1" />
    <bug_severity amount="minor" />
    <Summery>TVT Text extension/truncation problem in jar packager</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="2">
        <Lines>
          <Line>- added JarManifestWizardPage.sealedPackagesDetailsButton.text= D&amp;etails...</Line>
          <Line>- removed the filling spaces described by this PR</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Messages are truncated on the Jar Packager Dialog. The message format in the US 
english contains trailing spaces after text with a \ presumably marking end of 
message.  One problem we foud was that the tranlation tool mangles the messages 
where multiple messages (6) are moved onto a single line.  The translators did 
find the problem and correcte, putting the (6) messages on seperate lines.  
However, the messages on the dialog were truncated and the buttons were 
scrunched up.  The workaround to this problem is time consumeing and very error 
prone.  Asking the translators to put in the exact number of blanks after there 
NL text as the number of trailing blenks in the US english is not a permenant 
solution.   
 
The corresponding strings are located in file: 
eclipse\plugins\org.eclipse.jdt.ui\jdt_jar\org\eclipse\jdt\internal\ui\jarpackag
er\JarPackagerMessages.properties
Created attachment 61
Truncation and Button Scrunching on Jar Packager dialog
Here are the lines in properties file that are causing the problem:

# Trailing spaces are a workaround
JarManifestWizardPage.jarSealed=JAR 
sealed                                            \ 
JarManifestWizardPage.jarSealedExceptOne=JAR sealed, but 1 package 
unsealed                                            \ 
JarManifestWizardPage.jarSealedExceptSome=JAR sealed, but {0} packages 
unsealed                                            \ 
JarManifestWizardPage.nothingSealed=Nothing 
sealed                                            \ 
JarManifestWizardPage.onePackageSealed=1 package 
sealed                                            \ 
JarManifestWizardPage.somePackagesSealed={0} packages 
sealed                                            \ 
JarManifestWizardPage.error.manifestPathMustBeAbsolute=Manifest file path must 
be absolute (start with /)

we are aware of this problem but couldn't fix for 1.0.
Dani is it addressed in the 2.0 stream? 
The problem is fixed in the current code stream (build 20011101).

Scott, could you please attach the JarPackagerMessages.properties that causes 
the attached dialog in order to verify the fix.

Created attachment 68
Java Unicode converted properties file from nl fragment.
Verified (build 20011101) against attached properties file.
Look is OK, spaces are no longer required.

Note: The 1.0 properties file had to be edited first because the spaces are no 
longer required and because there are new resources on that page.
- added JarManifestWizardPage.sealedPackagesDetailsButton.text= D&amp;etails...
- removed the filling spaces described by this PR

Created attachment 92
Same truncation in Japanese translation</WithStack>
    <WithOutStack>Messages are truncated on the Jar Packager Dialog. The message format in the US 
english contains trailing spaces after text with a \ presumably marking end of 
message.  One problem we foud was that the tranlation tool mangles the messages 
where multiple messages (6) are moved onto a single line.  The translators did 
find the problem and correcte, putting the (6) messages on seperate lines.  
However, the messages on the dialog were truncated and the buttons were 
scrunched up.  The workaround to this problem is time consumeing and very error 
prone.  Asking the translators to put in the exact number of blanks after there 
NL text as the number of trailing blenks in the US english is not a permenant 
solution.   
 
The corresponding strings are located in file: 
eclipse\plugins\org.eclipse.jdt.ui\jdt_jar\org\eclipse\jdt\internal\ui\jarpackag
er\JarPackagerMessages.properties
Created attachment 61
Truncation and Button Scrunching on Jar Packager dialog
Here are the lines in properties file that are causing the problem:

# Trailing spaces are a workaround
JarManifestWizardPage.jarSealed=JAR 
sealed                                            \ 
JarManifestWizardPage.jarSealedExceptOne=JAR sealed, but 1 package 
unsealed                                            \ 
JarManifestWizardPage.jarSealedExceptSome=JAR sealed, but {0} packages 
unsealed                                            \ 
JarManifestWizardPage.nothingSealed=Nothing 
sealed                                            \ 
JarManifestWizardPage.onePackageSealed=1 package 
sealed                                            \ 
JarManifestWizardPage.somePackagesSealed={0} packages 
sealed                                            \ 
JarManifestWizardPage.error.manifestPathMustBeAbsolute=Manifest file path must 
be absolute (start with /)

we are aware of this problem but couldn't fix for 1.0.
Dani is it addressed in the 2.0 stream? 
The problem is fixed in the current code stream (build 20011101).

Scott, could you please attach the JarPackagerMessages.properties that causes 
the attached dialog in order to verify the fix.

Created attachment 68
Java Unicode converted properties file from nl fragment.
Verified (build 20011101) against attached properties file.
Look is OK, spaces are no longer required.

Note: The 1.0 properties file had to be edited first because the spaces are no 
longer required and because there are new resources on that page.
- added JarManifestWizardPage.sealedPackagesDetailsButton.text= D&amp;etails...
- removed the filling spaces described by this PR

Created attachment 92
Same truncation in Japanese translation</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5477" />
    <CreationDate amount="2001-11-02 11:46:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Missing resources in packages view</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>build 20011101

When I right click on a project in the packages view the team and replace with 
menu items have no labels.
JDT problem, as they contribute this plugin.
File plugin.properties is missing. Suggest you check your build.properties file.
Can I use the old plugin.properties file from the 1025 build as a workaround?
When I turn on "Show version info" in the package view it doesn't actually show 
anything (no version names, no scratched files).  
works in 20020214
forgot to close</WithStack>
    <WithOutStack>build 20011101

When I right click on a project in the packages view the team and replace with 
menu items have no labels.
JDT problem, as they contribute this plugin.
File plugin.properties is missing. Suggest you check your build.properties file.
Can I use the old plugin.properties file from the 1025 build as a workaround?
When I turn on "Show version info" in the package view it doesn't actually show 
anything (no version names, no scratched files).  
works in 20020214
forgot to close</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5478" />
    <CreationDate amount="2001-11-02 11:53:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>CTabFolder tabs don't look like tabs</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="7">
        <Lines>
          <Line>a.) place a margin between the Pane's border and the TabFolder's tabs.  In</Line>
          <Line>this solution you would only have to render the active tab plus the dividers</Line>
          <Line>between the remaining labels.  Negative: the margin requires more real estate</Line>
          <Line>b.) Remove the Pane's border somehow, allowing the TabFolder to render the</Line>
          <Line>entire border itself.  PRO: this wouldn't require a margin, less real estate.</Line>
          <Line>CONs: Even the non-active tabs would have to be enclosed by borders, or the</Line>
          <Line>labels would appear to float outside of the tab folder.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="18">
        <Lines>
          <Line>1) The active tab is not rendered properly.  It almost appears to be raised,</Line>
          <Line>but the border is not quite right.  The left edge appears to be indented, while</Line>
          <Line>the right edget appears raised.  The use of light gray and dark gray suggests</Line>
          <Line>that 3D was the intention.</Line>
          <Line>2) Inactive tabs should have a lighter background color and lighter font color.</Line>
          <Line>3) The divider line should be drawn floating in the middle like a separator,</Line>
          <Line>rather than attached to the horizontal edge (either above or below, depending</Line>
          <Line>on tab placement) of the form.</Line>
          <Line>4) The bottoms of the tabs are not entirely distinguishable because part of the</Line>
          <Line>tab is drawn for free by the border that is around Panes in Jface.  This makes</Line>
          <Line>finding the active tab even harder.  There are two possible solutions.</Line>
          <Line>a.) place a margin between the Pane's border and the TabFolder's tabs.  In</Line>
          <Line>this solution you would only have to render the active tab plus the dividers</Line>
          <Line>between the remaining labels.  Negative: the margin requires more real estate</Line>
          <Line>b.) Remove the Pane's border somehow, allowing the TabFolder to render the</Line>
          <Line>entire border itself.  PRO: this wouldn't require a margin, less real estate.</Line>
          <Line>CONs: Even the non-active tabs would have to be enclosed by borders, or the</Line>
          <Line>labels would appear to float outside of the tab folder.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>build 20011101

This has been a problem for quite a while. Inactive tabs are very hard to 
recognize. There's just a little vertical line separating half of the tab from 
the next. The last tab doesn't even have the line - it's just a random label 
hanging on a grey background. Maybe a beveled line would help, like in the 
native TabFolder.
The appearance of the CTabFolder tabs is under the control of the Eclipse u/i 
team. I believe at one time, they were looking for some enhancements to it 
(like roll-over highlighting) but the current L&amp;F was deliberate. 

Moving to UI component for comment.

1) The active tab is not rendered properly.  It almost appears to be raised, 
but the border is not quite right.  The left edge appears to be indented, while 
the right edget appears raised.  The use of light gray and dark gray suggests 
that 3D was the intention.
2) Inactive tabs should have a lighter background color and lighter font color.
3) The divider line should be drawn floating in the middle like a separator, 
rather than attached to the horizontal edge (either above or below, depending 
on tab placement) of the form.
4) The bottoms of the tabs are not entirely distinguishable because part of the 
tab is drawn for free by the border that is around Panes in Jface.  This makes 
finding the active tab even harder.  There are two possible solutions.
   a.) place a margin between the Pane's border and the TabFolder's tabs.  In 
this solution you would only have to render the active tab plus the dividers 
between the remaining labels.  Negative: the margin requires more real estate
   b.) Remove the Pane's border somehow, allowing the TabFolder to render the 
entire border itself.  PRO: this wouldn't require a margin, less real estate.  
CONs: Even the non-active tabs would have to be enclosed by borders, or the 
labels would appear to float outside of the tab folder.

I can provide mockups of these as images, but I can't figure out how to post 
screenshots here.
As I said before, the appearance of the tabs is under the control of the u/i 
team. I believe we are exactly mimicking the mockup screens sent us by the 
graphics artists. If a different appearance is provided by the u/i team, we 
will duplicate it.

There are a few tweaks that I would like to make to the CTabFolder behavior for 
2.0
please look at Randy's swtpatch.jar that is just posted to newsgroup.

as "Randy's UI patch (hack) for 2.0 Final Release"

there the CTabFolder looks much better (as a real tab)
CTabFolder still does not look right. Need to do something better for 2.1
Some issues might have been improved during the 3.0 cycle.
This work was completed in 3.0</WithStack>
    <WithOutStack>build 20011101

This has been a problem for quite a while. Inactive tabs are very hard to 
recognize. There's just a little vertical line separating half of the tab from 
the next. The last tab doesn't even have the line - it's just a random label 
hanging on a grey background. Maybe a beveled line would help, like in the 
native TabFolder.
The appearance of the CTabFolder tabs is under the control of the Eclipse u/i 
team. I believe at one time, they were looking for some enhancements to it 
(like roll-over highlighting) but the current L&amp;F was deliberate. 

Moving to UI component for comment.

1) The active tab is not rendered properly.  It almost appears to be raised, 
but the border is not quite right.  The left edge appears to be indented, while 
the right edget appears raised.  The use of light gray and dark gray suggests 
that 3D was the intention.
2) Inactive tabs should have a lighter background color and lighter font color.
3) The divider line should be drawn floating in the middle like a separator, 
rather than attached to the horizontal edge (either above or below, depending 
on tab placement) of the form.
4) The bottoms of the tabs are not entirely distinguishable because part of the 
tab is drawn for free by the border that is around Panes in Jface.  This makes 
finding the active tab even harder.  There are two possible solutions.
   a.) place a margin between the Pane's border and the TabFolder's tabs.  In 
this solution you would only have to render the active tab plus the dividers 
between the remaining labels.  Negative: the margin requires more real estate
   b.) Remove the Pane's border somehow, allowing the TabFolder to render the 
entire border itself.  PRO: this wouldn't require a margin, less real estate.  
CONs: Even the non-active tabs would have to be enclosed by borders, or the 
labels would appear to float outside of the tab folder.

I can provide mockups of these as images, but I can't figure out how to post 
screenshots here.
As I said before, the appearance of the tabs is under the control of the u/i 
team. I believe we are exactly mimicking the mockup screens sent us by the 
graphics artists. If a different appearance is provided by the u/i team, we 
will duplicate it.

There are a few tweaks that I would like to make to the CTabFolder behavior for 
2.0
please look at Randy's swtpatch.jar that is just posted to newsgroup.

as "Randy's UI patch (hack) for 2.0 Final Release"

there the CTabFolder looks much better (as a real tab)
CTabFolder still does not look right. Need to do something better for 2.1
Some issues might have been improved during the 3.0 cycle.
This work was completed in 3.0</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5479" />
    <CreationDate amount="2001-11-02 11:55:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Feature Request: Tooltip support for MultiPageEditors</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>From EC: 

[Answer] [eclipse.tools]

Subject: MultiPageEditorPart
From: jsholl@us.ibm.com (Jason Sholl)
Newsgroups: eclipse.tools
Organization: http://www.eclipse.org
Date: Nov 02 2001 15:26:30

When a MultiPageEditorPart has more tabs that real estate to show them,
they become truncated; e.g. if 5 tabs are each supposed to read "file
number one", "file number two", and so on, they read "file num...", "file
num...").  A nice feature would be for hover help to pop up above each tab
displaying the entire name when the tabs are truncated and the mouse is
moved over them.
Pls verify that this is fixed. 
Can you verify this...
Build: 20010123

This feature works now.
Resolved as Fixed... should be Invalid
I'm just reopening the bug so I can resolve it correctly
This feature works in build 20020123.</WithStack>
    <WithOutStack>From EC: 

[Answer] [eclipse.tools]

Subject: MultiPageEditorPart
From: jsholl@us.ibm.com (Jason Sholl)
Newsgroups: eclipse.tools
Organization: http://www.eclipse.org
Date: Nov 02 2001 15:26:30

When a MultiPageEditorPart has more tabs that real estate to show them,
they become truncated; e.g. if 5 tabs are each supposed to read "file
number one", "file number two", and so on, they read "file num...", "file
num...").  A nice feature would be for hover help to pop up above each tab
displaying the entire name when the tabs are truncated and the mouse is
moved over them.
Pls verify that this is fixed. 
Can you verify this...
Build: 20010123

This feature works now.
Resolved as Fixed... should be Invalid
I'm just reopening the bug so I can resolve it correctly
This feature works in build 20020123.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5480" />
    <CreationDate amount="2001-11-02 11:57:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P4" />
    <bug_severity amount="enhancement" />
    <Summery>Tabs too tall</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>build 20011101

In this drop the tabs have grown pretty big. They look a little boxy. I noticed 
this first with the tabs that are used to access views but the editor tabs are 
a little too big as well. Can we shave off a pixel or two to get closer to the 
old size?
There are no plans to change the current behavior</WithStack>
    <WithOutStack>build 20011101

In this drop the tabs have grown pretty big. They look a little boxy. I noticed 
this first with the tabs that are used to access views but the editor tabs are 
a little too big as well. Can we shave off a pixel or two to get closer to the 
old size?
There are no plans to change the current behavior</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5481" />
    <CreationDate amount="2001-11-02 12:02:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>NPE  moving a class</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>1) Select a class that has other classes referring to it</Line>
          <Line>2) Select move</Line>
          <Line>3) Select the new package and the Update References button</Line>
          <Line>4) Move will succeed but you will get a NullPointerException warning. This does</Line>
          <Line>not generate a log file.</Line>
          <Line>Works for me in build 20011219</Line>
          <Line>Confirmed works in 1219.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Build 1101

If you move a class that it referred to in other classes with the "Update 
References" option selected you will get a NullPointerException.

STEPS
1) Select a class that has other classes referring to it
2) Select move
3) Select the new package and the Update References button
4) Move will succeed but you will get a NullPointerException warning. This does 
not generate a log file.
Works for me in build 20011219
Confirmed works in 1219.</WithStack>
    <WithOutStack>Build 1101

If you move a class that it referred to in other classes with the "Update 
References" option selected you will get a NullPointerException.

STEPS
1) Select a class that has other classes referring to it
2) Select move
3) Select the new package and the Update References button
4) Move will succeed but you will get a NullPointerException warning. This does 
not generate a log file.
Works for me in build 20011219
Confirmed works in 1219.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5482" />
    <CreationDate amount="2001-11-02 12:07:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>The template for "main" puts "[]" after variable name</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="functiondef">
        <location start="42" end="91" />
        <code>public static void main(String arguments[]) {
	
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="246" end="295" />
        <code>public static void main(String[] arguments) {
	
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="334" end="378" />
        <code>public static void main(String[] args) {
	
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The main template creates the following:

public static void main(String arguments[]) {
	
}

The "[]" after the variable name is considered a C++ construct.  This should be
changed to the following in order to give the tool a more Javaish feel.

public static void main(String[] arguments) {
	
}
or, as main is most oftenly written:

public static void main(String[] args) {
	
}
Correct "String args[]" is legal but not considered as Java best practice.
I noticed this today :)
fixed &gt; 208</WithStack>
    <WithOutStack>The main template creates the following:

public static void main(String arguments[]) {
	
}

The "[]" after the variable name is considered a C++ construct.  This should be
changed to the following in order to give the tool a more Javaish feel.

public static void main(String[] arguments) {
	
}
or, as main is most oftenly written:

public static void main(String[] args) {
	
}
Correct "String args[]" is legal but not considered as Java best practice.
I noticed this today :)
fixed &gt; 208</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5483" />
    <CreationDate amount="2001-11-02 12:16:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>Organize imports should not add invisible type</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>build 20011101

When the code references an invisible type A and I select organize imports the 
type A gets added to the import list.
It shouldn't since the code is incorrect and the import will result in a 
compilation error.
this would require the Java Core Search to return the visibilty of type 
references.

Move to 'inactive'
Got address in 2.0. Organize import now honors visibility and tries to import 
types that are visible. For example if you have two types X where one is 
visible and you have a reference to X then the visible type gets imported by 
organize imports.
.</WithStack>
    <WithOutStack>build 20011101

When the code references an invisible type A and I select organize imports the 
type A gets added to the import list.
It shouldn't since the code is incorrect and the import will result in a 
compilation error.
this would require the Java Core Search to return the visibilty of type 
references.

Move to 'inactive'
Got address in 2.0. Organize import now honors visibility and tries to import 
types that are visible. For example if you have two types X where one is 
visible and you have a reference to X then the visible type gets imported by 
organize imports.
.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5484" />
    <CreationDate amount="2001-11-02 12:17:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Tab no longer traverses between widgets!!!</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="functiondef">
        <location start="256" end="1119" />
        <code>public static void main (String [] args) {
	Display display = new Display ();
	final Shell shell2 = new Shell (display);
	Button b = new Button(shell2, SWT.PUSH);
	b.setText("Dialog...");
	b.setBounds(10, 10, 100, 40);
	b.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			Shell shell= new Shell(shell2, SWT.CLOSE | SWT.TITLE);
			GridLayout layout = new GridLayout();
			layout.numColumns = 3;
			shell.setLayout(layout);
			for (int i = 0; i &lt; 8; i++) {
				Button x = new Button(shell, SWT.PUSH);
				x.setText("Button &amp;"+i);
			}
			for (int i = 0; i &lt; 8; i++) {
				Text x = new Text(shell, SWT.PUSH);
				x.setText("Text "+i);
			}
			shell.pack();
			shell.open ();			
		}
	});
	
	shell2.pack();
	shell2.open();
	while (!shell2.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
	display.dispose ();
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1234" end="1421" />
        <code>int widgetStyle () {

    /* Set WS_POPUP and clear WS_VISIBLE and WS_TABSTOP */
    int bits = super.widgetStyle () | OS.WS_POPUP;
    bits &amp;= ~(OS.WS_VISIBLE | OS.WS_TABSTOP);
    ...
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="1562" end="1683" />
        <code>boolean isTabGroup () {
    int bits = OS.GetWindowLong (handle, OS.GWL_STYLE);
    return (bits &amp; OS.WS_TABSTOP) != 0;
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>20011101
Open the new repo wizard. Try to tab between fields. You can't.
Open the new Java project wizard. Try to tab between fields. You can't.
I don't know if this is UI or SWT, but it is critical.
Here is a simple SWT example to reproduce the problem:

public static void main (String [] args) {
	Display display = new Display ();
	final Shell shell2 = new Shell (display);
	Button b = new Button(shell2, SWT.PUSH);
	b.setText("Dialog...");
	b.setBounds(10, 10, 100, 40);
	b.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			Shell shell= new Shell(shell2, SWT.CLOSE | SWT.TITLE);
			GridLayout layout = new GridLayout();
			layout.numColumns = 3;
			shell.setLayout(layout);
			for (int i = 0; i &lt; 8; i++) {
				Button x = new Button(shell, SWT.PUSH);
				x.setText("Button &amp;"+i);
			}
			for (int i = 0; i &lt; 8; i++) {
				Text x = new Text(shell, SWT.PUSH);
				x.setText("Text "+i);
			}
			shell.pack();
			shell.open ();			
		}
	});
	
	shell2.pack();
	shell2.open();
	while (!shell2.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
	display.dispose ();
}

Once you open the dialog, tabbing in the dialog fails.

I think the problem is teh following code in Decorator:

int widgetStyle () {

    /* Set WS_POPUP and clear WS_VISIBLE and WS_TABSTOP */
    int bits = super.widgetStyle () | OS.WS_POPUP;
    bits &amp;= ~(OS.WS_VISIBLE | OS.WS_TABSTOP);
    ...
}

The dialog is a popup and thus the WS_TABSTOP bit is cleared.  But in 
computeTabList, it checks for Tab groups using the following code:

boolean isTabGroup () {
    int bits = OS.GetWindowLong (handle, OS.GWL_STYLE);
    return (bits &amp; OS.WS_TABSTOP) != 0;
}

The dialog is determined to not be a tab group and is not included in the tab 
list so none of the tabbing in the dialog works.
Defect is in SWT component. 
Fixed in latest 2.0 build (Nov 5/01)</WithStack>
    <WithOutStack>20011101
Open the new repo wizard. Try to tab between fields. You can't.
Open the new Java project wizard. Try to tab between fields. You can't.
I don't know if this is UI or SWT, but it is critical.
Here is a simple SWT example to reproduce the problem:

public static void main (String [] args) {
	Display display = new Display ();
	final Shell shell2 = new Shell (display);
	Button b = new Button(shell2, SWT.PUSH);
	b.setText("Dialog...");
	b.setBounds(10, 10, 100, 40);
	b.addListener(SWT.Selection, new Listener() {
		public void handleEvent(Event e) {
			Shell shell= new Shell(shell2, SWT.CLOSE | SWT.TITLE);
			GridLayout layout = new GridLayout();
			layout.numColumns = 3;
			shell.setLayout(layout);
			for (int i = 0; i &lt; 8; i++) {
				Button x = new Button(shell, SWT.PUSH);
				x.setText("Button &amp;"+i);
			}
			for (int i = 0; i &lt; 8; i++) {
				Text x = new Text(shell, SWT.PUSH);
				x.setText("Text "+i);
			}
			shell.pack();
			shell.open ();			
		}
	});
	
	shell2.pack();
	shell2.open();
	while (!shell2.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
	display.dispose ();
}

Once you open the dialog, tabbing in the dialog fails.

I think the problem is teh following code in Decorator:

int widgetStyle () {

    /* Set WS_POPUP and clear WS_VISIBLE and WS_TABSTOP */
    int bits = super.widgetStyle () | OS.WS_POPUP;
    bits &amp;= ~(OS.WS_VISIBLE | OS.WS_TABSTOP);
    ...
}

The dialog is a popup and thus the WS_TABSTOP bit is cleared.  But in 
computeTabList, it checks for Tab groups using the following code:

boolean isTabGroup () {
    int bits = OS.GetWindowLong (handle, OS.GWL_STYLE);
    return (bits &amp; OS.WS_TABSTOP) != 0;
}

The dialog is determined to not be a tab group and is not included in the tab 
list so none of the tabbing in the dialog works.
Defect is in SWT component. 
Fixed in latest 2.0 build (Nov 5/01)</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5485" />
    <CreationDate amount="2001-11-02 12:25:00 -0500" />
    <DupId amount="6248" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="critical" />
    <Summery>NPE if missing launcher when using launch history</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>If someone has a history that designates a launcher that is not available (as I 
did, workspace had launch history for Eclipse Launcher but I forgot to copy the 
Eclipse launcher plugin) you get a NPE in line 37 
RelaunchActionDelegate#relaunch(ILauncher, String, Object).

We should handle this case more gracefully with an error dialog on what is 
missing.
To consider with launch configuration re-work


*** This bug has been marked as a duplicate of 6248 ***</WithStack>
    <WithOutStack>If someone has a history that designates a launcher that is not available (as I 
did, workspace had launch history for Eclipse Launcher but I forgot to copy the 
Eclipse launcher plugin) you get a NPE in line 37 
RelaunchActionDelegate#relaunch(ILauncher, String, Object).

We should handle this case more gracefully with an error dialog on what is 
missing.
To consider with launch configuration re-work


*** This bug has been marked as a duplicate of 6248 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5486" />
    <CreationDate amount="2001-11-02 12:31:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Incorrect bracket highlighting</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="3">
      <source_code type="class">
        <location start="21" end="42" />
        <code>public class Test {
}</code>
      </source_code>
      <source_code type="class">
        <location start="105" end="152" />
        <code>public class Test {
   public void a() {
   }
}</code>
      </source_code>
      <source_code type="class">
        <location start="211" end="270" />
        <code>public class Test {
    public void a() {* (1)
    }* (2)
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Type the following.

public class Test {
}

Now insert the following method (by typing, not by pasting:

public class Test {
   public void a() {
   }
}

The following brackets are highlighted (signified by *)

public class Test {
    public void a() {* (1)
    }* (2)
}* (3)

The last bracket (3) is erroneously highlighted. When I first
type the first bracket (1), 3 is correctly highlighted, but when
I type (2), (3) is not de-highlighted.
Further experimenting indicates this is only one of several cases where 
brackets are incorrectly highlighted and not de-highlighted. After typing in 
some simple code, I had six separate brackets all highlighted at the same time.
Build 20011113.</WithStack>
    <WithOutStack>Type the following.

public class Test {
}

Now insert the following method (by typing, not by pasting:

public class Test {
   public void a() {
   }
}

The following brackets are highlighted (signified by *)

public class Test {
    public void a() {* (1)
    }* (2)
}* (3)

The last bracket (3) is erroneously highlighted. When I first
type the first bracket (1), 3 is correctly highlighted, but when
I type (2), (3) is not de-highlighted.
Further experimenting indicates this is only one of several cases where 
brackets are incorrectly highlighted and not de-highlighted. After typing in 
some simple code, I had six separate brackets all highlighted at the same time.
Build 20011113.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5487" />
    <CreationDate amount="2001-11-02 12:32:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>I don't like pink</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I find the pink highlighting of brackets very visually distracting. Please let 
me select another color.

Also, PLEASE PLEASE allow me to TURN OFF the bracket highlighting feature. I 
find it distracting in general, and not everyone wants it.
Also, if the cursor is on top of the highlighted box, the cursor itself flashes 
in a bright green, which is also quite weird.
User can trun off bracket matching. Additionally the color is customizable</WithStack>
    <WithOutStack>I find the pink highlighting of brackets very visually distracting. Please let 
me select another color.

Also, PLEASE PLEASE allow me to TURN OFF the bracket highlighting feature. I 
find it distracting in general, and not everyone wants it.
Also, if the cursor is on top of the highlighted box, the cursor itself flashes 
in a bright green, which is also quite weird.
User can trun off bracket matching. Additionally the color is customizable</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5488" />
    <CreationDate amount="2001-11-02 13:50:00 -0500" />
    <DupId amount="5470" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>No cursor feedback when moving views</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Click on the title bar of the navigator view, and drag it to create a fast 
view. The cursor does not change when dragging the view over appropriate places 
in the workbench, it remains a cursor. Detach the view from the workbench. Now 
drag it around and try to find an appropriate place to drop it. The cursor 
again doesn't change from the arrow, making it difficult to know where to drop 
it.


*** This bug has been marked as a duplicate of 5470 ***</WithStack>
    <WithOutStack>Click on the title bar of the navigator view, and drag it to create a fast 
view. The cursor does not change when dragging the view over appropriate places 
in the workbench, it remains a cursor. Detach the view from the workbench. Now 
drag it around and try to find an appropriate place to drop it. The cursor 
again doesn't change from the arrow, making it difficult to know where to drop 
it.


*** This bug has been marked as a duplicate of 5470 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5489" />
    <CreationDate amount="2001-11-02 14:14:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>File editors page grabs focus</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Window-&gt;Preferences
Click on Workbench with the mouse.
Use the arrow keys on the keyboard to traverse the tree.
Select the file editors page with the keyboard.
The keyboard focus jumps over to the page contents.
No other preference page does this.
Does not occur in build 20020108. Closing</WithStack>
    <WithOutStack>Window-&gt;Preferences
Click on Workbench with the mouse.
Use the arrow keys on the keyboard to traverse the tree.
Select the file editors page with the keyboard.
The keyboard focus jumps over to the page contents.
No other preference page does this.
Does not occur in build 20020108. Closing</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5490" />
    <CreationDate amount="2001-11-02 14:16:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Show Version Info no longer works</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>In 20011101, show version info in the packages page does nothing.
build.properties problem. addressed in the next build.</WithStack>
    <WithOutStack>In 20011101, show version info in the packages page does nothing.
build.properties problem. addressed in the next build.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5491" />
    <CreationDate amount="2001-11-02 14:20:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>StyledText - getStyleRangeAtOffset allows offset == getCharCount</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>You can call getStyleRangeAtOffset(0) on an empty widget which is incorrect.
The range of valid offsets should be 0..getCharCount()-1 like is the case with 
almost all the other API.

This API is used incorrectly in the SwtStyledTextUseCase.handleExtendedModify 
and in org.eclipse.swt.examples.texteditor.TextEditor.handleExtendedModify.
Fixed and released TextEditor example and SwtStyledTextUseCase. The fixes apply 
even to the old getStyleRangeAtOffset behavior.
Fixed in the latest
-</WithStack>
    <WithOutStack>You can call getStyleRangeAtOffset(0) on an empty widget which is incorrect.
The range of valid offsets should be 0..getCharCount()-1 like is the case with 
almost all the other API.

This API is used incorrectly in the SwtStyledTextUseCase.handleExtendedModify 
and in org.eclipse.swt.examples.texteditor.TextEditor.handleExtendedModify.
Fixed and released TextEditor example and SwtStyledTextUseCase. The fixes apply 
even to the old getStyleRangeAtOffset behavior.
Fixed in the latest
-</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5492" />
    <CreationDate amount="2001-11-02 14:37:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="other" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Open in Hierarchy method list is enabled even when nothing is selected</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Ensure no item is selected in the hierachy view's member list</Line>
          <Line>2) Right click - not on an item</Line>
          <Line>3) Open is present and enabled</Line>
          <Line>4) Select Open, nothing happens</Line>
          <Line>fixed &gt;11112</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>206

1) Ensure no item is selected in the hierachy view's member list
2) Right click - not on an item
3) Open is present and enabled
4) Select Open, nothing happens
fixed &gt;11112</WithStack>
    <WithOutStack>206

1) Ensure no item is selected in the hierachy view's member list
2) Right click - not on an item
3) Open is present and enabled
4) Select Open, nothing happens
fixed &gt;11112</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5493" />
    <CreationDate amount="2001-11-02 14:57:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Adding project references doesn't update the classpath</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>When a project is added to the source path for a java project, it automatically 
adds a core project reference.  The reverse is not true, adding a project 
reference does not automatically update the source path.  Consider doing this to 
ensure consistency between the two lists...
Project references are used by the Java tooling to induce a build order 
consistent with the classpath settings.

In case a project had more than the Java nature, other tooling might set 
further project references to control further the build order. These references 
would however not be meaningfull for a Java classpath.

So I do not think it would make sense to do it this way. But I understand that
it would though be practical to directly set project references in the UI and 
have them be ordered on the classpath afterwards.</WithStack>
    <WithOutStack>When a project is added to the source path for a java project, it automatically 
adds a core project reference.  The reverse is not true, adding a project 
reference does not automatically update the source path.  Consider doing this to 
ensure consistency between the two lists...
Project references are used by the Java tooling to induce a build order 
consistent with the classpath settings.

In case a project had more than the Java nature, other tooling might set 
further project references to control further the build order. These references 
would however not be meaningfull for a Java classpath.

So I do not think it would make sense to do it this way. But I understand that
it would though be practical to directly set project references in the UI and 
have them be ordered on the classpath afterwards.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5494" />
    <CreationDate amount="2001-11-02 14:59:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows All" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Debug/Run "latest" Menus Confusing</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>The debug and run menus give a list of the latest commands at the top.  However, 
this list appears to be shared, and selecting an entry that was previously a run 
from the debug menu causes a run, not a debug.  This is confusing.  Also, there 
is no information in the menu indicating whether the command was a debug or run.  

I can see at least three ways to resolve this:

Each menu should have it's own latest menu.
The menu contains info as to whether the command is run or debug.
The command takes the context of the menu it is in.

More info on the third option:  Let's say I run a java application.  I then want 
to debug it.  It shows up on the debug "latest" list, but rather than submitting 
a run again, it submits a debug for the same program.
The intended behavoir is the 3rd option. This used to work.
I did some more testing on this, and it actually works better than it did.  
Once, I ran a command from debug and got a run instead.  However, after I got 
the response that option 3 is what is intended, I went back and tested with the 
current state I'm in.  If I select any of the entries in the list from debug, I 
get debug.  If I select from run, I get debug.  Before, I was always getting a 
run from debug.

Another suggestion.  Even if something fails, add it to the list.  This is 
especially true with remote debugging.  When you are having problems, and you 
have to continually type in all the info because it failed the last time you ran 
it, it would be appreciated to add it to the list.
The IDE died on me, so I had to restart it.  This time I did a run, the selected 
the entry from the debug menu.  It did a run instead of a debug.
Logged "add failed" feature request as bug 5534.
I cannot reproduce on the latest code stream.
What drop are you using?
Can you give a detailed test case for the problem:
exact launcher used etc.
Sending me your launchHistory.xml may help as well which
can be found in ..\.metadata\.plugins\org.eclipse.debug.ui in your workspace 
directory.
Thanks
WSDD build 0.6.30
WSW build 0.137

I think this is from the 10/31 drop.

Select a class and click on the run icon.  Select Run Java Application.
Close the application.
Click on the debug icon and select the application out of the history menu.  As 
I understand it, this should debug that application.  Instead, it runs.

I tried to attach the file you suggested, but there is none.  The folder exists, 
but it is empty.

This is fixed in the 2.0 stream. It could also be that this is a problem in the 
VAME 1.0 strem, as VAME added extra run/debug actions to the toolbar that had 
their own implementations.</WithStack>
    <WithOutStack>The debug and run menus give a list of the latest commands at the top.  However, 
this list appears to be shared, and selecting an entry that was previously a run 
from the debug menu causes a run, not a debug.  This is confusing.  Also, there 
is no information in the menu indicating whether the command was a debug or run.  

I can see at least three ways to resolve this:

Each menu should have it's own latest menu.
The menu contains info as to whether the command is run or debug.
The command takes the context of the menu it is in.

More info on the third option:  Let's say I run a java application.  I then want 
to debug it.  It shows up on the debug "latest" list, but rather than submitting 
a run again, it submits a debug for the same program.
The intended behavoir is the 3rd option. This used to work.
I did some more testing on this, and it actually works better than it did.  
Once, I ran a command from debug and got a run instead.  However, after I got 
the response that option 3 is what is intended, I went back and tested with the 
current state I'm in.  If I select any of the entries in the list from debug, I 
get debug.  If I select from run, I get debug.  Before, I was always getting a 
run from debug.

Another suggestion.  Even if something fails, add it to the list.  This is 
especially true with remote debugging.  When you are having problems, and you 
have to continually type in all the info because it failed the last time you ran 
it, it would be appreciated to add it to the list.
The IDE died on me, so I had to restart it.  This time I did a run, the selected 
the entry from the debug menu.  It did a run instead of a debug.
Logged "add failed" feature request as bug 5534.
I cannot reproduce on the latest code stream.
What drop are you using?
Can you give a detailed test case for the problem:
exact launcher used etc.
Sending me your launchHistory.xml may help as well which
can be found in ..\.metadata\.plugins\org.eclipse.debug.ui in your workspace 
directory.
Thanks
WSDD build 0.6.30
WSW build 0.137

I think this is from the 10/31 drop.

Select a class and click on the run icon.  Select Run Java Application.
Close the application.
Click on the debug icon and select the application out of the history menu.  As 
I understand it, this should debug that application.  Instead, it runs.

I tried to attach the file you suggested, but there is none.  The folder exists, 
but it is empty.

This is fixed in the 2.0 stream. It could also be that this is a problem in the 
VAME 1.0 strem, as VAME added extra run/debug actions to the toolbar that had 
their own implementations.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5495" />
    <CreationDate amount="2001-11-02 15:23:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="blocker" />
    <Summery>Breakpoint not installed if filename has underscore</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="14">
        <Lines>
          <Line>- Create the JSPandServletExample web project</Line>
          <Line>- Rename webApplication/Form/FormServletResultPage.jsp to</Line>
          <Line>FormServletResult_Page.jsp</Line>
          <Line>- From the Project's context menu, select Edit Deployment Descriptor</Line>
          <Line>- Go to the Servlets page, select FormServlet and click the</Line>
          <Line>Initialization button</Line>
          <Line>- Click twice on the result_page value to edit it and change it to</Line>
          <Line>Form/FormServletResult_Page.jsp</Line>
          <Line>- Save web.xml</Line>
          <Line>- Put a breakpoint in the Java code of FormServletResult_Page.</Line>
          <Line>- Run the web project and run the form example to completion</Line>
          <Line>- The breakpoint remains blue and the debugger doesn't stop at it</Line>
          <Line>- Now you can remove and re-set the breakpoint and it will be green and</Line>
          <Line>will stop correctly</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Opening on behalf of George, who has been working with Jed on this one
George will add more information soon based notes that he has had with Jed.

If the JSP source file name has an underscore in it, breakpoints in the
JSP won't get installed successfully until after the JSP has been
executed once.

Here are the steps to recreate it:

- Create the JSPandServletExample web project
- Rename webApplication/Form/FormServletResultPage.jsp to
  FormServletResult_Page.jsp
- From the Project's context menu, select Edit Deployment Descriptor
- Go to the Servlets page, select FormServlet and click the
  Initialization button
- Click twice on the result_page value to edit it and change it to
  Form/FormServletResult_Page.jsp
- Save web.xml
- Put a breakpoint in the Java code of FormServletResult_Page.
- Run the web project and run the form example to completion
- The breakpoint remains blue and the debugger doesn't stop at it
- Now you can remove and re-set the breakpoint and it will be green and
  will stop correctly

This doesn't happen if you run the Form example without adding the
underscore to the JSP file name.
The fix that we received in M5 is working for us.
Verified by Jay Cagle.</WithStack>
    <WithOutStack>Opening on behalf of George, who has been working with Jed on this one
George will add more information soon based notes that he has had with Jed.

If the JSP source file name has an underscore in it, breakpoints in the
JSP won't get installed successfully until after the JSP has been
executed once.

Here are the steps to recreate it:

- Create the JSPandServletExample web project
- Rename webApplication/Form/FormServletResultPage.jsp to
  FormServletResult_Page.jsp
- From the Project's context menu, select Edit Deployment Descriptor
- Go to the Servlets page, select FormServlet and click the
  Initialization button
- Click twice on the result_page value to edit it and change it to
  Form/FormServletResult_Page.jsp
- Save web.xml
- Put a breakpoint in the Java code of FormServletResult_Page.
- Run the web project and run the form example to completion
- The breakpoint remains blue and the debugger doesn't stop at it
- Now you can remove and re-set the breakpoint and it will be green and
  will stop correctly

This doesn't happen if you run the Form example without adding the
underscore to the JSP file name.
The fix that we received in M5 is working for us.
Verified by Jay Cagle.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5496" />
    <CreationDate amount="2001-11-02 15:23:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="User Assistance" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="minor" />
    <Summery>Translated context.properties not picked up.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Push F1 then on the infopop-up press F1 again.  The help on on context help is 
displayed in english while there is translated test in the fragment.
 
Additional Info:
We looked in the NL fragement at the context_xx.properties and we found that 
the code page conversion tool puts the entire text of f1Shell =, into one 
single line. 

I ran a little test where I extracted the context_de.properties to the plugin 
directory to the plugin org.eclipse.help.ui directory and then renamed it to 
context.properties an then did an F1 on F1.  The popup textbox displayed the 
key f1Shell and not the text after the equals.
Created attachment 62
F1 on F1
F1 on F1 string comes from org.eclipse.help.ui/context.properties and is not 
hard-coded.

There is a problem with the properties file used for "little test", as 
replacing original context.properties with this file broke F1 on F1 and 
resulted in displaying of key (f1Shell).  If you continue to have the problem, 
please attach the properties file and we will investigate.

After ensuring the german context.properties file is correct, it should be 
placed in directory &lt;plugin or fragement dir&gt;/nl/de instead of renaming to 
context_de.properties.
We do not hear from Scott, so I assume my explanation has helped, and there was 
no bug.

In 2.0 we are not using context.properties anyway, so any remaining defects 
regarding context.properties will not be fixed.</WithStack>
    <WithOutStack>Push F1 then on the infopop-up press F1 again.  The help on on context help is 
displayed in english while there is translated test in the fragment.
 
Additional Info:
We looked in the NL fragement at the context_xx.properties and we found that 
the code page conversion tool puts the entire text of f1Shell =, into one 
single line. 

I ran a little test where I extracted the context_de.properties to the plugin 
directory to the plugin org.eclipse.help.ui directory and then renamed it to 
context.properties an then did an F1 on F1.  The popup textbox displayed the 
key f1Shell and not the text after the equals.
Created attachment 62
F1 on F1
F1 on F1 string comes from org.eclipse.help.ui/context.properties and is not 
hard-coded.

There is a problem with the properties file used for "little test", as 
replacing original context.properties with this file broke F1 on F1 and 
resulted in displaying of key (f1Shell).  If you continue to have the problem, 
please attach the properties file and we will investigate.

After ensuring the german context.properties file is correct, it should be 
placed in directory &lt;plugin or fragement dir&gt;/nl/de instead of renaming to 
context_de.properties.
We do not hear from Scott, so I assume my explanation has helped, and there was 
no bug.

In 2.0 we are not using context.properties anyway, so any remaining defects 
regarding context.properties will not be fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5497" />
    <CreationDate amount="2001-11-02 15:31:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>StyledText - ExtendedModify event not sent on setText</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>build 20011101

Calling StyledText.setText does not result in an ExtendedModify event. Only the 
Verify and Modify events are sent.
ExtendedModify events are sent on user text changes or when the append and 
replaceTextRange APIs are called.
The StyledText article on eclipse.org shows in the illustration that an 
ExtendedModify event is sent on API text changes. It does not exclude the 
setText API.
According to JProbe it takes 10ms to get the entire replaced text using 
DefaultContent.getTextRange when replacing StyledText.java (~200kb) with one 
line of text. It is doing two appends to a big StringBuffer.
By comparison DefaultContent.setText for that one line takes 20ms.
Fixed in the latest. setText now sends an ExtendedModify event like the other 
text modifying API does.</WithStack>
    <WithOutStack>build 20011101

Calling StyledText.setText does not result in an ExtendedModify event. Only the 
Verify and Modify events are sent.
ExtendedModify events are sent on user text changes or when the append and 
replaceTextRange APIs are called.
The StyledText article on eclipse.org shows in the illustration that an 
ExtendedModify event is sent on API text changes. It does not exclude the 
setText API.
According to JProbe it takes 10ms to get the entire replaced text using 
DefaultContent.getTextRange when replacing StyledText.java (~200kb) with one 
line of text. It is doing two appends to a big StringBuffer.
By comparison DefaultContent.setText for that one line takes 20ms.
Fixed in the latest. setText now sends an ExtendedModify event like the other 
text modifying API does.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5498" />
    <CreationDate amount="2001-11-02 15:44:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="major" />
    <Summery>Java Compile - code does not compile correctly in JDT, but does with javac</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functiondef">
        <location start="217" end="508" />
        <code>public void test() {                                                    
Object obj = "test";                                                  
  obj = obj + "ing";                                                    
  System.out.println(obj);                                              
}</code>
      </source_code>
      <source_code type="functiondef">
        <location start="872" end="1165" />
        <code>public void test() {                                                    
  Object obj = "test";                                                  
  obj = (String)obj + "ing";                                            
  System.out.println(obj);                                              
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>It seems as though there is a bug in the compiler. The                 
following code does not compile correctly...                            
                                                                       
public void test() {                                                    
Object obj = "test";                                                  
  obj = obj + "ing";                                                    
  System.out.println(obj);                                              
}                                                                       
                                                                        
This produces the following output: "ing"                               
However this code works...                                              
                                                                        
public void test() {                                                    
  Object obj = "test";                                                  
  obj = (String)obj + "ing";                                            
  System.out.println(obj);                                              
}                                                                       
                                                                        
Thus producing the output: "testing"                                    
                                                                        
I noticed that when I compile this under Sun's "javac",                 
it works fine. And when I looked at the PCODE that was                 
produced, it was definitely wrong.

&lt;188674&gt;
Known defect which was corrected in 2.0 stream. Bug in code optimization of 
String concatenation (Object = Object + String --&gt; Object += String).

Closing
Closing
Fixed in 1.0 Rollup 139</WithStack>
    <WithOutStack>It seems as though there is a bug in the compiler. The                 
following code does not compile correctly...                            
                                                                       
public void test() {                                                    
Object obj = "test";                                                  
  obj = obj + "ing";                                                    
  System.out.println(obj);                                              
}                                                                       
                                                                        
This produces the following output: "ing"                               
However this code works...                                              
                                                                        
public void test() {                                                    
  Object obj = "test";                                                  
  obj = (String)obj + "ing";                                            
  System.out.println(obj);                                              
}                                                                       
                                                                        
Thus producing the output: "testing"                                    
                                                                        
I noticed that when I compile this under Sun's "javac",                 
it works fine. And when I looked at the PCODE that was                 
produced, it was definitely wrong.

&lt;188674&gt;
Known defect which was corrected in 2.0 stream. Bug in code optimization of 
String concatenation (Object = Object + String --&gt; Object += String).

Closing
Closing
Fixed in 1.0 Rollup 139</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5499" />
    <CreationDate amount="2001-11-02 15:48:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Smartlinker Interface to Complicated</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The access to Smartlinker should be less complicated.  It is okay to leave it 
where it is, but it should also be available in the context menu when right 
clicking on a Java class.
The mechanism to do so is provided by the platform.
VAME can make a SmartLinker object contribution for classes.
Problem needs to be addressed by VAME.

Notifying Aldo about this and closing the PR since 
VAME isn't using Bugzilla.</WithStack>
    <WithOutStack>The access to Smartlinker should be less complicated.  It is okay to leave it 
where it is, but it should also be available in the context menu when right 
clicking on a Java class.
The mechanism to do so is provided by the platform.
VAME can make a SmartLinker object contribution for classes.
Problem needs to be addressed by VAME.

Notifying Aldo about this and closing the PR since 
VAME isn't using Bugzilla.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="5500" />
    <CreationDate amount="2001-11-02 15:49:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P4" />
    <bug_severity amount="enhancement" />
    <Summery>No Stop In Main Option</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>There is no "stop in main" option when debugging.  This is critical for remote 
debugging.
Could be specified by a launch configuration, and a breakpoint could be added 
automatically at launch time.
deferred
Our users debug in another language, which maps to underlying java commands.  
Even though our debug model sits atop the java debug model, our main does not 
exactly correspond to the underlying java program's main.  Our first command may 
be several java commands, or even method calls, into the java code.  (The 'run 
until breakpoint' method works great because we simply map the breakpoint 
location to the corresponding java location.  However, our users will expect 
'stop at main' functionality.) 

Rather than a 'phantom breakpoint' (which we would have to be able to remove 
from the java and reset to the correct location prior to actually running the 
java), it might be good to have a stepToMain() function in the IThread.  After 
the main thread is created, it would be suspended and the stepToMain() method
would be called.  The stepToMain would basically call 'stepOver/stepInto' until 
the first command in the main method is reached.  (It may be that IThread would 
also have a 'canStepToMain()' method or something like that to identify it's 
ability to step to main.)

However, in regards to phantom breakpoints or invisible breakpoints, it would be 
nice to be able to programmatically set breakpoints as invisible.  We set 
breakpoints in underlying java code that we do not wish to have visible by 
default.  The 'show supported breakpoints' feature does not completely work for 
us, as it depends on a debug target being selected.  (The breakpoint view should 
default to not showing the breakpoints marked as invisible.)
The 'stop in main' feature would be a Java debugging feature, that would stop 
on entry to the 'main' method. I propose to add a 'stop in main' check box to 
the 'main' tab of the "Java Application" launch configuration. By default, the 
option will be turned off for backwards compatibility.

Debug models that wrapper the java debugger, will be required to implement 
their own 'stop in main' feature, if the location of 'main' does not correlate 
1:1.

Currently, it is possible to create "invisible" breakpoints by not registering 
a breakpoint with the breakpoint manager. @see IBreakpoint#is/setRegistered. 
The java debugger uses non-registered breakpoints to implement suspending at 
compilation errors, uncaught exceptions, and 'run-to-line' breakpoints. Thus, I 
beleive the ability to programmatically set 'invisible' breakpoints already 
exits. Please correct me if I am missing something here.


NOTE: we can also add the 'stop in main' option to the 'Remote Java 
Application' launch configuration. However, it will only be effective if the VM 
being connected to has not yet entered 'main'.
Marking as later (2.1 feature set is yet undetermined).
Marking as 2.1
Implemented feature for local Java apps. The feature does not make sense for 
remote apps, as the attachee has no control over where the program is or how it 
was started.
Please verify, Joe.
Verified.</WithStack>
    <WithOutStack>There is no "stop in main" option when debugging.  This is critical for remote 
debugging.
Could be specified by a launch configuration, and a breakpoint could be added 
automatically at launch time.
deferred
Our users debug in another language, which maps to underlying java commands.  
Even though our debug model sits atop the java debug model, our main does not 
exactly correspond to the underlying java program's main.  Our first command may 
be several java commands, or even method calls, into the java code.  (The 'run 
until breakpoint' method works great because we simply map the breakpoint 
location to the corresponding java location.  However, our users will expect 
'stop at main' functionality.) 

Rather than a 'phantom breakpoint' (which we would have to be able to remove 
from the java and reset to the correct location prior to actually running the 
java), it might be good to have a stepToMain() function in the IThread.  After 
the main thread is created, it would be suspended and the stepToMain() method
would be called.  The stepToMain would basically call 'stepOver/stepInto' until 
the first command in the main method is reached.  (It may be that IThread would 
also have a 'canStepToMain()' method or something like that to identify it's 
ability to step to main.)

However, in regards to phantom breakpoints or invisible breakpoints, it would be 
nice to be able to programmatically set breakpoints as invisible.  We set 
breakpoints in underlying java code that we do not wish to have visible by 
default.  The 'show supported breakpoints' feature does not completely work for 
us, as it depends on a debug target being selected.  (The breakpoint view should 
default to not showing the breakpoints marked as invisible.)
The 'stop in main' feature would be a Java debugging feature, that would stop 
on entry to the 'main' method. I propose to add a 'stop in main' check box to 
the 'main' tab of the "Java Application" launch configuration. By default, the 
option will be turned off for backwards compatibility.

Debug models that wrapper the java debugger, will be required to implement 
their own 'stop in main' feature, if the location of 'main' does not correlate 
1:1.

Currently, it is possible to create "invisible" breakpoints by not registering 
a breakpoint with the breakpoint manager. @see IBreakpoint#is/setRegistered. 
The java debugger uses non-registered breakpoints to implement suspending at 
compilation errors, uncaught exceptions, and 'run-to-line' breakpoints. Thus, I 
beleive the ability to programmatically set 'invisible' breakpoints already 
exits. Please correct me if I am missing something here.


NOTE: we can also add the 'stop in main' option to the 'Remote Java 
Application' launch configuration. However, it will only be effective if the VM 
being connected to has not yet entered 'main'.
Marking as later (2.1 feature set is yet undetermined).
Marking as 2.1
Implemented feature for local Java apps. The feature does not make sense for 
remote apps, as the attachee has no control over where the program is or how it 
was started.
Please verify, Joe.
Verified.</WithOutStack>
  </Bug>
</infozilla-output>

