<?xml version="1.0" encoding="UTF-8"?>
<infozilla-output>
  <Bug>
    <BugId amount="7901" />
    <CreationDate amount="2002-01-18 15:39:00 -0500" />
    <DupId amount="7564" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>TeamManager.alreadyMapped() eating Core exc.</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="84" end="404" />
        <code>protected boolean alreadyMapped(IProject project) {
		try {
			String[] natures = project.getDescription().getNatureIds
();
			for (int i = 0; i &lt; natures.length; i++) {
				if(natureIdsRegistry.contains(natures[i]))
					return true;			
			}
		} catch(CoreException e) {
***&gt;&gt;&gt;			// fall through
		}
		return false;
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>See the spot marked ***&gt;&gt;&gt;	
We are catching a core exception and not reporting it.

	protected boolean alreadyMapped(IProject project) {
		try {
			String[] natures = project.getDescription().getNatureIds
();
			for (int i = 0; i &lt; natures.length; i++) {
				if(natureIdsRegistry.contains(natures[i]))
					return true;			
			}
		} catch(CoreException e) {
***&gt;&gt;&gt;			// fall through
		}
		return false;
	}


*** This bug has been marked as a duplicate of 7564 ***</WithStack>
    <WithOutStack>See the spot marked ***&gt;&gt;&gt;	
We are catching a core exception and not reporting it.

	protected boolean alreadyMapped(IProject project) {
		try {
			String[] natures = project.getDescription().getNatureIds
();
			for (int i = 0; i &lt; natures.length; i++) {
				if(natureIdsRegistry.contains(natures[i]))
					return true;			
			}
		} catch(CoreException e) {
***&gt;&gt;&gt;			// fall through
		}
		return false;
	}


*** This bug has been marked as a duplicate of 7564 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7902" />
    <CreationDate amount="2002-01-18 15:41:00 -0500" />
    <DupId amount="7564" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>ITeamProvider.getProvider(IResource) eating exceptions</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>The method ITeamProvider.getProvider(IResource) catches numerous exceptions, 
all of which are just eaten (no code to handle).


*** This bug has been marked as a duplicate of 7564 ***</WithStack>
    <WithOutStack>The method ITeamProvider.getProvider(IResource) catches numerous exceptions, 
all of which are just eaten (no code to handle).


*** This bug has been marked as a duplicate of 7564 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7903" />
    <CreationDate amount="2002-01-18 16:00:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Compare with repo contents fails if newer revision in repo</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Select a file that has a newer revision in the repository and select "Compare 
with Repository". An error is returned:
cvs server: nonmergeable file needs merge
cvs server: revision 1.15 from repository is now in ....
cvs server: file from working directory is now in..
Seems to work as of build 20020205</WithStack>
    <WithOutStack>Select a file that has a newer revision in the repository and select "Compare 
with Repository". An error is returned:
cvs server: nonmergeable file needs merge
cvs server: revision 1.15 from repository is now in ....
cvs server: file from working directory is now in..
Seems to work as of build 20020205</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7904" />
    <CreationDate amount="2002-01-18 16:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="major" />
    <Summery>Unable to read workbench state</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="functioncall">
        <location start="907" end="985" />
        <code>org/eclipse/ui/internal/Workbench.run(Ljava/lang/Object;)Ljava/lang/Object;</code>
      </source_code>
      <source_code type="functioncall">
        <location start="1545" end="1621" />
        <code>org/eclipse/core/launcher/Main.run([Ljava/lang/String;)Ljava/lang/Object;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>About every 4-5 times I run wsdd.exe, which is based on eclipse 1.0, I get a 
message:  "Unable to read workbench state.  workbench.xml will be deleted."

The .log contents are:

Log: Fri Jan 18 14:37:47 MST 2002
2 org.eclipse.ui 2 Problems occurred when invoking code from plug-in: 
org.eclipse.ui.
java.lang.NullPointerException

Stack trace:
   java/lang/Throwable.&lt;init&gt;()V
   java/lang/Throwable.&lt;init&gt;(Ljava/lang/String;)V
   java/lang/NullPointerException.&lt;init&gt;(Ljava/lang/String;)V
   org/eclipse/ui/internal/Workbench$5.run()V
   org/eclipse/core/internal/runtime/InternalPlatform.run
(Lorg/eclipse/core/runtime/ISafeRunnable;)V
   org/eclipse/core/runtime/Platform.run
(Lorg/eclipse/core/runtime/ISafeRunnable;)V
   org/eclipse/ui/internal/Workbench.openPreviousWorkbenchState()Z
   org/eclipse/ui/internal/Workbench.openWindows()V
   org/eclipse/ui/internal/Workbench.init([Ljava/lang/String;)Z
   org/eclipse/ui/internal/Workbench.run(Ljava/lang/Object;)Ljava/lang/Object;
   org/eclipse/core/internal/boot/InternalBootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   org/eclipse/core/boot/BootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   java/lang/reflect/AccessibleObject.invokeL(Ljava/lang/Object;
[Ljava/lang/Object;)Ljava/lang/Object;
   java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)
Ljava/lang/Object;
   org/eclipse/core/launcher/Main.basicRun([Ljava/lang/String;)
Ljava/lang/Object;
   org/eclipse/core/launcher/Main.run([Ljava/lang/String;)Ljava/lang/Object;
   org/eclipse/core/launcher/Main.main([Ljava/lang/String;)V

This causes the workbench to go back to default settings.
In debugging some other issues, I think I know what is causing this problem.  
First, you have to be running eclipse on j9 (WSDD).  Second, your workspace has 
to be on NFS.  It appears that any time a file is replaced on NFS with a 
smaller version, the size difference is filled with nulls or hex garbage.  Once 
this happens to workbench.xml, the file can't be read by eclipse.  I don't know 
if there is a way eclipse can recover the file (trim the nulls?) once this 
happens.
We are using Xerces to read the workbench.xml. We don't know the file size to 
trim it. Even if we trim the workbench.xml, what about the other metadata files?

Must check if this is not a J9 bug. 
BTW, this problem has been further narrowed down.  It looks like it is only a 
problem when using Hummingbird NFS.
Have you tried in other VMs or only on J9?
I'm currently running with the jre that shipped pre 3.99.50 with WSDD.  I 
haven't seen the problem using this VM.
Not a UI bug.
J9 team has being notified.
Closing.</WithStack>
    <WithOutStack>About every 4-5 times I run wsdd.exe, which is based on eclipse 1.0, I get a 
message:  "Unable to read workbench state.  workbench.xml will be deleted."

The .log contents are:

Log: Fri Jan 18 14:37:47 MST 2002
2 org.eclipse.ui 2 Problems occurred when invoking code from plug-in: 
org.eclipse.ui.
java.lang.NullPointerException

Stack trace:
   java/lang/Throwable.&lt;init&gt;()V
   java/lang/Throwable.&lt;init&gt;(Ljava/lang/String;)V
   java/lang/NullPointerException.&lt;init&gt;(Ljava/lang/String;)V
   org/eclipse/ui/internal/Workbench$5.run()V
   org/eclipse/core/internal/runtime/InternalPlatform.run
(Lorg/eclipse/core/runtime/ISafeRunnable;)V
   org/eclipse/core/runtime/Platform.run
(Lorg/eclipse/core/runtime/ISafeRunnable;)V
   org/eclipse/ui/internal/Workbench.openPreviousWorkbenchState()Z
   org/eclipse/ui/internal/Workbench.openWindows()V
   org/eclipse/ui/internal/Workbench.init([Ljava/lang/String;)Z
   org/eclipse/ui/internal/Workbench.run(Ljava/lang/Object;)Ljava/lang/Object;
   org/eclipse/core/internal/boot/InternalBootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   org/eclipse/core/boot/BootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   java/lang/reflect/AccessibleObject.invokeL(Ljava/lang/Object;
[Ljava/lang/Object;)Ljava/lang/Object;
   java/lang/reflect/Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)
Ljava/lang/Object;
   org/eclipse/core/launcher/Main.basicRun([Ljava/lang/String;)
Ljava/lang/Object;
   org/eclipse/core/launcher/Main.run([Ljava/lang/String;)Ljava/lang/Object;
   org/eclipse/core/launcher/Main.main([Ljava/lang/String;)V

This causes the workbench to go back to default settings.
In debugging some other issues, I think I know what is causing this problem.  
First, you have to be running eclipse on j9 (WSDD).  Second, your workspace has 
to be on NFS.  It appears that any time a file is replaced on NFS with a 
smaller version, the size difference is filled with nulls or hex garbage.  Once 
this happens to workbench.xml, the file can't be read by eclipse.  I don't know 
if there is a way eclipse can recover the file (trim the nulls?) once this 
happens.
We are using Xerces to read the workbench.xml. We don't know the file size to 
trim it. Even if we trim the workbench.xml, what about the other metadata files?

Must check if this is not a J9 bug. 
BTW, this problem has been further narrowed down.  It looks like it is only a 
problem when using Hummingbird NFS.
Have you tried in other VMs or only on J9?
I'm currently running with the jre that shipped pre 3.99.50 with WSDD.  I 
haven't seen the problem using this VM.
Not a UI bug.
J9 team has being notified.
Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7905" />
    <CreationDate amount="2002-01-18 16:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Undo/redo fault</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>When I do some editing in a line (insert words in various places),
maybe delete some, then undo with ctrl-z and redo with ctrl-y,
some character sequences will appear "ni desrever redro"
(in reserved order).

I'm running R1.0 on Win2Kpro sp2 celeron433 (has .NET beta 2 installed).
Could not recreate in latest 2.0 builds.</WithStack>
    <WithOutStack>When I do some editing in a line (insert words in various places),
maybe delete some, then undo with ctrl-z and redo with ctrl-y,
some character sequences will appear "ni desrever redro"
(in reserved order).

I'm running R1.0 on Win2Kpro sp2 celeron433 (has .NET beta 2 installed).
Could not recreate in latest 2.0 builds.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7906" />
    <CreationDate amount="2002-01-18 22:47:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Deprecated warnings should be real to allow task view filtering [general issue]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="14">
      <Enumeration lines="2">
        <Lines>
          <Line>1) check: "Where problem severity"</Line>
          <Line>2) check: "Error"</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="18">
        <Lines>
          <Line>1) Jeff had originally indicates that the right way to do marker types (e.g.</Line>
          <Line>deprecated) is in fact by marker subtypes.</Line>
          <Line />
          <Line>2) Ignoring that for the moment, assume jcore wanted to have only one warning</Line>
          <Line>marker type in jcore (and not introduce a new one for deprecated).</Line>
          <Line>- How would jcore indicate the errors that are deprecated warnings?</Line>
          <Line>- Would it be an error number a user would just have to figure out? If yes this</Line>
          <Line>isn't better than the current workaround.</Line>
          <Line />
          <Line>3)Erich's had mentioned generic attribute filtering support where a user could</Line>
          <Line>say "filter based on attribute xyz" but this requires</Line>
          <Line>- knowing all the attributes for each marker type, their type &amp; what they mean</Line>
          <Line>- what the valid values/ranges are etc.</Line>
          <Line>Alternatively one could plugin a filtering device for a marker but that would</Line>
          <Line>mean starting the contributing plugin. E.g. java ide contributes a marker</Line>
          <Line>filter that understands how to presesent itself in the task view filter ui &amp;</Line>
          <Line>how to filter markers. But running that filter requires the java ide to start.</Line>
          <Line>* Can you elaborate on how you picture</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="12">
        <Lines>
          <Line>1) A complicated path along the lines of what erich suggests. I am worried</Line>
          <Line>this is overkill.</Line>
          <Line />
          <Line>2) Adding new types for the "really semantically" interesting things. You</Line>
          <Line>should be able to get a small list of key ones.</Line>
          <Line />
          <Line>3) Something in between that exposes to the task filtering all of the error</Line>
          <Line>numbers a component will create &amp; their message &amp; lets the user pick which ones</Line>
          <Line>to ignore. This is not as involved as arbitrary attributes in #1 but might let</Line>
          <Line>you avoid figuring out how a user actually wants to use your stuff (not idea).</Line>
          <Line>The downside is it means a user gets presented with a tonne of errors and has</Line>
          <Line>to hunt/peck for the ones to ignore.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="22">
        <Lines>
          <Line>1) see below</Line>
          <Line />
          <Line>2) adding additional subtypes is straightforward (the Java core has the</Line>
          <Line>mechanims to make this simple). However, if we go down this path then it</Line>
          <Line>shouldn't be done for deprecates only.</Line>
          <Line>What I don't like with this approach is that it will result in overlap with</Line>
          <Line>severity based filtering. Consider this hierarchy:</Line>
          <Line>Problem</Line>
          <Line>Java</Line>
          <Line>Java Error</Line>
          <Line>build path error</Line>
          <Line>Java Warning</Line>
          <Line>Use of Deprecated API</Line>
          <Line>Non externalized String</Line>
          <Line>This would mirror the severity categories offered in the filter dialog below.</Line>
          <Line />
          <Line>As an aside the checking policy in the marker type hierarchy section of the</Line>
          <Line>Filter Dialog is not obvious to me. When unchecking "build path problem", then</Line>
          <Line>the parent is unchecked as well (shouldn't it be grey checked?)</Line>
          <Line />
          <Line>3) is not ideal as you say, the user can still use severity based filtering but</Line>
          <Line>this is not sufficient and has started this thread in the first place.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="65">
        <Lines>
          <Line>1) The compiler options page might be useful for specific kinds of compiler</Line>
          <Line>options but it is definitely not the right approach for generally filtering</Line>
          <Line>problems. Keep in mind, I am not running command line! The problems show in the</Line>
          <Line>task view and its there I would expect to filter as a user.</Line>
          <Line />
          <Line>2) Can you elaborate a bit on your severity proposal.</Line>
          <Line>- If memory serves me the list of available severities is bounded by core  &amp;</Line>
          <Line>not extensible.</Line>
          <Line>- Are you are proposing to add extensible severities levels like:</Line>
          <Line>deprecated warning</Line>
          <Line>nls warning</Line>
          <Line>build path error</Line>
          <Line>-   Would these severity levels somehow be "local" to your problem type.</Line>
          <Line>-   If not then the severity levels for filtering would be this horrific union</Line>
          <Line>of everything from all tools.</Line>
          <Line>-   If it is local to your problem type then are you proposing core provide</Line>
          <Line>an addition to their extension point to let you say, for JavaProblem we have</Line>
          <Line>the following (pardon my ignorance - not 100% clear on your suggestion).</Line>
          <Line>-  As a user how do you envision me addressing the use cases below (i.e. what</Line>
          <Line>kind of ui).</Line>
          <Line />
          <Line />
          <Line />
          <Line>3) Erich - I do agree with your observations in #2 about subtypes - but this is</Line>
          <Line>also the appraoch core pushed (but which I don't like). In general I actually</Line>
          <Line>am not a fan of the marker type hierarchies. A reason to avoid subtyping is</Line>
          <Line>clearly because it can come into conflict with other filtering (as you</Line>
          <Line>observe). In addition a marker parent type is ambiguous. If I check a box does</Line>
          <Line>it mean ignore problems of this type or all subtypes too - especially confusing</Line>
          <Line>is that some marker typs are abstract types. Thus we have effectively exposed</Line>
          <Line>users to an implementation hierarchy (it just gets worse with multiple</Line>
          <Line>inheritenace of markers).</Line>
          <Line />
          <Line>4) Let's step back a second and identify the user goals we have all raised.</Line>
          <Line>Since I am now your client(grin) I really don't care where the work gets</Line>
          <Line>done&lt;g&gt;.</Line>
          <Line>- ability to quickly filter out deprecated</Line>
          <Line>- ability to quickly filter out nls warnings</Line>
          <Line>- ability for a user to pick a problem in task list and say ignore all ones</Line>
          <Line>like this  (this is the more direct manipulation route). Ex. User picks a</Line>
          <Line>specific deprecated error and says ignore ones like it. I would find this very</Line>
          <Line>useful.</Line>
          <Line>- users should be able to filter out deprecated *and* nls if they want</Line>
          <Line>- there may be other semantically interesting cases</Line>
          <Line />
          <Line>In addition a solution should not involve starting a plugin for each error type</Line>
          <Line>because this would cause the user to sit around waiting longer at startup.</Line>
          <Line />
          <Line>5) It seems like the suggestions are along two paths:</Line>
          <Line>- add subtypes (my original and in erich's #2)</Line>
          <Line>- something like my #3</Line>
          <Line>- adding more severity levels - I don't see how this actually helps</Line>
          <Line />
          <Line />
          <Line>6) What do you feel are the main drawbacks to #3 (out of curiosity). To recap</Line>
          <Line>this was</Line>
          <Line>* a compiler plugin provided an extension that specified for each error</Line>
          <Line>(or perhaps just for the semantically meaningful ones)</Line>
          <Line>the error number, the error message</Line>
          <Line>(not sure what to do with the %1 etc args to a message)</Line>
          <Line>* the task list could allow a user to:</Line>
          <Line>- directly click on an error ans say ignore ones like this (e.g. those with</Line>
          <Line>this error number)</Line>
          <Line>- the filter dialog would let you click on a problem type, choose advanced</Line>
          <Line>filtering and then choose from checkboxes representing each error</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="4">
        <Lines>
          <Line>- classpath problems</Line>
          <Line>- import problems</Line>
          <Line>- type problems</Line>
          <Line>etc...</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- How would jcore indicate the errors that are deprecated warnings?</Line>
          <Line>- Would it be an error number a user would just have to figure out? If yes this</Line>
          <Line>isn't better than the current workaround.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="7">
        <Lines>
          <Line>- knowing all the attributes for each marker type, their type &amp; what they mean</Line>
          <Line>- what the valid values/ranges are etc.</Line>
          <Line>Alternatively one could plugin a filtering device for a marker but that would</Line>
          <Line>mean starting the contributing plugin. E.g. java ide contributes a marker</Line>
          <Line>filter that understands how to presesent itself in the task view filter ui &amp;</Line>
          <Line>how to filter markers. But running that filter requires the java ide to start.</Line>
          <Line>* Can you elaborate on how you picture</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- it requires me to have to rebuild everything</Line>
          <Line>- it is separate from the task view &amp; thus does not work as your typical view</Line>
          <Line>filter works</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="15">
        <Lines>
          <Line>- If memory serves me the list of available severities is bounded by core  &amp;</Line>
          <Line>not extensible.</Line>
          <Line>- Are you are proposing to add extensible severities levels like:</Line>
          <Line>deprecated warning</Line>
          <Line>nls warning</Line>
          <Line>build path error</Line>
          <Line>-   Would these severity levels somehow be "local" to your problem type.</Line>
          <Line>-   If not then the severity levels for filtering would be this horrific union</Line>
          <Line>of everything from all tools.</Line>
          <Line>-   If it is local to your problem type then are you proposing core provide</Line>
          <Line>an addition to their extension point to let you say, for JavaProblem we have</Line>
          <Line>the following (pardon my ignorance - not 100% clear on your suggestion).</Line>
          <Line>-  As a user how do you envision me addressing the use cases below (i.e. what</Line>
          <Line>kind of ui).</Line>
          <Line />
        </Lines>
      </Enumeration>
      <Enumeration lines="8">
        <Lines>
          <Line>- ability to quickly filter out deprecated</Line>
          <Line>- ability to quickly filter out nls warnings</Line>
          <Line>- ability for a user to pick a problem in task list and say ignore all ones</Line>
          <Line>like this  (this is the more direct manipulation route). Ex. User picks a</Line>
          <Line>specific deprecated error and says ignore ones like it. I would find this very</Line>
          <Line>useful.</Line>
          <Line>- users should be able to filter out deprecated *and* nls if they want</Line>
          <Line>- there may be other semantically interesting cases</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- add subtypes (my original and in erich's #2)</Line>
          <Line>- something like my #3</Line>
          <Line>- adding more severity levels - I don't see how this actually helps</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="4">
        <Lines>
          <Line>- directly click on an error ans say ignore ones like this (e.g. those with</Line>
          <Line>this error number)</Line>
          <Line>- the filter dialog would let you click on a problem type, choose advanced</Line>
          <Line>filtering and then choose from checkboxes representing each error</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- critical error</Line>
          <Line>- major error</Line>
          <Line>- normal error</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>The task view allows you to filter by the type of problem however deprecated 
warnings (e.g. xyz is deprecated, or xyz subclasses a deprecated class) do not 
appear to be a first class type of error. This means you cannot just ignore 
deprecated warnings using the type filter. Instead you have to rely on the 
string check (contaisn, does not contain) but that means you cannot use that 
field for anything else.
Do you mean a special type of markers for these ? This would be gross I think, 
likewise I might want to turn off entirely all Java problems at once. 

Note that the Java problem is carrying some fine grain information (original 
problem ID), which could be used to define a custom filter (by the Java UI?).

Along the same line, I might be interested in seeing various Java problem 
filters in action:
- classpath problems
- import problems
- type problems
etc...

If the only choice is to provide a hierarchy of Java problems for these, then 
it is fairly constraining and not very extensible (how could one add custom 
filter if categories are constrained by marker types).

Erich - do you have an opinion ?

* A special submarker type would probably make sense
* If there was a submarker type the ui can easily filter it out or filter out 
all java warnings or all java problems (using the current ui)

* I could also see the task view being able to support the ability to say - if 
a marker has the following property and its value is this then show it. This 
perhaps addresses your extensibility issue.  [I think this what you also 
propose -- this would require workbench support , the above marker type does 
not]

Keep in mind as a user it must be one click to say hide the deprecated. Fancy 
filtering is nice but doesn't help me if I have to work to do it&lt;g&gt;.
You can filter out deprecates with the current UI using severities.
It requires 2 clicks:

To do so 
1) check: "Where problem severity"
2) check: "Error"

I always have to try twice to get this correct, the on/off logic isn't clear to 
me given the current wording.
Changing the wording to "Show entries _only_ when"

Kevin pls adopt bug if you agree.



Actually this is incorrect because this will cause all java warnings to hide. I 
only want to hide the deprecated.

The only way I have found to do this is by using the string contains. 

Unless of course the only kind of warning that exists is a deprecated warning 
but a user has no way of knowing that.

I think the original problem still exists &amp; needs to be addressed in JUI. With 
possible feature enhancement to allow arbitray marker property filtering (per 
discussion below)

Then there should be a UI to hide/show individual warning types, and these 
should not need to change the problem marker type (because we might end up with 
300 marker types for individual categories).

I think some API will be necessary to surface our problem IDs.
Philippe, can you elaborate on your comments

1) Jeff had originally indicates that the right way to do marker types (e.g. 
deprecated) is in fact by marker subtypes.

2) Ignoring that for the moment, assume jcore wanted to have only one warning 
marker type in jcore (and not introduce a new one for deprecated).
- How would jcore indicate the errors that are deprecated warnings? 
- Would it be an error number a user would just have to figure out? If yes this 
isn't better than the current workaround.

3)Erich's had mentioned generic attribute filtering support where a user could 
say "filter based on attribute xyz" but this requires 
 - knowing all the attributes for each marker type, their type &amp; what they mean
 - what the valid values/ranges are etc.
Alternatively one could plugin a filtering device for a marker but that would 
mean starting the contributing plugin. E.g. java ide contributes a marker 
filter that understands how to presesent itself in the task view filter ui &amp; 
how to filter markers. But running that filter requires the java ide to start.
* Can you elaborate on how you picture

It seems that adding a deprecated marker subtype is a simple &amp; semantically 
meaningful to a user without having to get fancy with enhanced filtering?
As a follow on note claiming 300 extra marker types is a bit misleading. We 
need to look at what is the most interesting/common for a user. Clearly 
deprecated is important/special and users need a way to quickly hide/show it.
(see my earlier note)
The compiler supports several warning categories see Preferences&gt;Java&gt;Compiler. 
I have a hard time why we promote one category to a marker type. Your argument 
is that deprecates are special. However, this depends on the task, when doing 
NLS work then the NLS warnings are special to me. 

What is the exact marker type hierarchy you are proposing that introudces a 
deprecated marker type? 
* There are probably a "small" set of important warnings/errors. NLS might be 
another one with real semantic importance. Not all warnings are equal. 

* The Preference approach you recommend in fact sort of confirms this 

* With respect to the preference page its problematic on several fronts
- it requires me to have to rebuild everything
- it is separate from the task view &amp; thus does not work as your typical view 
filter works

*  the page itself is unclear to a user. When a user first sees this preference 
page they are not sure what it actually means. This is probably fixed with some 
simple text that says something like "What severity level do you want to assign 
to the following problems."

* as a user I would expect to be able to easily say hide/show nls errors. I 
would further expect I could do that by quickly filtering them in the task 
view. Instead I have to the compiler preferences and tell the compiler to treat 
it as an error or ignore it. This is backwards what a user expects.

Net:
* The page you mention actually does not model things the way a user expects 
nor does it accomodate the typical filter behavior where a user would look for 
it.

I think we need to step back and look at several paths
1) A complicated path along the lines of what erich suggests. I am worried
this is overkill.

2) Adding new types for the "really semantically" interesting things. You 
should be able to get a small list of key ones.

3) Something in between that exposes to the task filtering all of the error 
numbers a component will create &amp; their message &amp; lets the user pick which ones 
to ignore. This is not as involved as arbitrary attributes in #1 but might let 
you avoid figuring out how a user actually wants to use your stuff (not idea). 
The downside is it means a user gets presented with a tonne of errors and has 
to hunt/peck for the ones to ignore.

3b) an enhancement to 3 is if we have 3 then the user could pick a problem in 
the task view and say, ignore errors like this.

Note that 3 requires a small amount of work from ui &amp; also small amount of work 
from components like yours to register with it.




agreed, that the wording of the pref page needs to be improved. I've filed a 
separate bug for this (8443)

The pref page is under the section of the compiler in the preferences. As I 
user I want to have control over the markers created by the compiler. What you 
seem to propose is that the compiler generates all markers/warnings and then 
filtering is used to hide the ones the user isn't interested. This is costly.

I don't agree that the page doesn't model what the user expects. Java 
developers are familiar with compiler options and in fact are expecting that 
they have control over them. Basically, this page provides control over which 
markers should be generated and the task list allows me to filter the generated 
ones. A problem is that these options are global and not per project and we 
intend to change this, i.e., they will become properties of a project. 

Regarding solutions (just for proper credits - the generic attribute based 
filter idea is from Philippe he has suggested it a long time ago). 

Regarding the proposals:
1) see below

2) adding additional subtypes is straightforward (the Java core has the 
mechanims to make this simple). However, if we go down this path then it 
shouldn't be done for deprecates only. 
What I don't like with this approach is that it will result in overlap with 
severity based filtering. Consider this hierarchy:
Problem
   Java
      Java Error
         build path error
      Java Warning
         Use of Deprecated API
         Non externalized String
This would mirror the severity categories offered in the filter dialog below. 

As an aside the checking policy in the marker type hierarchy section of the 
Filter Dialog is not obvious to me. When unchecking "build path problem", then 
the parent is unchecked as well (shouldn't it be grey checked?)

3) is not ideal as you say, the user can still use severity based filtering but 
this is not sufficient and has started this thread in the first place. 

Given that there already is support for severity based filtering and the Java 
compiler already knows several severity categories, why don't we generalize 
severities from a fixed set: Error, Warning, Info to an extensible set of 
categories. This is basically a simpler variation of 1)
1') there are some standard severities but a component can contribute 
additional severity categories (e.g. deprecated warnings). The declared 
severities can then be collected by the Filter Dialog and presented to the 
user. 
I am not fan of using severities which I think are addressing a slightly 
different issue, but rather defining a custom mask which would take advantage 
of Java problem specifics (using some custom attributes which are present on 
Java problem markers).

Severities are somewhat different, and I could imagine finer grain severities 
to allow finding the more critical problems first (like the errorLevel in ST).

Maybe 3 levels of errors and 3 levels of warnings would allow us to do a better 
job at categorizing Java problems.
1) The compiler options page might be useful for specific kinds of compiler 
options but it is definitely not the right approach for generally filtering 
problems. Keep in mind, I am not running command line! The problems show in the 
task view and its there I would expect to filter as a user.

2) Can you elaborate a bit on your severity proposal. 
 - If memory serves me the list of available severities is bounded by core  &amp; 
not extensible.
 - Are you are proposing to add extensible severities levels like:
      deprecated warning 
      nls warning
      build path error 
-   Would these severity levels somehow be "local" to your problem type.
-   If not then the severity levels for filtering would be this horrific union
   of everything from all tools.
-   If it is local to your problem type then are you proposing core provide
   an addition to their extension point to let you say, for JavaProblem we have 
the following (pardon my ignorance - not 100% clear on your suggestion).
-  As a user how do you envision me addressing the use cases below (i.e. what 
kind of ui).
 


3) Erich - I do agree with your observations in #2 about subtypes - but this is 
also the appraoch core pushed (but which I don't like). In general I actually 
am not a fan of the marker type hierarchies. A reason to avoid subtyping is 
clearly because it can come into conflict with other filtering (as you 
observe). In addition a marker parent type is ambiguous. If I check a box does 
it mean ignore problems of this type or all subtypes too - especially confusing 
is that some marker typs are abstract types. Thus we have effectively exposed 
users to an implementation hierarchy (it just gets worse with multiple 
inheritenace of markers).
  
4) Let's step back a second and identify the user goals we have all raised. 
Since I am now your client(grin) I really don't care where the work gets 
done&lt;g&gt;.
  - ability to quickly filter out deprecated
  - ability to quickly filter out nls warnings
  - ability for a user to pick a problem in task list and say ignore all ones 
like this  (this is the more direct manipulation route). Ex. User picks a 
specific deprecated error and says ignore ones like it. I would find this very 
useful.
  - users should be able to filter out deprecated *and* nls if they want
  - there may be other semantically interesting cases

In addition a solution should not involve starting a plugin for each error type 
because this would cause the user to sit around waiting longer at startup.

5) It seems like the suggestions are along two paths:
  - add subtypes (my original and in erich's #2)
   - something like my #3
  - adding more severity levels - I don't see how this actually helps


6) What do you feel are the main drawbacks to #3 (out of curiosity). To recap 
this was
* a compiler plugin provided an extension that specified for each error
   (or perhaps just for the semantically meaningful ones)
    the error number, the error message  
         (not sure what to do with the %1 etc args to a message)
* the task list could allow a user to:
   - directly click on an error ans say ignore ones like this (e.g. those with 
this error number)
   - the filter dialog would let you click on a problem type, choose advanced 
filtering and then choose from checkboxes representing each error

  






Last solution is best in my opinion - filtering by problem IDs.
We already record these on Java problems, and could provide some generic 
descriptions of these problem IDs (so as to avoid surfacing the actual marker 
message with %1).

I like the fact a user could force to hide same problems as a selected one, and 
maybe it, when applicable, it could offer to turn off the compiler reporting it 
(nice to have).

Now: do we want to allow filtering out everything ? Or only warnings per 
category ? Hiding some errors could be fairly dangerous, and allow people to 
export stuff still containing errors, but they wouldn't see them (by mistake).
My initial inclination is to let the user filter what he wants. I still have 
the red'x on the class to remind me. This way if I want to focus on a a set of 
errors and ignore the 400 erros about a class missing (becayse my coworked 
didn't write it yet) then I can.

I agree with your observations. Above is my initial vote to your question.

(Again...I do appreciate that the concern you/erich are putting on trying to 
improve the user experience. I find myself in the cool seat of really being a 
client - there is much goodness in the java ide).
Problem categorization is something I have always been a little frustrated on, 
I guess anybody facing at the task list with a couple hundred problems 
understands this request.

Problem ID filtering is one thing, and can address the 'hide these kinds of 
problems'. 

Another direction to investigate is: 'hide less important problems'.
This could be achieved by custom ID filters (hide all but these 24 problem 
IDs ?). This is doable, but an alternative would be to have more levels of 
severity. Currently there are 3 only: error / warning /info.
I could imagine:

- critical error
- major error
- normal error

and we (compiler) could decide what severity to use for each kind of error.

For warnings, I am not sure one would need more finer grain severities (but I 
could be wrong).


Compilation error IDs are now surfaced in 
org.eclipse.jdt.core.compiler.IProblem,

for deprecation concern, you should define a custom filter hiding jdt problem 
markers which "id" attribute is set to one of the following:

IProblem.UsingDeprecatedField
IProblem.UsingDeprecatedMethod
IProblem.UsingDeprecatedType

Moving to JDT/UI for further action.

Actually this requires support from platform since we can't add custom filters 
to the task list right now.
This got improved in 3.2 with the grouping of problem: You can now enable to group by 'Java problems' and get e.g. a group for all deprecation warnings.
If you think filters are still a must, file a request to platform.ui to use the grouping mapping also for filters.</WithStack>
    <WithOutStack>The task view allows you to filter by the type of problem however deprecated 
warnings (e.g. xyz is deprecated, or xyz subclasses a deprecated class) do not 
appear to be a first class type of error. This means you cannot just ignore 
deprecated warnings using the type filter. Instead you have to rely on the 
string check (contaisn, does not contain) but that means you cannot use that 
field for anything else.
Do you mean a special type of markers for these ? This would be gross I think, 
likewise I might want to turn off entirely all Java problems at once. 

Note that the Java problem is carrying some fine grain information (original 
problem ID), which could be used to define a custom filter (by the Java UI?).

Along the same line, I might be interested in seeing various Java problem 
filters in action:
- classpath problems
- import problems
- type problems
etc...

If the only choice is to provide a hierarchy of Java problems for these, then 
it is fairly constraining and not very extensible (how could one add custom 
filter if categories are constrained by marker types).

Erich - do you have an opinion ?

* A special submarker type would probably make sense
* If there was a submarker type the ui can easily filter it out or filter out 
all java warnings or all java problems (using the current ui)

* I could also see the task view being able to support the ability to say - if 
a marker has the following property and its value is this then show it. This 
perhaps addresses your extensibility issue.  [I think this what you also 
propose -- this would require workbench support , the above marker type does 
not]

Keep in mind as a user it must be one click to say hide the deprecated. Fancy 
filtering is nice but doesn't help me if I have to work to do it&lt;g&gt;.
You can filter out deprecates with the current UI using severities.
It requires 2 clicks:

To do so 
1) check: "Where problem severity"
2) check: "Error"

I always have to try twice to get this correct, the on/off logic isn't clear to 
me given the current wording.
Changing the wording to "Show entries _only_ when"

Kevin pls adopt bug if you agree.



Actually this is incorrect because this will cause all java warnings to hide. I 
only want to hide the deprecated.

The only way I have found to do this is by using the string contains. 

Unless of course the only kind of warning that exists is a deprecated warning 
but a user has no way of knowing that.

I think the original problem still exists &amp; needs to be addressed in JUI. With 
possible feature enhancement to allow arbitray marker property filtering (per 
discussion below)

Then there should be a UI to hide/show individual warning types, and these 
should not need to change the problem marker type (because we might end up with 
300 marker types for individual categories).

I think some API will be necessary to surface our problem IDs.
Philippe, can you elaborate on your comments

1) Jeff had originally indicates that the right way to do marker types (e.g. 
deprecated) is in fact by marker subtypes.

2) Ignoring that for the moment, assume jcore wanted to have only one warning 
marker type in jcore (and not introduce a new one for deprecated).
- How would jcore indicate the errors that are deprecated warnings? 
- Would it be an error number a user would just have to figure out? If yes this 
isn't better than the current workaround.

3)Erich's had mentioned generic attribute filtering support where a user could 
say "filter based on attribute xyz" but this requires 
 - knowing all the attributes for each marker type, their type &amp; what they mean
 - what the valid values/ranges are etc.
Alternatively one could plugin a filtering device for a marker but that would 
mean starting the contributing plugin. E.g. java ide contributes a marker 
filter that understands how to presesent itself in the task view filter ui &amp; 
how to filter markers. But running that filter requires the java ide to start.
* Can you elaborate on how you picture

It seems that adding a deprecated marker subtype is a simple &amp; semantically 
meaningful to a user without having to get fancy with enhanced filtering?
As a follow on note claiming 300 extra marker types is a bit misleading. We 
need to look at what is the most interesting/common for a user. Clearly 
deprecated is important/special and users need a way to quickly hide/show it.
(see my earlier note)
The compiler supports several warning categories see Preferences&gt;Java&gt;Compiler. 
I have a hard time why we promote one category to a marker type. Your argument 
is that deprecates are special. However, this depends on the task, when doing 
NLS work then the NLS warnings are special to me. 

What is the exact marker type hierarchy you are proposing that introudces a 
deprecated marker type? 
* There are probably a "small" set of important warnings/errors. NLS might be 
another one with real semantic importance. Not all warnings are equal. 

* The Preference approach you recommend in fact sort of confirms this 

* With respect to the preference page its problematic on several fronts
- it requires me to have to rebuild everything
- it is separate from the task view &amp; thus does not work as your typical view 
filter works

*  the page itself is unclear to a user. When a user first sees this preference 
page they are not sure what it actually means. This is probably fixed with some 
simple text that says something like "What severity level do you want to assign 
to the following problems."

* as a user I would expect to be able to easily say hide/show nls errors. I 
would further expect I could do that by quickly filtering them in the task 
view. Instead I have to the compiler preferences and tell the compiler to treat 
it as an error or ignore it. This is backwards what a user expects.

Net:
* The page you mention actually does not model things the way a user expects 
nor does it accomodate the typical filter behavior where a user would look for 
it.

I think we need to step back and look at several paths
1) A complicated path along the lines of what erich suggests. I am worried
this is overkill.

2) Adding new types for the "really semantically" interesting things. You 
should be able to get a small list of key ones.

3) Something in between that exposes to the task filtering all of the error 
numbers a component will create &amp; their message &amp; lets the user pick which ones 
to ignore. This is not as involved as arbitrary attributes in #1 but might let 
you avoid figuring out how a user actually wants to use your stuff (not idea). 
The downside is it means a user gets presented with a tonne of errors and has 
to hunt/peck for the ones to ignore.

3b) an enhancement to 3 is if we have 3 then the user could pick a problem in 
the task view and say, ignore errors like this.

Note that 3 requires a small amount of work from ui &amp; also small amount of work 
from components like yours to register with it.




agreed, that the wording of the pref page needs to be improved. I've filed a 
separate bug for this (8443)

The pref page is under the section of the compiler in the preferences. As I 
user I want to have control over the markers created by the compiler. What you 
seem to propose is that the compiler generates all markers/warnings and then 
filtering is used to hide the ones the user isn't interested. This is costly.

I don't agree that the page doesn't model what the user expects. Java 
developers are familiar with compiler options and in fact are expecting that 
they have control over them. Basically, this page provides control over which 
markers should be generated and the task list allows me to filter the generated 
ones. A problem is that these options are global and not per project and we 
intend to change this, i.e., they will become properties of a project. 

Regarding solutions (just for proper credits - the generic attribute based 
filter idea is from Philippe he has suggested it a long time ago). 

Regarding the proposals:
1) see below

2) adding additional subtypes is straightforward (the Java core has the 
mechanims to make this simple). However, if we go down this path then it 
shouldn't be done for deprecates only. 
What I don't like with this approach is that it will result in overlap with 
severity based filtering. Consider this hierarchy:
Problem
   Java
      Java Error
         build path error
      Java Warning
         Use of Deprecated API
         Non externalized String
This would mirror the severity categories offered in the filter dialog below. 

As an aside the checking policy in the marker type hierarchy section of the 
Filter Dialog is not obvious to me. When unchecking "build path problem", then 
the parent is unchecked as well (shouldn't it be grey checked?)

3) is not ideal as you say, the user can still use severity based filtering but 
this is not sufficient and has started this thread in the first place. 

Given that there already is support for severity based filtering and the Java 
compiler already knows several severity categories, why don't we generalize 
severities from a fixed set: Error, Warning, Info to an extensible set of 
categories. This is basically a simpler variation of 1)
1') there are some standard severities but a component can contribute 
additional severity categories (e.g. deprecated warnings). The declared 
severities can then be collected by the Filter Dialog and presented to the 
user. 
I am not fan of using severities which I think are addressing a slightly 
different issue, but rather defining a custom mask which would take advantage 
of Java problem specifics (using some custom attributes which are present on 
Java problem markers).

Severities are somewhat different, and I could imagine finer grain severities 
to allow finding the more critical problems first (like the errorLevel in ST).

Maybe 3 levels of errors and 3 levels of warnings would allow us to do a better 
job at categorizing Java problems.
1) The compiler options page might be useful for specific kinds of compiler 
options but it is definitely not the right approach for generally filtering 
problems. Keep in mind, I am not running command line! The problems show in the 
task view and its there I would expect to filter as a user.

2) Can you elaborate a bit on your severity proposal. 
 - If memory serves me the list of available severities is bounded by core  &amp; 
not extensible.
 - Are you are proposing to add extensible severities levels like:
      deprecated warning 
      nls warning
      build path error 
-   Would these severity levels somehow be "local" to your problem type.
-   If not then the severity levels for filtering would be this horrific union
   of everything from all tools.
-   If it is local to your problem type then are you proposing core provide
   an addition to their extension point to let you say, for JavaProblem we have 
the following (pardon my ignorance - not 100% clear on your suggestion).
-  As a user how do you envision me addressing the use cases below (i.e. what 
kind of ui).
 


3) Erich - I do agree with your observations in #2 about subtypes - but this is 
also the appraoch core pushed (but which I don't like). In general I actually 
am not a fan of the marker type hierarchies. A reason to avoid subtyping is 
clearly because it can come into conflict with other filtering (as you 
observe). In addition a marker parent type is ambiguous. If I check a box does 
it mean ignore problems of this type or all subtypes too - especially confusing 
is that some marker typs are abstract types. Thus we have effectively exposed 
users to an implementation hierarchy (it just gets worse with multiple 
inheritenace of markers).
  
4) Let's step back a second and identify the user goals we have all raised. 
Since I am now your client(grin) I really don't care where the work gets 
done&lt;g&gt;.
  - ability to quickly filter out deprecated
  - ability to quickly filter out nls warnings
  - ability for a user to pick a problem in task list and say ignore all ones 
like this  (this is the more direct manipulation route). Ex. User picks a 
specific deprecated error and says ignore ones like it. I would find this very 
useful.
  - users should be able to filter out deprecated *and* nls if they want
  - there may be other semantically interesting cases

In addition a solution should not involve starting a plugin for each error type 
because this would cause the user to sit around waiting longer at startup.

5) It seems like the suggestions are along two paths:
  - add subtypes (my original and in erich's #2)
   - something like my #3
  - adding more severity levels - I don't see how this actually helps


6) What do you feel are the main drawbacks to #3 (out of curiosity). To recap 
this was
* a compiler plugin provided an extension that specified for each error
   (or perhaps just for the semantically meaningful ones)
    the error number, the error message  
         (not sure what to do with the %1 etc args to a message)
* the task list could allow a user to:
   - directly click on an error ans say ignore ones like this (e.g. those with 
this error number)
   - the filter dialog would let you click on a problem type, choose advanced 
filtering and then choose from checkboxes representing each error

  






Last solution is best in my opinion - filtering by problem IDs.
We already record these on Java problems, and could provide some generic 
descriptions of these problem IDs (so as to avoid surfacing the actual marker 
message with %1).

I like the fact a user could force to hide same problems as a selected one, and 
maybe it, when applicable, it could offer to turn off the compiler reporting it 
(nice to have).

Now: do we want to allow filtering out everything ? Or only warnings per 
category ? Hiding some errors could be fairly dangerous, and allow people to 
export stuff still containing errors, but they wouldn't see them (by mistake).
My initial inclination is to let the user filter what he wants. I still have 
the red'x on the class to remind me. This way if I want to focus on a a set of 
errors and ignore the 400 erros about a class missing (becayse my coworked 
didn't write it yet) then I can.

I agree with your observations. Above is my initial vote to your question.

(Again...I do appreciate that the concern you/erich are putting on trying to 
improve the user experience. I find myself in the cool seat of really being a 
client - there is much goodness in the java ide).
Problem categorization is something I have always been a little frustrated on, 
I guess anybody facing at the task list with a couple hundred problems 
understands this request.

Problem ID filtering is one thing, and can address the 'hide these kinds of 
problems'. 

Another direction to investigate is: 'hide less important problems'.
This could be achieved by custom ID filters (hide all but these 24 problem 
IDs ?). This is doable, but an alternative would be to have more levels of 
severity. Currently there are 3 only: error / warning /info.
I could imagine:

- critical error
- major error
- normal error

and we (compiler) could decide what severity to use for each kind of error.

For warnings, I am not sure one would need more finer grain severities (but I 
could be wrong).


Compilation error IDs are now surfaced in 
org.eclipse.jdt.core.compiler.IProblem,

for deprecation concern, you should define a custom filter hiding jdt problem 
markers which "id" attribute is set to one of the following:

IProblem.UsingDeprecatedField
IProblem.UsingDeprecatedMethod
IProblem.UsingDeprecatedType

Moving to JDT/UI for further action.

Actually this requires support from platform since we can't add custom filters 
to the task list right now.
This got improved in 3.2 with the grouping of problem: You can now enable to group by 'Java problems' and get e.g. a group for all deprecation warnings.
If you think filters are still a must, file a request to platform.ui to use the grouping mapping also for filters.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7907" />
    <CreationDate amount="2002-01-18 22:50:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>ECLIPSE_HOME - seeing its value</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="WONTFIX" />
    <WithStack>The Libraries build path page will contain entries starting with ECLIPSE_HOME 
however no where on the page does it actually tell you what ECLIPSE_HOME 
currently is.  

When you are trying to sort out class problems a user would like to know the 
value (it helps reassure them it is what they think it is). 

I would *not* change  ECLIPSE_HOME to say the actual path but rather somewhere 
else on the page perhaps it should tell you what the value is
The value of variables is already shown on the right of the variable:
ECLIPSE_HOME/some path - {VALUE of Eclipse home}
To see this value requires horizonal scrolling which is not optimal.
The horizonal scrolling could be avoided by showing the variable value in a 
info area below the list.

Are you seeing a case where no value is shown on the right?

Value is to the right (I had not noticed it or expected it there):

* I had assumed scroling right would just give me the remaining path info &amp; 
didn't expect to encounter different data to the right. I agree with your 
observation scrolling is unoptimal.
* It's also unclear to the novice that the info to the right is what 
the "actual" path would be

Some options are to add another column (still not optimal due to scrolling)
Include a read only text area that by default shows ECLIPSE_HOME but if you 
click on entries in the list it shows their actual path?


The read-only info area doesn't fit well into existing layout.

Another alternative would be to show the value in a custom tooltip.

We have an uncommitted item to improve the build path setting
for libraries and variables. This problem should be addressed as part of
this effort.
I think the current solution with having the value of variables shown on the 
right of the variable (ECLIPSE_HOME/some path - {VALUE of Eclipse home})
is good enough.
Move to LATER

closing. no other complaints heard for the current solution
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>The Libraries build path page will contain entries starting with ECLIPSE_HOME 
however no where on the page does it actually tell you what ECLIPSE_HOME 
currently is.  

When you are trying to sort out class problems a user would like to know the 
value (it helps reassure them it is what they think it is). 

I would *not* change  ECLIPSE_HOME to say the actual path but rather somewhere 
else on the page perhaps it should tell you what the value is
The value of variables is already shown on the right of the variable:
ECLIPSE_HOME/some path - {VALUE of Eclipse home}
To see this value requires horizonal scrolling which is not optimal.
The horizonal scrolling could be avoided by showing the variable value in a 
info area below the list.

Are you seeing a case where no value is shown on the right?

Value is to the right (I had not noticed it or expected it there):

* I had assumed scroling right would just give me the remaining path info &amp; 
didn't expect to encounter different data to the right. I agree with your 
observation scrolling is unoptimal.
* It's also unclear to the novice that the info to the right is what 
the "actual" path would be

Some options are to add another column (still not optimal due to scrolling)
Include a read only text area that by default shows ECLIPSE_HOME but if you 
click on entries in the list it shows their actual path?


The read-only info area doesn't fit well into existing layout.

Another alternative would be to show the value in a custom tooltip.

We have an uncommitted item to improve the build path setting
for libraries and variables. This problem should be addressed as part of
this effort.
I think the current solution with having the value of variables shown on the 
right of the variable (ECLIPSE_HOME/some path - {VALUE of Eclipse home})
is good enough.
Move to LATER

closing. no other complaints heard for the current solution
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7908" />
    <CreationDate amount="2002-01-18 23:09:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Repositories view not completely appearing</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>a) its missing the the pin buttons</Line>
          <Line>b) if you click off of it it does not appear in the shortcut bar at the left</Line>
          <Line>It is a fast view, the icons (pin,close, etc) did not fit and were wrapped so</Line>
          <Line>they appeared on the second line.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Build 20011219

Launch a freshly installed eclipse
Perspective -&gt; Open -&gt; Java
Perspective -&gt; Show View -&gt; Repositories

observe:
It looks like its a fast view but 
   a) its missing the the pin buttons
   b) if you click off of it it does not appear in the shortcut bar at the left
It is a fast view, the icons (pin,close, etc) did not fit and were wrapped so 
they appeared on the second line. 

Not showing the icon when minimize the view (eg. by clicking off) contributes 
to the confusion and needs to be fixed. 

Can you verify this is still a problem. Make sure the view shows up as a fast 
view and the pin, minimize, close etc icons are visible. And that clicking in 
another view minimizes the fast view and fast view icon shows up in shortcut 
bar. I think these problems were fixed by Ian &amp; Randy...but verify anyway.
Build: 20020214

Problem no longer exists.</WithStack>
    <WithOutStack>Build 20011219

Launch a freshly installed eclipse
Perspective -&gt; Open -&gt; Java
Perspective -&gt; Show View -&gt; Repositories

observe:
It looks like its a fast view but 
   a) its missing the the pin buttons
   b) if you click off of it it does not appear in the shortcut bar at the left
It is a fast view, the icons (pin,close, etc) did not fit and were wrapped so 
they appeared on the second line. 

Not showing the icon when minimize the view (eg. by clicking off) contributes 
to the confusion and needs to be fixed. 

Can you verify this is still a problem. Make sure the view shows up as a fast 
view and the pin, minimize, close etc icons are visible. And that clicking in 
another view minimizes the fast view and fast view icon shows up in shortcut 
bar. I think these problems were fixed by Ian &amp; Randy...but verify anyway.
Build: 20020214

Problem no longer exists.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7909" />
    <CreationDate amount="2002-01-19 04:15:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="blocker" />
    <Summery>CVS Checkout fails</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Using the new team plugins from eclipse-SDK-20020118-win32 I tried to checkout 
from CVS.

But I got the following error:

"The server modification time 10 Oct 2001 15:20:05 -0000 is an unknown format"
This may be a locale problem, since my CVS server runs in a Danish locale.
Released to HEAD.
Added tests for ISO C format compliance and timezones in the compatibility 
tests.</WithStack>
    <WithOutStack>Using the new team plugins from eclipse-SDK-20020118-win32 I tried to checkout 
from CVS.

But I got the following error:

"The server modification time 10 Oct 2001 15:20:05 -0000 is an unknown format"
This may be a locale problem, since my CVS server runs in a Danish locale.
Released to HEAD.
Added tests for ISO C format compliance and timezones in the compatibility 
tests.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7910" />
    <CreationDate amount="2002-01-19 11:26:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Resources" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Eliminate startup penalty for Eclipse installations with large #'s of plugins</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>From the Eclipse help file (in the Platform Plug-in Developer Guide in 
the 'Platform SDK Roadmap' section)....

"A general goal of the runtime is that the end user should not pay a memory or 
performance penalty for plug-ins that are installed, but not used. A plug-in 
can be installed and added to the registry, but the plug-in will not be 
activated unless a function provided by the plug-in has been requested 
according to the user's activity."

I have adopted the Eclipse runtime core as the framewwork for all GUI 
applications that I build.  I add any new applications to an Eclipse 
installation folder that contains all the applications developed.  When a user 
installs an new application on thier desktop all applications are installed 
into the same directory (so plugins are shared across applications and so that 
the Eclipse update mechanism is still usable).

The # of plugins that I have developed are becoming quite numerous (many 
dozens).  I have discovered that there is now a startup penalty for all of my 
applications because Eclipse must parse the plugin.xml file for all these 
plugins before launching an application.  Event if an application may use only 
a single plugin the Eclipse core must parse ALL plugin.xml files.  It now takes 
several seconds to launch event the tiniest application.

I can think of a couple of solutions to this problem...

...Create a serializable plugin registry that is only recreated if a plugin 
changes.

...Create a list of the plugins that can potentially be used by an application 
by examining the plugin dependencies of the plugin that exports the application 
to be run.  By recursively examining the dependencies of all plugins a list can 
be created of just the plugins that will be potentially be used by any 
particular application.  Thus, it will not be necessary to parse the plugin.xml 
files of plugins that will never be used.
We have an experimental registry cache implemented as you describe.  It still 
has some issues with it (it currently doesn't detect changes to the set of 
plug-ins), but we hope to get that sorted out.  In builds &gt; 20020115 you can 
launch with the "-registrycache" parameter to enable this.  Currently, if you 
make any changes to plugin.xml files, or add/delete plug-ins, you have to 
manually delete the .metadata/.registry file.  If you're willing to try it out, 
let us know if that fixes your performance problems.

Your second suggestion is not possible, because plugins can reference plugins 
they don't depend on via extension points.  For example, the base UI has no 
dependency on the Java UI, but the Java UI hooks into many of the extension 
points of the base UI, so it is used even though it is not a direct dependency.  
Also, dependency information is stored in plugin.xml, so some parsing would 
still be required for this optimization.

The registry caching has been released in the latest build (2002-01-29).  Please 
reopen if you continue to face severe performance hits on startup with lots of 
plugins.</WithStack>
    <WithOutStack>From the Eclipse help file (in the Platform Plug-in Developer Guide in 
the 'Platform SDK Roadmap' section)....

"A general goal of the runtime is that the end user should not pay a memory or 
performance penalty for plug-ins that are installed, but not used. A plug-in 
can be installed and added to the registry, but the plug-in will not be 
activated unless a function provided by the plug-in has been requested 
according to the user's activity."

I have adopted the Eclipse runtime core as the framewwork for all GUI 
applications that I build.  I add any new applications to an Eclipse 
installation folder that contains all the applications developed.  When a user 
installs an new application on thier desktop all applications are installed 
into the same directory (so plugins are shared across applications and so that 
the Eclipse update mechanism is still usable).

The # of plugins that I have developed are becoming quite numerous (many 
dozens).  I have discovered that there is now a startup penalty for all of my 
applications because Eclipse must parse the plugin.xml file for all these 
plugins before launching an application.  Event if an application may use only 
a single plugin the Eclipse core must parse ALL plugin.xml files.  It now takes 
several seconds to launch event the tiniest application.

I can think of a couple of solutions to this problem...

...Create a serializable plugin registry that is only recreated if a plugin 
changes.

...Create a list of the plugins that can potentially be used by an application 
by examining the plugin dependencies of the plugin that exports the application 
to be run.  By recursively examining the dependencies of all plugins a list can 
be created of just the plugins that will be potentially be used by any 
particular application.  Thus, it will not be necessary to parse the plugin.xml 
files of plugins that will never be used.
We have an experimental registry cache implemented as you describe.  It still 
has some issues with it (it currently doesn't detect changes to the set of 
plug-ins), but we hope to get that sorted out.  In builds &gt; 20020115 you can 
launch with the "-registrycache" parameter to enable this.  Currently, if you 
make any changes to plugin.xml files, or add/delete plug-ins, you have to 
manually delete the .metadata/.registry file.  If you're willing to try it out, 
let us know if that fixes your performance problems.

Your second suggestion is not possible, because plugins can reference plugins 
they don't depend on via extension points.  For example, the base UI has no 
dependency on the Java UI, but the Java UI hooks into many of the extension 
points of the base UI, so it is used even though it is not a direct dependency.  
Also, dependency information is stored in plugin.xml, so some parsing would 
still be required for this optimization.

The registry caching has been released in the latest build (2002-01-29).  Please 
reopen if you continue to face severe performance hits on startup with lots of 
plugins.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7911" />
    <CreationDate amount="2002-01-19 15:11:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Long pause before progress dialog when syncing</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The progress dialog comes up only after a lot of work has been done during a 
synchronize op.
Fixed.</WithStack>
    <WithOutStack>The progress dialog comes up only after a lot of work has been done during a 
synchronize op.
Fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7912" />
    <CreationDate amount="2002-01-19 17:08:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="enhancement" />
    <Summery>[Welcome] Ability to print welcome page</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>It should be possible to print the welcome page.
Defer until time and resources permit considering this enhancement.
Reopen to investigate
*** Bug 11596 has been marked as a duplicate of this bug. ***
There are no plans for the UI team to work on this defect until higher priority 
items are addressed. If you are interested in working on this defect please let 
us know on the ui team's mailing list.
There are currently no plans to work on this feature</WithStack>
    <WithOutStack>It should be possible to print the welcome page.
Defer until time and resources permit considering this enhancement.
Reopen to investigate
*** Bug 11596 has been marked as a duplicate of this bug. ***
There are no plans for the UI team to work on this defect until higher priority 
items are addressed. If you are interested in working on this defect please let 
us know on the ui team's mailing list.
There are currently no plans to work on this feature</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7913" />
    <CreationDate amount="2002-01-19 17:09:00 -0500" />
    <DupId amount="2495" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>[Welcome] copy text support needed in welcome page</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>It should be possible to copy text from the welcome page.
Defer until time and resources are available to consider this enhancement
Reopen to investigate


*** This bug has been marked as a duplicate of 2495 ***</WithStack>
    <WithOutStack>It should be possible to copy text from the welcome page.
Defer until time and resources are available to consider this enhancement
Reopen to investigate


*** This bug has been marked as a duplicate of 2495 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7914" />
    <CreationDate amount="2002-01-19 17:37:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Cannot copy a Java project in the packages view</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>There is no way to copy a Java project in the packages view. You can copy a 
project in the Navigator. This is a functional gap.
this is a new navigator feature.
planning to simply forward the action to the platform - like we do in 'delete 
project'. 

Ok?
sam for 'move project', which is a new feature as well
agreed, just forward, there is no Java specific semantics involved.
fixed &gt;= 20020121
fixed
Verified</WithStack>
    <WithOutStack>There is no way to copy a Java project in the packages view. You can copy a 
project in the Navigator. This is a functional gap.
this is a new navigator feature.
planning to simply forward the action to the platform - like we do in 'delete 
project'. 

Ok?
sam for 'move project', which is a new feature as well
agreed, just forward, there is no Java specific semantics involved.
fixed &gt;= 20020121
fixed
Verified</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7915" />
    <CreationDate amount="2002-01-20 17:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>breakpoint marker attributes need qualified names</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The breakpoint marker attribute names should be qualified. As changing 
attribute names invalidates existing breakpoints, we should also have a 
versioning mechanism, such that we can throw out old breakpoints on startup.
Fixed. A version tag was not added, but to allow for migration from an old 
build to a newer build, breakpoints that do not have the new "modelIdentifier" 
attribute are deleted. Thus, clients will loose their old breakpoints (but only 
once).
Please verify
Verified.</WithStack>
    <WithOutStack>The breakpoint marker attribute names should be qualified. As changing 
attribute names invalidates existing breakpoints, we should also have a 
versioning mechanism, such that we can throw out old breakpoints on startup.
Fixed. A version tag was not added, but to allow for migration from an old 
build to a newer build, breakpoints that do not have the new "modelIdentifier" 
attribute are deleted. Thus, clients will loose their old breakpoints (but only 
once).
Please verify
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7916" />
    <CreationDate amount="2002-01-20 21:08:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Code assist does not find class</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>0109 Win32 Integration

I have Project 1 and Project 2.  I added external JARs to Project 1 which are 
exported.  Project 2 depends on Project 1.  When I try to use Code Assist to 
match classes in the external JARs of Project 1, nothing is appearing.  This 
started to happen once I updated the external JARs with a new version.

If I fully qualify or import classes, compiles work no problem.  I can use F3 
and F4 without a problem.  Ctrl-Space just shows a list of possible matches 
but none from the external JARs.
Problem is that an updated jar is not reindexed.
Pls verify in latest
Now jar can be reindexed.

If you update the jar in the file system, you need to update the jar in the 
workspace. To perform this update refresh the project of the jar (File&gt;Refresh).
After this operation CodeAssist works.

Closing.
Using the 0610 Win32 build.
I select my JAR that shows as a library in my project.  When I select File, 
Refresh is disabled.

There seems to be a condition in which the Refresh is enabled vs disabled.  We 
have our own Source/Binary projects and it seems that JARs within our Binary 
projects always have it disabled and the JARs built with Source projects are 
enabled.
you need to select the project which contain the jar and select File&gt;Refresh.
Re-closing
0620 Win32

I put a new JAR in a project and did the File-&gt;Refresh against the Project.
My other projects which import this one do not see the new classes that are 
available.
You can close this... It was user error.
Closing.</WithStack>
    <WithOutStack>0109 Win32 Integration

I have Project 1 and Project 2.  I added external JARs to Project 1 which are 
exported.  Project 2 depends on Project 1.  When I try to use Code Assist to 
match classes in the external JARs of Project 1, nothing is appearing.  This 
started to happen once I updated the external JARs with a new version.

If I fully qualify or import classes, compiles work no problem.  I can use F3 
and F4 without a problem.  Ctrl-Space just shows a list of possible matches 
but none from the external JARs.
Problem is that an updated jar is not reindexed.
Pls verify in latest
Now jar can be reindexed.

If you update the jar in the file system, you need to update the jar in the 
workspace. To perform this update refresh the project of the jar (File&gt;Refresh).
After this operation CodeAssist works.

Closing.
Using the 0610 Win32 build.
I select my JAR that shows as a library in my project.  When I select File, 
Refresh is disabled.

There seems to be a condition in which the Refresh is enabled vs disabled.  We 
have our own Source/Binary projects and it seems that JARs within our Binary 
projects always have it disabled and the JARs built with Source projects are 
enabled.
you need to select the project which contain the jar and select File&gt;Refresh.
Re-closing
0620 Win32

I put a new JAR in a project and did the File-&gt;Refresh against the Project.
My other projects which import this one do not see the new classes that are 
available.
You can close this... It was user error.
Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7917" />
    <CreationDate amount="2002-01-20 21:21:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>NPE when attempting surround with try/catch</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208435">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.corext.refactoring.util.AST.accept(AST.java:70)</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.corext.refactoring.surround.SurroundWithTryCatchRefactoring.checkActivation(SurroundWithTryCatchRefactoring.java:102)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.ui.refactoring.actions.SurroundWithTryCatchAction.run(SurroundWithTryCatchAction.java:42)</Frame>
          <Frame depth="3">org.eclipse.jface.action.Action.runWithEvent(Action.java:452)</Frame>
          <Frame depth="4">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="5">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="6">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="7">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="8">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled Code))</Frame>
          <Frame depth="9">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="10">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))</Frame>
          <Frame depth="11">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))</Frame>
          <Frame depth="12">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="13">org.eclipse.ui.internal.Workbench.run(Workbench.java:798)</Frame>
          <Frame depth="14">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:821)</Frame>
          <Frame depth="15">org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)</Frame>
          <Frame depth="16">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="17">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="18">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="19">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>0109 Win32 Integration

I have a line of code which has one error, Unhandled exception type 
java.lang.Exception otherwise there is nothing wrong the line of code.

java.lang.NullPointerException
        at org.eclipse.jdt.internal.corext.refactoring.util.AST.accept
(AST.java:70)
        at 
org.eclipse.jdt.internal.corext.refactoring.surround.SurroundWithTryCatchRefact
oring.checkActivation(SurroundWithTryCatchRefactoring.java:102)
        at 
org.eclipse.jdt.internal.ui.refactoring.actions.SurroundWithTryCatchAction.run
(SurroundWithTryCatchAction.java:42)
        at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
        at 
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
        at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
        at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
        at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
        at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java
(Compiled Code))
        at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
        at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java
(Compiled Code))
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java
(Compiled Code))
        at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java
(Compiled Code))
        at org.eclipse.ui.internal.Workbench.run(Workbench.java:798)
        at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:821)
        at org.eclipse.core.boot.BootLoader.run(BootLoader.java:285)
        at java.lang.reflect.Method.invoke(Native Method)
        at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
        at org.eclipse.core.launcher.Main.run(Main.java:502)
        at org.eclipse.core.launcher.Main.main(Main.java:362)
Michael,
surround with try/catch has been changed since 0109 
and the org.eclipse.jdt.internal.corext.refactoring.util.AST class that 
used to cause that npe is no longer used (we now use different api)

because this report does not include a test case 
- can you check if the problem is still visible in builds &gt;= 20020321 ?

if not, i'd like to close this report

I have not seen the problem since, so we can close this.
closing as fixed</WithStack>
    <WithOutStack>0109 Win32 Integration

I have a line of code which has one error, Unhandled exception type 
java.lang.Exception otherwise there is nothing wrong the line of code.


Michael,
surround with try/catch has been changed since 0109 
and the org.eclipse.jdt.internal.corext.refactoring.util.AST class that 
used to cause that npe is no longer used (we now use different api)

because this report does not include a test case 
- can you check if the problem is still visible in builds &gt;= 20020321 ?

if not, i'd like to close this report

I have not seen the problem since, so we can close this.
closing as fixed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7918" />
    <CreationDate amount="2002-01-21 03:47:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Missing busy cursor in search dialog when flipping pages</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Switching to another page in the Search dialog can activate a plugin and this 
can take time. Whenever a user action can result in plugin activation we should 
show a busy cursor.
Fix will be in builds &gt;= I20020129
Verified.</WithStack>
    <WithOutStack>Switching to another page in the Search dialog can activate a plugin and this 
can take time. Whenever a user action can result in plugin activation we should 
show a busy cursor.
Fix will be in builds &gt;= I20020129
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7919" />
    <CreationDate amount="2002-01-21 03:54:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Search: scope section doesn't apply to Help search</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>There is now a Help Search page. For this kind of search the Scope section does 
not apply and search should enable clients to either disable the scope area or 
to hide it.
Suggest to add optional attribute (e.g. showScopeSection) to SearchPage-XML
which defaults to false.
This makes sense and let's do this. However, clients might one to use the space 
to show their custom scope mechanism.
XML is extended with optional tag "showScopeSection" which if false per default
Currently the space of the hidden scope part can't be reused. We decided not to
shrink the dialog if we switch to another page.

No action required for the help plug-in

Fixed. Available in builds &gt;= 20020129</WithStack>
    <WithOutStack>There is now a Help Search page. For this kind of search the Scope section does 
not apply and search should enable clients to either disable the scope area or 
to hide it.
Suggest to add optional attribute (e.g. showScopeSection) to SearchPage-XML
which defaults to false.
This makes sense and let's do this. However, clients might one to use the space 
to show their custom scope mechanism.
XML is extended with optional tag "showScopeSection" which if false per default
Currently the space of the hidden scope part can't be reused. We decided not to
shrink the dialog if we switch to another page.

No action required for the help plug-in

Fixed. Available in builds &gt;= 20020129</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7920" />
    <CreationDate amount="2002-01-21 04:53:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Unix All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>JavaProject.canonicalizedPath</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="singlecomment">
        <location start="538" end="616" />
        <code>// keep only segments that were in original path and device if it was there</code>
      </source_code>
      <source_code type="functioncall">
        <location start="698" end="727" />
        <code>externalPath.segmentCount());</code>
      </source_code>
      <source_code type="ifstatement">
        <location start="728" end="804" />
        <code>if (externalPath.getDevice() == null) {
		return result.setDevice(null);
	}</code>
      </source_code>
      <source_code type="elsestatement">
        <location start="802" end="831" />
        <code>} else {
		return result;
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>This function seems to think that the cannonicalPath (which is a path resolved
by following links) will always have more segments. If you link a directory to 
a lower part in the filesystem (say Java/a/b/ive to Java/ive) and try to
canonicalizePath the first , the externalPath will have more segments than the
canonicalPath which will cause the following part to throw an exception.

The following is the relevant part of JavaProject.canonicalizePath, with the &gt; 
line being the culprit. I can't understand the meaning of the comment...

	// keep only segments that were in original path and device if it was there
&gt;
IPath result = canonicalPath.removeFirstSegments(canonicalPath.segmentCount() -
externalPath.segmentCount());
	if (externalPath.getDevice() == null) {
		return result.setDevice(null);
	} else {
		return result;
	}
The canonicalizedPath(IPath) method is useful on win32 file systems only (it 
transforms path like c:\Jdk1.3\lib\rt.jar into C:\JDK1.3\rt.jar). On file 
systems that are case sensitive, it should return the original path.

Fix is to detect if the underlying file system is case sensisitive. In this 
case, the original path is returned.

Sent patch to Frank. 
Frank said the patch solves his problem.

Released in both R1.0 and 2.0 streams.
*** Bug 7221 has been marked as a duplicate of this bug. ***
Released in 1.0 Rollup2</WithStack>
    <WithOutStack>This function seems to think that the cannonicalPath (which is a path resolved
by following links) will always have more segments. If you link a directory to 
a lower part in the filesystem (say Java/a/b/ive to Java/ive) and try to
canonicalizePath the first , the externalPath will have more segments than the
canonicalPath which will cause the following part to throw an exception.

The following is the relevant part of JavaProject.canonicalizePath, with the &gt; 
line being the culprit. I can't understand the meaning of the comment...

	// keep only segments that were in original path and device if it was there
&gt;
IPath result = canonicalPath.removeFirstSegments(canonicalPath.segmentCount() -
externalPath.segmentCount());
	if (externalPath.getDevice() == null) {
		return result.setDevice(null);
	} else {
		return result;
	}
The canonicalizedPath(IPath) method is useful on win32 file systems only (it 
transforms path like c:\Jdk1.3\lib\rt.jar into C:\JDK1.3\rt.jar). On file 
systems that are case sensitive, it should return the original path.

Fix is to detect if the underlying file system is case sensisitive. In this 
case, the original path is returned.

Sent patch to Frank. 
Frank said the patch solves his problem.

Released in both R1.0 and 2.0 streams.
*** Bug 7221 has been marked as a duplicate of this bug. ***
Released in 1.0 Rollup2</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7921" />
    <CreationDate amount="2002-01-21 05:11:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Java editor shows whole file when opened in segmented mode</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1. Search for declarations of a method</Line>
          <Line>2. Ensure the corresponding CU is not open in the Java editor</Line>
          <Line>3. Enable segmented view (show source of member only)</Line>
          <Line>4. Open the search match</Line>
          <Line>==&gt; editor shows whole file</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>1. Search for declarations of a method
2. Ensure the corresponding CU is not open in the Java editor
3. Enable segmented view (show source of member only)
4. Open the search match
==&gt; editor shows whole file

I guess the openEditor method does not initialize correctly when the parameter
"activate" is false: once the editor gets the focus (i.e. is activated) it shows
the method in segmented mode.
This one significantly impacts the usability of the segemented view.
Also, at least in build 20020115, when you click inside the editor after step 4 
above, it jumps to the top of that method. This sometimes means the search match 
is no longer visible, and you have to double click in the search result view a 
second time to see the result.
Could not reproduce in 20020425.</WithStack>
    <WithOutStack>1. Search for declarations of a method
2. Ensure the corresponding CU is not open in the Java editor
3. Enable segmented view (show source of member only)
4. Open the search match
==&gt; editor shows whole file

I guess the openEditor method does not initialize correctly when the parameter
"activate" is false: once the editor gets the focus (i.e. is activated) it shows
the method in segmented mode.
This one significantly impacts the usability of the segemented view.
Also, at least in build 20020115, when you click inside the editor after step 4 
above, it jumps to the top of that method. This sometimes means the search match 
is no longer visible, and you have to double click in the search result view a 
second time to see the result.
Could not reproduce in 20020425.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7922" />
    <CreationDate amount="2002-01-21 05:20:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>TypeSelectionDialog - incorrect handling of search style</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="WONTFIX" />
    <WithStack>i wanted to use TypeSelectionDialog  and set the style to 
IJavaElementSearchConstants.CONSIDER_CLASSES

however, binary types are still found, which is contrary to what i expected
(see javadoc for IJavaElementSearchConstants)
in fact, the CONSIDER_BINARIES flag seems to be ignored by the dialog,
binaries are simply always included.

as far as i can tell (by a quick search) - CONSIDER_EXTERNAL_JARS and
CONSIDER_REQUIRED_PROJECTS are also ignored.
Erich,

It's AllTypeSearchEngine which is ignoring the styles. Please reassign to the
owner of that class.
I think you were the last one that touched this class?
later
close
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>i wanted to use TypeSelectionDialog  and set the style to 
IJavaElementSearchConstants.CONSIDER_CLASSES

however, binary types are still found, which is contrary to what i expected
(see javadoc for IJavaElementSearchConstants)
in fact, the CONSIDER_BINARIES flag seems to be ignored by the dialog,
binaries are simply always included.

as far as i can tell (by a quick search) - CONSIDER_EXTERNAL_JARS and
CONSIDER_REQUIRED_PROJECTS are also ignored.
Erich,

It's AllTypeSearchEngine which is ignoring the styles. Please reassign to the
owner of that class.
I think you were the last one that touched this class?
later
close
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7923" />
    <CreationDate amount="2002-01-21 05:26:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Extract Local Variable should be more robust against syntax errors</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208435">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.corext.refactoring.util.AST.accept(AST.java:70)</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.corext.refactoring.util.JavaElementMapper.&lt;init&gt;(JavaElementMapper.java:38)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.corext.refactoring.sef.SelfEncapsulateFieldRefactoring.checkActivation(SelfEncapsulateFieldRefactoring.java:116)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate(RefactoringStarter.java:79)</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.ui.refactoring.actions.SelfEncapsulateFieldAction.run(SelfEncapsulateFieldAction.java:29)</Frame>
          <Frame depth="5">org.eclipse.jface.action.Action.runWithEvent(Action.java:452)</Frame>
          <Frame depth="6">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="7">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)</Frame>
          <Frame depth="8">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)</Frame>
          <Frame depth="9">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)</Frame>
          <Frame depth="10">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java(Compiled Code))</Frame>
          <Frame depth="11">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)</Frame>
          <Frame depth="12">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)</Frame>
          <Frame depth="13">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)</Frame>
          <Frame depth="14">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)</Frame>
          <Frame depth="15">org.eclipse.ui.internal.Workbench.run(Workbench.java:805)</Frame>
          <Frame depth="16">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="17">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="18">SlimLauncher.main(SlimLauncher.java:14)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>When another method has a syntax error then the extract local variable 
refactoring fails. It should be able to handle this case
exactly the same it true for all other our sub-cu refactorings:

Extract Method, Inline Temp etc.

they're all not allowed od cus with compile errors - let alone syntax errors.



fixed for ExtractTemp, RenameTemp, InlineTemp

SelfEncaplulateField still throws an exception,

java.lang.NullPointerException
	at org.eclipse.jdt.internal.corext.refactoring.util.AST.accept
(AST.java:70)
	at 
org.eclipse.jdt.internal.corext.refactoring.util.JavaElementMapper.&lt;init&gt;
(JavaElementMapper.java:38)
	at 
org.eclipse.jdt.internal.corext.refactoring.sef.SelfEncapsulateFieldRefactoring.
checkActivation(SelfEncapsulateFieldRefactoring.java:116)
	at 
org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate
(RefactoringStarter.java:79)
	at 
org.eclipse.jdt.internal.ui.refactoring.actions.SelfEncapsulateFieldAction.run
(SelfEncapsulateFieldAction.java:29)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java
(Compiled Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at SlimLauncher.main(SlimLauncher.java:14)

Dirk is working on making Extrace Method more fault tolerant.
fixed SEF
closing
Verified</WithStack>
    <WithOutStack>When another method has a syntax error then the extract local variable 
refactoring fails. It should be able to handle this case
exactly the same it true for all other our sub-cu refactorings:

Extract Method, Inline Temp etc.

they're all not allowed od cus with compile errors - let alone syntax errors.



fixed for ExtractTemp, RenameTemp, InlineTemp

SelfEncaplulateField still throws an exception,



Dirk is working on making Extrace Method more fault tolerant.
fixed SEF
closing
Verified</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7924" />
    <CreationDate amount="2002-01-21 05:28:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Consolidate Rename Method Parameter and Reorder Method parameter</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="2">
        <Lines>
          <Line>a. consolidate</Line>
          <Line>b. show a signature preview</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="5">
        <Lines>
          <Line>1) show a preview of the new signature</Line>
          <Line>2) support to change the visibility of the methdo</Line>
          <Line>agree to:</Line>
          <Line>a. consolidate</Line>
          <Line>b. show a signature preview</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The UI of these two refactorings is inconsistent and should be consolidated. 
Proposal is to merge the two refactorings into one (change signature) and to 
also consider the following enhancements:
1) show a preview of the new signature
2) support to change the visibility of the methdo
agree to:
a. consolidate
b. show a signature preview

still needs discussion:
a. put everything into one 'change signature' bucket
b. 2)

fixed 0125
Verified</WithStack>
    <WithOutStack>The UI of these two refactorings is inconsistent and should be consolidated. 
Proposal is to merge the two refactorings into one (change signature) and to 
also consider the following enhancements:
1) show a preview of the new signature
2) support to change the visibility of the methdo
agree to:
a. consolidate
b. show a signature preview

still needs discussion:
a. put everything into one 'change signature' bucket
b. 2)

fixed 0125
Verified</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7925" />
    <CreationDate amount="2002-01-21 06:57:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>CVS 'Entries' file uses localized date format</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The Entries file created by Eclipse uses a localized date like this :
/util.jar/1.1/mer. janv. 
09 12:47:28 2002/-kb/

Instead it should use the ISO C format :
/util.jar/1.1/Wed Jan 09 
12:47:26 2002/-kb/
(See http://www.cvshome.org/docs/manual/cvs_2.html#SEC19)

This 
confuses both WinCVS and Eclipse when running updates from both environnements.
Released to HEAD.
Added tests for ISO C format compliance and timezones in the compatibility 
tests.</WithStack>
    <WithOutStack>The Entries file created by Eclipse uses a localized date like this :
/util.jar/1.1/mer. janv. 
09 12:47:28 2002/-kb/

Instead it should use the ISO C format :
/util.jar/1.1/Wed Jan 09 
12:47:26 2002/-kb/
(See http://www.cvshome.org/docs/manual/cvs_2.html#SEC19)

This 
confuses both WinCVS and Eclipse when running updates from both environnements.
Released to HEAD.
Added tests for ISO C format compliance and timezones in the compatibility 
tests.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7926" />
    <CreationDate amount="2002-01-21 07:20:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Code Assist - No completion for class instance creation after inner class</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="31" end="122" />
        <code>public class X {
    class Y{
        void foo(){}
    }
    Object o = new Objec&lt;cursor&gt;
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) create the following class</Line>
          <Line />
          <Line />
          <Line>2) do ctrl+space at cursor location</Line>
          <Line>no proposal</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1) create the following class

public class X {
    class Y{
        void foo(){}
    }
    Object o = new Objec&lt;cursor&gt;
}
2) do ctrl+space at cursor location
no proposal

If you remove the method 'foo', code assist work fine.
Fixed.</WithStack>
    <WithOutStack>1) create the following class

public class X {
    class Y{
        void foo(){}
    }
    Object o = new Objec&lt;cursor&gt;
}
2) do ctrl+space at cursor location
no proposal

If you remove the method 'foo', code assist work fine.
Fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7927" />
    <CreationDate amount="2002-01-21 08:12:00 -0500" />
    <DupId amount="7485" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>override methods does not add imports</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>'override methods' could add imports as well - now i have to do a 2 step 
operation
is implemented, but currently fails due to bug 7485

*** This bug has been marked as a duplicate of 7485 ***</WithStack>
    <WithOutStack>'override methods' could add imports as well - now i have to do a 2 step 
operation
is implemented, but currently fails due to bug 7485

*** This bug has been marked as a duplicate of 7485 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7928" />
    <CreationDate amount="2002-01-21 08:25:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>Toggle capitalization of identifiers [code manipulation]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="assignment">
        <location start="339" end="384" />
        <code>public final static int MY_LITTLE_VALUE = 17;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>In Java, the conventional way of writing class names, method names, variable 
names and constants differ, like
MyClass
myVariable
myMethod
MY_CONSTANT

It would be nice to have a simple function to switch between these types of 
capitalization. Consider the following variable being converted to a constant:
private int myLittleValue; 
to
public final static int MY_LITTLE_VALUE = 17;

Instead of erasing "myLittleValue" and typing "MY_LITTLE_VALUE", one should 
just have to select the identifier, and choose "Toggle capitalization" from the 
Edit menu (or similar).
cannot commit for 2.0
This should be some sort of code manipulation feature like convert to constant.

No plans to add this for 2.1. Tagged as help wanted
Chaning state from assigned later to resolved later. Assigned later got 
introduced by the last bug conversion and is not a supported Eclipse bug state.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithStack>
    <WithOutStack>In Java, the conventional way of writing class names, method names, variable 
names and constants differ, like
MyClass
myVariable
myMethod
MY_CONSTANT

It would be nice to have a simple function to switch between these types of 
capitalization. Consider the following variable being converted to a constant:
private int myLittleValue; 
to
public final static int MY_LITTLE_VALUE = 17;

Instead of erasing "myLittleValue" and typing "MY_LITTLE_VALUE", one should 
just have to select the identifier, and choose "Toggle capitalization" from the 
Edit menu (or similar).
cannot commit for 2.0
This should be some sort of code manipulation feature like convert to constant.

No plans to add this for 2.1. Tagged as help wanted
Chaning state from assigned later to resolved later. Assigned later got 
introduced by the last bug conversion and is not a supported Eclipse bug state.
As of now 'LATER' and 'REMIND' resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7929" />
    <CreationDate amount="2002-01-21 08:31:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>cannot add  a breakpoint to an empty method</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>i cannot add a breakpoint to a method like (build 20020115 + newest):

void r(){

}
ok, it works on the line of the method declaratrion.
however, it is disabled on empty statements:
you cannot add a breakpoint on:
void f(){
;  //&lt;&lt; cannot add a breakpoint here
}
This is a feature. An empty line is not executable, so you should not be able 
to set a breakpoint there.</WithStack>
    <WithOutStack>i cannot add a breakpoint to a method like (build 20020115 + newest):

void r(){

}
ok, it works on the line of the method declaratrion.
however, it is disabled on empty statements:
you cannot add a breakpoint on:
void f(){
;  //&lt;&lt; cannot add a breakpoint here
}
This is a feature. An empty line is not executable, so you should not be able 
to set a breakpoint there.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7930" />
    <CreationDate amount="2002-01-21 08:56:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Code Assist - No completion in switch statement</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="30" end="198" />
        <code>public class A {
	final static int ZZZ = 1;
	public void foo() {
		switch (2) {
			case 0 + ZZZ :
			case 1 + ZZZ :
				bar(ZZZ&lt;cursor&gt;);
		}
	}
	
	void bar(int y) {}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>1) create the following class</Line>
          <Line />
          <Line>2) do ctrl+space at cursor location</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>1) create the following class
public class A {
	final static int ZZZ = 1;
	public void foo() {
		switch (2) {
			case 0 + ZZZ :
			case 1 + ZZZ :
				bar(ZZZ&lt;cursor&gt;);
		}
	}
	
	void bar(int y) {}
}
2) do ctrl+space at cursor location

no proposal
ZZZ is considered as a label in switch statement 

Fixed</WithStack>
    <WithOutStack>1) create the following class
public class A {
	final static int ZZZ = 1;
	public void foo() {
		switch (2) {
			case 0 + ZZZ :
			case 1 + ZZZ :
				bar(ZZZ&lt;cursor&gt;);
		}
	}
	
	void bar(int y) {}
}
2) do ctrl+space at cursor location

no proposal
ZZZ is considered as a label in switch statement 

Fixed</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7931" />
    <CreationDate amount="2002-01-21 09:13:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Search" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="other" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>NPE requesting search dialog</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208435">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java(Compiled Code))</Frame>
          <Frame depth="1">java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java(Compiled Code))</Frame>
          <Frame depth="2">org.eclipse.search.internal.ui.SearchPageDescriptor.readExtensionScorePairs(SearchPageDescriptor.java:201)</Frame>
          <Frame depth="3">org.eclipse.search.internal.ui.SearchPageDescriptor.getScoreForFileExtension(SearchPageDescriptor.java:184)</Frame>
          <Frame depth="4">org.eclipse.search.internal.ui.SearchPageDescriptor.computeScore(SearchPageDescriptor.java:166)</Frame>
          <Frame depth="5">org.eclipse.search.internal.ui.SearchDialog.getPreferredPageIndex(SearchDialog.java:278)</Frame>
          <Frame depth="6">org.eclipse.search.internal.ui.SearchDialog.createPageArea(SearchDialog.java:142)</Frame>
          <Frame depth="7">org.eclipse.search.internal.ui.util.ExtendedDialogWindow.createDialogArea(ExtendedDialogWindow.java:142)</Frame>
          <Frame depth="8">org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:434)</Frame>
          <Frame depth="9">org.eclipse.jface.window.Window.create(Window.java:237)</Frame>
          <Frame depth="10">org.eclipse.search.internal.ui.SearchDialog.create(SearchDialog.java:128)</Frame>
          <Frame depth="11">org.eclipse.jface.window.Window.open(Window.java:510)</Frame>
          <Frame depth="12">org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:45)</Frame>
          <Frame depth="13">org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:32)</Frame>
          <Frame depth="14">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:204)</Frame>
          <Frame depth="15">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="16">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="18">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="19">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="20">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))</Frame>
          <Frame depth="22">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))</Frame>
          <Frame depth="23">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="24">org.eclipse.ui.internal.Workbench.run(Workbench.java:805)</Frame>
          <Frame depth="25">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="26">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="27">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="28">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="29">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="30">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I had WorkbenchWindow selected in the class org.eclipse.ui.actions.CopyAction
I pressed the serach toolbar button and got the following

Log: Mon Jan 21 09:11:10 EST 2002
4 org.eclipse.ui 0 java.lang.NullPointerException
java.lang.NullPointerException
	at java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java(Compiled Code))
	at java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java(Compiled Code))
	at 
org.eclipse.search.internal.ui.SearchPageDescriptor.readExtensionScorePairs
(SearchPageDescriptor.java:201)
	at 
org.eclipse.search.internal.ui.SearchPageDescriptor.getScoreForFileExtension
(SearchPageDescriptor.java:184)
	at org.eclipse.search.internal.ui.SearchPageDescriptor.computeScore
(SearchPageDescriptor.java:166)
	at org.eclipse.search.internal.ui.SearchDialog.getPreferredPageIndex
(SearchDialog.java:278)
	at org.eclipse.search.internal.ui.SearchDialog.createPageArea
(SearchDialog.java:142)
	at 
org.eclipse.search.internal.ui.util.ExtendedDialogWindow.createDialogArea
(ExtendedDialogWindow.java:142)
	at org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:434)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.search.internal.ui.SearchDialog.create
(SearchDialog.java:128)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at org.eclipse.search.internal.ui.OpenSearchDialogAction.run
(OpenSearchDialogAction.java:45)
	at org.eclipse.search.internal.ui.OpenSearchDialogAction.run
(OpenSearchDialogAction.java:32)
	at org.eclipse.ui.internal.PluginAction.runWithEvent
(PluginAction.java:204)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java(Compiled Code))
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java
(Compiled Code))
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
fixed in 20020122</WithStack>
    <WithOutStack>I had WorkbenchWindow selected in the class org.eclipse.ui.actions.CopyAction
I pressed the serach toolbar button and got the following

Log: Mon Jan 21 09:11:10 EST 2002
4 org.eclipse.ui 0 java.lang.NullPointerException

fixed in 20020122</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7932" />
    <CreationDate amount="2002-01-21 09:34:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Moving a class with checked Update references fails</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208445">
        <Exception>org.eclipse.jdt.internal.ui.JavaUIException</Exception>
        <Reason>Status</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.doReorg(ReorgDestinationAction.java:146)</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.ui.reorg.MoveAction.doReorg(MoveAction.java:171)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.run(ReorgDestinationAction.java:104)</Frame>
          <Frame depth="3">org.eclipse.jface.action.Action.runWithEvent(Action.java:452)</Frame>
          <Frame depth="4">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="5">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)</Frame>
          <Frame depth="6">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)</Frame>
          <Frame depth="7">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)</Frame>
          <Frame depth="8">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)</Frame>
          <Frame depth="9">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)</Frame>
          <Frame depth="10">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)</Frame>
          <Frame depth="11">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)</Frame>
          <Frame depth="12">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)</Frame>
          <Frame depth="13">org.eclipse.ui.internal.Workbench.run(Workbench.java:805)</Frame>
          <Frame depth="14">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="15">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="16">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="17">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="18">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="19">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Version 20020115, java perspective

Right clkick class, choose Move.., choose other package, check Update 
references to...,
Internal Error appears, stacktrace

4 org.eclipse.jdt.ui 1 Internal Error
org.eclipse.jdt.core.JavaModelException[966]: Java Model Exception: Java Model 
Status [Operation requires one or more elements.]
	at 
org.eclipse.jdt.internal.corext.textmanipulation.TextBufferEditor.performEdits
(TextBufferEditor.java:166)
	at 
org.eclipse.jdt.internal.corext.refactoring.changes.TextChange.getPreviewContent
(TextChange.java:164)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getCompareInput
(PreviewWizardPage.java:201)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getPreviewer
(PreviewWizardPage.java:254)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.showPreview
(PreviewWizardPage.java:374)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.access$1
(PreviewWizardPage.java:372)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage$2.selectionChanged
(PreviewWizardPage.java:363)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged
(Viewer.java:147)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection
(StructuredViewer.java:999)
	at org.eclipse.jface.viewers.StructuredViewer.setSelection
(StructuredViewer.java:758)
	at org.eclipse.jface.viewers.Viewer.setSelection(Viewer.java:342)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.setVisible
(PreviewWizardPage.java:328)
	at org.eclipse.jface.wizard.WizardDialog.showStartingPage
(WizardDialog.java:906)
	at org.eclipse.jface.wizard.WizardDialog.createContents
(WizardDialog.java:458)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at org.eclipse.jdt.internal.ui.reorg.MoveAction.doReorg
(MoveAction.java:176)
	at org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.run
(ReorgDestinationAction.java:104)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
	4 org.eclipse.jdt.core 966 Core exception: Operation requires one or 
more elements.
Java Model Exception: Java Model Status [Operation requires one or more 
elements.]
	at 
org.eclipse.jdt.internal.corext.textmanipulation.TextBufferEditor.performEdits
(TextBufferEditor.java:166)
	at 
org.eclipse.jdt.internal.corext.refactoring.changes.TextChange.getPreviewContent
(TextChange.java:164)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getCompareInput
(PreviewWizardPage.java:201)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getPreviewer
(PreviewWizardPage.java:254)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.showPreview
(PreviewWizardPage.java:374)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.access$1
(PreviewWizardPage.java:372)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage$2.selectionChanged
(PreviewWizardPage.java:363)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged
(Viewer.java:147)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection
(StructuredViewer.java:999)
	at org.eclipse.jface.viewers.StructuredViewer.setSelection
(StructuredViewer.java:758)
	at org.eclipse.jface.viewers.Viewer.setSelection(Viewer.java:342)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.setVisible
(PreviewWizardPage.java:328)
	at org.eclipse.jface.wizard.WizardDialog.showStartingPage
(WizardDialog.java:906)
	at org.eclipse.jface.wizard.WizardDialog.createContents
(WizardDialog.java:458)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at org.eclipse.jdt.internal.ui.reorg.MoveAction.doReorg
(MoveAction.java:176)
	at org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.run
(ReorgDestinationAction.java:104)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
Adam please have a look at this. I think the generated text edits aren't correct
i cannot reproduce it on 20020123
can you provide more specific steps 
(best would be if you could come up with a test case - like a set of .java 
files that causes this to happen)
Created attachment 263
Best is to import it into a new project. My name ClassMove
Oops bugzilla removed my comments. Here again.
Couldn't verify bug in 20020123. Testcase if for 0115. Moving Test2 to package 
a.b should come up with an error.

It's another stacktrace than before. This stacktrace is from another class 
moving. Just to prove, if testcase fails.

org.eclipse.jdt.internal.ui.JavaUIException: Status
	at org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.doReorg
(ReorgDestinationAction.java:146)
	at org.eclipse.jdt.internal.ui.reorg.MoveAction.doReorg
(MoveAction.java:171)
	at org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.run
(ReorgDestinationAction.java:104)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
	4 org.eclipse.jdt.ui 0 Status
		2=============&lt;children&gt;=============
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		2=============&lt;/children&gt;=============

cannot reproduce anymore on 20020125
closing - please reopen if you see it again
resolving as fixed - it was fixed some time ago as another bug report 
(don't remember the number though)</WithStack>
    <WithOutStack>Version 20020115, java perspective

Right clkick class, choose Move.., choose other package, check Update 
references to...,
Internal Error appears, stacktrace

4 org.eclipse.jdt.ui 1 Internal Error
org.eclipse.jdt.core.JavaModelException[966]: Java Model Exception: Java Model 
Status [Operation requires one or more elements.]
	at 
org.eclipse.jdt.internal.corext.textmanipulation.TextBufferEditor.performEdits
(TextBufferEditor.java:166)
	at 
org.eclipse.jdt.internal.corext.refactoring.changes.TextChange.getPreviewContent
(TextChange.java:164)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getCompareInput
(PreviewWizardPage.java:201)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getPreviewer
(PreviewWizardPage.java:254)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.showPreview
(PreviewWizardPage.java:374)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.access$1
(PreviewWizardPage.java:372)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage$2.selectionChanged
(PreviewWizardPage.java:363)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged
(Viewer.java:147)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection
(StructuredViewer.java:999)
	at org.eclipse.jface.viewers.StructuredViewer.setSelection
(StructuredViewer.java:758)
	at org.eclipse.jface.viewers.Viewer.setSelection(Viewer.java:342)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.setVisible
(PreviewWizardPage.java:328)
	at org.eclipse.jface.wizard.WizardDialog.showStartingPage
(WizardDialog.java:906)
	at org.eclipse.jface.wizard.WizardDialog.createContents
(WizardDialog.java:458)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at org.eclipse.jdt.internal.ui.reorg.MoveAction.doReorg
(MoveAction.java:176)
	at org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.run
(ReorgDestinationAction.java:104)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
	4 org.eclipse.jdt.core 966 Core exception: Operation requires one or 
more elements.
Java Model Exception: Java Model Status [Operation requires one or more 
elements.]
	at 
org.eclipse.jdt.internal.corext.textmanipulation.TextBufferEditor.performEdits
(TextBufferEditor.java:166)
	at 
org.eclipse.jdt.internal.corext.refactoring.changes.TextChange.getPreviewContent
(TextChange.java:164)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getCompareInput
(PreviewWizardPage.java:201)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.getPreviewer
(PreviewWizardPage.java:254)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.showPreview
(PreviewWizardPage.java:374)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.access$1
(PreviewWizardPage.java:372)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage$2.selectionChanged
(PreviewWizardPage.java:363)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged
(Viewer.java:147)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection
(StructuredViewer.java:999)
	at org.eclipse.jface.viewers.StructuredViewer.setSelection
(StructuredViewer.java:758)
	at org.eclipse.jface.viewers.Viewer.setSelection(Viewer.java:342)
	at org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.setVisible
(PreviewWizardPage.java:328)
	at org.eclipse.jface.wizard.WizardDialog.showStartingPage
(WizardDialog.java:906)
	at org.eclipse.jface.wizard.WizardDialog.createContents
(WizardDialog.java:458)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at org.eclipse.jdt.internal.ui.reorg.MoveAction.doReorg
(MoveAction.java:176)
	at org.eclipse.jdt.internal.ui.reorg.ReorgDestinationAction.run
(ReorgDestinationAction.java:104)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
Adam please have a look at this. I think the generated text edits aren't correct
i cannot reproduce it on 20020123
can you provide more specific steps 
(best would be if you could come up with a test case - like a set of .java 
files that causes this to happen)
Created attachment 263
Best is to import it into a new project. My name ClassMove
Oops bugzilla removed my comments. Here again.
Couldn't verify bug in 20020123. Testcase if for 0115. Moving Test2 to package 
a.b should come up with an error.

It's another stacktrace than before. This stacktrace is from another class 
moving. Just to prove, if testcase fails.


	4 org.eclipse.jdt.ui 0 Status
		2=============&lt;children&gt;=============
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		4 org.eclipse.jdt.core 968 Operation requires one or more 
elements.
		2=============&lt;/children&gt;=============

cannot reproduce anymore on 20020125
closing - please reopen if you see it again
resolving as fixed - it was fixed some time ago as another bug report 
(don't remember the number though)</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7933" />
    <CreationDate amount="2002-01-21 10:05:00 -0500" />
    <DupId amount="" />
    <classification amount="Tools" />
    <Product amount="CDT" />
    <component amount="cdt-core" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="enhancement" />
    <Summery>codeassist - leave param types out when inserting functions</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="FIXED" />
    <WithStack>Currently, when a user uses codeassist to resolve a function, the parameters for 
the function is show in the codeassist combobox (which is good), but when the 
function is selected, the same parameters are inserted into the editor (which is 
bad).  We should leave the parameters out but insert the commas.  Also it would 
be handy if we could set the editor cursor to point to the first blank 
parameter.
Actually the "bad" is good for the ones with short memories (like me...).
Putting the commas is a step forward, but actualy putting the types is even
better.  IMHO ...
 
I noticed when playing with the Java editor, that the codeassist framework 
provides a hover of what I like to see.  In other words, we can remove both 
parameters and commas, and use this hover to show the parameters.
The hover stays up until one finishes entering the function parameters.
This way the user doesn't have to erase anything, yet gets the benefit of 
seeing the types too.
The hover you see in JDT is "context assist" (I think), but is done in a 
slightly different way than the framework expects.  It appears that context 
assist is designed to work independently of code assist - you define key 
bindings for activating context assist in the same way you do this for code 
assist.  When we talk about inserting functions, we're talking about using code 
assist in combination with context assist.  This should work in this 
case, because we know which function we select when we do code assist, but when 
we don't use code assist, we don't really know which function the one in the 
editor is intended to be.  To couple the context assist with the results of code 
assist, I think we will have to do a bit of hacking.
I've changed codeassist to not insert parameter types when inserting functions.  
This still does not give us the context assist (hover) but that's a more 
complicated issue which requires a separate feature.
Closing</WithStack>
    <WithOutStack>Currently, when a user uses codeassist to resolve a function, the parameters for 
the function is show in the codeassist combobox (which is good), but when the 
function is selected, the same parameters are inserted into the editor (which is 
bad).  We should leave the parameters out but insert the commas.  Also it would 
be handy if we could set the editor cursor to point to the first blank 
parameter.
Actually the "bad" is good for the ones with short memories (like me...).
Putting the commas is a step forward, but actualy putting the types is even
better.  IMHO ...
 
I noticed when playing with the Java editor, that the codeassist framework 
provides a hover of what I like to see.  In other words, we can remove both 
parameters and commas, and use this hover to show the parameters.
The hover stays up until one finishes entering the function parameters.
This way the user doesn't have to erase anything, yet gets the benefit of 
seeing the types too.
The hover you see in JDT is "context assist" (I think), but is done in a 
slightly different way than the framework expects.  It appears that context 
assist is designed to work independently of code assist - you define key 
bindings for activating context assist in the same way you do this for code 
assist.  When we talk about inserting functions, we're talking about using code 
assist in combination with context assist.  This should work in this 
case, because we know which function we select when we do code assist, but when 
we don't use code assist, we don't really know which function the one in the 
editor is intended to be.  To couple the context assist with the results of code 
assist, I think we will have to do a bit of hacking.
I've changed codeassist to not insert parameter types when inserting functions.  
This still does not give us the context assist (hover) but that's a more 
complicated issue which requires a separate feature.
Closing</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7934" />
    <CreationDate amount="2002-01-21 10:08:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Builder always rebuilds when workbench restarted</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="2619" end="2961" />
        <code>public Object getLastBuiltState(IProject project, IProgressMonitor monitor) {
	PerProjectInfo info = getPerProjectInfo(project);
	Object state = info.savedState;
	if (state == null &amp;&amp; !info.triedRead) {
		info.triedRead= true;
		try {
			state = readState(project); // DID NOT SET info.state
		} catch (CoreException e) {}
	}
	return state;
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20020109

Whenever I quit and come back in, build causes my project to be totally rebuilt 
from scratch, even though it attempts to read the saved state.
I have seen this problem for quite a while.

I'm using a the self-hosting plugin, but it did this even before I had this 
setup.

I generally run with autobuild off.

I can supply my workspace if it helps.
This is a platform known issue, sometimes the platform will give us a null 
delta instead of an empty one, causing our builder to defensively perform a 
full build.
Nick, let us know if this still happens in 20020122.  There was a tree 
serialization problem that I believe is now fixed.
Seems to be fixed in 0123.
Closing PR.

Reopening, there seems to be an issue with the new builder, it does not succeed 
to read its own build state (using straight build 20020125) under some 
undetermined circumstances.

The scenario below occured after a fresh restart, sync'up with stream, grabbed 
a few changes, and hit ctrl-B.
-------------
D:\eclipse\sdk\eclipse&gt;D:\jdk1.4\jre\bin\java -verify -Xms100Mb -Xmx250Mb -cp 
startup.jar org.eclipse.core.launcher.UIMain -application org.
eclipse.ui.workbench -ws win32 -data D:\eclipse\workspaces\development2.0
\plugins -refresh -debug -consoleLog D:\jdk1.4
Boot URL:
    file:D:/eclipse/sdk/eclipse/plugins/org.eclipse.core.boot/boot.jar
Install URL: file:D:/eclipse/sdk/eclipse/
Debug-Options: file:D:/eclipse/sdk/eclipse/.options

Starting build of org.eclipse.jdt.core.tests
INCREMENTAL build
Compile this changed source file 
D:/eclipse/workspaces/development2.0/plugins/org.eclipse.jdt.core.tests/Eclipse 
Java Tests Compiler/org/ecl
ipse/jdt/tests/compiler/regression/InitializationTest.java
About to compile 
D:/eclipse/workspaces/development2.0/plugins/org.eclipse.jdt.core.tests/Eclipse 
Java Tests Compiler/org/eclipse/jdt/tests/c
ompiler/regression/InitializationTest.java
Skipped over unchanged class file InitializationTest.class

Starting build of org.eclipse.jdt.core
Performing full build since last saved state was not found
FULL build
About to compile 
D:/eclipse/workspaces/development2.0/plugins/org.eclipse.jdt.core/ant/org/eclips
e/jdt/core/ant/Jdtcom.java
....

PM's state.dat file is fine.

Adding more tracing in &amp; around state reading.
Why is the project org.eclipse.jdt.core.tests being built before 
org.eclipse.jdt.core?

Are your project references correct?
Project references are now ok, and still these symptoms occur. Seems related to 
the fact that the built state cannot be read. 
Haven't yet reproduced it with the jdtcore 20020212.
Finally... I think this was always there!

public Object getLastBuiltState(IProject project, IProgressMonitor monitor) {
	PerProjectInfo info = getPerProjectInfo(project);
	Object state = info.savedState;
	if (state == null &amp;&amp; !info.triedRead) {
		info.triedRead= true;
		try {
			state = readState(project); // DID NOT SET info.state
		} catch (CoreException e) {}
	}
	return state;
}

So the first request reads the saved state but if the requesting builder did 
not set it when the build was finished, the next request would answer null.

Since builders now ask for the build state of a prereq project, it will not be 
set &amp; thus fail the next time its project was rebuilt.
*** Bug 10389 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>Build 20020109

Whenever I quit and come back in, build causes my project to be totally rebuilt 
from scratch, even though it attempts to read the saved state.
I have seen this problem for quite a while.

I'm using a the self-hosting plugin, but it did this even before I had this 
setup.

I generally run with autobuild off.

I can supply my workspace if it helps.
This is a platform known issue, sometimes the platform will give us a null 
delta instead of an empty one, causing our builder to defensively perform a 
full build.
Nick, let us know if this still happens in 20020122.  There was a tree 
serialization problem that I believe is now fixed.
Seems to be fixed in 0123.
Closing PR.

Reopening, there seems to be an issue with the new builder, it does not succeed 
to read its own build state (using straight build 20020125) under some 
undetermined circumstances.

The scenario below occured after a fresh restart, sync'up with stream, grabbed 
a few changes, and hit ctrl-B.
-------------
D:\eclipse\sdk\eclipse&gt;D:\jdk1.4\jre\bin\java -verify -Xms100Mb -Xmx250Mb -cp 
startup.jar org.eclipse.core.launcher.UIMain -application org.
eclipse.ui.workbench -ws win32 -data D:\eclipse\workspaces\development2.0
\plugins -refresh -debug -consoleLog D:\jdk1.4
Boot URL:
    file:D:/eclipse/sdk/eclipse/plugins/org.eclipse.core.boot/boot.jar
Install URL: file:D:/eclipse/sdk/eclipse/
Debug-Options: file:D:/eclipse/sdk/eclipse/.options

Starting build of org.eclipse.jdt.core.tests
INCREMENTAL build
Compile this changed source file 
D:/eclipse/workspaces/development2.0/plugins/org.eclipse.jdt.core.tests/Eclipse 
Java Tests Compiler/org/ecl
ipse/jdt/tests/compiler/regression/InitializationTest.java
About to compile 
D:/eclipse/workspaces/development2.0/plugins/org.eclipse.jdt.core.tests/Eclipse 
Java Tests Compiler/org/eclipse/jdt/tests/c
ompiler/regression/InitializationTest.java
Skipped over unchanged class file InitializationTest.class

Starting build of org.eclipse.jdt.core
Performing full build since last saved state was not found
FULL build
About to compile 
D:/eclipse/workspaces/development2.0/plugins/org.eclipse.jdt.core/ant/org/eclips
e/jdt/core/ant/Jdtcom.java
....

PM's state.dat file is fine.

Adding more tracing in &amp; around state reading.
Why is the project org.eclipse.jdt.core.tests being built before 
org.eclipse.jdt.core?

Are your project references correct?
Project references are now ok, and still these symptoms occur. Seems related to 
the fact that the built state cannot be read. 
Haven't yet reproduced it with the jdtcore 20020212.
Finally... I think this was always there!

public Object getLastBuiltState(IProject project, IProgressMonitor monitor) {
	PerProjectInfo info = getPerProjectInfo(project);
	Object state = info.savedState;
	if (state == null &amp;&amp; !info.triedRead) {
		info.triedRead= true;
		try {
			state = readState(project); // DID NOT SET info.state
		} catch (CoreException e) {}
	}
	return state;
}

So the first request reads the saved state but if the requesting builder did 
not set it when the build was finished, the next request would answer null.

Since builders now ask for the build state of a prereq project, it will not be 
set &amp; thus fail the next time its project was rebuilt.
*** Bug 10389 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7935" />
    <CreationDate amount="2002-01-21 10:11:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Search" />
    <Version amount="2.0" />
    <rep_platform amount="Other" />
    <op_sys amount="Linux-Motif" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Internal error clicking search button</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208445">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java:128)</Frame>
          <Frame depth="1">java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java:144)</Frame>
          <Frame depth="2">org.eclipse.search.internal.ui.SearchPageDescriptor.readExtensionScorePairs(SearchPageDescriptor.java:201)</Frame>
          <Frame depth="3">org.eclipse.search.internal.ui.SearchPageDescriptor.getScoreForFileExtension(SearchPageDescriptor.java:184)</Frame>
          <Frame depth="4">org.eclipse.search.internal.ui.SearchPageDescriptor.computeScore(SearchPageDescriptor.java:166)</Frame>
          <Frame depth="5">org.eclipse.search.internal.ui.SearchDialog.getPreferredPageIndex(SearchDialog.java:278)</Frame>
          <Frame depth="6">org.eclipse.search.internal.ui.SearchDialog.createPageArea(SearchDialog.java:142)</Frame>
          <Frame depth="7">org.eclipse.search.internal.ui.util.ExtendedDialogWindow.createDialogArea(ExtendedDialogWindow.java:142)</Frame>
          <Frame depth="8">org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:434)</Frame>
          <Frame depth="9">org.eclipse.jface.window.Window.create(Window.java:237)</Frame>
          <Frame depth="10">org.eclipse.search.internal.ui.SearchDialog.create(SearchDialog.java:128)</Frame>
          <Frame depth="11">org.eclipse.jface.window.Window.open(Window.java:510)</Frame>
          <Frame depth="12">org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:45)</Frame>
          <Frame depth="13">org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:32)</Frame>
          <Frame depth="14">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:204)</Frame>
          <Frame depth="15">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="16">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)</Frame>
          <Frame depth="18">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)</Frame>
          <Frame depth="19">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="20">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))</Frame>
          <Frame depth="22">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))</Frame>
          <Frame depth="23">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="24">org.eclipse.ui.internal.Workbench.run(Workbench.java:805)</Frame>
          <Frame depth="25">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="26">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="27">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="28">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="29">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="30">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Running on linux-motif 20020115++, I clicked on the Search button from the Java
perspective and got an internal error. The following stack trace was in my log:

Log: Mon Jan 21 09:11:28 CST 2002
1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Mon Jan 21 09:11:28 CST 2002
4 org.eclipse.ui 0 java.lang.NullPointerException
java.lang.NullPointerException
	at java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java:128)
	at java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java:144)
	at
org.eclipse.search.internal.ui.SearchPageDescriptor.readExtensionScorePairs(SearchPageDescriptor.java:201)
	at
org.eclipse.search.internal.ui.SearchPageDescriptor.getScoreForFileExtension(SearchPageDescriptor.java:184)
	at
org.eclipse.search.internal.ui.SearchPageDescriptor.computeScore(SearchPageDescriptor.java:166)
	at
org.eclipse.search.internal.ui.SearchDialog.getPreferredPageIndex(SearchDialog.java:278)
	at org.eclipse.search.internal.ui.SearchDialog.createPageArea(SearchDialog.java:142)
	at
org.eclipse.search.internal.ui.util.ExtendedDialogWindow.createDialogArea(ExtendedDialogWindow.java:142)
	at org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:434)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.search.internal.ui.SearchDialog.create(SearchDialog.java:128)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at
org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:45)
	at
org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:32)
	at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:204)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)
	at
org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)
	at
org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)
	at
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
fixed in the next integration build 20012101</WithStack>
    <WithOutStack>Running on linux-motif 20020115++, I clicked on the Search button from the Java
perspective and got an internal error. The following stack trace was in my log:

Log: Mon Jan 21 09:11:28 CST 2002
1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Mon Jan 21 09:11:28 CST 2002
4 org.eclipse.ui 0 java.lang.NullPointerException

fixed in the next integration build 20012101</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7936" />
    <CreationDate amount="2002-01-21 10:22:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>No JavaDoc Content Assist in default package</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="multicomment">
        <location start="46" end="81" />
        <code>/**
 * @version 	1.0
 * @author
 */</code>
      </source_code>
      <source_code type="class">
        <location start="82" end="268" />
        <code>public class Foo {

	/**
	 * JavaDoc comment
	 * @return void
	 */
	public void foo() {
		
	}
	
	/**
	 * Another comment
	 * @param none
	 */
	public void bar() {
		foo();
		bar();
	}

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Add the following class in a default package:
/**
 * @version 	1.0
 * @author
 */
public class Foo {

	/**
	 * JavaDoc comment
	 * @return void
	 */
	public void foo() {
		
	}
	
	/**
	 * Another comment
	 * @param none
	 */
	public void bar() {
		foo();
		bar();
	}

}

In bar, I cannot make the JavaDoc for foo() or bar() appear in Content Assist.

If I move the class to a named package the JavaDoc appears as expected.

(Tested against 20011219 build)
fixed &gt; 20020205
Verified.</WithStack>
    <WithOutStack>Add the following class in a default package:
/**
 * @version 	1.0
 * @author
 */
public class Foo {

	/**
	 * JavaDoc comment
	 * @return void
	 */
	public void foo() {
		
	}
	
	/**
	 * Another comment
	 * @param none
	 */
	public void bar() {
		foo();
		bar();
	}

}

In bar, I cannot make the JavaDoc for foo() or bar() appear in Content Assist.

If I move the class to a named package the JavaDoc appears as expected.

(Tested against 20011219 build)
fixed &gt; 20020205
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7937" />
    <CreationDate amount="2002-01-21 10:32:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>extract method: incorrectly disallowed on local class</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="0" end="69" />
        <code>public class A{
	void f(){
		/*[*/class AA extends A {
		};/*]*/
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>public class A{
	void f(){
		/*[*/class AA extends A {
		};/*]*/
	}
}
the error message says sth about statements not belonging to the same category 
(but there's only 1 statement here)
Problem is the semicolon behind the closing } of the local type declaration.
Fixed in build &gt; 20020124
Verified. -&gt;20020205. JRT.</WithStack>
    <WithOutStack>public class A{
	void f(){
		/*[*/class AA extends A {
		};/*]*/
	}
}
the error message says sth about statements not belonging to the same category 
(but there's only 1 statement here)
Problem is the semicolon behind the closing } of the local type declaration.
Fixed in build &gt; 20020124
Verified. -&gt;20020205. JRT.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7938" />
    <CreationDate amount="2002-01-21 10:36:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Properties View does not change when Windows settings change</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Open a PropertiesView</Line>
          <Line>2) Set the display to High Contrast Black</Line>
          <Line>3) PropertiesView will stay in the old size and colours. Close and reopen it.</Line>
          <Line>It will still open in the old colours.</Line>
          <Line>Works in build 20020228.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The PropertiesView does not change when the display settings change.

STEPS
1) Open a PropertiesView
2) Set the display to High Contrast Black
3) PropertiesView will stay in the old size and colours. Close and reopen it. 
It will still open in the old colours.
Works in build 20020228.</WithStack>
    <WithOutStack>The PropertiesView does not change when the display settings change.

STEPS
1) Open a PropertiesView
2) Set the display to High Contrast Black
3) PropertiesView will stay in the old size and colours. Close and reopen it. 
It will still open in the old colours.
Works in build 20020228.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7939" />
    <CreationDate amount="2002-01-21 10:56:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>Problems using workspace from 20011219 in 20020115 (run button disappeared)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208455">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.ui.part.PageBookView.partClosed(PageBookView.java:536)</Frame>
          <Frame depth="1">org.eclipse.ui.internal.PartListenerList$3.run(PartListenerList.java:77)</Frame>
          <Frame depth="2">org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:821)</Frame>
          <Frame depth="3">org.eclipse.core.runtime.Platform.run(Platform.java:395)</Frame>
          <Frame depth="4">org.eclipse.ui.internal.PartListenerList.firePartClosed(PartListenerList.java:75)</Frame>
          <Frame depth="5">org.eclipse.ui.internal.WorkbenchPage.firePartClosed(WorkbenchPage.java:651)</Frame>
          <Frame depth="6">org.eclipse.ui.internal.WorkbenchPage.closeAllEditors(WorkbenchPage.java:389)</Frame>
          <Frame depth="7">org.eclipse.ui.internal.WorkbenchPage.dispose(WorkbenchPage.java:543)</Frame>
          <Frame depth="8">org.eclipse.ui.internal.WorkbenchWindow.closeAllPages(WorkbenchWindow.java:316)</Frame>
          <Frame depth="9">org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:591)</Frame>
          <Frame depth="10">org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:261)</Frame>
          <Frame depth="11">org.eclipse.ui.internal.WorkbenchWindow.access$3(WorkbenchWindow.java:252)</Frame>
          <Frame depth="12">org.eclipse.ui.internal.WorkbenchWindow$1.run(WorkbenchWindow.java:292)</Frame>
          <Frame depth="13">org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)</Frame>
          <Frame depth="14">org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:290)</Frame>
          <Frame depth="15">org.eclipse.jface.window.WindowManager.close(WindowManager.java:103)</Frame>
          <Frame depth="16">org.eclipse.ui.internal.Workbench$2.run(Workbench.java:104)</Frame>
          <Frame depth="17">org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:821)</Frame>
          <Frame depth="18">org.eclipse.core.runtime.Platform.run(Platform.java:395)</Frame>
          <Frame depth="19">org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:102)</Frame>
          <Frame depth="20">org.eclipse.ui.internal.Workbench.access$4(Workbench.java:80)</Frame>
          <Frame depth="21">org.eclipse.ui.internal.Workbench$3.run(Workbench.java:174)</Frame>
          <Frame depth="22">org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)</Frame>
          <Frame depth="23">org.eclipse.ui.internal.Workbench.close(Workbench.java:172)</Frame>
          <Frame depth="24">org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:257)</Frame>
          <Frame depth="25">org.eclipse.ui.internal.WorkbenchWindow.access$3(WorkbenchWindow.java:252)</Frame>
          <Frame depth="26">org.eclipse.ui.internal.WorkbenchWindow$1.run(WorkbenchWindow.java:292)</Frame>
          <Frame depth="27">org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)</Frame>
          <Frame depth="28">org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:290)</Frame>
          <Frame depth="29">org.eclipse.jface.window.Window.handleShellCloseEvent(Window.java:462)</Frame>
          <Frame depth="30">org.eclipse.jface.window.Window$2.shellClosed(Window.java:389)</Frame>
          <Frame depth="31">org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:150)</Frame>
          <Frame depth="32">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)</Frame>
          <Frame depth="33">org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:841)</Frame>
          <Frame depth="34">org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1188)</Frame>
          <Frame depth="35">org.eclipse.swt.widgets.Shell.WM_CLOSE(Shell.java:962)</Frame>
          <Frame depth="36">org.eclipse.swt.widgets.Control.windowProc(Control.java:2599)</Frame>
          <Frame depth="37">org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1149)</Frame>
          <Frame depth="38">org.eclipse.swt.widgets.Display.windowProc(Display.java:1799)</Frame>
          <Frame depth="39">org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)</Frame>
          <Frame depth="40">org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:1176)</Frame>
          <Frame depth="41">org.eclipse.swt.widgets.Scrollable.callWindowProc(Scrollable.java:71)</Frame>
          <Frame depth="42">org.eclipse.swt.widgets.Control.windowProc(Control.java:2667)</Frame>
          <Frame depth="43">org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1149)</Frame>
          <Frame depth="44">org.eclipse.swt.widgets.Display.windowProc(Display.java:1799)</Frame>
          <Frame depth="45">org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)</Frame>
          <Frame depth="46">org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:1176)</Frame>
          <Frame depth="47">org.eclipse.swt.widgets.Scrollable.callWindowProc(Scrollable.java:71)</Frame>
          <Frame depth="48">org.eclipse.swt.widgets.Control.windowProc(Control.java:2667)</Frame>
          <Frame depth="49">org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1149)</Frame>
          <Frame depth="50">org.eclipse.swt.widgets.Display.windowProc(Display.java:1799)</Frame>
          <Frame depth="51">org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)</Frame>
          <Frame depth="52">org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1181)</Frame>
          <Frame depth="53">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1203)</Frame>
          <Frame depth="54">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)</Frame>
          <Frame depth="55">org.eclipse.ui.internal.Workbench.run(Workbench.java:805)</Frame>
          <Frame depth="56">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="57">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="58">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="59">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="60">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="61">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Version 20020115

I installed the new 0115, copied the old workspace to a new location 
(eclipse\workspace) and started eclipse. Some errors did appear, but all looked 
good. I restarted eclipse.
Then I wrote some changes to classes, as i wanted to test them, i noticed the 
run-button was disappeared. The only way around was to import the resources 
into a new java-project.
I give this a major, as there is no possiblity to import the old workspace 
settings(.metadata). With the most restrictions as a result from 
loosing .metadata, i can live, but i use the task feature for my workflow. And 
my tasks are lost (but found in .markers)...

First start .log
Log: Mon Jan 21 16:55:48 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.ProcessView
Log: Mon Jan 21 16:55:48 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.InspectorView
Log: Mon Jan 21 16:56:16 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.InspectorView
Log: Mon Jan 21 16:56:16 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.ProcessView

Second start

2 org.eclipse.ui 2 Problems occurred when invoking code from plug-in: 
org.eclipse.ui.
java.lang.NullPointerException
	at org.eclipse.ui.part.PageBookView.partClosed(PageBookView.java:536)
	at org.eclipse.ui.internal.PartListenerList$3.run
(PartListenerList.java:77)
	at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:821)
	at org.eclipse.core.runtime.Platform.run(Platform.java:395)
	at org.eclipse.ui.internal.PartListenerList.firePartClosed
(PartListenerList.java:75)
	at org.eclipse.ui.internal.WorkbenchPage.firePartClosed
(WorkbenchPage.java:651)
	at org.eclipse.ui.internal.WorkbenchPage.closeAllEditors
(WorkbenchPage.java:389)
	at org.eclipse.ui.internal.WorkbenchPage.dispose(WorkbenchPage.java:543)
	at org.eclipse.ui.internal.WorkbenchWindow.closeAllPages
(WorkbenchWindow.java:316)
	at org.eclipse.ui.internal.WorkbenchWindow.hardClose
(WorkbenchWindow.java:591)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose
(WorkbenchWindow.java:261)
	at org.eclipse.ui.internal.WorkbenchWindow.access$3
(WorkbenchWindow.java:252)
	at org.eclipse.ui.internal.WorkbenchWindow$1.run
(WorkbenchWindow.java:292)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)
	at org.eclipse.ui.internal.WorkbenchWindow.close
(WorkbenchWindow.java:290)
	at org.eclipse.jface.window.WindowManager.close(WindowManager.java:103)
	at org.eclipse.ui.internal.Workbench$2.run(Workbench.java:104)
	at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:821)
	at org.eclipse.core.runtime.Platform.run(Platform.java:395)
	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:102)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:80)
	at org.eclipse.ui.internal.Workbench$3.run(Workbench.java:174)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:172)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose
(WorkbenchWindow.java:257)
	at org.eclipse.ui.internal.WorkbenchWindow.access$3
(WorkbenchWindow.java:252)
	at org.eclipse.ui.internal.WorkbenchWindow$1.run
(WorkbenchWindow.java:292)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:56)
	at org.eclipse.ui.internal.WorkbenchWindow.close
(WorkbenchWindow.java:290)
	at org.eclipse.jface.window.Window.handleShellCloseEvent
(Window.java:462)
	at org.eclipse.jface.window.Window$2.shellClosed(Window.java:389)
	at org.eclipse.swt.widgets.TypedListener.handleEvent
(TypedListener.java:150)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:841)
	at org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1188)
	at org.eclipse.swt.widgets.Shell.WM_CLOSE(Shell.java:962)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2599)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1149)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:1799)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:1176)
	at org.eclipse.swt.widgets.Scrollable.callWindowProc(Scrollable.java:71)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2667)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1149)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:1799)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:1176)
	at org.eclipse.swt.widgets.Scrollable.callWindowProc(Scrollable.java:71)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:2667)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1149)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:1799)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1181)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1203)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:822)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
The build notes state that you have to close and reopen the perspective, didn't 
this help?
Tried it. It works now. 
Sorry, but i haven't noticed any hint's concerning the reopen of perspectives. 
Pointer to these?
I fear others will overlook the build notes too, to prevent others having my 
problems (read a message in newsgroup concerning the same problem), it would be 
good to to give a more visible message.
AFAIK it's possible to show a page like the welcome screen after startup.
Moving to Platform UI in the case this issue isn't logged yet.
You should be able to keep your old workspace, including the .metadata, when 
switching between drops.  Note that you can refer to a workspace folder with -
data on the eclipse command line.  If you use this, you will not have to move 
your workspace when switching between drops.

If you need to wipe out the UI state, you should 
delete .metadata\.plugins\org.eclipse.ui\workbench.xml, not the whole .metadata.
We will be adding support to clear the UI state automatically (with warning) 
when loading a 1.0 workspace in 2.0.
There is no support planned for doing this when switching between 2.0 builds.
In general, closing and reopening perspectives should work around these kinds 
of problems.  This would be a good item for the FAQ.

Note that deleting workbench.xml will not delete your tasks, as this is kept in 
the core metadata.  We will also be adding support for copying/pasting tasks 
using the system clipboard.

See bug 8681 for clearing the workbench state.
See bug 6726 for task list cut/copy/paste.

As for the PageBookView stack trace, we will investigate.

FAQ is a good idea, not thought about. 

The stack trace was fixed. See bug 7432.

Open another bug report about the FAQ. See 13815.
Closing the bug report.</WithStack>
    <WithOutStack>Version 20020115

I installed the new 0115, copied the old workspace to a new location 
(eclipse\workspace) and started eclipse. Some errors did appear, but all looked 
good. I restarted eclipse.
Then I wrote some changes to classes, as i wanted to test them, i noticed the 
run-button was disappeared. The only way around was to import the resources 
into a new java-project.
I give this a major, as there is no possiblity to import the old workspace 
settings(.metadata). With the most restrictions as a result from 
loosing .metadata, i can live, but i use the task feature for my workflow. And 
my tasks are lost (but found in .markers)...

First start .log
Log: Mon Jan 21 16:55:48 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.ProcessView
Log: Mon Jan 21 16:55:48 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.InspectorView
Log: Mon Jan 21 16:56:16 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.InspectorView
Log: Mon Jan 21 16:56:16 CET 2002
1 org.eclipse.core.resources 4 Could not create view: 
org.eclipse.debug.ui.ProcessView

Second start

2 org.eclipse.ui 2 Problems occurred when invoking code from plug-in: 
org.eclipse.ui.

The build notes state that you have to close and reopen the perspective, didn't 
this help?
Tried it. It works now. 
Sorry, but i haven't noticed any hint's concerning the reopen of perspectives. 
Pointer to these?
I fear others will overlook the build notes too, to prevent others having my 
problems (read a message in newsgroup concerning the same problem), it would be 
good to to give a more visible message.
AFAIK it's possible to show a page like the welcome screen after startup.
Moving to Platform UI in the case this issue isn't logged yet.
You should be able to keep your old workspace, including the .metadata, when 
switching between drops.  Note that you can refer to a workspace folder with -
data on the eclipse command line.  If you use this, you will not have to move 
your workspace when switching between drops.

If you need to wipe out the UI state, you should 
delete .metadata\.plugins\org.eclipse.ui\workbench.xml, not the whole .metadata.
We will be adding support to clear the UI state automatically (with warning) 
when loading a 1.0 workspace in 2.0.
There is no support planned for doing this when switching between 2.0 builds.
In general, closing and reopening perspectives should work around these kinds 
of problems.  This would be a good item for the FAQ.

Note that deleting workbench.xml will not delete your tasks, as this is kept in 
the core metadata.  We will also be adding support for copying/pasting tasks 
using the system clipboard.

See bug 8681 for clearing the workbench state.
See bug 6726 for task list cut/copy/paste.

As for the PageBookView stack trace, we will investigate.

FAQ is a good idea, not thought about. 

The stack trace was fixed. See bug 7432.

Open another bug report about the FAQ. See 13815.
Closing the bug report.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7940" />
    <CreationDate amount="2002-01-21 11:24:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>Target eclipse picks up configurations in host (first instance)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>1. In the host eclipse, change the PDE preference, "Platform Home" to point to</Line>
          <Line>a different install of Eclipse with a different configuration version and with</Line>
          <Line>different plugin versions as well.</Line>
          <Line>2. Launch target eclipse using (Run-time workbench)</Line>
          <Line>NOTICE: the icon in the top left of the window is a red box</Line>
          <Line>the Help&gt;&gt;About has null at the bottom of the menu</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When launching a target eclipse by specifying a new platform, the PDE still
picks up the configuration from the host eclipse (or the first instance)

STEPS:
1. In the host eclipse, change the PDE preference, "Platform Home" to point to 
a different install of Eclipse with a different configuration version and with 
different plugin versions as well.
2. Launch target eclipse using (Run-time workbench)
NOTICE: the icon in the top left of the window is a red box
the Help&gt;&gt;About has null at the bottom of the menu

NOTE:
We were able to trick it into working by changing all the references to the 
configuration version and making them the same as the host configuration 
version.

Once we applied this workaround, we noticed that the about plugins reported the 
host eclipse plugins versions, from the update.cfg NOT from the target eclipse.
This is now fixed with BootLoader not being location-sensitive any more.</WithStack>
    <WithOutStack>When launching a target eclipse by specifying a new platform, the PDE still
picks up the configuration from the host eclipse (or the first instance)

STEPS:
1. In the host eclipse, change the PDE preference, "Platform Home" to point to 
a different install of Eclipse with a different configuration version and with 
different plugin versions as well.
2. Launch target eclipse using (Run-time workbench)
NOTICE: the icon in the top left of the window is a red box
the Help&gt;&gt;About has null at the bottom of the menu

NOTE:
We were able to trick it into working by changing all the references to the 
configuration version and making them the same as the host configuration 
version.

Once we applied this workaround, we noticed that the about plugins reported the 
host eclipse plugins versions, from the update.cfg NOT from the target eclipse.
This is now fixed with BootLoader not being location-sensitive any more.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7941" />
    <CreationDate amount="2002-01-21 11:28:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P5" />
    <bug_severity amount="enhancement" />
    <Summery>[CVS Decorator] Accessibility: modification decorations hard to spot</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>This is really really needed. At this time it is for me p1 of everything.
Currently the SWT Tree can't set colors to the text it displays for example 
the text must be blue and it would be nice if also the background could be set 
to red for example but it only foreground can be done then that is OK by me.

I really need this because i have really scanning problems with the new Team 
2.0 CVS support. Because i am now scanning tree items where the modified 
changes are. This is almost undoable with many items (looking for that small 
outgoing blue arrow) If the text was just RED or what ever color for changed 
resources then it was so much easier to track.

Just look how incredible easy it is in VAJ with the colors VAJ Assist!
Unfortunately, we can not easily do this using the platform native widgets. It 
may be that we are forced into doing a full "owner drawn" custom widgets for 
trees in order to support features like this, but that is not currently in 
plan.

If you have issues with the way the CVS support GUI works, you should describe 
these problems to them.

McQ:

about: The CVS support GUI works:

if i report the problems back to them then they will resend it back to you!
The only, and i really mean the only, solution for trackin things in a Tree is 
coloring. It can't be easy done with some little icons.
The only TRUE solution is coloring the tree items.

if you really can't fix it then maybe it should be possible to use a Swing 
JTree instead for this. I find it that importand as more people do like Eric 
Clayberg of Instantiations (i hope i can mention this here :-)

The real problem is having a u/i with so much irrelevent information (to your 
workflow) that you can't figure out what you are doing. Coloring the items is 
a *hack* to get around this problem.

I can tell you up front that, no standard Eclipse component will be based on a 
Swing widget. As I said previously, if per-line coloring is required, the 
right solution would be to build a custom widget that supported it.
Used to be:
   "Coloring in the Tree component"

I am taking this bug back to VCM and have changed the title.
I have changed the title to better represent the problem (accessibility) rather 
than express a solution that won't happen (owner draw trees with coloured text).

I was going to log an accessibility PR anyway: the indicators *are* hard to 
spot.  We need will want to do a round with the graphic artists soon anyway, 
once we know our requirements for new art.
Default dirty decoration is now part of the text decoration. It shows as
'&gt;'. This is a lot easier to see.
Please upgrade this Priority :-)
Because it is doable now if i look at the changes log:

New APIs
OleControlSite.addEventListener(OleAutomation,int,OleListener) 
TableItem.getForeground() 
TableItem.getBackground() 
TableItem.setForeground(Color) 
TableItem.setBackground(Color) 
TreeItem.getForeground() 
TreeItem.getBackground() 
TreeItem.setForeground(Color) 
TreeItem.setBackground(Color) 
TableTreeItem.getForeground() 
TableTreeItem.getBackground() 
TableTreeItem.setForeground(Color) 
TableTreeItem.setBackground(Color) 

Perfect!!!

Great work
although the underlying swt widgets now have an API for coloring, there is no 
way for a decorator that know nothing about a view to change the text colors. 
For this to happen the view decoration framework would have to change to allow 
a decorator to decorate text colors. I don't think that this is critical for 
2.0.

Moving to the UI team.
hmmm

everybody i ask overhere finds the current decorators really hard to spot.

Most people has scannings problems to look what is changed and what not
currently i have both (icon and &gt; ) on to get the maximum visiblity.

I totally agree with Johan. The feature of highlighting modified resources 
introduced to VAJ by Instantiation's VAAssist greatly improved working.

In addition, I like to implement this feature in p4eclipse (Perforce Team 
integration) -&gt; Please add coloring support to the label decorator.
Transfering feature request to UI team. 
Setting foregrounds and backgrounds of widgets is a significant change to the 
decorator API as we would have to pass in the widget itself and recall starting 
colors in order to reset - there could be a big performance hit too.

The other question is what modified means? Do you mean to hold onto references 
to resources that have been modified since you started the workbench session? 
In terms of CVS changes this is already implemented.
I mean changes in for a version system. "Dirty files"
CVS now does this with those Tiny icons and a "&gt;" in the text if you want to.

But everybody i hear say those are hard to spot.

Just look how extremely good and visible the list are when you use VAJ with VA 
Assit from Instantiations. Those same features will greatly enhance the 
visiblility of changed files in Eclipse.

Moving to VCM as a feature request for increasing icon size.
Increasing the icon size doesn't matter.
You can't increase visiblity when you use those overlays (of 16x16??) over the 
normal (already small) file icon.

The only solution is coloring the tree items (foreground and/or background) 
like VAJ has with VA Assist.

Agree with Johan. In addition, I would like to provide that coloring feature
with the Perforce Team Provider...
This might be better served by a query or filter.  For example, we have the CVS 
operation "Synchronize all Outgoing Changes" so you don't have to worry about 
finding projects/resources which are marked as dirty.

So the real solution may not be to make the dirty indicators more apparent 
(although this is valuable anyway), but rather to understand when/why you want 
to find the dirty resources and support those usage patterns in a better way.

I will add that the dirty indicators don't scale since you must examine the 
sync info for every resource in the project.  We are thus interested in 
replacing them with a different way of working.
kevin,

first, i don't like to use those sync views especially if i don't have changed 
that much. I only use it sometimes if i have changed a lot.

And i have to open another view do a synch (many projects i have are going 
over a isdn (64kbit line)) so it is much faster for me to look them up myself. 
I must say that it is currenlyy better because you don't try to compare every 
selection.

But don't forget one thing, i know this because of VAJ with Assist, i use this 
coloring a lot with normal editting. In a Project with a few hundred classes i 
edit only a small set (10-20) of those. Then i use the coloring to quickly see 
what files i want to go back to. Because i know that i have edit them before 
so thhey have to be blue. So the lookup is much faster even without just cvs 
abbilities!

about that performance: You can set a editted image and "&gt;" without 
anyproblems. What is then the time that it will take extra for just saying: 
setColor(BLUE)?? instead of setting icons?

Hi Johan,

The "Sync outgoing changes" is only one example.  In your case, you like to be 
able to find the things you've modified to do something with them (e.g. compare 
changes you've made).  So perhaps a filter to just show modified resources 
would be good.  In general, modification indicators are week because they 
require manual searching for individual elements, so I am thinking some kind of 
filter or query would be both faster and less error prone.

One idea we had was that the sync view would essentially be the list of things 
you've modified.  As you modified resources under CVS control, they would 
automatically show up there.  A greater set of menu operations would be 
available, and in essense it would be like a navigator with a "modified 
resources" filter on.

As for decorator performance, its not the actual decorating that's expensive, 
its reading in all the entry files from the file system to get the CVS 
timestamp to then compare against the resource timestamp which must also be 
retrieved from the file system.  We've profiled it and there's *a lot* of time 
spent doing this, so much so that we must compute our decorators in a 
background thread, which is complicated and looks crappy.  It also defeats our 
in-memory sync info caching scheme, growing the runtime memory footprint 
unnecessarily.  As projects get bigger, computing the project/parent folder 
decorator would likely never be feasable, especially for people working on 
network drives.
The original problem was that the reporter could not easily find outgoing 
changes using the current CVS decorator mechanism and wanted coloring. The UI 
team has indicated that it has no intention of adding color support to label 
decoration, the main issue being that, if multiple decorators set the color, 
which one should take priority. For this reason, coloring of outgoing changes 
is not possible. If the reporter or any other listening parties do not agree 
with this, they should either argue their case on the platform-ui-dev mailing 
list or log a bug report against platform UI and argue their case there.

It was also pointed out that the sync view shows only changed resources. The 
reporter correctly mentioned that the old sync view was too cumbersome for 
this purpose as it required a command that contacted the server to be run. 
However, the new sync view has now been completed and works much like Kevin 
mentioned in the previous comment. Since this addresses the original issue 
(i.e. can't find outgoing changes) and in light of the fact that UI has stated 
that they will not provide decorator support for coloring, I am marking this 
as worksforme.
*** Bug 44703 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>This is really really needed. At this time it is for me p1 of everything.
Currently the SWT Tree can't set colors to the text it displays for example 
the text must be blue and it would be nice if also the background could be set 
to red for example but it only foreground can be done then that is OK by me.

I really need this because i have really scanning problems with the new Team 
2.0 CVS support. Because i am now scanning tree items where the modified 
changes are. This is almost undoable with many items (looking for that small 
outgoing blue arrow) If the text was just RED or what ever color for changed 
resources then it was so much easier to track.

Just look how incredible easy it is in VAJ with the colors VAJ Assist!
Unfortunately, we can not easily do this using the platform native widgets. It 
may be that we are forced into doing a full "owner drawn" custom widgets for 
trees in order to support features like this, but that is not currently in 
plan.

If you have issues with the way the CVS support GUI works, you should describe 
these problems to them.

McQ:

about: The CVS support GUI works:

if i report the problems back to them then they will resend it back to you!
The only, and i really mean the only, solution for trackin things in a Tree is 
coloring. It can't be easy done with some little icons.
The only TRUE solution is coloring the tree items.

if you really can't fix it then maybe it should be possible to use a Swing 
JTree instead for this. I find it that importand as more people do like Eric 
Clayberg of Instantiations (i hope i can mention this here :-)

The real problem is having a u/i with so much irrelevent information (to your 
workflow) that you can't figure out what you are doing. Coloring the items is 
a *hack* to get around this problem.

I can tell you up front that, no standard Eclipse component will be based on a 
Swing widget. As I said previously, if per-line coloring is required, the 
right solution would be to build a custom widget that supported it.
Used to be:
   "Coloring in the Tree component"

I am taking this bug back to VCM and have changed the title.
I have changed the title to better represent the problem (accessibility) rather 
than express a solution that won't happen (owner draw trees with coloured text).

I was going to log an accessibility PR anyway: the indicators *are* hard to 
spot.  We need will want to do a round with the graphic artists soon anyway, 
once we know our requirements for new art.
Default dirty decoration is now part of the text decoration. It shows as
'&gt;'. This is a lot easier to see.
Please upgrade this Priority :-)
Because it is doable now if i look at the changes log:

New APIs
OleControlSite.addEventListener(OleAutomation,int,OleListener) 
TableItem.getForeground() 
TableItem.getBackground() 
TableItem.setForeground(Color) 
TableItem.setBackground(Color) 
TreeItem.getForeground() 
TreeItem.getBackground() 
TreeItem.setForeground(Color) 
TreeItem.setBackground(Color) 
TableTreeItem.getForeground() 
TableTreeItem.getBackground() 
TableTreeItem.setForeground(Color) 
TableTreeItem.setBackground(Color) 

Perfect!!!

Great work
although the underlying swt widgets now have an API for coloring, there is no 
way for a decorator that know nothing about a view to change the text colors. 
For this to happen the view decoration framework would have to change to allow 
a decorator to decorate text colors. I don't think that this is critical for 
2.0.

Moving to the UI team.
hmmm

everybody i ask overhere finds the current decorators really hard to spot.

Most people has scannings problems to look what is changed and what not
currently i have both (icon and &gt; ) on to get the maximum visiblity.

I totally agree with Johan. The feature of highlighting modified resources 
introduced to VAJ by Instantiation's VAAssist greatly improved working.

In addition, I like to implement this feature in p4eclipse (Perforce Team 
integration) -&gt; Please add coloring support to the label decorator.
Transfering feature request to UI team. 
Setting foregrounds and backgrounds of widgets is a significant change to the 
decorator API as we would have to pass in the widget itself and recall starting 
colors in order to reset - there could be a big performance hit too.

The other question is what modified means? Do you mean to hold onto references 
to resources that have been modified since you started the workbench session? 
In terms of CVS changes this is already implemented.
I mean changes in for a version system. "Dirty files"
CVS now does this with those Tiny icons and a "&gt;" in the text if you want to.

But everybody i hear say those are hard to spot.

Just look how extremely good and visible the list are when you use VAJ with VA 
Assit from Instantiations. Those same features will greatly enhance the 
visiblility of changed files in Eclipse.

Moving to VCM as a feature request for increasing icon size.
Increasing the icon size doesn't matter.
You can't increase visiblity when you use those overlays (of 16x16??) over the 
normal (already small) file icon.

The only solution is coloring the tree items (foreground and/or background) 
like VAJ has with VA Assist.

Agree with Johan. In addition, I would like to provide that coloring feature
with the Perforce Team Provider...
This might be better served by a query or filter.  For example, we have the CVS 
operation "Synchronize all Outgoing Changes" so you don't have to worry about 
finding projects/resources which are marked as dirty.

So the real solution may not be to make the dirty indicators more apparent 
(although this is valuable anyway), but rather to understand when/why you want 
to find the dirty resources and support those usage patterns in a better way.

I will add that the dirty indicators don't scale since you must examine the 
sync info for every resource in the project.  We are thus interested in 
replacing them with a different way of working.
kevin,

first, i don't like to use those sync views especially if i don't have changed 
that much. I only use it sometimes if i have changed a lot.

And i have to open another view do a synch (many projects i have are going 
over a isdn (64kbit line)) so it is much faster for me to look them up myself. 
I must say that it is currenlyy better because you don't try to compare every 
selection.

But don't forget one thing, i know this because of VAJ with Assist, i use this 
coloring a lot with normal editting. In a Project with a few hundred classes i 
edit only a small set (10-20) of those. Then i use the coloring to quickly see 
what files i want to go back to. Because i know that i have edit them before 
so thhey have to be blue. So the lookup is much faster even without just cvs 
abbilities!

about that performance: You can set a editted image and "&gt;" without 
anyproblems. What is then the time that it will take extra for just saying: 
setColor(BLUE)?? instead of setting icons?

Hi Johan,

The "Sync outgoing changes" is only one example.  In your case, you like to be 
able to find the things you've modified to do something with them (e.g. compare 
changes you've made).  So perhaps a filter to just show modified resources 
would be good.  In general, modification indicators are week because they 
require manual searching for individual elements, so I am thinking some kind of 
filter or query would be both faster and less error prone.

One idea we had was that the sync view would essentially be the list of things 
you've modified.  As you modified resources under CVS control, they would 
automatically show up there.  A greater set of menu operations would be 
available, and in essense it would be like a navigator with a "modified 
resources" filter on.

As for decorator performance, its not the actual decorating that's expensive, 
its reading in all the entry files from the file system to get the CVS 
timestamp to then compare against the resource timestamp which must also be 
retrieved from the file system.  We've profiled it and there's *a lot* of time 
spent doing this, so much so that we must compute our decorators in a 
background thread, which is complicated and looks crappy.  It also defeats our 
in-memory sync info caching scheme, growing the runtime memory footprint 
unnecessarily.  As projects get bigger, computing the project/parent folder 
decorator would likely never be feasable, especially for people working on 
network drives.
The original problem was that the reporter could not easily find outgoing 
changes using the current CVS decorator mechanism and wanted coloring. The UI 
team has indicated that it has no intention of adding color support to label 
decoration, the main issue being that, if multiple decorators set the color, 
which one should take priority. For this reason, coloring of outgoing changes 
is not possible. If the reporter or any other listening parties do not agree 
with this, they should either argue their case on the platform-ui-dev mailing 
list or log a bug report against platform UI and argue their case there.

It was also pointed out that the sync view shows only changed resources. The 
reporter correctly mentioned that the old sync view was too cumbersome for 
this purpose as it required a command that contacted the server to be run. 
However, the new sync view has now been completed and works much like Kevin 
mentioned in the previous comment. Since this addresses the original issue 
(i.e. can't find outgoing changes) and in light of the fact that UI has stated 
that they will not provide decorator support for coloring, I am marking this 
as worksforme.
*** Bug 44703 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7942" />
    <CreationDate amount="2002-01-21 11:41:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Properties View redraws incorrectly after change in system font</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="13">
        <Lines>
          <Line>1.  Open the properties view.</Line>
          <Line>2.  Using the Display Properties function in Windows, change the Message Box</Line>
          <Line>font size to something really big.  (I made it 72 pt.)</Line>
          <Line>3.  Flip back to Eclipse.  Things look OK, except that everything is obscenely</Line>
          <Line>huge.</Line>
          <Line>4.  Go back to the Display Properties window and change the scheme back to</Line>
          <Line>Windows Standard (making the Message Box font 8pt. Tahoma)</Line>
          <Line>5.  Flip back to Eclipse and the properties view has been redrawn incorrectly.</Line>
          <Line>The font appears to be the right size and family but the text does not line up</Line>
          <Line>with the gridlines.</Line>
          <Line>6.  Close and reopen the properties view and everything redraws properly.</Line>
          <Line>SWT cannot detect when the fonts in Windows change so any change to settings</Line>
          <Line>may or may not take effect until after Eclipse has been restarted.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Build: 20020115

Description:
If the properties view is open during a change in the system fonts, it is 
redrawn incorrectly.

Steps:
1.  Open the properties view.
2.  Using the Display Properties function in Windows, change the Message Box 
font size to something really big.  (I made it 72 pt.)
3.  Flip back to Eclipse.  Things look OK, except that everything is obscenely 
huge.
4.  Go back to the Display Properties window and change the scheme back to 
Windows Standard (making the Message Box font 8pt. Tahoma)
5.  Flip back to Eclipse and the properties view has been redrawn incorrectly.  
The font appears to be the right size and family but the text does not line up 
with the gridlines.
6.  Close and reopen the properties view and everything redraws properly.
SWT cannot detect when the fonts in Windows change so any change to settings 
may or may not take effect until after Eclipse has been restarted.</WithStack>
    <WithOutStack>Build: 20020115

Description:
If the properties view is open during a change in the system fonts, it is 
redrawn incorrectly.

Steps:
1.  Open the properties view.
2.  Using the Display Properties function in Windows, change the Message Box 
font size to something really big.  (I made it 72 pt.)
3.  Flip back to Eclipse.  Things look OK, except that everything is obscenely 
huge.
4.  Go back to the Display Properties window and change the scheme back to 
Windows Standard (making the Message Box font 8pt. Tahoma)
5.  Flip back to Eclipse and the properties view has been redrawn incorrectly.  
The font appears to be the right size and family but the text does not line up 
with the gridlines.
6.  Close and reopen the properties view and everything redraws properly.
SWT cannot detect when the fonts in Windows change so any change to settings 
may or may not take effect until after Eclipse has been restarted.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7943" />
    <CreationDate amount="2002-01-21 11:48:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>README: cannot use command line on Eclipse projects using the 'extssh' connection method</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Since the 'extssh' connection method is not a supported command line method, you 
cannot use the command line tool when a project uses this method. Instead we 
will support the 'ext' method and set the appropriate environment variables so 
that the command line tool will work.
keyword 'readme'</WithStack>
    <WithOutStack>Since the 'extssh' connection method is not a supported command line method, you 
cannot use the command line tool when a project uses this method. Instead we 
will support the 'ext' method and set the appropriate environment variables so 
that the command line tool will work.
keyword 'readme'</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7944" />
    <CreationDate amount="2002-01-21 12:05:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Need exists testing for remote folders</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>There is no good way to check for the existence of a remote folder right now.
Fixed
Verified method now exists. Callers work, and test cases exist and pass.</WithStack>
    <WithOutStack>There is no good way to check for the existence of a remote folder right now.
Fixed
Verified method now exists. Callers work, and test cases exist and pass.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7945" />
    <CreationDate amount="2002-01-21 12:17:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="major" />
    <Summery>Search results not selected in external jar</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="19">
        <Lines>
          <Line>1. Make sure you have JDK1.3.1 as the default JRE (and that you have source for</Line>
          <Line>rt.jar)</Line>
          <Line>2. Open java.io.File</Line>
          <Line>3. Select field 'tmpFir'</Line>
          <Line>4. Searcg for references to this field</Line>
          <Line>5. You should get 3 matches in method getTempDir()</Line>
          <Line>6. Double-click on the search result</Line>
          <Line>Observe: The first match is not selected.</Line>
          <Line>I have checked the SearchEngine, and it seems that the positions it reports are</Line>
          <Line>correct.</Line>
          <Line>It seems that the resource (i.e. project) of the class file editor is not the</Line>
          <Line>same as the resource of the marker. It is therefore important to have several J</Line>
          <Line>projects with rt.jar to reproduce the bug.</Line>
          <Line>It is not clear yet why breakpoints do work but search results don't.</Line>
          <Line>Found the bug: the resource reported by the Java search engine is wrong:</Line>
          <Line>MatchLocator.report(int sourceStart, int sourceEnd, IJavaElement element, int</Line>
          <Line>accuracy) returns</Line>
          <Line>this.getCurrentResource()</Line>
          <Line>as resource (=project) but the project of the reported binary element is different.</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="3">
        <Lines>
          <Line>- JavaSearchResultCollector - to see what is reported and the marker creation</Line>
          <Line>- GotoMarkerAction - to see how it is opened.</Line>
          <Line>- ClassFileAnnotationModel - to see if the markers are valid for the class file</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20020115

1. Make sure you have JDK1.3.1 as the default JRE (and that you have source for 
rt.jar)
2. Open java.io.File
3. Select field 'tmpFir'
4. Searcg for references to this field
5. You should get 3 matches in method getTempDir()
6. Double-click on the search result
Observe: The first match is not selected.
I have checked the SearchEngine, and it seems that the positions it reports are 
correct.
It seems that the resource (i.e. project) of the class file editor is not the
same as the resource of the marker. It is therefore important to have several J
projects with rt.jar to reproduce the bug.
It is not clear yet why breakpoints do work but search results don't.
Found the bug: the resource reported by the Java search engine is wrong:
MatchLocator.report(int sourceStart, int sourceEnd, IJavaElement element, int
accuracy) returns
this.getCurrentResource()
as resource (=project) but the project of the reported binary element is different.

FYI: The reported element had "org.eclipse.jdt.ui" as project but
getCurrentResource was "Test" which is the LAST project in my workspace.
I changed the priority to 1 and see this as a major bug.


Changed match locator to ensure that the java project of the binary element is 
the same as the resource. But this didn't change the behavior. Dani, any other 
hints?
Yep. It must be the same as the resource of the elment and for external JARs
this is the Java project. So I guess simplest fix would be to return
element.getJavaProject().getProject() in case J elements in external JARs.

That's what I did, but I still see the problem. So I guess the problem is in 
another area. But I don't know where to look. Could you please tell me what 
code is invoked when I double-click on a search result? 
Interesting for you are
- JavaSearchResultCollector - to see what is reported and the marker creation
- GotoMarkerAction - to see how it is opened.
- ClassFileAnnotationModel - to see if the markers are valid for the class file

Problem appears only if an editor was opened on the class file.
ClassFileAnnotationModel relies on the fact that its fMarkerResource will be 
the same as the resource of the marker from the delta. In my test case, I had 
opened java.io.File in rt.jar in project org.eclipse.jdt.core, and the match 
locator found a match in java.io.File in rt.jar in project Test. For the Java 
Model, these are the same elements. For the ClassFileAnnotationModel they 
belong to 2 different projects.
So unless I missed something, this is a ClassFileAnnotationModel problem.

I think I now see what's happening. Do you change the parent of Java elements?
I.e. If I get Object parented at project A and someone asks for Integer (via
project B) do you then reparent Object to project A?

Because what I see in the Java perspective is the following:
1. Open a class (X) in java.awt from project A
    With editor linking on, when selecting X in the editor, X is in rt.jar of A
2. Open a class (Y) in java.awt from project B
    With editor linking on, when selecting X (yes X) in the editor, X is in
rt.jar of B (yes B)

This would explain why the search markers are not seen.


 (and Kai assures he does not change anything)
No, we don't change the parent of Java elements. Two java elements coming from 
the same jar file but with different java projects are just considered equal by 
the java model. I'm not sure what would be the prefered java project if we 
wanted to reroot them.
We are getting burned by the Java model's JAR element semantic again.

One fix is to not return early when the marker resource is not equals with the 
delta resource and the resource type is a IProject.

Kai may be you find a better solution.
Kai,

as you can see J Core says: "no change in parent".
The overall question is then: "Why does it work for breakpoints?" I guess the
reason is that breakpoints come in via UI and not via model.


Rewrote ClassFileMarkerAnnotationModel using 
IResourceChangedEvent.findMarkerDeltas(..). This way, the optimization of 
pruning based on the markerResource is no longer necessary. Build I-20020212.</WithStack>
    <WithOutStack>Build 20020115

1. Make sure you have JDK1.3.1 as the default JRE (and that you have source for 
rt.jar)
2. Open java.io.File
3. Select field 'tmpFir'
4. Searcg for references to this field
5. You should get 3 matches in method getTempDir()
6. Double-click on the search result
Observe: The first match is not selected.
I have checked the SearchEngine, and it seems that the positions it reports are 
correct.
It seems that the resource (i.e. project) of the class file editor is not the
same as the resource of the marker. It is therefore important to have several J
projects with rt.jar to reproduce the bug.
It is not clear yet why breakpoints do work but search results don't.
Found the bug: the resource reported by the Java search engine is wrong:
MatchLocator.report(int sourceStart, int sourceEnd, IJavaElement element, int
accuracy) returns
this.getCurrentResource()
as resource (=project) but the project of the reported binary element is different.

FYI: The reported element had "org.eclipse.jdt.ui" as project but
getCurrentResource was "Test" which is the LAST project in my workspace.
I changed the priority to 1 and see this as a major bug.


Changed match locator to ensure that the java project of the binary element is 
the same as the resource. But this didn't change the behavior. Dani, any other 
hints?
Yep. It must be the same as the resource of the elment and for external JARs
this is the Java project. So I guess simplest fix would be to return
element.getJavaProject().getProject() in case J elements in external JARs.

That's what I did, but I still see the problem. So I guess the problem is in 
another area. But I don't know where to look. Could you please tell me what 
code is invoked when I double-click on a search result? 
Interesting for you are
- JavaSearchResultCollector - to see what is reported and the marker creation
- GotoMarkerAction - to see how it is opened.
- ClassFileAnnotationModel - to see if the markers are valid for the class file

Problem appears only if an editor was opened on the class file.
ClassFileAnnotationModel relies on the fact that its fMarkerResource will be 
the same as the resource of the marker from the delta. In my test case, I had 
opened java.io.File in rt.jar in project org.eclipse.jdt.core, and the match 
locator found a match in java.io.File in rt.jar in project Test. For the Java 
Model, these are the same elements. For the ClassFileAnnotationModel they 
belong to 2 different projects.
So unless I missed something, this is a ClassFileAnnotationModel problem.

I think I now see what's happening. Do you change the parent of Java elements?
I.e. If I get Object parented at project A and someone asks for Integer (via
project B) do you then reparent Object to project A?

Because what I see in the Java perspective is the following:
1. Open a class (X) in java.awt from project A
    With editor linking on, when selecting X in the editor, X is in rt.jar of A
2. Open a class (Y) in java.awt from project B
    With editor linking on, when selecting X (yes X) in the editor, X is in
rt.jar of B (yes B)

This would explain why the search markers are not seen.


 (and Kai assures he does not change anything)
No, we don't change the parent of Java elements. Two java elements coming from 
the same jar file but with different java projects are just considered equal by 
the java model. I'm not sure what would be the prefered java project if we 
wanted to reroot them.
We are getting burned by the Java model's JAR element semantic again.

One fix is to not return early when the marker resource is not equals with the 
delta resource and the resource type is a IProject.

Kai may be you find a better solution.
Kai,

as you can see J Core says: "no change in parent".
The overall question is then: "Why does it work for breakpoints?" I guess the
reason is that breakpoints come in via UI and not via model.


Rewrote ClassFileMarkerAnnotationModel using 
IResourceChangedEvent.findMarkerDeltas(..). This way, the optimization of 
pruning based on the markerResource is no longer necessary. Build I-20020212.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7946" />
    <CreationDate amount="2002-01-21 12:35:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>List portion of CCombo goes off the bottom of the screen</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="7">
        <Lines>
          <Line>1.  Show the properties view.</Line>
          <Line>2.  Dock the properties view at the bottom of the screen.</Line>
          <Line>3.  Scroll the properties view so that a field which uses a combo box is at the</Line>
          <Line>bottom of the screen.  Resize the properties view if necessary.</Line>
          <Line>4.  Edit this property by dropping down the list portion of the combo box.</Line>
          <Line>5.  If the list is long enough, the bottom portion of it will be hidden behind</Line>
          <Line>the task bar, or may even disappear off the bottom edge of the screen.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build: 20020115

Description:
In the properties view, a list of items in a combo box disappears off the 
bottom of the screen if the list requires more vertical space than is available 
below the combo box.

Steps:
1.  Show the properties view.
2.  Dock the properties view at the bottom of the screen.
3.  Scroll the properties view so that a field which uses a combo box is at the 
bottom of the screen.  Resize the properties view if necessary.
4.  Edit this property by dropping down the list portion of the combo box.
5.  If the list is long enough, the bottom portion of it will be hidden behind 
the task bar, or may even disappear off the bottom edge of the screen.

A possible solution would be to make the list appear above the combo box 
instead of below it.  This is how Internet Explorer handles the problem.
*** Bug 37329 has been marked as a duplicate of this bug. ***
Fixed in 3.0 &gt; I20030616</WithStack>
    <WithOutStack>Build: 20020115

Description:
In the properties view, a list of items in a combo box disappears off the 
bottom of the screen if the list requires more vertical space than is available 
below the combo box.

Steps:
1.  Show the properties view.
2.  Dock the properties view at the bottom of the screen.
3.  Scroll the properties view so that a field which uses a combo box is at the 
bottom of the screen.  Resize the properties view if necessary.
4.  Edit this property by dropping down the list portion of the combo box.
5.  If the list is long enough, the bottom portion of it will be hidden behind 
the task bar, or may even disappear off the bottom edge of the screen.

A possible solution would be to make the list appear above the combo box 
instead of below it.  This is how Internet Explorer handles the problem.
*** Bug 37329 has been marked as a duplicate of this bug. ***
Fixed in 3.0 &gt; I20030616</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7947" />
    <CreationDate amount="2002-01-21 12:35:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>JDIDebugModel still using types for breakpoints</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>This should be changed to just check on a type name.
The current implementation is doing an equality check on a type and a type name.
Fixed to be JDIDebugModel#lineBreakpointExists(String typeName, int lineNumber).
Changes in AddBreakpointAction and BreakpointRulerAction.
Verified. Removed last reference to IType in JDIDebugModel, which was in an 
unused method.</WithStack>
    <WithOutStack>This should be changed to just check on a type name.
The current implementation is doing an equality check on a type and a type name.
Fixed to be JDIDebugModel#lineBreakpointExists(String typeName, int lineNumber).
Changes in AddBreakpointAction and BreakpointRulerAction.
Verified. Removed last reference to IType in JDIDebugModel, which was in an 
unused method.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7948" />
    <CreationDate amount="2002-01-21 12:58:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="User Assistance" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>In Help perspective, searching for a tag causes tag to not be displayed</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="INVALID" />
    <WithStack>Recreation:

Open the Help perspective.  Seach on a tag, say &lt;form&gt; for example. (assuming 
you have helps in there that have this tag of course) you'll get search hits, 
but the tag you searched on does not display.

(my ref: 97200)
How do you invoke help search in eclipse 1.0?
There is no such functionality, we are adding documentation search in 2.0.
Hmmm, I apologize.  This must be a WSAD added function.  I (naively) assumed 
this was a base Eclipse function, but now that I look at the Eclipse release, I 
see Search is not there.  Sorry 'bout that.
Marking the bug as invalid.
Agreed.</WithStack>
    <WithOutStack>Recreation:

Open the Help perspective.  Seach on a tag, say &lt;form&gt; for example. (assuming 
you have helps in there that have this tag of course) you'll get search hits, 
but the tag you searched on does not display.

(my ref: 97200)
How do you invoke help search in eclipse 1.0?
There is no such functionality, we are adding documentation search in 2.0.
Hmmm, I apologize.  This must be a WSAD added function.  I (naively) assumed 
this was a base Eclipse function, but now that I look at the Eclipse release, I 
see Search is not there.  Sorry 'bout that.
Marking the bug as invalid.
Agreed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7949" />
    <CreationDate amount="2002-01-21 13:01:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="User Assistance" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Help... Help contents does not use Workbench Preferences</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When you open the Help perspective from the MENU bar
(Help... Help contents) it does not use the preferences set up 
for the Workbench (Open a new perspective). 

The Workbench preferences allows me to say that all new 
perspectives should be opened in a new window. This is 
used so that I can view multiple things at ths same time. 
However, since the help Menu item doesn't use this I can't have
help up and also see what I'm working on at the same time. 

There is a workaround and that is to open the Help 
perspective in a different way. That is to click on the 
Open Perspective icon or do:
    Perspective.... Open... Other.... Help. 

Anytime a perspective is opened it should use the 
preferences.
(my ref: 96251)
In M4 help perspective no longer opens any perspective.  It uses separate help 
viewer in its own window.</WithStack>
    <WithOutStack>When you open the Help perspective from the MENU bar
(Help... Help contents) it does not use the preferences set up 
for the Workbench (Open a new perspective). 

The Workbench preferences allows me to say that all new 
perspectives should be opened in a new window. This is 
used so that I can view multiple things at ths same time. 
However, since the help Menu item doesn't use this I can't have
help up and also see what I'm working on at the same time. 

There is a workaround and that is to open the Help 
perspective in a different way. That is to click on the 
Open Perspective icon or do:
    Perspective.... Open... Other.... Help. 

Anytime a perspective is opened it should use the 
preferences.
(my ref: 96251)
In M4 help perspective no longer opens any perspective.  It uses separate help 
viewer in its own window.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7950" />
    <CreationDate amount="2002-01-21 13:05:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="User Assistance" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>File... Export should be greyed out and disabled for online help files</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>If you are in an online help file, the Export... should be greyed out
and disabled because you cannot export an online help file.
(my ref: 93419)
In 2.0 help is launched as an external, non-modal window, so this bug is 
invalid now.</WithStack>
    <WithOutStack>If you are in an online help file, the Export... should be greyed out
and disabled because you cannot export an online help file.
(my ref: 93419)
In 2.0 help is launched as an external, non-modal window, so this bug is 
invalid now.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7951" />
    <CreationDate amount="2002-01-21 13:08:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>File... Import... File system does not allow typing into the directory entry field</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>When using the File... Import... You cannot type into the "Directory" entry 
filed.  You can only use the browser button to navigate to it.  You should be 
alowed to type into it as well.
(my ref: 93765)
Tod, This needs to be fixed for 2.0
Fixed in build &gt; 20020205</WithStack>
    <WithOutStack>When using the File... Import... You cannot type into the "Directory" entry 
filed.  You can only use the browser button to navigate to it.  You should be 
alowed to type into it as well.
(my ref: 93765)
Tod, This needs to be fixed for 2.0
Fixed in build &gt; 20020205</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7952" />
    <CreationDate amount="2002-01-21 13:13:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Tasks view adding/deleting does not work right</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Several items in the Tasks view which are related to adding
a new task do not work. The only thing that you can add is 
the description. However, you should be able to add: 

   Priority (from a drop-down list) - In Docs
   Resorce
   In Folder
   Location


Another problem is that you can delete an incomplete item
(not marked as complete) by selecting the item and 
pressing the delete key. This is for items that was 
adding by the user and not the errors added by the 
editors, compilers, etc.

It looks like you can change the priority by using the 
Left mouse button. However, it is very flaky and works 
about half the time. I also have not been able to do this 
while I'm adding a task (only adding and then try to change 
the priority).

(my ref: 94804)
You now get a dialog when creating a task which lets you change the other 
properties.

Limiting deletion of tasks to completed tasks was never an intended constraint.

There are other existing PRs for the mouse interaction flakiness.</WithStack>
    <WithOutStack>Several items in the Tasks view which are related to adding
a new task do not work. The only thing that you can add is 
the description. However, you should be able to add: 

   Priority (from a drop-down list) - In Docs
   Resorce
   In Folder
   Location


Another problem is that you can delete an incomplete item
(not marked as complete) by selecting the item and 
pressing the delete key. This is for items that was 
adding by the user and not the errors added by the 
editors, compilers, etc.

It looks like you can change the priority by using the 
Left mouse button. However, it is very flaky and works 
about half the time. I also have not been able to do this 
while I'm adding a task (only adding and then try to change 
the priority).

(my ref: 94804)
You now get a dialog when creating a task which lets you change the other 
properties.

Limiting deletion of tasks to completed tasks was never an intended constraint.

There are other existing PRs for the mouse interaction flakiness.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7953" />
    <CreationDate amount="2002-01-21 13:31:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="minor" />
    <Summery>Error marker hover text clipped</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="48" end="170" />
        <code>public class Bug {
	public static void main(String[] args) {
		int[] array = null;
		for (int i = 0; i &lt; array; ++i);
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The following sample demonstrates the problem:

public class Bug {
	public static void main(String[] args) {
		int[] array = null;
		for (int i = 0; i &lt; array; ++i);
	}
}

JDT produces the compilation error message: "The operator &lt; is
undefined for the argument type(s) int, int[]"  This message is
displayed properly in the Tasks view, but if you hover over the
marker on the source line containing the error, all you see in
the popup hover text is the message "The operator " clipped just
before the less-than sign.
The problem is that there is an HTML2Text filter involved when preparing the 
error hover.
Fixed. Build I-20020212. Hover content strings are now converted to HTML 
content strings.
Verified.</WithStack>
    <WithOutStack>The following sample demonstrates the problem:

public class Bug {
	public static void main(String[] args) {
		int[] array = null;
		for (int i = 0; i &lt; array; ++i);
	}
}

JDT produces the compilation error message: "The operator &lt; is
undefined for the argument type(s) int, int[]"  This message is
displayed properly in the Tasks view, but if you hover over the
marker on the source line containing the error, all you see in
the popup hover text is the message "The operator " clipped just
before the less-than sign.
The problem is that there is an HTML2Text filter involved when preparing the 
error hover.
Fixed. Build I-20020212. Hover content strings are now converted to HTML 
content strings.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7954" />
    <CreationDate amount="2002-01-21 13:33:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Content assist off the edge of the display</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Make sure your window is close the the right edge or the</Line>
          <Line>display or in full screen mode.</Line>
          <Line />
          <Line>2) Place the cursor toward the right side of the window</Line>
          <Line>and request content assist.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>The Content assist window does not adjust for the position 
on the display and can appear where the scroll bar can be
used. Since you can also not move this window this means
that the user has to use the arrows to tab between the items. 

Depending on the number of items this can be a burden.

Test Case:
1) Make sure your window is close the the right edge or the 
display or in full screen mode. 

2) Place the cursor toward the right side of the window
and request content assist.

This shows up in the XML editor from WSAD, but also shows up in the Java Editor 
window leading me to suspect the editor framework is where the problem is.

(My ref: 92293)
Either SWT or UI issue.
This problem has been fixed in the 2.0 stream.</WithStack>
    <WithOutStack>The Content assist window does not adjust for the position 
on the display and can appear where the scroll bar can be
used. Since you can also not move this window this means
that the user has to use the arrows to tab between the items. 

Depending on the number of items this can be a burden.

Test Case:
1) Make sure your window is close the the right edge or the 
display or in full screen mode. 

2) Place the cursor toward the right side of the window
and request content assist.

This shows up in the XML editor from WSAD, but also shows up in the Java Editor 
window leading me to suspect the editor framework is where the problem is.

(My ref: 92293)
Either SWT or UI issue.
This problem has been fixed in the 2.0 stream.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7955" />
    <CreationDate amount="2002-01-21 13:44:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Not all entries of a Hashtable are shown in the inspector/debugger</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="7">
      <source_code type="singlecomment">
        <location start="121" end="140" />
        <code>// Class Test1</code>
      </source_code>
      <source_code type="class">
        <location start="173" end="510" />
        <code>public class Test1 {
    	    public Hashtable getParams() {
		    Hashtable 
params = new Test2().getParams();
		    params.put("test11", "12345");
		    
params.put("test12", "12345");
		    params.put("test13", "12345");
		    
params.put("test14", "12345");
		    params.put("test15", "12345");
		    return params;
	    
}
    }</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="511" end="531" />
        <code>// Class Test2</code>
      </source_code>
      <source_code type="import">
        <location start="531" end="562" />
        <code>import java.util.Hashtable;</code>
      </source_code>
      <source_code type="class">
        <location start="563" end="773" />
        <code>public class Test2 {
	    public 
Hashtable getParams() {
		    Hashtable params = new Hashtable();
		    params.put("test1", 
"12345");
		    params.put("test2", "12345");
		    return params;
	    }
    }</code>
      </source_code>
      <source_code type="singlecomment">
        <location start="774" end="795" />
        <code>// Test script</code>
      </source_code>
      <source_code type="functioncall">
        <location start="807" end="835" />
        <code>new Test1().getParams();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="INVALID" />
    <WithStack>Hi,

I think I did find a bug:

Not all entries of a Hashtable show up in the 
inspector/debugger.

Here is a test case:
    // Class Test1
    import 
java.util.Hashtable;
    public class Test1 {
    	    public Hashtable getParams() {
		    Hashtable 
params = new Test2().getParams();
		    params.put("test11", "12345");
		    
params.put("test12", "12345");
		    params.put("test13", "12345");
		    
params.put("test14", "12345");
		    params.put("test15", "12345");
		    return params;
	    
}
    }

    // Class Test2
    import java.util.Hashtable;
    public class Test2 {
	    public 
Hashtable getParams() {
		    Hashtable params = new Hashtable();
		    params.put("test1", 
"12345");
		    params.put("test2", "12345");
		    return params;
	    }
    }

    // Test script 
(Scrapbook)
    new Test1().getParams();

Result of the test case:
If you inspect the test 
script only the entries inserted in
class Test1 show up in the inspector.
(I'm not sure if this 
is the simplest test case, but this one
is working {or not working} on my 
machine.

Environment:
Eclipse build 20020118
JDK 1.3.1.02
Windows 2000

( BTW - 
Eclipse is a great product :-) )

With best regards

Rico
Rico,

A hashtable can use linked lists in its implementation for storing entries.
For example "test12" will have a "next" reference to "test1".
An easy verification is do get calls and check the size of the hashtable.
Closing.</WithStack>
    <WithOutStack>Hi,

I think I did find a bug:

Not all entries of a Hashtable show up in the 
inspector/debugger.

Here is a test case:
    // Class Test1
    import 
java.util.Hashtable;
    public class Test1 {
    	    public Hashtable getParams() {
		    Hashtable 
params = new Test2().getParams();
		    params.put("test11", "12345");
		    
params.put("test12", "12345");
		    params.put("test13", "12345");
		    
params.put("test14", "12345");
		    params.put("test15", "12345");
		    return params;
	    
}
    }

    // Class Test2
    import java.util.Hashtable;
    public class Test2 {
	    public 
Hashtable getParams() {
		    Hashtable params = new Hashtable();
		    params.put("test1", 
"12345");
		    params.put("test2", "12345");
		    return params;
	    }
    }

    // Test script 
(Scrapbook)
    new Test1().getParams();

Result of the test case:
If you inspect the test 
script only the entries inserted in
class Test1 show up in the inspector.
(I'm not sure if this 
is the simplest test case, but this one
is working {or not working} on my 
machine.

Environment:
Eclipse build 20020118
JDK 1.3.1.02
Windows 2000

( BTW - 
Eclipse is a great product :-) )

With best regards

Rico
Rico,

A hashtable can use linked lists in its implementation for storing entries.
For example "test12" will have a "next" reference to "test1".
An easy verification is do get calls and check the size of the hashtable.
Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7956" />
    <CreationDate amount="2002-01-21 13:49:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>No reference found to BlockScope.analysisIndex</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="assignment">
        <location start="313" end="372" />
        <code>binding.id = this.outerMostMethodScope().analysisIndex++;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>- open the BlockScope unit</Line>
          <Line>- in outliner, find field 'analysisIndex'</Line>
          <Line>- perform a search for references to this field in workspace</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Build 20020115

In self-hosting mode, search for references to field BlockScope.analysisIndex
will not find any match.

Exact steps:
- open the BlockScope unit
- in outliner, find field 'analysisIndex'
- perform a search for references to this field in workspace

There should be at least one, in the same unit:

		binding.id = this.outerMostMethodScope().analysisIndex++;
MethodScope redefines analysisIndex, so the reference 'this.outerMostMethodScope
().analysisIndex++' is a reference to MethodScope.analysisIndex, not to 
BlockScope.analysisIndex.

Closing.</WithStack>
    <WithOutStack>Build 20020115

In self-hosting mode, search for references to field BlockScope.analysisIndex
will not find any match.

Exact steps:
- open the BlockScope unit
- in outliner, find field 'analysisIndex'
- perform a search for references to this field in workspace

There should be at least one, in the same unit:

		binding.id = this.outerMostMethodScope().analysisIndex++;
MethodScope redefines analysisIndex, so the reference 'this.outerMostMethodScope
().analysisIndex++' is a reference to MethodScope.analysisIndex, not to 
BlockScope.analysisIndex.

Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7957" />
    <CreationDate amount="2002-01-21 13:52:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Search" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Null Pointer Exception invoking search in PDE</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208475">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java(Compiled Code))</Frame>
          <Frame depth="1">java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java:144)</Frame>
          <Frame depth="2">org.eclipse.search.internal.ui.SearchPageDescriptor.readExtensionScorePairs(SearchPageDescriptor.java:201)</Frame>
          <Frame depth="3">org.eclipse.search.internal.ui.SearchPageDescriptor.getScoreForFileExtension(SearchPageDescriptor.java:184)</Frame>
          <Frame depth="4">org.eclipse.search.internal.ui.SearchPageDescriptor.computeScore(SearchPageDescriptor.java:166)</Frame>
          <Frame depth="5">org.eclipse.search.internal.ui.SearchDialog.getPreferredPageIndex(SearchDialog.java:278)</Frame>
          <Frame depth="6">org.eclipse.search.internal.ui.SearchDialog.createPageArea(SearchDialog.java:142)</Frame>
          <Frame depth="7">org.eclipse.search.internal.ui.util.ExtendedDialogWindow.createDialogArea(ExtendedDialogWindow.java:142)</Frame>
          <Frame depth="8">org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:434)</Frame>
          <Frame depth="9">org.eclipse.jface.window.Window.create(Window.java:237)</Frame>
          <Frame depth="10">org.eclipse.search.internal.ui.SearchDialog.create(SearchDialog.java:128)</Frame>
          <Frame depth="11">org.eclipse.jface.window.Window.open(Window.java:510)</Frame>
          <Frame depth="12">org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:45)</Frame>
          <Frame depth="13">org.eclipse.search.internal.ui.OpenSearchDialogAction.run(OpenSearchDialogAction.java:32)</Frame>
          <Frame depth="14">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:204)</Frame>
          <Frame depth="15">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="16">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)</Frame>
          <Frame depth="18">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)</Frame>
          <Frame depth="19">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="20">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))</Frame>
          <Frame depth="22">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))</Frame>
          <Frame depth="23">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="24">org.eclipse.ui.internal.Workbench.run(Workbench.java:805)</Frame>
          <Frame depth="25">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="26">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="27">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="28">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="29">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="30">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1) Open a PDE editor on the plugin.xml on org.eclipse.jdt.ui</Line>
          <Line>2) Select the source page</Line>
          <Line>3) Open the Find/Replace dialog</Line>
          <Line>4) Enter view</Line>
          <Line>5) Hit Find Next</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>If you try and invoke the Search function in the PDE source page you get an 
exception. Please note I cannot currently make this happen consistently.

STEPS
1) Open a PDE editor on the plugin.xml on org.eclipse.jdt.ui
2) Select the source page
3) Open the Find/Replace dialog
4) Enter view
5) Hit Find Next

Log: Mon Jan 21 13:49:40 EST 2002
1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Mon Jan 21 13:49:40 EST 2002
4 org.eclipse.ui 0 java.lang.NullPointerException
java.lang.NullPointerException
	at java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java(Compiled Code))
	at java.util.StringTokenizer.&lt;init&gt;(StringTokenizer.java:144)
	at 
org.eclipse.search.internal.ui.SearchPageDescriptor.readExtensionScorePairs
(SearchPageDescriptor.java:201)
	at 
org.eclipse.search.internal.ui.SearchPageDescriptor.getScoreForFileExtension
(SearchPageDescriptor.java:184)
	at org.eclipse.search.internal.ui.SearchPageDescriptor.computeScore
(SearchPageDescriptor.java:166)
	at org.eclipse.search.internal.ui.SearchDialog.getPreferredPageIndex
(SearchDialog.java:278)
	at org.eclipse.search.internal.ui.SearchDialog.createPageArea
(SearchDialog.java:142)
	at 
org.eclipse.search.internal.ui.util.ExtendedDialogWindow.createDialogArea
(ExtendedDialogWindow.java:142)
	at org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:434)
	at org.eclipse.jface.window.Window.create(Window.java:237)
	at org.eclipse.search.internal.ui.SearchDialog.create
(SearchDialog.java:128)
	at org.eclipse.jface.window.Window.open(Window.java:510)
	at org.eclipse.search.internal.ui.OpenSearchDialogAction.run
(OpenSearchDialogAction.java:45)
	at org.eclipse.search.internal.ui.OpenSearchDialogAction.run
(OpenSearchDialogAction.java:32)
	at org.eclipse.ui.internal.PluginAction.runWithEvent
(PluginAction.java:204)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java
(Compiled Code))
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:805)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
fixed in build 20020123</WithStack>
    <WithOutStack>If you try and invoke the Search function in the PDE source page you get an 
exception. Please note I cannot currently make this happen consistently.

STEPS
1) Open a PDE editor on the plugin.xml on org.eclipse.jdt.ui
2) Select the source page
3) Open the Find/Replace dialog
4) Enter view
5) Hit Find Next

Log: Mon Jan 21 13:49:40 EST 2002
1 org.eclipse.core.resources 4 Unhandled exception caught in event loop.
Log: Mon Jan 21 13:49:40 EST 2002
4 org.eclipse.ui 0 java.lang.NullPointerException

fixed in build 20020123</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7958" />
    <CreationDate amount="2002-01-21 14:02:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>File revisions for deletions</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>File revisions for deleted files appear in the Resource history but are not 
marked as deletions. Viewing the contents will cause an error.
Should be fixed both in the history view and the compare revisions editor.
Can't fix. remoteFile.exists() returns true for deleted revisions. In fact, in 
the sync info, isDeleted = false for these files. Assigning to Mike to look 
into this, then the UI can be fixed.
The log entry for a removed file has a state of "dead". To simplify the API, 
I've added an isDeletion() method to ILogEntry.
Fixed.</WithStack>
    <WithOutStack>File revisions for deleted files appear in the Resource history but are not 
marked as deletions. Viewing the contents will cause an error.
Should be fixed both in the history view and the compare revisions editor.
Can't fix. remoteFile.exists() returns true for deleted revisions. In fact, in 
the sync info, isDeleted = false for these files. Assigning to Mike to look 
into this, then the UI can be fixed.
The log entry for a removed file has a state of "dead". To simplify the API, 
I've added an isDeletion() method to ILogEntry.
Fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7959" />
    <CreationDate amount="2002-01-21 14:33:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Unix All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>potential problems when running on big endian machines</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>We assume we're running on small endian machines.  This is usually not causing 
a problem for us as a result of the zero-value hack that is in the XtGetValues 
implementation for most platforms, which will set up our result nicely 
according to the machine's endianness.  However there are cases where this hack 
is not present (the case that brought this to our attention was AIX), so we 
cannot rely on it.
Fixed, with SN's blessing.  In the C code for our XtGetValues stub we 
explicitly cast the result according to its expected size.</WithStack>
    <WithOutStack>We assume we're running on small endian machines.  This is usually not causing 
a problem for us as a result of the zero-value hack that is in the XtGetValues 
implementation for most platforms, which will set up our result nicely 
according to the machine's endianness.  However there are cases where this hack 
is not present (the case that brought this to our attention was AIX), so we 
cannot rely on it.
Fixed, with SN's blessing.  In the C code for our XtGetValues stub we 
explicitly cast the result according to its expected size.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7960" />
    <CreationDate amount="2002-01-21 14:34:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Can't rename a package if you are just changing case</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208475">
        <Exception>org.eclipse.core.internal.resources.ResourceException</Exception>
        <Reason>A resource exists with a 
different case: /Test/Com.</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.core.internal.resources.Folder.create(Folder.java:89)</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.core.JavaModelOperation.createFolder(JavaModelOperation.java:193)</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.core.CopyResourceElementsOperation.createNeededPackageFragments(CopyResourceElementsOperation.java:133)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.core.CopyResourceElementsOperation.processPackageFragmentResource(CopyResourceElementsOperation.java:302)</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.core.CopyResourceElementsOperation.processElement(CopyResourceElementsOperation.java:269)</Frame>
          <Frame depth="5">org.eclipse.jdt.internal.core.MultiOperation.processElements(MultiOperation.java:181)</Frame>
          <Frame depth="6">org.eclipse.jdt.internal.core.CopyResourceElementsOperation.processElements(CopyResourceElementsOperation.java:283)</Frame>
          <Frame depth="7">org.eclipse.jdt.internal.core.MultiOperation.executeOperation(MultiOperation.java:85)</Frame>
          <Frame depth="8">org.eclipse.jdt.internal.core.JavaModelOperation.execute(JavaModelOperation.java:268)</Frame>
          <Frame depth="9">org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:476)</Frame>
          <Frame depth="10">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1232)</Frame>
          <Frame depth="11">org.eclipse.jdt.internal.core.JavaModelManager.runOperation(JavaModelManager.java:1136)</Frame>
          <Frame depth="12">org.eclipse.jdt.internal.core.JavaElement.runOperation(JavaElement.java:526)</Frame>
          <Frame depth="13">org.eclipse.jdt.internal.core.JavaModel.rename(JavaModel.java:467)</Frame>
          <Frame depth="14">org.eclipse.jdt.internal.core.PackageFragment.rename(PackageFragment.java:288)</Frame>
          <Frame depth="15">org.eclipse.jdt.internal.corext.refactoring.changes.RenamePackageChange.doRename(RenamePackageChange.java:60)</Frame>
          <Frame depth="16">org.eclipse.jdt.internal.corext.refactoring.AbstractJavaElementRenameChange.perform(AbstractJavaElementRenameChange.java:67)</Frame>
          <Frame depth="17">org.eclipse.jdt.internal.corext.refactoring.CompositeChange.createUndoList(CompositeChange.java:119)</Frame>
          <Frame depth="18">org.eclipse.jdt.internal.corext.refactoring.CompositeChange.perform(CompositeChange.java:144)</Frame>
          <Frame depth="19">org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation$1.execute(PerformChangeOperation.java:146)</Frame>
          <Frame depth="20">org.eclipse.ui.actions.WorkspaceModifyOperation$1.run(WorkspaceModifyOperation.java:64)</Frame>
          <Frame depth="21">org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1232)</Frame>
          <Frame depth="22">org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:78)</Frame>
          <Frame depth="23">org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:151)</Frame>
          <Frame depth="24">org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:132)</Frame>
          <Frame depth="25">org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:296)</Frame>
          <Frame depth="26">org.eclipse.jface.operation.ModalContext.run(ModalContext.java:249)</Frame>
          <Frame depth="27">org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:713)</Frame>
          <Frame depth="28">org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish(RefactoringWizard.java:307)</Frame>
          <Frame depth="29">org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.performFinish(PreviewWizardPage.java:272)</Frame>
          <Frame depth="30">org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish(RefactoringWizard.java:438)</Frame>
          <Frame depth="31">org.eclipse.jface.wizard.WizardDialog.finishPressed(WizardDialog.java:570)</Frame>
          <Frame depth="32">org.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:311)</Frame>
          <Frame depth="33">org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:344)</Frame>
          <Frame depth="34">org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:85)</Frame>
          <Frame depth="35">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)</Frame>
          <Frame depth="36">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)</Frame>
          <Frame depth="37">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)</Frame>
          <Frame depth="38">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)</Frame>
          <Frame depth="39">org.eclipse.jface.window.Window.runEventLoop(Window.java:536)</Frame>
          <Frame depth="40">org.eclipse.jface.window.Window.open(Window.java:523)</Frame>
          <Frame depth="41">org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate(RefactoringStarter.java:83)</Frame>
          <Frame depth="42">org.eclipse.jdt.internal.ui.reorg.RefactoringSupportFactory$RenameSupport.rename(RefactoringSupportFactory.java:59)</Frame>
          <Frame depth="43">org.eclipse.jdt.internal.ui.reorg.RenameAction.run(RenameAction.java:36)</Frame>
          <Frame depth="44">org.eclipse.jface.action.Action.runWithEvent(Action.java:452)</Frame>
          <Frame depth="45">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="46">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java:361)</Frame>
          <Frame depth="47">org.eclipse.jface.action.ActionContributionItem.access$0(ActionContributionItem.java:352)</Frame>
          <Frame depth="48">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java:47)</Frame>
          <Frame depth="49">org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)</Frame>
          <Frame depth="50">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)</Frame>
          <Frame depth="51">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)</Frame>
          <Frame depth="52">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)</Frame>
          <Frame depth="53">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:844)</Frame>
          <Frame depth="54">org.eclipse.ui.internal.Workbench.run(Workbench.java:827)</Frame>
          <Frame depth="55">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="56">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="57">SlimLauncher.main(SlimLauncher.java:14)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>I'm using Eclipse ver 2 20011219 on Windows 2000. When trying to rename a 
package, changing only the case of one letter(e.g pageinfo to pageInfo) an 
error is thrown with only Undo or Abort options.

Error message:
CoreException: A resource exists with a different case:
&lt;&lt;the absolute path of the old file follows&gt;&gt;
this is an instance of the file system case sensitivity issue.
Moving to platform core 
Get the same message when trying to rename the following packages in the 
Packages view:
    com.foo.bar to com.foo.bAr

But no problems trying to rename in the Navigator view.

Moving to JDT/UI for comment.
I also discovered that you can change the case of a package within the 
Navigator or Resource view, but references to the package within the class -- 
like the package statement at the top of the file -- or references to the 
package in other classes, are not changed.
Changing the case of a package in the Package or Java view results in the error 
I previously reported.
Not updating the package statement when renaming in the Navigator is because 
the action in the navigator doesn't know about Java it is a resource only 
action.

Since the rename works in the Navigator then we need to investigate what how it 
solves the case sensitivity problem. 
there's not too much i can do now on the refactoring/refactoring ui side
the exception comes from the fact that Core does not provide any methods to
verify resource names (w.r.t. cases) 

see bug#6998

refactoring sits at the end of it all - i can do nothing here.
the navigator uses IResource::move to rename folders
jcore uses IFolder::create, which throws the exception

here's the stack trace for reference:

back to inbox for consideration on further action

org.eclipse.jdt.core.JavaModelException[966]: 
org.eclipse.core.internal.resources.ResourceException: A resource exists with a 
different case: /Test/Com.
	at org.eclipse.core.internal.resources.Folder.create(Folder.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.createFolder
(JavaModelOperation.java:193)
	at 
org.eclipse.jdt.internal.core.CopyResourceElementsOperation.createNeededPackageF
ragments(CopyResourceElementsOperation.java:133)
	at 
org.eclipse.jdt.internal.core.CopyResourceElementsOperation.processPackageFragme
ntResource(CopyResourceElementsOperation.java:302)
	at 
org.eclipse.jdt.internal.core.CopyResourceElementsOperation.processElement
(CopyResourceElementsOperation.java:269)
	at org.eclipse.jdt.internal.core.MultiOperation.processElements
(MultiOperation.java:181)
	at 
org.eclipse.jdt.internal.core.CopyResourceElementsOperation.processElements
(CopyResourceElementsOperation.java:283)
	at org.eclipse.jdt.internal.core.MultiOperation.executeOperation
(MultiOperation.java:85)
	at org.eclipse.jdt.internal.core.JavaModelOperation.execute
(JavaModelOperation.java:268)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run
(JavaModelOperation.java:476)
	at org.eclipse.core.internal.resources.Workspace.run
(Workspace.java:1232)
	at org.eclipse.jdt.internal.core.JavaModelManager.runOperation
(JavaModelManager.java:1136)
	at org.eclipse.jdt.internal.core.JavaElement.runOperation
(JavaElement.java:526)
	at org.eclipse.jdt.internal.core.JavaModel.rename(JavaModel.java:467)
	at org.eclipse.jdt.internal.core.PackageFragment.rename
(PackageFragment.java:288)
	at 
org.eclipse.jdt.internal.corext.refactoring.changes.RenamePackageChange.doRename
(RenamePackageChange.java:60)
	at 
org.eclipse.jdt.internal.corext.refactoring.AbstractJavaElementRenameChange.perf
orm(AbstractJavaElementRenameChange.java:67)
	at 
org.eclipse.jdt.internal.corext.refactoring.CompositeChange.createUndoList
(CompositeChange.java:119)
	at org.eclipse.jdt.internal.corext.refactoring.CompositeChange.perform
(CompositeChange.java:144)
	at 
org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation$1.execute
(PerformChangeOperation.java:146)
	at org.eclipse.ui.actions.WorkspaceModifyOperation$1.run
(WorkspaceModifyOperation.java:64)
	at org.eclipse.core.internal.resources.Workspace.run
(Workspace.java:1232)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run
(WorkspaceModifyOperation.java:78)
	at 
org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation.executeChange
(PerformChangeOperation.java:151)
	at org.eclipse.jdt.internal.ui.refactoring.PerformChangeOperation.run
(PerformChangeOperation.java:132)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread
(ModalContext.java:296)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:249)
	at org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:713)
	at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish
(RefactoringWizard.java:307)
	at 
org.eclipse.jdt.internal.ui.refactoring.PreviewWizardPage.performFinish
(PreviewWizardPage.java:272)
	at 
org.eclipse.jdt.internal.ui.refactoring.RefactoringWizard.performFinish
(RefactoringWizard.java:438)
	at org.eclipse.jface.wizard.WizardDialog.finishPressed
(WizardDialog.java:570)
	at org.eclipse.jface.wizard.WizardDialog.buttonPressed
(WizardDialog.java:311)
	at org.eclipse.jface.dialogs.Dialog$1.widgetSelected(Dialog.java:344)
	at org.eclipse.swt.widgets.TypedListener.handleEvent
(TypedListener.java:85)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.jface.window.Window.runEventLoop(Window.java:536)
	at org.eclipse.jface.window.Window.open(Window.java:523)
	at 
org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate
(RefactoringStarter.java:83)
	at 
org.eclipse.jdt.internal.ui.reorg.RefactoringSupportFactory$RenameSupport.rename
(RefactoringSupportFactory.java:59)
	at org.eclipse.jdt.internal.ui.reorg.RenameAction.run
(RenameAction.java:36)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:452)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java:361)
	at org.eclipse.jface.action.ActionContributionItem.access$0
(ActionContributionItem.java:352)
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java:47)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:74)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:637)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:1413)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1205)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:844)
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:827)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at SlimLauncher.main(SlimLauncher.java:14)


in 2.0  your getting the error in the wizard
I was verifying another case sensitivity related bug (31820), and now I think 
I don't understand why the resolution to 7960 is to display an error in the 
rename wizard.  The core provides a mechanism for a folder rename; that's how 
one can change case of a folder in the Navigator.  I can not understand why 
package names should be different (unless it's simply an implementation 
limitation).</WithStack>
    <WithOutStack>I'm using Eclipse ver 2 20011219 on Windows 2000. When trying to rename a 
package, changing only the case of one letter(e.g pageinfo to pageInfo) an 
error is thrown with only Undo or Abort options.

Error message:
CoreException: A resource exists with a different case:
&lt;&lt;the absolute path of the old file follows&gt;&gt;
this is an instance of the file system case sensitivity issue.
Moving to platform core 
Get the same message when trying to rename the following packages in the 
Packages view:
    com.foo.bar to com.foo.bAr

But no problems trying to rename in the Navigator view.

Moving to JDT/UI for comment.
I also discovered that you can change the case of a package within the 
Navigator or Resource view, but references to the package within the class -- 
like the package statement at the top of the file -- or references to the 
package in other classes, are not changed.
Changing the case of a package in the Package or Java view results in the error 
I previously reported.
Not updating the package statement when renaming in the Navigator is because 
the action in the navigator doesn't know about Java it is a resource only 
action.

Since the rename works in the Navigator then we need to investigate what how it 
solves the case sensitivity problem. 
there's not too much i can do now on the refactoring/refactoring ui side
the exception comes from the fact that Core does not provide any methods to
verify resource names (w.r.t. cases) 

see bug#6998

refactoring sits at the end of it all - i can do nothing here.
the navigator uses IResource::move to rename folders
jcore uses IFolder::create, which throws the exception

here's the stack trace for reference:

back to inbox for consideration on further action

org.eclipse.jdt.core.JavaModelException[966]: 



in 2.0  your getting the error in the wizard
I was verifying another case sensitivity related bug (31820), and now I think 
I don't understand why the resolution to 7960 is to display an error in the 
rename wizard.  The core provides a mechanism for a folder rename; that's how 
one can change case of a folder in the Navigator.  I can not understand why 
package names should be different (unless it's simply an implementation 
limitation).</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7961" />
    <CreationDate amount="2002-01-21 14:53:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>updating source twice per suspend event</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="302" end="520" />
        <code>protected void doHandleSuspendEvent(Object element) {
		if (element instanceof IThread) {
			doHandleSuspendThreadEvent((IThread)element);
		}
		updateButtons();
		//getLaunchView().showMarkerForCurrentSelection();
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The launch view event handler was updaing the source position twice on every 
suspend event.  The edited code looks like (removed explicit call to update 
current selection). The call to "doHandleSuspendThreadEvent" already updates 
the source position/selection by doing an "auto expand and select".

	protected void doHandleSuspendEvent(Object element) {
		if (element instanceof IThread) {
			doHandleSuspendThreadEvent((IThread)element);
		}
		updateButtons();
		//getLaunchView().showMarkerForCurrentSelection();
	}
Fixed. Please verify.
Verified.</WithStack>
    <WithOutStack>The launch view event handler was updaing the source position twice on every 
suspend event.  The edited code looks like (removed explicit call to update 
current selection). The call to "doHandleSuspendThreadEvent" already updates 
the source position/selection by doing an "auto expand and select".

	protected void doHandleSuspendEvent(Object element) {
		if (element instanceof IThread) {
			doHandleSuspendThreadEvent((IThread)element);
		}
		updateButtons();
		//getLaunchView().showMarkerForCurrentSelection();
	}
Fixed. Please verify.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7962" />
    <CreationDate amount="2002-01-21 15:27:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P4" />
    <bug_severity amount="minor" />
    <Summery>SWT.getPlatform() javadoc incorrect for return description</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The description for the return value for SWT.getPlatform() is incorrect in the 
JavaDoc.  It currently reads:

 * @return the SWT version number

which was just a copy of the getVersion() comment.  It should be:

 * @return the SWT platform name
Fixed in &gt; 20020207</WithStack>
    <WithOutStack>The description for the return value for SWT.getPlatform() is incorrect in the 
JavaDoc.  It currently reads:

 * @return the SWT version number

which was just a copy of the getVersion() comment.  It should be:

 * @return the SWT platform name
Fixed in &gt; 20020207</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7963" />
    <CreationDate amount="2002-01-21 15:33:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="Other" />
    <op_sys amount="Windows All" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Add JRE dialog incorrectly flags correct JRE location</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Bring up the add JRE dialog.  Don't specify a name, but first browse for a valid JRE location.  After 
JRE is specified, notice that the jar file locations are empty.  Now, even after you specify a name, 
the dialog thinks that no jar file exists.  You must re-browse and re-select the JRE location in order 
to save the JRE.
Fixed with other work on this dialog.
Please verify.
*** Bug 3789 has been marked as a duplicate of this bug. ***
Verified.</WithStack>
    <WithOutStack>Bring up the add JRE dialog.  Don't specify a name, but first browse for a valid JRE location.  After 
JRE is specified, notice that the jar file locations are empty.  Now, even after you specify a name, 
the dialog thinks that no jar file exists.  You must re-browse and re-select the JRE location in order 
to save the JRE.
Fixed with other work on this dialog.
Please verify.
*** Bug 3789 has been marked as a duplicate of this bug. ***
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7964" />
    <CreationDate amount="2002-01-21 15:38:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Move Java debug options to Java preference page section</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The Java Debug Options should be moved to the Java preference page section.
Fixed.
Please verify.
Renamed the page to "Debug Options" to be consistent.
Verified.</WithStack>
    <WithOutStack>The Java Debug Options should be moved to the Java preference page section.
Fixed.
Please verify.
Renamed the page to "Debug Options" to be consistent.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7965" />
    <CreationDate amount="2002-01-21 15:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Debug view refresh flicker</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>you can often see the debug view redraw, e.g., the scrollbar grows. the 
workaround is to bracket a refresh with setRedraw(fase/true). This is a 
workaround. The JFace viewer refresh code should be smarter.
Fixed in LaunchViewer.
Please verify.
Re-open to re-assign. I changed the code from refresh() to refresh(Object). The 
case we call more often is refresh(Object), with a thread. Also, refresh calls 
refersh(Object), so we cover more cases.


Please see previous comment for change. Fixed.
Please verify.
Verified.</WithStack>
    <WithOutStack>you can often see the debug view redraw, e.g., the scrollbar grows. the 
workaround is to bracket a refresh with setRedraw(fase/true). This is a 
workaround. The JFace viewer refresh code should be smarter.
Fixed in LaunchViewer.
Please verify.
Re-open to re-assign. I changed the code from refresh() to refresh(Object). The 
case we call more often is refresh(Object), with a thread. Also, refresh calls 
refersh(Object), so we cover more cases.


Please see previous comment for change. Fixed.
Please verify.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7966" />
    <CreationDate amount="2002-01-21 15:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Class Creation Dialog generates syntax error</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="multicomment">
        <location start="249" end="431" />
        <code>/*

import org.eclipse.core.resources.IResourceChangeListener;
import org.eclipse.jface.viewers.ITreeContentProvider;
 * (c) Copyright 2001 MyCorporation.
 * All Rights Reserved.
 */</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1) Select the class creation dialog</Line>
          <Line>2) Enter a class name</Line>
          <Line>3) Choose an interface to have it inherit from</Line>
          <Line>4) Hit OK - you will get an error from Eclipse</Line>
          <Line>5) The class will be created - look at its definition</Line>
          <Line>*** Bug 7980 has been marked as a duplicate of this bug. ***</Line>
          <Line>fixed &gt; 20115</Line>
          <Line>Verified.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20020115

If you create a class that will require import statements due to the interfaces 
it implements or the class it extends they will be created within the comment 
for the class.

Here is an example of the comment of the generated class
/*

import org.eclipse.core.resources.IResourceChangeListener;
import org.eclipse.jface.viewers.ITreeContentProvider;
 * (c) Copyright 2001 MyCorporation.
 * All Rights Reserved.
 */

Steps 
1) Select the class creation dialog
2) Enter a class name
3) Choose an interface to have it inherit from
4) Hit OK - you will get an error from Eclipse
5) The class will be created - look at its definition
*** Bug 7980 has been marked as a duplicate of this bug. ***
fixed &gt; 20115
Verified.</WithStack>
    <WithOutStack>Build 20020115

If you create a class that will require import statements due to the interfaces 
it implements or the class it extends they will be created within the comment 
for the class.

Here is an example of the comment of the generated class
/*

import org.eclipse.core.resources.IResourceChangeListener;
import org.eclipse.jface.viewers.ITreeContentProvider;
 * (c) Copyright 2001 MyCorporation.
 * All Rights Reserved.
 */

Steps 
1) Select the class creation dialog
2) Enter a class name
3) Choose an interface to have it inherit from
4) Hit OK - you will get an error from Eclipse
5) The class will be created - look at its definition
*** Bug 7980 has been marked as a duplicate of this bug. ***
fixed &gt; 20115
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7967" />
    <CreationDate amount="2002-01-21 15:43:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Java UI source locator should be API</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>JavaUISourceLocator should be API so that other Java launchers can leverage it.
Fixed.
Please verify.
Verified.</WithStack>
    <WithOutStack>JavaUISourceLocator should be API so that other Java launchers can leverage it.
Fixed.
Please verify.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7968" />
    <CreationDate amount="2002-01-21 15:44:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>stack frame flicker</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Comment from Erich Gamma:

stepping feedback on stack frames result in too much instability. Only the 
thread icon should change and not all the stack frames.
The problem with this proposal is that no threads need to be visible to step. If
we remove the stack frame feedback, users stepping in deep stacks will not get
any feedback while stepping.
I agree that this is a problem, but refreshing all the images is expensive and 
I'm not sure that users immediatly understand the visual clue.

How about showing the "stepping" feedback in the status bar only (I know you 
didn't like this in the past). An alternative is to indicate the stepping in 
the debug views title bar. I'd assume that stepping in more than one stack 
frame is rare.
Actually, I just made improvements to the image refreshing on the stack frames
that greatly reduces the expense. Caching that I'd implemented when the image
switching was first implemented was unwittingly removed during a refactoring.

In the latest build, the image refreshing should be back to costing very little.
The most expensive part of stepping right now (as reported by profiling tools)
is updating the editor.
The problem with providing feedback in the status bar is the case where you're
running more than one target.

Imagine debugging a client and server at the same time. You perform a step in
the client that causes a breakpoint in the server. The client will not return
from the step until the server is resumed. So you select the server and start
doing your debugging (possibly including stepping). Now the status bar says
"stepping" when you're not.

I think we need to keep state reporting associated with the correct context.
The performance improvement is goodness. I agree that showing the feedback in 
the frames directly is better than the status line (btw, the status line could 
show feedback about which target/thread is stepping to handle the multiple 
target case). 

Then I suggest that we improve the artwork so that the stepping icon just 
shows a small "busy" adornment over the frame's icon. 

(Jared) Please investigate linux re-paint problem and create a bug if required. 
Add a note bug# 4383 for new artwork requirement.
Art request added to Bug 4383.</WithStack>
    <WithOutStack>Comment from Erich Gamma:

stepping feedback on stack frames result in too much instability. Only the 
thread icon should change and not all the stack frames.
The problem with this proposal is that no threads need to be visible to step. If
we remove the stack frame feedback, users stepping in deep stacks will not get
any feedback while stepping.
I agree that this is a problem, but refreshing all the images is expensive and 
I'm not sure that users immediatly understand the visual clue.

How about showing the "stepping" feedback in the status bar only (I know you 
didn't like this in the past). An alternative is to indicate the stepping in 
the debug views title bar. I'd assume that stepping in more than one stack 
frame is rare.
Actually, I just made improvements to the image refreshing on the stack frames
that greatly reduces the expense. Caching that I'd implemented when the image
switching was first implemented was unwittingly removed during a refactoring.

In the latest build, the image refreshing should be back to costing very little.
The most expensive part of stepping right now (as reported by profiling tools)
is updating the editor.
The problem with providing feedback in the status bar is the case where you're
running more than one target.

Imagine debugging a client and server at the same time. You perform a step in
the client that causes a breakpoint in the server. The client will not return
from the step until the server is resumed. So you select the server and start
doing your debugging (possibly including stepping). Now the status bar says
"stepping" when you're not.

I think we need to keep state reporting associated with the correct context.
The performance improvement is goodness. I agree that showing the feedback in 
the frames directly is better than the status line (btw, the status line could 
show feedback about which target/thread is stepping to handle the multiple 
target case). 

Then I suggest that we improve the artwork so that the stepping icon just 
shows a small "busy" adornment over the frame's icon. 

(Jared) Please investigate linux re-paint problem and create a bug if required. 
Add a note bug# 4383 for new artwork requirement.
Art request added to Bug 4383.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7969" />
    <CreationDate amount="2002-01-21 15:46:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Editor re-use in Debugger</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>- editors that I've changed once during my session should be pinned</Line>
          <Line>automatically or should considered specially in the reuse policy.</Line>
          <Line>- support to close all editors except the pinned ones.</Line>
          <Line>- I can set editor reuse policy per perspective, i.e., for the debug</Line>
          <Line>perspective I would set it 1 (giving me the old behaviour).</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>Erich Gamma: "since the editor reuse policy can only be set globally and not 
per perspective you end up with many open editors in the debug perspective. It 
can happend that ones your are working one get closed because of the ones 
opened by the debugger."

Would be nice to be able to control editor re-use by perspective.
oops, my words are really hard to understand...

2nd attempt:
Since you can only set the editor reuse preference globally and not per 
perspective you can end up with many open editors in the debug perspective. For 
example, I've set it to 8. When stepping through code you quickly get to the 
reuse threshold and as a consequence editors that I was working with can get 
reused and I have to reopen them. I find myself to often fall back to the 
old "close all editors" pattern.

Pinning can help to avoid that the editors I'm working with are getting closed. 
However, I often forget to pin an editor. 

Random ideas
- editors that I've changed once during my session should be pinned 
automatically or should considered specially in the reuse policy.
- support to close all editors except the pinned ones.
- I can set editor reuse policy per perspective, i.e., for the debug 
perspective I would set it 1 (giving me the old behaviour).


one option to consider is whether we should fall back to the manual editor 
reuse policy when opening editors from the debug view. However, I'd like to get 
more user feedback on this one.
We can now set the editor threshold in the debug perspective to be different 
that the workbench preference.
Set editor threshold to 1 in the DebugPerspectiveFactory.

Works in most cases...
Failure:
Select a stack frame
Hit F3 to open a new type from seleted source (System.out.println())

The PrintStream.class is opened AND the editor for the debug source is also 
open.
Problem is that the launch view is activated when the "old" editor is closed 
and the new editor is not yet opened.

Is this intentional...seems strange to activate another part when the 
EditorManager is about to replace the old editor with the new one.  Would seem 
to lead to flash.
Moving to platform UI.
Nick, please confirm that the editor reuse isses raised by the debugger team 
have been resolved for 2.0
Darin, can this be closed?

Yes, this can be closed. The debugger manages its own editor re-use in the 
current code base.
Closing.</WithStack>
    <WithOutStack>Erich Gamma: "since the editor reuse policy can only be set globally and not 
per perspective you end up with many open editors in the debug perspective. It 
can happend that ones your are working one get closed because of the ones 
opened by the debugger."

Would be nice to be able to control editor re-use by perspective.
oops, my words are really hard to understand...

2nd attempt:
Since you can only set the editor reuse preference globally and not per 
perspective you can end up with many open editors in the debug perspective. For 
example, I've set it to 8. When stepping through code you quickly get to the 
reuse threshold and as a consequence editors that I was working with can get 
reused and I have to reopen them. I find myself to often fall back to the 
old "close all editors" pattern.

Pinning can help to avoid that the editors I'm working with are getting closed. 
However, I often forget to pin an editor. 

Random ideas
- editors that I've changed once during my session should be pinned 
automatically or should considered specially in the reuse policy.
- support to close all editors except the pinned ones.
- I can set editor reuse policy per perspective, i.e., for the debug 
perspective I would set it 1 (giving me the old behaviour).


one option to consider is whether we should fall back to the manual editor 
reuse policy when opening editors from the debug view. However, I'd like to get 
more user feedback on this one.
We can now set the editor threshold in the debug perspective to be different 
that the workbench preference.
Set editor threshold to 1 in the DebugPerspectiveFactory.

Works in most cases...
Failure:
Select a stack frame
Hit F3 to open a new type from seleted source (System.out.println())

The PrintStream.class is opened AND the editor for the debug source is also 
open.
Problem is that the launch view is activated when the "old" editor is closed 
and the new editor is not yet opened.

Is this intentional...seems strange to activate another part when the 
EditorManager is about to replace the old editor with the new one.  Would seem 
to lead to flash.
Moving to platform UI.
Nick, please confirm that the editor reuse isses raised by the debugger team 
have been resolved for 2.0
Darin, can this be closed?

Yes, this can be closed. The debugger manages its own editor re-use in the 
current code base.
Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7970" />
    <CreationDate amount="2002-01-21 16:29:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux-Motif" />
    <priority amount="P5" />
    <bug_severity amount="normal" />
    <Summery>TreeEditor does not consider control editor trim</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="13">
      <source_code type="import">
        <location start="1509" end="1535" />
        <code>import org.eclipse.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1536" end="1569" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1570" end="1602" />
        <code>import org.eclipse.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1603" end="1635" />
        <code>import org.eclipse.swt.custom.*;</code>
      </source_code>
      <source_code type="import">
        <location start="1636" end="1668" />
        <code>import org.eclipse.swt.layout.*;</code>
      </source_code>
      <source_code type="class">
        <location start="1670" end="3294" />
        <code>public class EditableTree {
	public static void main(String[] args) {
		final Shell shell = new Shell();
		final Display display = shell.getDisplay();
		
		shell.setSize(200,200);
		shell.setLayout(new GridLayout());

		// create Tree		
		final Tree tree = new Tree(shell, SWT.FULL_SELECTION);
		GridData data = new GridData();
		data.heightHint = 130;
		data.widthHint = 130;
		tree.setLayoutData(data);
		
		// create Tree items
		for (int i = 0; i &lt; 5; i++)
			new TreeItem(tree, SWT.NULL).setText ("item" + i);

		// create Tree item editor and listener
		final TreeEditor editor = new TreeEditor(tree);
		tree.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				Control oldEditor = editor.getEditor();
				if (oldEditor != null)
					oldEditor.dispose();
				TreeItem item = (TreeItem)e.item;
				editor.horizontalAlignment = SWT.LEFT;
				editor.grabHorizontal = true;
				editor.minimumWidth = 50;

				final Composite comp = new Composite(tree, 
SWT.BORDER);
				GridLayout layout = new GridLayout();
				layout.marginHeight = 0;
				layout.marginWidth = 0;
				comp.setLayout(layout);

				Text text = new Text(comp, SWT.NONE);
				final GridData data = new GridData();
				text.setLayoutData(data);
				comp.addControlListener(new ControlAdapter() {
					public void controlResized(ControlEvent 
e) {
						data.widthHint = comp.getSize
().x - 10;
						comp.layout();
					}
				});

				editor.setEditor(comp, item);
				text.setFocus();
			}
		});
		
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
	}
}</code>
      </source_code>
      <source_code type="import">
        <location start="3890" end="3916" />
        <code>import org.eclipse.swt.*;</code>
      </source_code>
      <source_code type="import">
        <location start="3917" end="3949" />
        <code>import org.eclipse.swt.custom.*;</code>
      </source_code>
      <source_code type="import">
        <location start="3950" end="3982" />
        <code>import org.eclipse.swt.events.*;</code>
      </source_code>
      <source_code type="import">
        <location start="3983" end="4017" />
        <code>import org.eclipse.swt.graphics.*;</code>
      </source_code>
      <source_code type="import">
        <location start="4018" end="4050" />
        <code>import org.eclipse.swt.layout.*;</code>
      </source_code>
      <source_code type="import">
        <location start="4051" end="4084" />
        <code>import org.eclipse.swt.widgets.*;</code>
      </source_code>
      <source_code type="class">
        <location start="4086" end="6058" />
        <code>public class EditableTree {
	public static void main(String[] args) {
		final Shell shell = new Shell();
		final Display display = shell.getDisplay();
		shell.setSize(200, 200);
		shell.setLayout(new GridLayout());

		// create Tree and TreeItems
		final Tree tree = new Tree(shell, SWT.FULL_SELECTION);
		GridData data = new GridData();
		data.heightHint = 130;
		data.widthHint = 130;
		tree.setLayoutData(data);
		for (int i = 0; i &lt; 5; i++)
			new TreeItem(tree, SWT.NULL).setText("item" + i);

		// create Tree item editor and listener
		final TreeEditor treeEditor = new TreeEditor(tree);
		treeEditor.horizontalAlignment = SWT.LEFT;
		treeEditor.grabHorizontal = true;
		tree.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				Control oldEditor = treeEditor.getEditor();
				if (oldEditor != null)
					oldEditor.dispose();

				final Composite textEditorParent = new Composite
(tree, SWT.NONE);
				TreeItem[] selectedItems = tree.getSelection();
				treeEditor.setEditor(textEditorParent, 
selectedItems[0]);
				final Text textEditor = new Text
(textEditorParent, SWT.NONE);
				textEditorParent.setBackground
(textEditor.getBackground());
				textEditorParent.addListener(SWT.Paint, new 
Listener() {
					public void handleEvent(Event e) {
						Point textSize = 
textEditor.getSize();
						Point parentSize = 
textEditorParent.getSize();
						e.gc.drawRectangle(0,0,Math.min
(textSize.x + 4, parentSize.x - 1),parentSize.y - 1);
					}
				});

				Point textSize = textEditor.computeSize
(SWT.DEFAULT, SWT.DEFAULT);
				textSize.x += textSize.y; // Add extra space 
for new characters.
				Point parentSize = textEditorParent.getSize();
				textEditor.setBounds(2,1,Math.min(textSize.x, 
parentSize.x - 4),parentSize.y - 2);
				textEditorParent.redraw();
				textEditor.setFocus();
			}
		});

		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="9">
        <Lines>
          <Line>- TreeEditor.computeSize() computes the size to set the editor to (so in this</Line>
          <Line>case, what size to set the Text to)</Line>
          <Line>- however, its calculations do not at any point refer to the editor (ie.- the</Line>
          <Line>Text); they only ask the tree for the height of its items</Line>
          <Line>- as a result, a Text that has SWT.BORDER style bit on Motif does not display</Line>
          <Line>properly because its height is being set by the TreeEditor to y (the height of</Line>
          <Line>a line of text in the tree) but the Text really wants to be height y+z (z is</Line>
          <Line>all the trim that accompanies a Text with SWT.BORDER, which on Motif is a</Line>
          <Line>relatively large number).</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>(cut from bug 1766)

The problem is that borders in text field editors on trees behave differently 
on Windows &amp; Linux.  On Linux, you always get a border, whether specified as a 
style constant or not.  If you do specify the style constant, the characters 
are pushed toward the bottom of the text field, so that only their very tops 
are showing.  On Windows, if you don't specify a border style constant, there 
is no border.
I've changed the summary because it did not adequately describe the real 
problem.  What's happening:

- TreeEditor.computeSize() computes the size to set the editor to (so in this 
case, what size to set the Text to)
- however, its calculations do not at any point refer to the editor (ie.- the 
Text); they only ask the tree for the height of its items
- as a result, a Text that has SWT.BORDER style bit on Motif does not display 
properly because its height is being set by the TreeEditor to y (the height of 
a line of text in the tree) but the Text really wants to be height y+z (z is 
all the trim that accompanies a Text with SWT.BORDER, which on Motif is a 
relatively large number).

Unfortunately the TreeEditor cannot easily determine the trim on the editor 
since it's of type Control.  Seeking wisdom from SN...

Steve's wisdom: His suggestion is to create a Composite around the Text widget, 
and put the border on the Composite instead of the Text.  An example of this is 
shown below.  It almost works, except that there's some clipping on win32.  
Will revisit.

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.layout.*;

public class EditableTree {
	public static void main(String[] args) {
		final Shell shell = new Shell();
		final Display display = shell.getDisplay();
		
		shell.setSize(200,200);
		shell.setLayout(new GridLayout());

		// create Tree		
		final Tree tree = new Tree(shell, SWT.FULL_SELECTION);
		GridData data = new GridData();
		data.heightHint = 130;
		data.widthHint = 130;
		tree.setLayoutData(data);
		
		// create Tree items
		for (int i = 0; i &lt; 5; i++)
			new TreeItem(tree, SWT.NULL).setText ("item" + i);

		// create Tree item editor and listener
		final TreeEditor editor = new TreeEditor(tree);
		tree.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				Control oldEditor = editor.getEditor();
				if (oldEditor != null)
					oldEditor.dispose();
				TreeItem item = (TreeItem)e.item;
				editor.horizontalAlignment = SWT.LEFT;
				editor.grabHorizontal = true;
				editor.minimumWidth = 50;

				final Composite comp = new Composite(tree, 
SWT.BORDER);
				GridLayout layout = new GridLayout();
				layout.marginHeight = 0;
				layout.marginWidth = 0;
				comp.setLayout(layout);

				Text text = new Text(comp, SWT.NONE);
				final GridData data = new GridData();
				text.setLayoutData(data);
				comp.addControlListener(new ControlAdapter() {
					public void controlResized(ControlEvent 
e) {
						data.widthHint = comp.getSize
().x - 10;
						comp.layout();
					}
				});

				editor.setEditor(comp, item);
				text.setFocus();
			}
		});
		
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
	}
}

The following snippet shows how a client can get this to look good on both 
Windows and Motif w.o writing any platform-specific code.  It's taken from the 
resource navigator's in-place rename action.

This snippet works because it knows that there will ever only be one editor 
open in the tree at a time, so it's able to add extra height to the in-place 
editor w/o concern for it coliding with another simultaneously open tree 
editor.  This is something that swt cannot do because we're spec'd to allow 
multiple editors to be open simultaneously on a tree w/o them overlapping.  
Snippet:

import org.eclipse.swt.*;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;

public class EditableTree {
	public static void main(String[] args) {
		final Shell shell = new Shell();
		final Display display = shell.getDisplay();
		shell.setSize(200, 200);
		shell.setLayout(new GridLayout());

		// create Tree and TreeItems
		final Tree tree = new Tree(shell, SWT.FULL_SELECTION);
		GridData data = new GridData();
		data.heightHint = 130;
		data.widthHint = 130;
		tree.setLayoutData(data);
		for (int i = 0; i &lt; 5; i++)
			new TreeItem(tree, SWT.NULL).setText("item" + i);

		// create Tree item editor and listener
		final TreeEditor treeEditor = new TreeEditor(tree);
		treeEditor.horizontalAlignment = SWT.LEFT;
		treeEditor.grabHorizontal = true;
		tree.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				Control oldEditor = treeEditor.getEditor();
				if (oldEditor != null)
					oldEditor.dispose();

				final Composite textEditorParent = new Composite
(tree, SWT.NONE);
				TreeItem[] selectedItems = tree.getSelection();
				treeEditor.setEditor(textEditorParent, 
selectedItems[0]);
				final Text textEditor = new Text
(textEditorParent, SWT.NONE);
				textEditorParent.setBackground
(textEditor.getBackground());
				textEditorParent.addListener(SWT.Paint, new 
Listener() {
					public void handleEvent(Event e) {
						Point textSize = 
textEditor.getSize();
						Point parentSize = 
textEditorParent.getSize();
						e.gc.drawRectangle(0,0,Math.min
(textSize.x + 4, parentSize.x - 1),parentSize.y - 1);
					}
				});

				Point textSize = textEditor.computeSize
(SWT.DEFAULT, SWT.DEFAULT);
				textSize.x += textSize.y; // Add extra space 
for new characters.
				Point parentSize = textEditorParent.getSize();
				textEditor.setBounds(2,1,Math.min(textSize.x, 
parentSize.x - 4),parentSize.y - 2);
				textEditorParent.redraw();
				textEditor.setFocus();
			}
		});

		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
	}
}</WithStack>
    <WithOutStack>(cut from bug 1766)

The problem is that borders in text field editors on trees behave differently 
on Windows &amp; Linux.  On Linux, you always get a border, whether specified as a 
style constant or not.  If you do specify the style constant, the characters 
are pushed toward the bottom of the text field, so that only their very tops 
are showing.  On Windows, if you don't specify a border style constant, there 
is no border.
I've changed the summary because it did not adequately describe the real 
problem.  What's happening:

- TreeEditor.computeSize() computes the size to set the editor to (so in this 
case, what size to set the Text to)
- however, its calculations do not at any point refer to the editor (ie.- the 
Text); they only ask the tree for the height of its items
- as a result, a Text that has SWT.BORDER style bit on Motif does not display 
properly because its height is being set by the TreeEditor to y (the height of 
a line of text in the tree) but the Text really wants to be height y+z (z is 
all the trim that accompanies a Text with SWT.BORDER, which on Motif is a 
relatively large number).

Unfortunately the TreeEditor cannot easily determine the trim on the editor 
since it's of type Control.  Seeking wisdom from SN...

Steve's wisdom: His suggestion is to create a Composite around the Text widget, 
and put the border on the Composite instead of the Text.  An example of this is 
shown below.  It almost works, except that there's some clipping on win32.  
Will revisit.

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.layout.*;

public class EditableTree {
	public static void main(String[] args) {
		final Shell shell = new Shell();
		final Display display = shell.getDisplay();
		
		shell.setSize(200,200);
		shell.setLayout(new GridLayout());

		// create Tree		
		final Tree tree = new Tree(shell, SWT.FULL_SELECTION);
		GridData data = new GridData();
		data.heightHint = 130;
		data.widthHint = 130;
		tree.setLayoutData(data);
		
		// create Tree items
		for (int i = 0; i &lt; 5; i++)
			new TreeItem(tree, SWT.NULL).setText ("item" + i);

		// create Tree item editor and listener
		final TreeEditor editor = new TreeEditor(tree);
		tree.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				Control oldEditor = editor.getEditor();
				if (oldEditor != null)
					oldEditor.dispose();
				TreeItem item = (TreeItem)e.item;
				editor.horizontalAlignment = SWT.LEFT;
				editor.grabHorizontal = true;
				editor.minimumWidth = 50;

				final Composite comp = new Composite(tree, 
SWT.BORDER);
				GridLayout layout = new GridLayout();
				layout.marginHeight = 0;
				layout.marginWidth = 0;
				comp.setLayout(layout);

				Text text = new Text(comp, SWT.NONE);
				final GridData data = new GridData();
				text.setLayoutData(data);
				comp.addControlListener(new ControlAdapter() {
					public void controlResized(ControlEvent 
e) {
						data.widthHint = comp.getSize
().x - 10;
						comp.layout();
					}
				});

				editor.setEditor(comp, item);
				text.setFocus();
			}
		});
		
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
	}
}

The following snippet shows how a client can get this to look good on both 
Windows and Motif w.o writing any platform-specific code.  It's taken from the 
resource navigator's in-place rename action.

This snippet works because it knows that there will ever only be one editor 
open in the tree at a time, so it's able to add extra height to the in-place 
editor w/o concern for it coliding with another simultaneously open tree 
editor.  This is something that swt cannot do because we're spec'd to allow 
multiple editors to be open simultaneously on a tree w/o them overlapping.  
Snippet:

import org.eclipse.swt.*;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;

public class EditableTree {
	public static void main(String[] args) {
		final Shell shell = new Shell();
		final Display display = shell.getDisplay();
		shell.setSize(200, 200);
		shell.setLayout(new GridLayout());

		// create Tree and TreeItems
		final Tree tree = new Tree(shell, SWT.FULL_SELECTION);
		GridData data = new GridData();
		data.heightHint = 130;
		data.widthHint = 130;
		tree.setLayoutData(data);
		for (int i = 0; i &lt; 5; i++)
			new TreeItem(tree, SWT.NULL).setText("item" + i);

		// create Tree item editor and listener
		final TreeEditor treeEditor = new TreeEditor(tree);
		treeEditor.horizontalAlignment = SWT.LEFT;
		treeEditor.grabHorizontal = true;
		tree.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				Control oldEditor = treeEditor.getEditor();
				if (oldEditor != null)
					oldEditor.dispose();

				final Composite textEditorParent = new Composite
(tree, SWT.NONE);
				TreeItem[] selectedItems = tree.getSelection();
				treeEditor.setEditor(textEditorParent, 
selectedItems[0]);
				final Text textEditor = new Text
(textEditorParent, SWT.NONE);
				textEditorParent.setBackground
(textEditor.getBackground());
				textEditorParent.addListener(SWT.Paint, new 
Listener() {
					public void handleEvent(Event e) {
						Point textSize = 
textEditor.getSize();
						Point parentSize = 
textEditorParent.getSize();
						e.gc.drawRectangle(0,0,Math.min
(textSize.x + 4, parentSize.x - 1),parentSize.y - 1);
					}
				});

				Point textSize = textEditor.computeSize
(SWT.DEFAULT, SWT.DEFAULT);
				textSize.x += textSize.y; // Add extra space 
for new characters.
				Point parentSize = textEditorParent.getSize();
				textEditor.setBounds(2,1,Math.min(textSize.x, 
parentSize.x - 4),parentSize.y - 2);
				textEditorParent.redraw();
				textEditor.setFocus();
			}
		});

		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
	}
}</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7971" />
    <CreationDate amount="2002-01-21 17:01:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Brancing should provide option to update local</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>When creating a CVS branch tag for a project, the user should have the option 
of updating the local resources to be moved to the branch.
Fixed.</WithStack>
    <WithOutStack>When creating a CVS branch tag for a project, the user should have the option 
of updating the local resources to be moved to the branch.
Fixed.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7972" />
    <CreationDate amount="2002-01-21 17:02:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Cannot delete custom perspectives</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="CLOSED" />
    <resolution amount="WORKSFORME" />
    <WithStack>You can create perspectives, but you can't delete them.  Seems like a problem.
Moving to Platform/UI.

You can delete a custom perspective by going to the perspective preference page 
(Workbench &gt; Preferences &gt; Workbench &gt; Perspectives). Select the custom 
perspective and press Delete button.
Works for me too.  Function was a bit hidden, but it's there.  Thanks....</WithStack>
    <WithOutStack>You can create perspectives, but you can't delete them.  Seems like a problem.
Moving to Platform/UI.

You can delete a custom perspective by going to the perspective preference page 
(Workbench &gt; Preferences &gt; Workbench &gt; Perspectives). Select the custom 
perspective and press Delete button.
Works for me too.  Function was a bit hidden, but it's there.  Thanks....</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7973" />
    <CreationDate amount="2002-01-21 17:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="Other" />
    <op_sys amount="other" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>JRE variables on installed JRE's pref page confusing</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>The JRE_LIB, JRE_SRC, and JRE_SRCROOT variables on the installed JRE prefs page only show values 
for the JRE that has been checked as the global default JRE.  However, their position just 
underneath the JRE table makes the user think that they are values that apply to whichever JRE is 
currently selected in the table.  Suggest we add text above the variable displays that says 
something like: "Variable values for the default JRE".
I agree, that an additional label above the field would clarify the purpose of 
the fields.

This preference page is now owned by the debugger (contributed by 
org.eclipse.jdt.launching). Moving to Debug.
Fixed in VMPreferencePage.
Please verify.
Verified.</WithStack>
    <WithOutStack>The JRE_LIB, JRE_SRC, and JRE_SRCROOT variables on the installed JRE prefs page only show values 
for the JRE that has been checked as the global default JRE.  However, their position just 
underneath the JRE table makes the user think that they are values that apply to whichever JRE is 
currently selected in the table.  Suggest we add text above the variable displays that says 
something like: "Variable values for the default JRE".
I agree, that an additional label above the field would clarify the purpose of 
the fields.

This preference page is now owned by the debugger (contributed by 
org.eclipse.jdt.launching). Moving to Debug.
Fixed in VMPreferencePage.
Please verify.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7974" />
    <CreationDate amount="2002-01-21 18:27:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="critical" />
    <Summery>Stack overflow pressing "remove all" from Expression View</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>Inspected an expression from the scrapbook "new java.util.Date()".
Expression result appeared.
Pressed "remove all"
IDE hung for a while and then I received an error message :

Unhandled exception caught in event loop.
Reason:
Failed to execute runnable (java.lang.StackOverflowError)
Unable to reproduce. What VM were you using?
Also unable to reproduce. Closed.
Happenned again
Fixed. The code was removing all children by calculating children, which 
populates the cache, which would overflow for recursive data structures. 
Changed to remove cached children only.
Please verify.
Verified code change. Looks good.</WithStack>
    <WithOutStack>Inspected an expression from the scrapbook "new java.util.Date()".
Expression result appeared.
Pressed "remove all"
IDE hung for a while and then I received an error message :

Unhandled exception caught in event loop.
Reason:
Failed to execute runnable (java.lang.StackOverflowError)
Unable to reproduce. What VM were you using?
Also unable to reproduce. Closed.
Happenned again
Fixed. The code was removing all children by calculating children, which 
populates the cache, which would overflow for recursive data structures. 
Changed to remove cached children only.
Please verify.
Verified code change. Looks good.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7975" />
    <CreationDate amount="2002-01-21 18:27:00 -0500" />
    <DupId amount="7804" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="All" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>VMDisconnectedException on shutdown</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208493">
        <Exception>com.sun.jdi.VMDisconnectedException</Exception>
        <Reason>Got IOException from Virtual Machine</Reason>
        <Frames>
          <Frame depth="0">org.eclipse.jdi.internal.connect.PacketSendManager.sendPacket(PacketSendManager.java:58)</Frame>
          <Frame depth="1">org.eclipse.jdi.internal.MirrorImpl.requestVM(MirrorImpl.java:151)</Frame>
          <Frame depth="2">org.eclipse.jdi.internal.MirrorImpl.requestVM(MirrorImpl.java:173)</Frame>
          <Frame depth="3">org.eclipse.jdi.internal.request.EventRequestImpl.disable(EventRequestImpl.java:168)</Frame>
          <Frame depth="4">org.eclipse.jdi.internal.request.EventRequestManagerImpl.deleteEventRequest(EventRequestManagerImpl.java:266)</Frame>
          <Frame depth="5">org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.removeFromTarget(JavaBreakpoint.java:462)</Frame>
          <Frame depth="6">org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.removeAllBreakpoints(JDIDebugTarget.java:1185)</Frame>
          <Frame depth="7">org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.cleanup(JDIDebugTarget.java:1157)</Frame>
          <Frame depth="8">org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.shutdown(JDIDebugTarget.java:1350)</Frame>
          <Frame depth="9">org.eclipse.jdt.internal.debug.core.JDIDebugPlugin.shutdown(JDIDebugPlugin.java:109)</Frame>
          <Frame depth="10">org.eclipse.core.internal.plugins.PluginRegistry$2.run(PluginRegistry.java:265)</Frame>
          <Frame depth="11">org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:821)</Frame>
          <Frame depth="12">org.eclipse.core.internal.plugins.PluginRegistry$1.visit(PluginRegistry.java:274)</Frame>
          <Frame depth="13">org.eclipse.core.internal.plugins.PluginRegistry.accept(PluginRegistry.java:45)</Frame>
          <Frame depth="14">org.eclipse.core.internal.plugins.PluginRegistry.shutdownPlugins(PluginRegistry.java:277)</Frame>
          <Frame depth="15">org.eclipse.core.internal.plugins.PluginRegistry.shutdown(PluginRegistry.java:252)</Frame>
          <Frame depth="16">org.eclipse.core.internal.runtime.InternalPlatform.loaderShutdown(InternalPlatform.java:532)</Frame>
          <Frame depth="17">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="18">org.eclipse.core.internal.boot.InternalBootLoader.shutdown(InternalBootLoader.java:954)</Frame>
          <Frame depth="19">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:883)</Frame>
          <Frame depth="20">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="21">SlimLauncher.main(SlimLauncher.java:14)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Log: Mon Jan 21 17:15:22 CST 2002
4 org.eclipse.jdt.debug 120 Internal error logged from JDI Debug: 
com.sun.jdi.VMDisconnectedException: Got IOException from Virtual Machine
	at org.eclipse.jdi.internal.connect.PacketSendManager.sendPacket
(PacketSendManager.java:58)
	at org.eclipse.jdi.internal.MirrorImpl.requestVM(MirrorImpl.java:151)
	at org.eclipse.jdi.internal.MirrorImpl.requestVM(MirrorImpl.java:173)
	at org.eclipse.jdi.internal.request.EventRequestImpl.disable
(EventRequestImpl.java:168)
	at 
org.eclipse.jdi.internal.request.EventRequestManagerImpl.deleteEventRequest
(EventRequestManagerImpl.java:266)
	at 
org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.removeFromTarget
(JavaBreakpoint.java:462)
	at 
org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.removeAllBreakpoints
(JDIDebugTarget.java:1185)
	at org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.cleanup
(JDIDebugTarget.java:1157)
	at org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.shutdown
(JDIDebugTarget.java:1350)
	at org.eclipse.jdt.internal.debug.core.JDIDebugPlugin.shutdown
(JDIDebugPlugin.java:109)
	at org.eclipse.core.internal.plugins.PluginRegistry$2.run
(PluginRegistry.java:265)
	at org.eclipse.core.internal.runtime.InternalPlatform.run
(InternalPlatform.java:821)
	at org.eclipse.core.internal.plugins.PluginRegistry$1.visit
(PluginRegistry.java:274)
	at org.eclipse.core.internal.plugins.PluginRegistry.accept
(PluginRegistry.java:45)
	at org.eclipse.core.internal.plugins.PluginRegistry.shutdownPlugins
(PluginRegistry.java:277)
	at org.eclipse.core.internal.plugins.PluginRegistry.shutdown
(PluginRegistry.java:252)
	at org.eclipse.core.internal.runtime.InternalPlatform.loaderShutdown
(InternalPlatform.java:532)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.internal.boot.InternalBootLoader.shutdown
(InternalBootLoader.java:954)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:883)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at SlimLauncher.main(SlimLauncher.java:14)


*** This bug has been marked as a duplicate of 7804 ***</WithStack>
    <WithOutStack>Log: Mon Jan 21 17:15:22 CST 2002
4 org.eclipse.jdt.debug 120 Internal error logged from JDI Debug: 



*** This bug has been marked as a duplicate of 7804 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7976" />
    <CreationDate amount="2002-01-21 19:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>JDT misses the new Java files created by PDE</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>1) Start PDE Project wizard and enter 'com.example.xyz' for the project name.</Line>
          <Line>2) Go to the end of the wizard by accepting the default values and selecting</Line>
          <Line>the default plug-in content wizard (the only choice in the provided list).</Line>
          <Line>Press Finish.</Line>
          <Line>3) As a result, a project structure will be created and manifest editor will be</Line>
          <Line>opened.</Line>
          <Line>4) Try to select the plug-in class hyperlink in the first page (top-left). It</Line>
          <Line>will not work.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Scenario to reproduce:

1) Start PDE Project wizard and enter 'com.example.xyz' for the project name.
2) Go to the end of the wizard by accepting the default values and selecting 
the default plug-in content wizard (the only choice in the provided list). 
Press Finish.
3) As a result, a project structure will be created and manifest editor will be 
opened.
4) Try to select the plug-in class hyperlink in the first page (top-left). It 
will not work.

The reason it doesn't is because Java plugin cannot find the type. If you check 
the Packages view, there are no packages under 'src' folder even though it 
compiles nicely and 'bin' folder contains the class. The file exists in the 
Navigator and contains the correct package name.

However, if I switch to the Navigator, close and then open the project again, 
the Java file is recognized and the hyperlink will open the file into the Java 
editor.

This is a regression - it used to work in 1.0., but I don't know when this 
started to show up.
The fact that closing and reopening the project fixes the problem indicates a 
problem in the Java element info caching.

Moving to Java Core
Some additional info: if the package is already present, creating new Java 
files by PDE under the same package seems to work. It looks like the problem 
shows up when the source folder does not contain a package and the generated 
Java file is the first in that package.
*** Bug 7306 has been marked as a duplicate of this bug. ***
Refresh problem
Could not reproduce in 20020205 (you didn't provide the build number btw). I'm 
getting the correct delta (i.e. the package is added), and there is a package 
under the src folder.
Please re-open if you still see the problem. 
regarding the bug 7306 duped into this one: I did provide the build number, and was not convinced that Dejan's bug was the same as this one; if I see it again, I'll try to get a better description and reopen 7306.</WithStack>
    <WithOutStack>Scenario to reproduce:

1) Start PDE Project wizard and enter 'com.example.xyz' for the project name.
2) Go to the end of the wizard by accepting the default values and selecting 
the default plug-in content wizard (the only choice in the provided list). 
Press Finish.
3) As a result, a project structure will be created and manifest editor will be 
opened.
4) Try to select the plug-in class hyperlink in the first page (top-left). It 
will not work.

The reason it doesn't is because Java plugin cannot find the type. If you check 
the Packages view, there are no packages under 'src' folder even though it 
compiles nicely and 'bin' folder contains the class. The file exists in the 
Navigator and contains the correct package name.

However, if I switch to the Navigator, close and then open the project again, 
the Java file is recognized and the hyperlink will open the file into the Java 
editor.

This is a regression - it used to work in 1.0., but I don't know when this 
started to show up.
The fact that closing and reopening the project fixes the problem indicates a 
problem in the Java element info caching.

Moving to Java Core
Some additional info: if the package is already present, creating new Java 
files by PDE under the same package seems to work. It looks like the problem 
shows up when the source folder does not contain a package and the generated 
Java file is the first in that package.
*** Bug 7306 has been marked as a duplicate of this bug. ***
Refresh problem
Could not reproduce in 20020205 (you didn't provide the build number btw). I'm 
getting the correct delta (i.e. the package is added), and there is a package 
under the src folder.
Please re-open if you still see the problem. 
regarding the bug 7306 duped into this one: I did provide the build number, and was not convinced that Dejan's bug was the same as this one; if I see it again, I'll try to get a better description and reopen 7306.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7977" />
    <CreationDate amount="2002-01-21 19:37:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Search for method declarations in hierarchy doesn't work</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Build 20020115 + debug teams latest plugins.

In a selfhosting workspace I opened the hierarchy for JDIDebugElement.  I selected 
the JDIValue class.  I right clicked on the getArrayLength() method and selected
Declarations-&gt;Hierarchy.  I got no results.  When I searched with
Declarations-&gt;Workspace I get 9 matches.

Out of the 9 matches, 3/4 are int the hierarchy of JDIValue (depending on if you
count siblings as part of your class hierarchy when searching).

NOTE: It takes significantly longer to bring up the progress dialog when
searching in the hierarchy than it does to bring up the progress dialog when
searching in the workspace.
It works for me using the same setup - I get:
  org.eclipse.jdt.internal.debug.core.model.JDINullValue.getArrayLength()
  org.eclipse.jdt.internal.debug.core.model.JDIValue.getArrayLength()
  org.eclipse.jdt.internal.debug.core.model.JDIVoidValue.getArrayLength()

Is something in the log? If you can reproduce the problem in your workspace then
please make it available for us. It could be an index problem.

Can you specify "significantly" in seconds. It can take a little longer because
the hierarchy for the search operation needs to be built before the actual
search operation is started. If this takes really long and annoys you then we
might change this. Please file a separate PR for it.

does see the problem only for source or binary types. Jdt core released several 
fixes in the 20020125 build in the area of type hierarchies of binary types.
I tried this again with 20020125

The search has become much faster, but still returns no results.  Nothing is in
the log.

The selfhosting workspace I have built was made with the
org.eclipse.pde.selfhosting utilities.  I imported all of the plugins as binary
plugins and did not copy them from their location in the filesystem.  I believe
this to be crucial in reproducing this bug.


Retested again. Works for me

There were additonal errors fixed in the JDT Core indexer.
Please try again against 20020205.

FYI: Starting next integration build, search for declaration in hierarchy will
return matches in super classes.

pls reopen if you still see this problem</WithStack>
    <WithOutStack>Build 20020115 + debug teams latest plugins.

In a selfhosting workspace I opened the hierarchy for JDIDebugElement.  I selected 
the JDIValue class.  I right clicked on the getArrayLength() method and selected
Declarations-&gt;Hierarchy.  I got no results.  When I searched with
Declarations-&gt;Workspace I get 9 matches.

Out of the 9 matches, 3/4 are int the hierarchy of JDIValue (depending on if you
count siblings as part of your class hierarchy when searching).

NOTE: It takes significantly longer to bring up the progress dialog when
searching in the hierarchy than it does to bring up the progress dialog when
searching in the workspace.
It works for me using the same setup - I get:
  org.eclipse.jdt.internal.debug.core.model.JDINullValue.getArrayLength()
  org.eclipse.jdt.internal.debug.core.model.JDIValue.getArrayLength()
  org.eclipse.jdt.internal.debug.core.model.JDIVoidValue.getArrayLength()

Is something in the log? If you can reproduce the problem in your workspace then
please make it available for us. It could be an index problem.

Can you specify "significantly" in seconds. It can take a little longer because
the hierarchy for the search operation needs to be built before the actual
search operation is started. If this takes really long and annoys you then we
might change this. Please file a separate PR for it.

does see the problem only for source or binary types. Jdt core released several 
fixes in the 20020125 build in the area of type hierarchies of binary types.
I tried this again with 20020125

The search has become much faster, but still returns no results.  Nothing is in
the log.

The selfhosting workspace I have built was made with the
org.eclipse.pde.selfhosting utilities.  I imported all of the plugins as binary
plugins and did not copy them from their location in the filesystem.  I believe
this to be crucial in reproducing this bug.


Retested again. Works for me

There were additonal errors fixed in the JDT Core indexer.
Please try again against 20020205.

FYI: Starting next integration build, search for declaration in hierarchy will
return matches in super classes.

pls reopen if you still see this problem</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7978" />
    <CreationDate amount="2002-01-21 19:40:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="1.0" />
    <rep_platform amount="Other" />
    <op_sys amount="Windows XP" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Shell#open() does not always bring to top</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="7">
      <source_code type="import">
        <location start="338" end="366" />
        <code>import org.eclipse.swt.SWT;</code>
      </source_code>
      <source_code type="import">
        <location start="367" end="405" />
        <code>import org.eclipse.swt.widgets.Button;</code>
      </source_code>
      <source_code type="import">
        <location start="406" end="445" />
        <code>import org.eclipse.swt.widgets.Display;</code>
      </source_code>
      <source_code type="import">
        <location start="446" end="483" />
        <code>import org.eclipse.swt.widgets.Event;</code>
      </source_code>
      <source_code type="import">
        <location start="484" end="524" />
        <code>import org.eclipse.swt.widgets.Listener;</code>
      </source_code>
      <source_code type="import">
        <location start="525" end="562" />
        <code>import org.eclipse.swt.widgets.Shell;</code>
      </source_code>
      <source_code type="class">
        <location start="564" end="1428" />
        <code>public class BringToTopTest {

	public static void main(String[] args) {
		
		final Shell s1 = new Shell();
		final Shell s2 = new Shell(s1.getDisplay());
		
		s1.setText("First one");
		s2.setText("#2");
		
		Button bring2ToTop = new Button(s1,SWT.PUSH);
		bring2ToTop.setText("Switch");
		bring2ToTop.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event e) {
				s1.setVisible(false);
				s2.open();
			}
		});


		Button bring1ToTop = new Button(s2,SWT.PUSH);
		bring1ToTop.setText("Switch");
		bring1ToTop.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event e) {
				s2.setVisible(false);
				s1.open();
			}
		});
		
		bring1ToTop.pack();
		bring2ToTop.pack();
		
		s1.open();
		
		Display d = s1.getDisplay();
		while (!s1.isDisposed()) {
			if (!d.readAndDispatch())
				d.sleep();
		}
		d.dispose();
		
	}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="3">
        <Lines>
          <Line>a. Shell#1 opens</Line>
          <Line>b. When you press the "switch" button, it closes #1, opens shell#2 and brings</Line>
          <Line>it to the front.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Try the snippet below on. The expected behaviour is:
a. Shell#1 opens
b. When you press the "switch" button, it closes #1, opens shell#2 and brings 
it to the front.

This is what happens on WinNT. On the SWT build (2021) for PocketPC, however, 
shell#2 is opened but not brought to the top (I have to go into the Task list 
to find it).

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

public class BringToTopTest {

	public static void main(String[] args) {
		
		final Shell s1 = new Shell();
		final Shell s2 = new Shell(s1.getDisplay());
		
		s1.setText("First one");
		s2.setText("#2");
		
		Button bring2ToTop = new Button(s1,SWT.PUSH);
		bring2ToTop.setText("Switch");
		bring2ToTop.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event e) {
				s1.setVisible(false);
				s2.open();
			}
		});


		Button bring1ToTop = new Button(s2,SWT.PUSH);
		bring1ToTop.setText("Switch");
		bring1ToTop.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event e) {
				s2.setVisible(false);
				s1.open();
			}
		});
		
		bring1ToTop.pack();
		bring2ToTop.pack();
		
		s1.open();
		
		Display d = s1.getDisplay();
		while (!s1.isDisposed()) {
			if (!d.readAndDispatch())
				d.sleep();
		}
		d.dispose();
		
	}
}
There seem to be a significant number of issues w.r.t. window ordering on 
WinCE. Each time one comes up, we have to fight the "correct platform 
behavior" versus "reasonable user expectations" argument...

In this case, since we asked people to use open() since the claim was that 
this would bring the window to the front, we need to ensure that this happens 
in all cases on WinCE.

Similar cause and fix as described in PR7458 (see comments section)
Thanks for the test case - which would have been really helpful in identifying 
the root cause of PR7458.</WithStack>
    <WithOutStack>Try the snippet below on. The expected behaviour is:
a. Shell#1 opens
b. When you press the "switch" button, it closes #1, opens shell#2 and brings 
it to the front.

This is what happens on WinNT. On the SWT build (2021) for PocketPC, however, 
shell#2 is opened but not brought to the top (I have to go into the Task list 
to find it).

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

public class BringToTopTest {

	public static void main(String[] args) {
		
		final Shell s1 = new Shell();
		final Shell s2 = new Shell(s1.getDisplay());
		
		s1.setText("First one");
		s2.setText("#2");
		
		Button bring2ToTop = new Button(s1,SWT.PUSH);
		bring2ToTop.setText("Switch");
		bring2ToTop.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event e) {
				s1.setVisible(false);
				s2.open();
			}
		});


		Button bring1ToTop = new Button(s2,SWT.PUSH);
		bring1ToTop.setText("Switch");
		bring1ToTop.addListener(SWT.Selection, new Listener() {
			public void handleEvent(Event e) {
				s2.setVisible(false);
				s1.open();
			}
		});
		
		bring1ToTop.pack();
		bring2ToTop.pack();
		
		s1.open();
		
		Display d = s1.getDisplay();
		while (!s1.isDisposed()) {
			if (!d.readAndDispatch())
				d.sleep();
		}
		d.dispose();
		
	}
}
There seem to be a significant number of issues w.r.t. window ordering on 
WinCE. Each time one comes up, we have to fight the "correct platform 
behavior" versus "reasonable user expectations" argument...

In this case, since we asked people to use open() since the claim was that 
this would bring the window to the front, we need to ensure that this happens 
in all cases on WinCE.

Similar cause and fix as described in PR7458 (see comments section)
Thanks for the test case - which would have been really helpful in identifying 
the root cause of PR7458.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7979" />
    <CreationDate amount="2002-01-21 20:03:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="1.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="major" />
    <Summery>Combo's getText() does not return previous setText() setting on Italian Win2K</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="17">
      <source_code type="functiondef">
        <location start="920" end="1351" />
        <code>public static void main (String [] args) {
	Display display = new Display ();
	Shell shell = new Shell (display);
	Combo combo = new Combo (shell, SWT.READ_ONLY);
	combo.setItems (new String [] {"A", "B", "C", "D"});
	combo.setText ("B");
	combo.pack ();
	shell.open ();
	System.out.println ("Text=" + combo.getText ());
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
	display.dispose ();
}</code>
      </source_code>
      <source_code type="import">
        <location start="1901" end="1941" />
        <code>import org.eclipse.swt.widgets.Display;</code>
      </source_code>
      <source_code type="import">
        <location start="1942" end="1979" />
        <code>import org.eclipse.swt.widgets.Shell;</code>
      </source_code>
      <source_code type="import">
        <location start="1980" end="2017" />
        <code>import org.eclipse.swt.widgets.Combo;</code>
      </source_code>
      <source_code type="import">
        <location start="2018" end="2045" />
        <code>import org.eclipse.swt.SWT;</code>
      </source_code>
      <source_code type="class">
        <location start="2047" end="2071" />
        <code>public class TestClass
{</code>
      </source_code>
      <source_code type="assignment">
        <location start="2117" end="2153" />
        <code>Display display = new Display();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2154" end="2191" />
        <code>Shell shell = new Shell(display);</code>
      </source_code>
      <source_code type="assignment">
        <location start="2192" end="2241" />
        <code>Combo combo = new Combo(shell,SWT.READ_ONLY);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2242" end="2278" />
        <code>System.out.println(combo.LIMIT);</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2435" end="2479" />
        <code>combo.setText("Servizio Web bean Java");</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2480" end="2520" />
        <code>System.out.println(combo.getText());</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2521" end="2538" />
        <code>combo.pack();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2539" end="2556" />
        <code>shell.open();</code>
      </source_code>
      <source_code type="assignment">
        <location start="2557" end="2609" />
        <code>System.out.println("Text = " + combo.getText());</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2685" end="2709" />
        <code>display.sleep();</code>
      </source_code>
      <source_code type="functioncall">
        <location start="2716" end="2738" />
        <code>display.dispose();</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>In an Italian Win2K system, WSAD's web services tool fills a Combo object with 
values and then calls the setText() method with a string which is in the list.
Immediately afterwards, we call the getText() method expecting to get back the 
string which we had just set. However, we get something different.

So far, we've only seen this on an Italian Win2K system.
Please clarify what "Something different" means. Ideally provide a test case 
including an example string and the resulting changed output. Also see the 
discussion in bug report 7709 to see if this is applicable.

"Something different":

For example, we populate the Combo with items A, B, C and D. we then call the 
Combo's setText("B"). Immediately afterwards, we call the Combo's getText() and 
the return value is "C". I will try to put together a testcase.
Here is some code that shows this working on English Windows.  Can you try it 
on Italian?


public static void main (String [] args) {
	Display display = new Display ();
	Shell shell = new Shell (display);
	Combo combo = new Combo (shell, SWT.READ_ONLY);
	combo.setItems (new String [] {"A", "B", "C", "D"});
	combo.setText ("B");
	combo.pack ();
	shell.open ();
	System.out.println ("Text=" + combo.getText ());
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
	display.dispose ();
}

Steve,

The test program you appended works in both Italian and English Win2K. I don't 
know if the fact that our Combo runs in the context of a Wizard may have any 
effect but I'm continuing to reduce it to a small, reproduceable test case.

Thanks for your help so far.

Regards,
Yen Lu
We've narrowed this down. Our guess is that the implementation of the setText() 
method only compares a certain number of characters before declaring a match. 
There were two strings in our list with the first four words being the same. 
Here's the testcase:

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.SWT;

public class TestClass
{
  public static void main(String args[])
  {
    Display display = new Display();
    Shell shell = new Shell(display);
    Combo combo = new Combo(shell,SWT.READ_ONLY);
    System.out.println(combo.LIMIT);
    combo.setItems(new String[]{"Servizio Web URL","EJB Web service","Servizio 
Web bean Java di struttura","Servizio Web bean Java","Servizio Web DADX"});
    combo.setText("Servizio Web bean Java");
    System.out.println(combo.getText());
    combo.pack();
    shell.open();
    System.out.println("Text = " + combo.getText());
    while (!shell.isDisposed())
    {
      if (display.readAndDispatch())
        display.sleep();
    }
    display.dispose();
  }

The output from this program is on Windows 2000 (both English and Italian) is:

2147483647
Servizio Web bean Java di struttura
Text = Servizio Web bean Java di struttura

As you can see, the string we actually got is a superset of the string we set 
the Combo to. This in addition to the fact that the superset string appears 
first in the list suggests to me that only a partial comparison is being 
performed.

The code printing the Combo.LIMIT suggests to me that the strings should be 
small enough to make a sufficiently good comparison and not require any partial 
comparisons.
Fixed &gt; 20020122.</WithStack>
    <WithOutStack>In an Italian Win2K system, WSAD's web services tool fills a Combo object with 
values and then calls the setText() method with a string which is in the list.
Immediately afterwards, we call the getText() method expecting to get back the 
string which we had just set. However, we get something different.

So far, we've only seen this on an Italian Win2K system.
Please clarify what "Something different" means. Ideally provide a test case 
including an example string and the resulting changed output. Also see the 
discussion in bug report 7709 to see if this is applicable.

"Something different":

For example, we populate the Combo with items A, B, C and D. we then call the 
Combo's setText("B"). Immediately afterwards, we call the Combo's getText() and 
the return value is "C". I will try to put together a testcase.
Here is some code that shows this working on English Windows.  Can you try it 
on Italian?


public static void main (String [] args) {
	Display display = new Display ();
	Shell shell = new Shell (display);
	Combo combo = new Combo (shell, SWT.READ_ONLY);
	combo.setItems (new String [] {"A", "B", "C", "D"});
	combo.setText ("B");
	combo.pack ();
	shell.open ();
	System.out.println ("Text=" + combo.getText ());
	while (!shell.isDisposed ()) {
		if (!display.readAndDispatch ()) display.sleep ();
	}
	display.dispose ();
}

Steve,

The test program you appended works in both Italian and English Win2K. I don't 
know if the fact that our Combo runs in the context of a Wizard may have any 
effect but I'm continuing to reduce it to a small, reproduceable test case.

Thanks for your help so far.

Regards,
Yen Lu
We've narrowed this down. Our guess is that the implementation of the setText() 
method only compares a certain number of characters before declaring a match. 
There were two strings in our list with the first four words being the same. 
Here's the testcase:

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.SWT;

public class TestClass
{
  public static void main(String args[])
  {
    Display display = new Display();
    Shell shell = new Shell(display);
    Combo combo = new Combo(shell,SWT.READ_ONLY);
    System.out.println(combo.LIMIT);
    combo.setItems(new String[]{"Servizio Web URL","EJB Web service","Servizio 
Web bean Java di struttura","Servizio Web bean Java","Servizio Web DADX"});
    combo.setText("Servizio Web bean Java");
    System.out.println(combo.getText());
    combo.pack();
    shell.open();
    System.out.println("Text = " + combo.getText());
    while (!shell.isDisposed())
    {
      if (display.readAndDispatch())
        display.sleep();
    }
    display.dispose();
  }

The output from this program is on Windows 2000 (both English and Italian) is:

2147483647
Servizio Web bean Java di struttura
Text = Servizio Web bean Java di struttura

As you can see, the string we actually got is a superset of the string we set 
the Combo to. This in addition to the fact that the superset string appears 
first in the list suggests to me that only a partial comparison is being 
performed.

The code printing the Combo.LIMIT suggests to me that the strings should be 
small enough to make a sufficiently good comparison and not require any partial 
comparisons.
Fixed &gt; 20020122.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7980" />
    <CreationDate amount="2002-01-21 21:00:00 -0500" />
    <DupId amount="7966" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Create new class wizard has problems with comments</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="4">
      <source_code type="multicomment">
        <location start="63" end="172" />
        <code>/*

import org.eclipse.jface.dialogs.Dialog;
 * (c) Copyright 2001 MyCorporation.
 * All Rights Reserved.
 */</code>
      </source_code>
      <source_code type="package">
        <location start="173" end="215" />
        <code>package org.eclipse.team.internal.ccvs.ui;</code>
      </source_code>
      <source_code type="multicomment">
        <location start="216" end="252" />
        <code>/**
 * @version 	1.0
 * @author
 */</code>
      </source_code>
      <source_code type="class">
        <location start="253" end="298" />
        <code>public class BranchDialog extends Dialog {

}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>The following class was created with the class wizard.
--begin
/*

import org.eclipse.jface.dialogs.Dialog;
 * (c) Copyright 2001 MyCorporation.
 * All Rights Reserved.
 */
package org.eclipse.team.internal.ccvs.ui;

/**
 * @version 	1.0
 * @author
 */
public class BranchDialog extends Dialog {

}
--end


*** This bug has been marked as a duplicate of 7966 ***</WithStack>
    <WithOutStack>The following class was created with the class wizard.
--begin
/*

import org.eclipse.jface.dialogs.Dialog;
 * (c) Copyright 2001 MyCorporation.
 * All Rights Reserved.
 */
package org.eclipse.team.internal.ccvs.ui;

/**
 * @version 	1.0
 * @author
 */
public class BranchDialog extends Dialog {

}
--end


*** This bug has been marked as a duplicate of 7966 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7981" />
    <CreationDate amount="2002-01-21 21:39:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="Other" />
    <op_sys amount="Linux-Motif" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Window position not saved properly on Linux</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>From newsgroup post "position of the eclipse-window" by Martin Wronna 
&lt;Tokei.Ihto@gmx.net&gt;:

I use the Linux-Motif-Version from 19.12.2001.
In they version, eclipse save the position of they window on the 
desktop incorrect.
Its not possible to set the window on the right end of the desktop, its 
every a minimum of 4 pixel space.
And after every close of eclipse, its change the position-numbers in 
.metadata/.plugins/org.eclipse.ui/workbench.xml
Some window managers do not allow the position of a new window to be explicitly 
set.
Which window manager are you using? 

Window Manager ?You mean my KDE 2.2.2 from SuSE 7.3 !?If i write with a editor the height, width, x and y -Parameter, the Eclipse-Window open on the correct position, but eclips overwrite they at close.He add:  y + 20, x + 1, width + 2, height - 1A option in eclipse, they makeing off the feature "save current position" would help.
Can you look into this and report back with your findings...
In Linux, when you close Eclipse (when it is not maximized), the data 
in .metadata/.plugins/org.eclipse.ui/workbench.xml which stores the screen 
position of the Eclipse window is changed. The height is reduced by 1, the 
width increased by 6, the x co-ordinate increased by 6, and the y co-ordinate 
is increased by 22. When Eclipse is opened next, it appears at these new co-
ordinates rather than where it was when it was closed.
Problem has been fixed by SWT team (see bug 8837) as of build 20020501.</WithStack>
    <WithOutStack>From newsgroup post "position of the eclipse-window" by Martin Wronna 
&lt;Tokei.Ihto@gmx.net&gt;:

I use the Linux-Motif-Version from 19.12.2001.
In they version, eclipse save the position of they window on the 
desktop incorrect.
Its not possible to set the window on the right end of the desktop, its 
every a minimum of 4 pixel space.
And after every close of eclipse, its change the position-numbers in 
.metadata/.plugins/org.eclipse.ui/workbench.xml
Some window managers do not allow the position of a new window to be explicitly 
set.
Which window manager are you using? 

Window Manager ?You mean my KDE 2.2.2 from SuSE 7.3 !?If i write with a editor the height, width, x and y -Parameter, the Eclipse-Window open on the correct position, but eclips overwrite they at close.He add:  y + 20, x + 1, width + 2, height - 1A option in eclipse, they makeing off the feature "save current position" would help.
Can you look into this and report back with your findings...
In Linux, when you close Eclipse (when it is not maximized), the data 
in .metadata/.plugins/org.eclipse.ui/workbench.xml which stores the screen 
position of the Eclipse window is changed. The height is reduced by 1, the 
width increased by 6, the x co-ordinate increased by 6, and the y co-ordinate 
is increased by 22. When Eclipse is opened next, it appears at these new co-
ordinates rather than where it was when it was closed.
Problem has been fixed by SWT team (see bug 8837) as of build 20020501.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7982" />
    <CreationDate amount="2002-01-21 22:14:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="Other" />
    <op_sys amount="other" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Initial fast view size is suboptimal</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>Build 20020115

When a new fast view is opened, e.g. when doing a sync for the first time, it 
has a very narrow width.  While this may be OK for some views like the Outline 
or Properties views, it is really poor for wide views like the task list and 
sync views.

It would be nice if we could somehow compute the preferred width, e.g. using 
SWT's computeSize, and limiting it to the available width (or a bit less).

Alternatively, views themselves could specify their preferred dimensions,either 
programmatically or in the plugin.xml.
Having preferred dimensions could help in determining the best place to dock a 
view.  E.g. if it's wide but not too high, group it with the Tasks view.
If it's not too wide but high, group it with the Navigator or Packages view.
Or, allow views to specify their preferred group-mates.
Developers can now specify a fast view ratio when declaring their views in XML.</WithStack>
    <WithOutStack>Build 20020115

When a new fast view is opened, e.g. when doing a sync for the first time, it 
has a very narrow width.  While this may be OK for some views like the Outline 
or Properties views, it is really poor for wide views like the task list and 
sync views.

It would be nice if we could somehow compute the preferred width, e.g. using 
SWT's computeSize, and limiting it to the available width (or a bit less).

Alternatively, views themselves could specify their preferred dimensions,either 
programmatically or in the plugin.xml.
Having preferred dimensions could help in determining the best place to dock a 
view.  E.g. if it's wide but not too high, group it with the Tasks view.
If it's not too wide but high, group it with the Navigator or Packages view.
Or, allow views to specify their preferred group-mates.
Developers can now specify a fast view ratio when declaring their views in XML.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7983" />
    <CreationDate amount="2002-01-21 22:42:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P4" />
    <bug_severity amount="enhancement" />
    <Summery>[CVS Repo View] Should be able to 'admin' the file types in the repo view</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>1) delete the project locally</Line>
          <Line>2) "admin" the file in the repo view</Line>
          <Line>4) check the project out again.</Line>
          <Line>Currently, the user must revert to using the CLI for step 2</Line>
          <Line>This bug has not been touched for 2 years. Closing as WONTFIX. Please reopen if</Line>
          <Line>you feel this is still an important issue.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>We should be able to change the binary/text attributes of files in the 
repository.
You can do it from workbench projects now.

Supporting in repo view on non-loaded projects is cool, but what we have now 
seems sufficient for now.

Moving post 2.0
Reopening
This would be expecially helpful in cases where the performing the 'Change 
ASCII/Buinary property" action is inappropriate. For instane, if a jar was 
committed from a Linux machine as text and checked out using Eclispe (either 
windows or Linux) there is a good chance it would become corrupt. The best 
solution would be to perform the following steps:
1) delete the project locally
2) "admin" the file in the repo view
4) check the project out again. 
Currently, the user must revert to using the CLI for step 2
This bug has not been touched for 2 years. Closing as WONTFIX. Please reopen if 
you feel this is still an important issue.</WithStack>
    <WithOutStack>We should be able to change the binary/text attributes of files in the 
repository.
You can do it from workbench projects now.

Supporting in repo view on non-loaded projects is cool, but what we have now 
seems sufficient for now.

Moving post 2.0
Reopening
This would be expecially helpful in cases where the performing the 'Change 
ASCII/Buinary property" action is inappropriate. For instane, if a jar was 
committed from a Linux machine as text and checked out using Eclispe (either 
windows or Linux) there is a good chance it would become corrupt. The best 
solution would be to perform the following steps:
1) delete the project locally
2) "admin" the file in the repo view
4) check the project out again. 
Currently, the user must revert to using the CLI for step 2
This bug has not been touched for 2 years. Closing as WONTFIX. Please reopen if 
you feel this is still an important issue.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7984" />
    <CreationDate amount="2002-01-22 03:48:00 -0500" />
    <DupId amount="16023" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows NT" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Parent of modal window not brought to front</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="5">
        <Lines>
          <Line>1. Start a long operation (e.g. have Eclipse in your workspace and do a full build)</Line>
          <Line>2. Switch to another application (e.g. Netscape)</Line>
          <Line>3. Switch back to Eclipse</Line>
          <Line>==&gt; The modal dialog is brought to top BUT the workbench stays behind the other</Line>
          <Line>application. This is confusing and not Windows-like behavior.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Build I20020115

1. Start a long operation (e.g. have Eclipse in your workspace and do a full build)
2. Switch to another application (e.g. Netscape)
3. Switch back to Eclipse
==&gt; The modal dialog is brought to top BUT the workbench stays behind the other
application. This is confusing and not Windows-like behavior.

Same happens on Windows2000
Is this possible with SWT? Pls advise. An example showing what needs to be done 
would be great. 
Actually, it *is* windows behavior, since we are not doing something to 
explicitely prevent the window from coming forward. We will investigate.
I looked at this quickly and tried Wordpad to see if it had different 
behavior.  I wasn't sure we had to do something special to get this to happen 
but I will investigate.
Suspect this is the same as 16023.

*** This bug has been marked as a duplicate of 16023 ***</WithStack>
    <WithOutStack>Build I20020115

1. Start a long operation (e.g. have Eclipse in your workspace and do a full build)
2. Switch to another application (e.g. Netscape)
3. Switch back to Eclipse
==&gt; The modal dialog is brought to top BUT the workbench stays behind the other
application. This is confusing and not Windows-like behavior.

Same happens on Windows2000
Is this possible with SWT? Pls advise. An example showing what needs to be done 
would be great. 
Actually, it *is* windows behavior, since we are not doing something to 
explicitely prevent the window from coming forward. We will investigate.
I looked at this quickly and tried Wordpad to see if it had different 
behavior.  I wasn't sure we had to do something special to get this to happen 
but I will investigate.
Suspect this is the same as 16023.

*** This bug has been marked as a duplicate of 16023 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7985" />
    <CreationDate amount="2002-01-22 05:26:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>extract method: cannot extract (entire) try/catch block</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="class">
        <location start="0" end="130" />
        <code>public class A{
	String f(int y, int z, boolean ff){
		/*[*/try{
		} catch (Exception e){
		}/*]*/
		return null;
	}
	void f(){}
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>public class A{
	String f(int y, int z, boolean ff){
		/*[*/try{
		} catch (Exception e){
		}/*]*/
		return null;
	}
	void f(){}
}

cannot extract the selected fragment
JCore changed some positions in the AST due to a bug report we filed. I removed 
our workarounds.

Fixed in build &gt; iX-20020115
Verified.</WithStack>
    <WithOutStack>public class A{
	String f(int y, int z, boolean ff){
		/*[*/try{
		} catch (Exception e){
		}/*]*/
		return null;
	}
	void f(){}
}

cannot extract the selected fragment
JCore changed some positions in the AST due to a bug report we filed. I removed 
our workarounds.

Fixed in build &gt; iX-20020115
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7986" />
    <CreationDate amount="2002-01-22 05:54:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>text change infra: can't handle swap + replace</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functiondef">
        <location start="32" end="435" />
        <code>public void testSwapAndReplace() throws Exception {
		SwapTextEdit e1= new SwapTextEdit(1, 3, 5, 3);
		SimpleTextEdit e2= SimpleTextEdit.createReplace(6, 1, "ab");
		fEditor.add(e1);
		fEditor.add(e2);
		assertTrue("Can perform edits", fEditor.canPerformEdits());
		UndoMemento undo= fEditor.performEdits(null);
		assertEquals("Buffer content", "05ab7412389", fBuffer.getContent
());
		doUndo(undo);
	}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>the following tests case fails:
	public void testSwapAndReplace() throws Exception {
		SwapTextEdit e1= new SwapTextEdit(1, 3, 5, 3);
		SimpleTextEdit e2= SimpleTextEdit.createReplace(6, 1, "ab");
		fEditor.add(e1);
		fEditor.add(e2);
		assertTrue("Can perform edits", fEditor.canPerformEdits());
		UndoMemento undo= fEditor.performEdits(null);
		assertEquals("Buffer content", "05ab7412389", fBuffer.getContent
());
		doUndo(undo);
	}

the buffer is 0ab74123589
Fixed in build &gt; iX-20020115</WithStack>
    <WithOutStack>the following tests case fails:
	public void testSwapAndReplace() throws Exception {
		SwapTextEdit e1= new SwapTextEdit(1, 3, 5, 3);
		SimpleTextEdit e2= SimpleTextEdit.createReplace(6, 1, "ab");
		fEditor.add(e1);
		fEditor.add(e2);
		assertTrue("Can perform edits", fEditor.canPerformEdits());
		UndoMemento undo= fEditor.performEdits(null);
		assertEquals("Buffer content", "05ab7412389", fBuffer.getContent
());
		doUndo(undo);
	}

the buffer is 0ab74123589
Fixed in build &gt; iX-20020115</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7987" />
    <CreationDate amount="2002-01-22 06:10:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Field reference search should do lookup in 1.4 mode</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="2">
      <source_code type="class">
        <location start="85" end="112" />
        <code>public class A {
  int x;
}</code>
      </source_code>
      <source_code type="class">
        <location start="114" end="175" />
        <code>public class B extends A {
  void foo() {
    this.x++;
  }
}</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="1">
      <Enumeration lines="8">
        <Lines>
          <Line>- the match locator does a lookup as it is done for method references</Line>
          <Line>- the original binding is stored on the field ref and the match locator uses</Line>
          <Line>this original binding</Line>
          <Line>This should not be necessary, I will keep the old binding as is, and rather</Line>
          <Line>introduce a distinct slot to hold onto the codegen binding.</Line>
          <Line>Jerome, can you please double check that the search behaves ok in 1.4 mode</Line>
          <Line>(will need to manually toggle the compiler option since no UI for it yet - the</Line>
          <Line>option is "Compliance" which you'll need to set to "1.4" by default).</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="INVALID" />
    <WithStack>In 1.4 mode, the following test case will fail when searching to reference to 
A.x:

public class A {
  int x;
}

public class B extends A {
  void foo() {
    this.x++;
  }
}

In this case, the declaring class of the field refence binding will be B, and 
the match locator will not find the reference because it looks for A exactly.
2 solutions to this problem:
- the match locator does a lookup as it is done for method references
- the original binding is stored on the field ref and the match locator uses 
this original binding
This should not be necessary, I will keep the old binding as is, and rather 
introduce a distinct slot to hold onto the codegen binding.
Jerome, can you please double check that the search behaves ok in 1.4 mode 
(will need to manually toggle the compiler option since no UI for it yet - the 
option is "Compliance" which you'll need to set to "1.4" by default).


Search behaves ok in 1.4 mode, but in the above test case, the codegen binding 
has class A as the declaring class. Shouldn't it rather be B? (see 
JavaSearchTests.testFieldReference5())
Codegen binding is set only during code gen!
Closing.</WithStack>
    <WithOutStack>In 1.4 mode, the following test case will fail when searching to reference to 
A.x:

public class A {
  int x;
}

public class B extends A {
  void foo() {
    this.x++;
  }
}

In this case, the declaring class of the field refence binding will be B, and 
the match locator will not find the reference because it looks for A exactly.
2 solutions to this problem:
- the match locator does a lookup as it is done for method references
- the original binding is stored on the field ref and the match locator uses 
this original binding
This should not be necessary, I will keep the old binding as is, and rather 
introduce a distinct slot to hold onto the codegen binding.
Jerome, can you please double check that the search behaves ok in 1.4 mode 
(will need to manually toggle the compiler option since no UI for it yet - the 
option is "Compliance" which you'll need to set to "1.4" by default).


Search behaves ok in 1.4 mode, but in the above test case, the codegen binding 
has class A as the declaring class. Shouldn't it rather be B? (see 
JavaSearchTests.testFieldReference5())
Codegen binding is set only during code gen!
Closing.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7988" />
    <CreationDate amount="2002-01-22 08:01:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="SWT" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Linux" />
    <priority amount="P4" />
    <bug_severity amount="normal" />
    <Summery>Mouse Focus Bug with Motif on Linux when using multiple X Screens</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>With Eclipse Build 20011219 on Motif/X11 under KDE using dual screen support.

With eclispe on Screen 0 and another app on screen 1. If the focus is on screen 1
if you click on an editor window and start typing the focus does not change to
eclise. The mouse focus does change and text can be selected, however the
keyboard focus remains with the application on screen 1. Clicking on an Eclise
item other than the edit area (such as menus, scroll bars, icons and buttons)
changes the keyboard focus to Eclise and it then operates correctly.
Could be a bug in motif. GG to test.
post-2.0 bug review note: cannot reproduce here with dual head

Cannot reproduce in the 3.0 stream, so closing.  If this still happens for you 
then please reopen this report with more details (eg.- linux distro, the screen 
1 app, etc.)</WithStack>
    <WithOutStack>With Eclipse Build 20011219 on Motif/X11 under KDE using dual screen support.

With eclispe on Screen 0 and another app on screen 1. If the focus is on screen 1
if you click on an editor window and start typing the focus does not change to
eclise. The mouse focus does change and text can be selected, however the
keyboard focus remains with the application on screen 1. Clicking on an Eclise
item other than the edit area (such as menus, scroll bars, icons and buttons)
changes the keyboard focus to Eclise and it then operates correctly.
Could be a bug in motif. GG to test.
post-2.0 bug review note: cannot reproduce here with dual head

Cannot reproduce in the 3.0 stream, so closing.  If this still happens for you 
then please reopen this report with more details (eg.- linux distro, the screen 
1 app, etc.)</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7989" />
    <CreationDate amount="2002-01-22 08:52:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Team" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Add global ignores - CVS Ignores</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>It appears that the .cvsignore matching isn't working properly. Also, in 1.0 
there was a global ignore for *.class files. This should be ported to 2.0 and 
used.

From news group:

i have a .cvsignore file with there in one line:
*.class

Is this good?

Because Eclipse still sees class files as outgoing changes
i have the blue arrow on almost all my directory's there where
i don't have anything changed. This is because it sees class files
as outgoing changes (this is a project that doesn't use src/bin folders)

And it also sees test files as normal out going changes and i mean
with test files, files that are not added to cvs but are in the directory
i would love to have those 2 different:

1&gt; outgoing blue arrow in this folder are modified cvs files
2&gt; outgoing XX arrow in this folder are NOT ignored files that are not in CVS.

and if both is the case you can use one arrow that has both colors in it?

Johan
.cvsignore is working fine, but what John was expecting was that by adding one 
.cvsignore file all *.class files would be ignored in the project's hierarchy. 
It doesn't work that way.
oeppss sorry 
Yes i don't know to much about how CVS works because i have used VAJ 
repository since 1997.
But make this feature a request that i can globally say no not these kind of 
files everywhere. I really don't want to place a .cvsignore in all my packages 
because that is a lot of copying around.

Global ignore facility has been released, this will be in tomorrow's 
integration build and (if all goes well) M3.</WithStack>
    <WithOutStack>It appears that the .cvsignore matching isn't working properly. Also, in 1.0 
there was a global ignore for *.class files. This should be ported to 2.0 and 
used.

From news group:

i have a .cvsignore file with there in one line:
*.class

Is this good?

Because Eclipse still sees class files as outgoing changes
i have the blue arrow on almost all my directory's there where
i don't have anything changed. This is because it sees class files
as outgoing changes (this is a project that doesn't use src/bin folders)

And it also sees test files as normal out going changes and i mean
with test files, files that are not added to cvs but are in the directory
i would love to have those 2 different:

1&gt; outgoing blue arrow in this folder are modified cvs files
2&gt; outgoing XX arrow in this folder are NOT ignored files that are not in CVS.

and if both is the case you can use one arrow that has both colors in it?

Johan
.cvsignore is working fine, but what John was expecting was that by adding one 
.cvsignore file all *.class files would be ignored in the project's hierarchy. 
It doesn't work that way.
oeppss sorry 
Yes i don't know to much about how CVS works because i have used VAJ 
repository since 1997.
But make this feature a request that i can globally say no not these kind of 
files everywhere. I really don't want to place a .cvsignore in all my packages 
because that is a lot of copying around.

Global ignore facility has been released, this will be in tomorrow's 
integration build and (if all goes well) M3.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7990" />
    <CreationDate amount="2002-01-22 09:03:00 -0500" />
    <DupId amount="11827" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="Other" />
    <op_sys amount="other" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Editor preference page needs validation</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>The Java editor preference page Workbench-&gt;Preferences-&gt;Java-&gt;Editor does not
currently validate its text field input to the user.

For example, type "aa" into the "Displayed tab width:" field. The preference
page title should update when invalid input is entered, informing the user of
the field constraints (ex. "Value must be an integer greater than 0") and the
page should be disabled (the user should not be able to click OK or APPLY).
Currently, users are able to enter illegal values and click OK or APPLY.

Other Java preference pages should be checked for this same problem.


*** This bug has been marked as a duplicate of 11827 ***</WithStack>
    <WithOutStack>The Java editor preference page Workbench-&gt;Preferences-&gt;Java-&gt;Editor does not
currently validate its text field input to the user.

For example, type "aa" into the "Displayed tab width:" field. The preference
page title should update when invalid input is entered, informing the user of
the field constraints (ex. "Value must be an integer greater than 0") and the
page should be disabled (the user should not be able to click OK or APPLY).
Currently, users are able to enter illegal values and click OK or APPLY.

Other Java preference pages should be checked for this same problem.


*** This bug has been marked as a duplicate of 11827 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7991" />
    <CreationDate amount="2002-01-22 09:07:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="1.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="enhancement" />
    <Summery>open a window with the method [misc]</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>In Visual Age, when you double click on the name of a method, it opens the 
method in a new window. Then you can open as many methods as you need and work 
on them simultanely. It would be very useful to have that functionnality in 
Eclipse. Thanks. Th.
agreed that this is currently not possible and has lower priority to us.
Deferring for  now.
There are no plans to address this for 3.0 unless we get external help.</WithStack>
    <WithOutStack>In Visual Age, when you double click on the name of a method, it opens the 
method in a new window. Then you can open as many methods as you need and work 
on them simultanely. It would be very useful to have that functionnality in 
Eclipse. Thanks. Th.
agreed that this is currently not possible and has lower priority to us.
Deferring for  now.
There are no plans to address this for 3.0 unless we get external help.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7992" />
    <CreationDate amount="2002-01-22 09:27:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>extract method: NPE (file with compile errors)</Summery>
    <Patches amount="0" />
    <Stacktraces amount="1">
      <Stacktrace timestamp="1437341208508">
        <Exception>java.lang.NullPointerException</Exception>
        <Reason />
        <Frames>
          <Frame depth="0">org.eclipse.jdt.internal.compiler.lookup.Scope.getBaseType(Scope.java(Compiled Code))</Frame>
          <Frame depth="1">org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java(Compiled Code))</Frame>
          <Frame depth="2">org.eclipse.jdt.internal.corext.refactoring.util.NewSelectionAnalyzer.trackExpressionTypeBinding(NewSelectionAnalyzer.java:339)</Frame>
          <Frame depth="3">org.eclipse.jdt.internal.corext.refactoring.util.NewSelectionAnalyzer.visit(NewSelectionAnalyzer.java:368)</Frame>
          <Frame depth="4">org.eclipse.jdt.internal.corext.refactoring.util.ASTParentTrackingAdapter.visit(ASTParentTrackingAdapter.java:425)</Frame>
          <Frame depth="5">org.eclipse.jdt.internal.compiler.ast.AllocationExpression.traverse(AllocationExpression.java:187)</Frame>
          <Frame depth="6">org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:175)</Frame>
          <Frame depth="7">org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java(Compiled Code))</Frame>
          <Frame depth="8">org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:851)</Frame>
          <Frame depth="9">org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:228)</Frame>
          <Frame depth="10">org.eclipse.jdt.internal.core.CompilationUnitVisitor.visit(CompilationUnitVisitor.java:140)</Frame>
          <Frame depth="11">org.eclipse.jdt.internal.core.CompilationUnit.accept(CompilationUnit.java:59)</Frame>
          <Frame depth="12">org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring.checkActivation(ExtractMethodRefactoring.java:166)</Frame>
          <Frame depth="13">org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate(RefactoringStarter.java:79)</Frame>
          <Frame depth="14">org.eclipse.jdt.internal.ui.refactoring.actions.TextSelectionBasedRefactoringAction.run(TextSelectionBasedRefactoringAction.java:28)</Frame>
          <Frame depth="15">org.eclipse.jdt.internal.ui.refactoring.actions.TextSelectionAction.run(TextSelectionAction.java:80)</Frame>
          <Frame depth="16">org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:204)</Frame>
          <Frame depth="17">org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:407)</Frame>
          <Frame depth="18">org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="19">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="20">org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent(ActionContributionItem.java(Compiled Code))</Frame>
          <Frame depth="21">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="22">org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled Code))</Frame>
          <Frame depth="23">org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java(Compiled Code))</Frame>
          <Frame depth="24">org.eclipse.swt.widgets.Display.readAndDispatch(Display.java(Compiled Code))</Frame>
          <Frame depth="25">org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java(Compiled Code))</Frame>
          <Frame depth="26">org.eclipse.ui.internal.Workbench.run(Workbench.java:827)</Frame>
          <Frame depth="27">org.eclipse.core.internal.boot.InternalBootLoader.run(InternalBootLoader.java:878)</Frame>
          <Frame depth="28">org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)</Frame>
          <Frame depth="29">java.lang.reflect.Method.invoke(Native Method)</Frame>
          <Frame depth="30">org.eclipse.core.launcher.Main.basicRun(Main.java:151)</Frame>
          <Frame depth="31">org.eclipse.core.launcher.Main.run(Main.java:502)</Frame>
          <Frame depth="32">org.eclipse.core.launcher.Main.main(Main.java:362)</Frame>
        </Frames>
      </Stacktrace>
    </Stacktraces>
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>hard to give a small test case.
the file has compile errors
i selected an allocation expression

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getBaseType(Scope.java
(Compiled Code))
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java
(Compiled Code))
	at 
org.eclipse.jdt.internal.corext.refactoring.util.NewSelectionAnalyzer.trackExpre
ssionTypeBinding(NewSelectionAnalyzer.java:339)
	at 
org.eclipse.jdt.internal.corext.refactoring.util.NewSelectionAnalyzer.visit
(NewSelectionAnalyzer.java:368)
	at 
org.eclipse.jdt.internal.corext.refactoring.util.ASTParentTrackingAdapter.visit
(ASTParentTrackingAdapter.java:425)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.traverse
(AllocationExpression.java:187)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse
(LocalDeclaration.java:175)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse
(MethodDeclaration.java(Compiled Code))
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse
(TypeDeclaration.java:851)
	at 
org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse
(CompilationUnitDeclaration.java:228)
	at org.eclipse.jdt.internal.core.CompilationUnitVisitor.visit
(CompilationUnitVisitor.java:140)
	at org.eclipse.jdt.internal.core.CompilationUnit.accept
(CompilationUnit.java:59)
	at 
org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring.checkA
ctivation(ExtractMethodRefactoring.java:166)
	at 
org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate
(RefactoringStarter.java:79)
	at 
org.eclipse.jdt.internal.ui.refactoring.actions.TextSelectionBasedRefactoringAct
ion.run(TextSelectionBasedRefactoringAction.java:28)
	at 
org.eclipse.jdt.internal.ui.refactoring.actions.TextSelectionAction.run
(TextSelectionAction.java:80)
	at org.eclipse.ui.internal.PluginAction.runWithEvent
(PluginAction.java:204)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection
(ActionContributionItem.java:407)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetEvent
(ActionContributionItem.java(Compiled Code))
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
	at 
org.eclipse.jface.action.ActionContributionItem$ActionListener.handleEvent
(ActionContributionItem.java(Compiled Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java(Compiled 
Code))
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java
(Compiled Code))
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java
(Compiled Code))
	at org.eclipse.ui.internal.Workbench.run(Workbench.java:827)
	at org.eclipse.core.internal.boot.InternalBootLoader.run
(InternalBootLoader.java:878)
	at org.eclipse.core.boot.BootLoader.run(BootLoader.java:321)
	at java.lang.reflect.Method.invoke(Native Method)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:151)
	at org.eclipse.core.launcher.Main.run(Main.java:502)
	at org.eclipse.core.launcher.Main.main(Main.java:362)
New ExtractMethod implementation doesn't use scopes anymore.

Fixed in build &gt; 20020307</WithStack>
    <WithOutStack>hard to give a small test case.
the file has compile errors
i selected an allocation expression


New ExtractMethod implementation doesn't use scopes anymore.

Fixed in build &gt; 20020307</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7993" />
    <CreationDate amount="2002-01-22 09:28:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Core" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>NPE when creating type hierarchy</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="1">
      <source_code type="functioncall">
        <location start="5610" end="5688" />
        <code>org/eclipse/ui/internal/Workbench.run(Ljava/lang/Object;)Ljava/lang/Object;</code>
      </source_code>
    </SourceCodeRegions>
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="FIXED" />
    <WithStack>20115
1. use wizard to create create a type A implements List
the superclass name is null

java.lang.reflect.InvocationTargetException: java.lang.NullPointerException

Stack trace:
   java/lang/Throwable.&lt;init&gt;()V
   java/lang/Throwable.&lt;init&gt;(Ljava/lang/String;)V
   java/lang/NullPointerException.&lt;init&gt;(Ljava/lang/String;)V
   org/eclipse/jdt/internal/compiler/util/CharOperation.lastIndexOf(C[C)I
   org/eclipse/jdt/internal/compiler/HierarchyResolver.findSuperClass
(Lorg/eclipse/jdt/internal/compiler/env/IGenericType;Lorg/eclipse/jdt/internal/c
ompiler/lookup/ReferenceBinding;)
Lorg/eclipse/jdt/internal/compiler/env/IGenericType;
   org/eclipse/jdt/internal/compiler/HierarchyResolver.reportHierarchy()V
   org/eclipse/jdt/internal/compiler/HierarchyResolver.resolve
(Lorg/eclipse/jdt/internal/compiler/env/IGenericType;)V
   org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.buildSupertypes()V
   org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.build(Z)V
   org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.compute()V
   org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.refresh
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/jdt/internal/core/CreateTypeHierarchyOperation.executeOperation()
V
   org/eclipse/jdt/internal/core/JavaModelOperation.execute()V
   org/eclipse/jdt/internal/core/JavaModelOperation.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/core/internal/resources/Workspace.run
(Lorg/eclipse/core/resources/IWorkspaceRunnable;Lorg/eclipse/core/runtime/IProgr
essMonitor;)V
   org/eclipse/jdt/internal/core/JavaModelManager.runOperation
(Lorg/eclipse/jdt/internal/core/JavaModelOperation;Lorg/eclipse/core/runtime/IPr
ogressMonitor;)V
   org/eclipse/jdt/internal/core/JavaElement.runOperation
(Lorg/eclipse/jdt/internal/core/JavaModelOperation;Lorg/eclipse/core/runtime/IPr
ogressMonitor;)V
   org/eclipse/jdt/internal/core/SourceType.newSupertypeHierarchy
(Lorg/eclipse/core/runtime/IProgressMonitor;)
Lorg/eclipse/jdt/core/ITypeHierarchy;
   org/eclipse/jdt/internal/ui/wizards/TypePage.constructInheritedMethods
(Lorg/eclipse/jdt/core/IType;ZZLorg/eclipse/jdt/internal/corext/codemanipulation
/IImportsStructure;Lorg/eclipse/core/runtime/IProgressMonitor;)
[Ljava/lang/String;
   org/eclipse/jdt/internal/ui/wizards/NewClassCreationWizardPage.evalMethods
(Lorg/eclipse/jdt/core/IType;Lorg/eclipse/jdt/internal/corext/codemanipulation/I
ImportsStructure;Lorg/eclipse/core/runtime/IProgressMonitor;)[Ljava/lang/String;
   org/eclipse/jdt/internal/ui/wizards/TypePage.createType
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/jdt/internal/ui/wizards/TypePage$1.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/ui/actions/WorkspaceModifyDelegatingOperation.execute
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/ui/actions/WorkspaceModifyOperation$1.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/core/internal/resources/Workspace.run
(Lorg/eclipse/core/resources/IWorkspaceRunnable;Lorg/eclipse/core/runtime/IProgr
essMonitor;)V
   org/eclipse/ui/actions/WorkspaceModifyOperation.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/jface/operation/ModalContext.runInCurrentThread
(Lorg/eclipse/jface/operation/IRunnableWithProgress;Lorg/eclipse/core/runtime/IP
rogressMonitor;)V
   org/eclipse/jface/operation/ModalContext.run
(Lorg/eclipse/jface/operation/IRunnableWithProgress;ZLorg/eclipse/core/runtime/I
ProgressMonitor;Lorg/eclipse/swt/widgets/Display;)V
   org/eclipse/jface/wizard/WizardDialog.run
(ZZLorg/eclipse/jface/operation/IRunnableWithProgress;)V
   org/eclipse/jdt/internal/ui/wizards/NewElementWizard.finishPage
(Lorg/eclipse/jface/operation/IRunnableWithProgress;)Z
   org/eclipse/jdt/internal/ui/wizards/NewClassCreationWizard.performFinish()Z
   org/eclipse/jface/wizard/WizardDialog.finishPressed()V
   org/eclipse/jface/wizard/WizardDialog.buttonPressed(I)V
   org/eclipse/jface/dialogs/Dialog$1.widgetSelected
(Lorg/eclipse/swt/events/SelectionEvent;)V
   org/eclipse/swt/widgets/TypedListener.handleEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/EventTable.sendEvent(Lorg/eclipse/swt/widgets/Event;)
V
   org/eclipse/swt/widgets/Widget.notifyListeners
(ILorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/Display.runDeferredEvents()Z
   org/eclipse/swt/widgets/Display.readAndDispatch()Z
   org/eclipse/jface/window/Window.runEventLoop(Lorg/eclipse/swt/widgets/Shell;)
V
   org/eclipse/jface/window/Window.open()I
   org/eclipse/jdt/internal/ui/wizards/AbstractOpenWizardAction.run()V
   org/eclipse/jdt/internal/ui/wizards/AbstractOpenWizardAction.run
(Lorg/eclipse/jface/action/IAction;)V
   org/eclipse/ui/internal/PluginAction.runWithEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/jface/action/ActionContributionItem.handleWidgetSelection
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/jface/action/ActionContributionItem.handleWidgetEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/jface/action/ActionContributionItem.access$0
(Lorg/eclipse/jface/action/ActionContributionItem;Lorg/eclipse/swt/widgets/Event
;)V
   org/eclipse/jface/action/ActionContributionItem$ActionListener.handleEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/EventTable.sendEvent(Lorg/eclipse/swt/widgets/Event;)
V
   org/eclipse/swt/widgets/Widget.notifyListeners
(ILorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/Display.runDeferredEvents()Z
   org/eclipse/swt/widgets/Display.readAndDispatch()Z
   org/eclipse/ui/internal/Workbench.runEventLoop()V
   org/eclipse/ui/internal/Workbench.run(Ljava/lang/Object;)Ljava/lang/Object;
   org/eclipse/core/internal/boot/InternalBootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   org/eclipse/core/boot/BootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   SlimLauncher.main([Ljava/lang/String;)V
Null check added.
*** Bug 8038 has been marked as a duplicate of this bug. ***</WithStack>
    <WithOutStack>20115
1. use wizard to create create a type A implements List
the superclass name is null

java.lang.reflect.InvocationTargetException: java.lang.NullPointerException

Stack trace:
   java/lang/Throwable.&lt;init&gt;()V
   java/lang/Throwable.&lt;init&gt;(Ljava/lang/String;)V
   java/lang/NullPointerException.&lt;init&gt;(Ljava/lang/String;)V
   org/eclipse/jdt/internal/compiler/util/CharOperation.lastIndexOf(C[C)I
   org/eclipse/jdt/internal/compiler/HierarchyResolver.findSuperClass
(Lorg/eclipse/jdt/internal/compiler/env/IGenericType;Lorg/eclipse/jdt/internal/c
ompiler/lookup/ReferenceBinding;)
Lorg/eclipse/jdt/internal/compiler/env/IGenericType;
   org/eclipse/jdt/internal/compiler/HierarchyResolver.reportHierarchy()V
   org/eclipse/jdt/internal/compiler/HierarchyResolver.resolve
(Lorg/eclipse/jdt/internal/compiler/env/IGenericType;)V
   org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.buildSupertypes()V
   org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.build(Z)V
   org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.compute()V
   org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.refresh
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/jdt/internal/core/CreateTypeHierarchyOperation.executeOperation()
V
   org/eclipse/jdt/internal/core/JavaModelOperation.execute()V
   org/eclipse/jdt/internal/core/JavaModelOperation.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/core/internal/resources/Workspace.run
(Lorg/eclipse/core/resources/IWorkspaceRunnable;Lorg/eclipse/core/runtime/IProgr
essMonitor;)V
   org/eclipse/jdt/internal/core/JavaModelManager.runOperation
(Lorg/eclipse/jdt/internal/core/JavaModelOperation;Lorg/eclipse/core/runtime/IPr
ogressMonitor;)V
   org/eclipse/jdt/internal/core/JavaElement.runOperation
(Lorg/eclipse/jdt/internal/core/JavaModelOperation;Lorg/eclipse/core/runtime/IPr
ogressMonitor;)V
   org/eclipse/jdt/internal/core/SourceType.newSupertypeHierarchy
(Lorg/eclipse/core/runtime/IProgressMonitor;)
Lorg/eclipse/jdt/core/ITypeHierarchy;
   org/eclipse/jdt/internal/ui/wizards/TypePage.constructInheritedMethods
(Lorg/eclipse/jdt/core/IType;ZZLorg/eclipse/jdt/internal/corext/codemanipulation
/IImportsStructure;Lorg/eclipse/core/runtime/IProgressMonitor;)
[Ljava/lang/String;
   org/eclipse/jdt/internal/ui/wizards/NewClassCreationWizardPage.evalMethods
(Lorg/eclipse/jdt/core/IType;Lorg/eclipse/jdt/internal/corext/codemanipulation/I
ImportsStructure;Lorg/eclipse/core/runtime/IProgressMonitor;)[Ljava/lang/String;
   org/eclipse/jdt/internal/ui/wizards/TypePage.createType
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/jdt/internal/ui/wizards/TypePage$1.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/ui/actions/WorkspaceModifyDelegatingOperation.execute
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/ui/actions/WorkspaceModifyOperation$1.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/core/internal/resources/Workspace.run
(Lorg/eclipse/core/resources/IWorkspaceRunnable;Lorg/eclipse/core/runtime/IProgr
essMonitor;)V
   org/eclipse/ui/actions/WorkspaceModifyOperation.run
(Lorg/eclipse/core/runtime/IProgressMonitor;)V
   org/eclipse/jface/operation/ModalContext.runInCurrentThread
(Lorg/eclipse/jface/operation/IRunnableWithProgress;Lorg/eclipse/core/runtime/IP
rogressMonitor;)V
   org/eclipse/jface/operation/ModalContext.run
(Lorg/eclipse/jface/operation/IRunnableWithProgress;ZLorg/eclipse/core/runtime/I
ProgressMonitor;Lorg/eclipse/swt/widgets/Display;)V
   org/eclipse/jface/wizard/WizardDialog.run
(ZZLorg/eclipse/jface/operation/IRunnableWithProgress;)V
   org/eclipse/jdt/internal/ui/wizards/NewElementWizard.finishPage
(Lorg/eclipse/jface/operation/IRunnableWithProgress;)Z
   org/eclipse/jdt/internal/ui/wizards/NewClassCreationWizard.performFinish()Z
   org/eclipse/jface/wizard/WizardDialog.finishPressed()V
   org/eclipse/jface/wizard/WizardDialog.buttonPressed(I)V
   org/eclipse/jface/dialogs/Dialog$1.widgetSelected
(Lorg/eclipse/swt/events/SelectionEvent;)V
   org/eclipse/swt/widgets/TypedListener.handleEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/EventTable.sendEvent(Lorg/eclipse/swt/widgets/Event;)
V
   org/eclipse/swt/widgets/Widget.notifyListeners
(ILorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/Display.runDeferredEvents()Z
   org/eclipse/swt/widgets/Display.readAndDispatch()Z
   org/eclipse/jface/window/Window.runEventLoop(Lorg/eclipse/swt/widgets/Shell;)
V
   org/eclipse/jface/window/Window.open()I
   org/eclipse/jdt/internal/ui/wizards/AbstractOpenWizardAction.run()V
   org/eclipse/jdt/internal/ui/wizards/AbstractOpenWizardAction.run
(Lorg/eclipse/jface/action/IAction;)V
   org/eclipse/ui/internal/PluginAction.runWithEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/jface/action/ActionContributionItem.handleWidgetSelection
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/jface/action/ActionContributionItem.handleWidgetEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/jface/action/ActionContributionItem.access$0
(Lorg/eclipse/jface/action/ActionContributionItem;Lorg/eclipse/swt/widgets/Event
;)V
   org/eclipse/jface/action/ActionContributionItem$ActionListener.handleEvent
(Lorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/EventTable.sendEvent(Lorg/eclipse/swt/widgets/Event;)
V
   org/eclipse/swt/widgets/Widget.notifyListeners
(ILorg/eclipse/swt/widgets/Event;)V
   org/eclipse/swt/widgets/Display.runDeferredEvents()Z
   org/eclipse/swt/widgets/Display.readAndDispatch()Z
   org/eclipse/ui/internal/Workbench.runEventLoop()V
   org/eclipse/ui/internal/Workbench.run(Ljava/lang/Object;)Ljava/lang/Object;
   org/eclipse/core/internal/boot/InternalBootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   org/eclipse/core/boot/BootLoader.run
(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;[Ljava/lang/String;)
Ljava/lang/Object;
   SlimLauncher.main([Ljava/lang/String;)V
Null check added.
*** Bug 8038 has been marked as a duplicate of this bug. ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7994" />
    <CreationDate amount="2002-01-22 09:39:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Compare" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P1" />
    <bug_severity amount="normal" />
    <Summery>Patch: Saving merged patch missed one file</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="2">
      <Enumeration lines="10">
        <Lines>
          <Line>- the compare editor showed 5 files with changes</Line>
          <Line>- I selected each one and chose Copy Whole Document from Right to Left</Line>
          <Line>- File / Save</Line>
          <Line>- compared project with stream contents (or compare with v20020115 since I'm</Line>
          <Line>releasing these changes)</Line>
          <Line>- no changes had been applied for one of the files (TasksFilter.java)</Line>
          <Line>- double-checked that I had actually copied from right to left on this file in</Line>
          <Line>the compare editor -- I had</Line>
          <Line>- this was the last file in the list</Line>
          <Line>- had to go and apply the changes manually for this file</Line>
        </Lines>
      </Enumeration>
      <Enumeration lines="10">
        <Lines>
          <Line>- Before applying the changes manually, I went back and tried the compare with</Line>
          <Line>patch again.</Line>
          <Line>- The Verify Patch page came up with TasksFilter.java white-checked, and the</Line>
          <Line>rest gray-checked (why did it think it could still apply changes to the other</Line>
          <Line>files if they had already been applied?).</Line>
          <Line>- I unchecked all files except TasksFilter.java and hit Finish.</Line>
          <Line>- The compare editor showed changes to FiltersDialog and TasksFilter, in</Line>
          <Line>addition to the &lt;no name&gt; entry.</Line>
          <Line>- The changes shown for TasksFilter were correct, but for FitersDialog it</Line>
          <Line>wanted to reapply the same patch (a line insertion).</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Build 20020115

- with org.eclipse.ui source for v20020115 loaded, I selected the project and 
chose Compare With / Patch / (see attached patch)

- the compare editor showed 5 files with changes
- I selected each one and chose Copy Whole Document from Right to Left
- File / Save
- compared project with stream contents (or compare with v20020115 since I'm 
releasing these changes)
- no changes had been applied for one of the files (TasksFilter.java)
- double-checked that I had actually copied from right to left on this file in 
the compare editor -- I had
- this was the last file in the list
- had to go and apply the changes manually for this file

This is reproduceable.  I saw this last night at home, and also this morning at 
work.
Another problem:
- Before applying the changes manually, I went back and tried the compare with 
patch again.  
- The Verify Patch page came up with TasksFilter.java white-checked, and the 
rest gray-checked (why did it think it could still apply changes to the other 
files if they had already been applied?).  
- I unchecked all files except TasksFilter.java and hit Finish.
- The compare editor showed changes to FiltersDialog and TasksFilter, in 
addition to the &lt;no name&gt; entry.
- The changes shown for TasksFilter were correct, but for FitersDialog it 
wanted to reapply the same patch (a line insertion).



Patch no longer opens the Compare Viewer.</WithStack>
    <WithOutStack>Build 20020115

- with org.eclipse.ui source for v20020115 loaded, I selected the project and 
chose Compare With / Patch / (see attached patch)

- the compare editor showed 5 files with changes
- I selected each one and chose Copy Whole Document from Right to Left
- File / Save
- compared project with stream contents (or compare with v20020115 since I'm 
releasing these changes)
- no changes had been applied for one of the files (TasksFilter.java)
- double-checked that I had actually copied from right to left on this file in 
the compare editor -- I had
- this was the last file in the list
- had to go and apply the changes manually for this file

This is reproduceable.  I saw this last night at home, and also this morning at 
work.
Another problem:
- Before applying the changes manually, I went back and tried the compare with 
patch again.  
- The Verify Patch page came up with TasksFilter.java white-checked, and the 
rest gray-checked (why did it think it could still apply changes to the other 
files if they had already been applied?).  
- I unchecked all files except TasksFilter.java and hit Finish.
- The compare editor showed changes to FiltersDialog and TasksFilter, in 
addition to the &lt;no name&gt; entry.
- The changes shown for TasksFilter were correct, but for FitersDialog it 
wanted to reapply the same patch (a line insertion).



Patch no longer opens the Compare Viewer.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7995" />
    <CreationDate amount="2002-01-22 09:59:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Java Refactoring Views have no icons in Customize Dialog</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="4">
        <Lines>
          <Line>1) Select Perspective-&gt;Customize...</Line>
          <Line>2) Select Other-&gt;Java Refactoring...</Line>
          <Line>*** Bug 9300 has been marked as a duplicate of this bug. ***</Line>
          <Line>it is not realistic to add icons for all actions.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The Customize Perspective Dialog does not have icons for the Other-&gt; Java 
Refactoring Entries

Steps
1) Select Perspective-&gt;Customize...
2) Select Other-&gt;Java Refactoring...
*** Bug 9300 has been marked as a duplicate of this bug. ***
it is not realistic to add icons for all actions.</WithStack>
    <WithOutStack>The Customize Perspective Dialog does not have icons for the Other-&gt; Java 
Refactoring Entries

Steps
1) Select Perspective-&gt;Customize...
2) Select Other-&gt;Java Refactoring...
*** Bug 9300 has been marked as a duplicate of this bug. ***
it is not realistic to add icons for all actions.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7996" />
    <CreationDate amount="2002-01-22 09:59:00 -0500" />
    <DupId amount="2850" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Compare" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>No revert in compare editor</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Build 20020115

There is no Revert action in the context menu of the compare editor.
The only way to revert changes is to either close it, or select a different 
file and choose No for saving changes.


*** This bug has been marked as a duplicate of 2850 ***</WithStack>
    <WithOutStack>Build 20020115

There is no Revert action in the context menu of the compare editor.
The only way to revert changes is to either close it, or select a different 
file and choose No for saving changes.


*** This bug has been marked as a duplicate of 2850 ***</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7997" />
    <CreationDate amount="2002-01-22 10:00:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Compare" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>No support for File / Save in compare editor</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="WORKSFORME" />
    <WithStack>Build 20020115

When making changes in the compare editor, it should mark itself dirty.
This would enable the File / Save (and Ctrl+S accelerator).
The compare editor should handle File / Save.
I don't see this problem in 20020305.
The editor is marked dirty as soon as a change occurs and the Save action (and 
its short) is enabled.

However, the same does not work in the synchronize view since this is a view 
and not an editor. There is already bug #10234 for this.</WithStack>
    <WithOutStack>Build 20020115

When making changes in the compare editor, it should mark itself dirty.
This would enable the File / Save (and Ctrl+S accelerator).
The compare editor should handle File / Save.
I don't see this problem in 20020305.
The editor is marked dirty as soon as a change occurs and the Save action (and 
its short) is enabled.

However, the same does not work in the synchronize view since this is a view 
and not an editor. There is already bug #10234 for this.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7998" />
    <CreationDate amount="2002-01-22 10:01:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="Platform" />
    <component amount="Update  (deprecated - use RT&gt;Equinox&gt;p2)" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P3" />
    <bug_severity amount="normal" />
    <Summery>Update has no icon in Perspectives-Customize Dialog</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="1">
      <Enumeration lines="6">
        <Lines>
          <Line>1) Select Perspective-&gt;Customize...</Line>
          <Line>2) Select Other-&gt;Software Updates...</Line>
          <Line>This is not an absolute requirement. Not all the actions in actions sets</Line>
          <Line>are required to have icons. Some icons are only meant to appear on the menu</Line>
          <Line>bar. For example, none of the actions on JDT 'Refactoring' action set have</Line>
          <Line>actions nor are they supposed to appear in the tool bar.</Line>
        </Lines>
      </Enumeration>
    </Enumerations>
    <bug_status amount="RESOLVED" />
    <resolution amount="WONTFIX" />
    <WithStack>The Customize Perspective Dialog does not have icons for the Other-&gt; Software 
Updates entry

Steps
1) Select Perspective-&gt;Customize...
2) Select Other-&gt;Software Updates...
This is not an absolute requirement. Not all the actions in actions sets
are required to have icons. Some icons are only meant to appear on the menu 
bar. For example, none of the actions on JDT 'Refactoring' action set have 
actions nor are they supposed to appear in the tool bar.</WithStack>
    <WithOutStack>The Customize Perspective Dialog does not have icons for the Other-&gt; Software 
Updates entry

Steps
1) Select Perspective-&gt;Customize...
2) Select Other-&gt;Software Updates...
This is not an absolute requirement. Not all the actions in actions sets
are required to have icons. Some icons are only meant to appear on the menu 
bar. For example, none of the actions on JDT 'Refactoring' action set have 
actions nor are they supposed to appear in the tool bar.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="7999" />
    <CreationDate amount="2002-01-22 10:06:00 -0500" />
    <DupId amount="" />
    <classification amount="Eclipse" />
    <Product amount="JDT" />
    <component amount="Debug" />
    <Version amount="2.0" />
    <rep_platform amount="PC" />
    <op_sys amount="Windows 2000" />
    <priority amount="P2" />
    <bug_severity amount="normal" />
    <Summery>Source lookup with Runtime JRE</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="VERIFIED" />
    <resolution amount="FIXED" />
    <WithStack>When the Runtime JRE is set to "custom", but is the same as the default JRE, 
the source that appears in the debugger is that from the local file system 
rather than the Java Model/Workspace. When there is a custom runtime JRE the 
same as the default JRE, we should be using the workspace to locate source.
Applied partial fix. The other problem is that when a custom runtime JRE is 
specified, that exists as the build JRE for another project in the workspace, 
source dispayed is still external. We could use the workspace JRE instead (such 
that breakpoints are displayed and settable).
deferred - not a common case
Resolving to later.
Marking as 2.1 candidate
There are a few problems here:

* When we ask a Java project to find a source element (IJavaProject.findElement
(...)), it looks in its entire name lookup space (which includes pre-req 
projects). Thus, the source lookup path specified in a launch config can be 
fooled (we may find source in a pre-req project, when it should be found 
elsewhere)
* When there is an internal jar in the workspace, with attached source that is 
internal as well, we view it as external (via ArchiveSourceLocation). We have 
no concept of an "internal archive". To notice this, I added an internal jar 
and placed it first on the source lookup path (to avoid the above problem 
mentioned)
Fixed.

* Project source locations now only look in the source folders of the 
associated project.
* When an archive is in the workspace, we use the associated package fragment 
root.
Please verify, Darin S.
Verified.</WithStack>
    <WithOutStack>When the Runtime JRE is set to "custom", but is the same as the default JRE, 
the source that appears in the debugger is that from the local file system 
rather than the Java Model/Workspace. When there is a custom runtime JRE the 
same as the default JRE, we should be using the workspace to locate source.
Applied partial fix. The other problem is that when a custom runtime JRE is 
specified, that exists as the build JRE for another project in the workspace, 
source dispayed is still external. We could use the workspace JRE instead (such 
that breakpoints are displayed and settable).
deferred - not a common case
Resolving to later.
Marking as 2.1 candidate
There are a few problems here:

* When we ask a Java project to find a source element (IJavaProject.findElement
(...)), it looks in its entire name lookup space (which includes pre-req 
projects). Thus, the source lookup path specified in a launch config can be 
fooled (we may find source in a pre-req project, when it should be found 
elsewhere)
* When there is an internal jar in the workspace, with attached source that is 
internal as well, we view it as external (via ArchiveSourceLocation). We have 
no concept of an "internal archive". To notice this, I added an internal jar 
and placed it first on the source lookup path (to avoid the above problem 
mentioned)
Fixed.

* Project source locations now only look in the source folders of the 
associated project.
* When an archive is in the workspace, we use the associated package fragment 
root.
Please verify, Darin S.
Verified.</WithOutStack>
  </Bug>
  <Bug>
    <BugId amount="8000" />
    <CreationDate amount="2002-01-22 10:08:00 -0500" />
    <DupId amount="37661" />
    <classification amount="Eclipse" />
    <Product amount="PDE" />
    <component amount="UI" />
    <Version amount="2.0" />
    <rep_platform amount="All" />
    <op_sys amount="All" />
    <priority amount="P3" />
    <bug_severity amount="major" />
    <Summery>Commenting portions of plugin.xml not available in Forms UI</Summery>
    <Patches amount="0" />
    <Stacktraces amount="0" />
    <SourceCodeRegions amount="0" />
    <Enumerations amount="0" />
    <bug_status amount="RESOLVED" />
    <resolution amount="DUPLICATE" />
    <WithStack>Users that edit plugin.xml/fragment.xml using text editors can comment out 
portions of it if they don't want some contributions to be seen. The same 
simple feature is not possible using PDE manifest editors. Manifest editors 
preserve comments but only if they are before an XML element. Therefore, if 
elements to be commented out are the last siblings in a parent, the comments 
will not survive the roundtrip.

This need to be fixed.
This can result in loosing data (portions of plugin.xml) - a must fix.

Here a sample :

   &lt;runtime&gt;
      &lt;library name="easystruts.jar"/&gt;
      &lt;library name="lib/jdom.jar"/&gt;
&lt;!-- Editor not yet ready 
      &lt;library name="lib/commons-digester.jar"/&gt;
      &lt;library name="lib/commons-collections.jar"/&gt;
      &lt;library name="lib/commons-beanutils.jar"/&gt;
      &lt;library name="lib/commons-logging.jar"/&gt;
      &lt;library name="lib/struts.jar"/&gt;
--&gt;
   &lt;/runtime&gt;
   &lt;requires&gt;
      &lt;import plugin="org.eclipse.swt"/&gt;
      &lt;import plugin="org.eclipse.jdt.ui"/&gt;
      &lt;import plugin="org.apache.xerces"/&gt;
      &lt;import plugin="org.eclipse.core.resources"/&gt;
      &lt;import plugin="org.eclipse.jdt.core"/&gt;
      &lt;import plugin="org.eclipse.ui"/&gt;
&lt;!-- Editor not yet ready 
      &lt;import plugin="org.eclipse.update.ui.forms"/&gt;
      &lt;import plugin="org.eclipse.pde"/&gt;
      &lt;import plugin="org.eclipse.pde.ui"/&gt;
      &lt;import plugin="org.eclipse.tomcat"/&gt;
--&gt;
   &lt;/requires&gt;

All element in comment will be removed if you change the tab of the plugin 
manifest editor.

-Emmanuel
Since we will not finish the source page work in 2.1, we must handle this to 
prevent users from loosing data.


*** This bug has been marked as a duplicate of 37661 ***</WithStack>
    <WithOutStack>Users that edit plugin.xml/fragment.xml using text editors can comment out 
portions of it if they don't want some contributions to be seen. The same 
simple feature is not possible using PDE manifest editors. Manifest editors 
preserve comments but only if they are before an XML element. Therefore, if 
elements to be commented out are the last siblings in a parent, the comments 
will not survive the roundtrip.

This need to be fixed.
This can result in loosing data (portions of plugin.xml) - a must fix.

Here a sample :

   &lt;runtime&gt;
      &lt;library name="easystruts.jar"/&gt;
      &lt;library name="lib/jdom.jar"/&gt;
&lt;!-- Editor not yet ready 
      &lt;library name="lib/commons-digester.jar"/&gt;
      &lt;library name="lib/commons-collections.jar"/&gt;
      &lt;library name="lib/commons-beanutils.jar"/&gt;
      &lt;library name="lib/commons-logging.jar"/&gt;
      &lt;library name="lib/struts.jar"/&gt;
--&gt;
   &lt;/runtime&gt;
   &lt;requires&gt;
      &lt;import plugin="org.eclipse.swt"/&gt;
      &lt;import plugin="org.eclipse.jdt.ui"/&gt;
      &lt;import plugin="org.apache.xerces"/&gt;
      &lt;import plugin="org.eclipse.core.resources"/&gt;
      &lt;import plugin="org.eclipse.jdt.core"/&gt;
      &lt;import plugin="org.eclipse.ui"/&gt;
&lt;!-- Editor not yet ready 
      &lt;import plugin="org.eclipse.update.ui.forms"/&gt;
      &lt;import plugin="org.eclipse.pde"/&gt;
      &lt;import plugin="org.eclipse.pde.ui"/&gt;
      &lt;import plugin="org.eclipse.tomcat"/&gt;
--&gt;
   &lt;/requires&gt;

All element in comment will be removed if you change the tab of the plugin 
manifest editor.

-Emmanuel
Since we will not finish the source page work in 2.1, we must handle this to 
prevent users from loosing data.


*** This bug has been marked as a duplicate of 37661 ***</WithOutStack>
  </Bug>
</infozilla-output>

